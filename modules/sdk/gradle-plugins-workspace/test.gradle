import com.liferay.gradle.util.FileUtil
import com.liferay.gradle.util.GradleUtil
import com.liferay.gradle.util.copy.StripPathSegmentsAction

import de.undercouch.gradle.tasks.download.Download

apply plugin: "org.ysb33r.gradletest"

task copyBundle(type: Copy)
task copyDistBundleZipPluginsSdk(type: Copy)
task copyGradleTestDependencies(type: Copy)
task copyGradleTestProjects(type: Copy)
task copyHotFixZip(type: Copy)
task copyRepo(type: Copy)
task copyWorkspacesSamples
task downloadBundle(type: Download)
task downloadHotFixZip(type: Download)
task downloadPluginsSdk(type: Download)

String bundleUrl = "https://releases-cdn.liferay.com/portal/7.1.2-ga3/liferay-ce-portal-tomcat-7.1.2-ga3-20190107144105508.tar.gz"
File gradleTestDependenciesDir = new File(buildDir, "gradle-test-dependencies")
String gradleVersion = "8.5"
String hotFixZipUrl = "https://us-east-1.linodeobjects.com/devtools-s3.liferay.com/gradle-plugins-workspace/liferay-hotfix-1072-7210.zip"
String pluginsSdkUrl = "https://repository-cdn.liferay.com/nexus/service/local/repositories/liferay-public-releases/content/com/liferay/portal/com.liferay.portal.plugins.sdk/1.0.22/com.liferay.portal.plugins.sdk-1.0.22-withdependencies.zip"

if (System.properties["http.proxyHost"] == "squid.lax.liferay.com") {
	bundleUrl = "http://mirrors.liferay.com/releases.liferay.com/portal/7.1.2-ga3/liferay-ce-portal-tomcat-7.1.2-ga3-20190107144105508.tar.gz"
	pluginsSdkUrl = "https://repository-cdn.liferay.com/nexus/service/local/repositories/liferay-public-releases/content/com/liferay/portal/com.liferay.portal.plugins.sdk/1.0.22/com.liferay.portal.plugins.sdk-1.0.22-withdependencies.zip"
}

cleanCopyLibs {
	enabled = false
}

copyBundle {
	dependsOn downloadBundle
	eachFile new StripPathSegmentsAction(1)

	from {
		tarTree(downloadBundle.dest)
	}

	includeEmptyDirs = false
	into new File(buildDir, "bundle")
}

copyDistBundleZipPluginsSdk {
	ext {
		autoClean = false
	}

	dependsOn downloadPluginsSdk
	eachFile new StripPathSegmentsAction(1)

	from {
		zipTree(downloadPluginsSdk.dest)
	}

	includeEmptyDirs = false
	into "src/gradleTest/distBundleZip/plugins-sdk"
}

copyGradleTestDependencies {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE

	from configurations.compileClasspath
	from jar
	into gradleTestDependenciesDir

	doLast {
		configurations.compileClasspath.forEach {
			File compileClasspathFile ->

			if (compileClasspathFile.name.startsWith("com.liferay.portal.tools.soy.builder") || compileClasspathFile.name.startsWith("jackson-dataformat-yaml")) {
				copy {
					from compileClasspathFile
					into jar.destinationDirectory
				}
			}
		}
	}
}

copyGradleTestProjects {
	ext {
		autoClean = false
	}

	from("src/gradleTest/flexibleLayoutWildcard") {
		include "modules/**"
		include "themes/**"
		include "wars/**"
	}

	into "src/gradleTest/excludePatterns"
}

copyHotFixZip {
	ext {
		autoClean = false
	}

	dependsOn downloadHotFixZip

	from {
		downloadHotFixZip.dest
	}

	into "src/gradleTest/startDockerContainerWithPatch/configs/common/patching"
}

copyRepo {
	dependsOn copyGradleTestDependencies

	from gradleTestDependenciesDir
	into new File(buildDir, "gradleTest/repo")
}

copyWorkspacesSamples {
	doLast {
		[
			"sample-custom-element-1",
			"sample-iframe-1",
			"sample-theme-css-1",
			"sample-theme-favicon",
		].each {
			String sampleName ->

			copy {
				from new File(GradleUtil.getRootDir(project.getRootProject(), "portal-impl"), "workspaces/liferay-sample-workspace/client-extensions/liferay-${sampleName}")
				into "src/gradleTest/clientExtensionSamples/${sampleName}"
			}
		}
	}
}

downloadBundle {
	dest new File(buildDir, "bundle.tar.gz")
	onlyIfModified true
	src bundleUrl
}

downloadHotFixZip {
	dest new File(buildDir, "liferay-hotfix-1072-7210.zip")
	onlyIfModified true
	src hotFixZipUrl
}

downloadPluginsSdk {
	dest new File(buildDir, "plugins-sdk.zip")
	onlyIfModified true
	src pluginsSdkUrl
}

gradleTest {
	dependsOn copyGradleTestDependencies
	dependsOn copyGradleTestProjects
	dependsOn copyRepo
	dependsOn copyWorkspacesSamples
	dependsOn jar

	if (!project.hasProperty("testLightExecution")) {
		dependsOn copyBundle
		dependsOn copyDistBundleZipPluginsSdk
		dependsOn copyHotFixZip
	}

	deprecationMessagesAreFailures = false

	exclude "src/gradleTest/*.gradle"

	fileTree(dir: "src/gradleTest", include: "*.gradle").each {
		String propertyName = "commonScript.${it.name}"

		gradleArguments "--project-prop", "${propertyName}=" + FileUtil.getAbsolutePath(it)

		println ""
		println "Script path: ${it}"
		println "Property name: ${propertyName}"
		println "Usage: 'apply from: project.property(\"${propertyName}\")'"
	}

	gradleArguments "--project-prop", "app.server.parent.dir=" + FileUtil.getAbsolutePath(copyBundle.destinationDir)
	gradleArguments "--project-prop", "pluginClasspathDir=${uri(gradleTestDependenciesDir)}"
	gradleArguments "--system-prop", "org.gradle.jvmargs=-Xmx8g"

	versions gradleVersion

	beforeTest {
		println "  ${it.name}"
	}
}

gradleTestGenerator {
	mustRunAfter copyDistBundleZipPluginsSdk
	mustRunAfter copyGradleTestProjects
	mustRunAfter copyHotFixZip
}