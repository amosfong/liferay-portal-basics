import com.bmuschko.gradle.docker.tasks.container.DockerCopyFileFromContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerInspectImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

buildscript {
	dependencies {
		classpath fileTree(dir: pluginClasspathDir, exclude: "biz.aQute.bnd-6.4.0.jar", include: "*.jar")
	}
}

apply plugin: "com.liferay.workspace"

gradle.liferayWorkspace {
	dockerContainerId = "create_docker_container_container"
	dockerImageId = "create_docker_container_image"
	product = "dxp-2023.q4.6"
}

gradle.projectsEvaluated {
	Project rootProject = gradle.rootProject

	rootProject.tasks.register("copyOverrideTestScript", DockerCopyFileFromContainer) {
		dependsOn "createDockerContainer"

		compressed = true
		containerId = "create_docker_container_container"
		hostPath = rootProject.buildDir.path
		remotePath = "/home/liferay/configs/local/scripts/override_test.sh"
	}

	rootProject.tasks.register("inspectCustomImage", DockerInspectImage) {
		dependsOn "buildDockerImage"

		imageId = "create_docker_container_image"
	}

	rootProject.tasks.register("testStopDockerContainer", DockerStopContainer) {
		onError {
			if (logger.isWarnEnabled()) {
				logger.warn("No container with ID '${gradle.liferayWorkspace.dockerContainerId}' found")
			}
		}
		targetContainerId {
			gradle.liferayWorkspace.dockerContainerId
		}
	}

	rootProject.tasks.register("testRemoveDockerContainer", DockerRemoveContainer) {
		dependsOn "testStopDockerContainer"

		force = true
		onError {
			if (logger.isWarnEnabled()) {
				logger.warn("No container with ID '${gradle.liferayWorkspace.dockerContainerId}' found")
			}
		}
		removeVolumes = true
		targetContainerId {
			gradle.liferayWorkspace.dockerContainerId
		}
	}

	rootProject.tasks.register("removeImage", DockerRemoveImage) {
		dependsOn "testRemoveDockerContainer"

		targetImageId {
			gradle.liferayWorkspace.dockerImageId
		}
	}

}