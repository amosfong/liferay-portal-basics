import com.liferay.gradle.util.FileUtil

import groovy.json.JsonSlurper

task runGradleTest

runGradleTest {
	dependsOn ":theme-css-with-empty-frontend-token-definition-json:createClientExtensionConfig", ":theme-css-with-frontend-token-definition-json:createClientExtensionConfig", ":theme-css-with-rtl-css-properties:createClientExtensionConfig", ":theme-css-without-frontend-token-definition-json:createClientExtensionConfig"

	doLast {
		_testClientExtensionConfigJSON("theme-css-with-empty-frontend-token-definition-json") {
			value ->

			assert value instanceof Map

			assert value.get("typeSettings") == ["frontendTokenDefinitionJSON={}"]
		}

		_testClientExtensionConfigJSON("theme-css-with-frontend-token-definition-json") {
			value ->

			assert value instanceof Map

			assert value.get("typeSettings") == ["frontendTokenDefinitionJSON={\"frontendTokenCategories\":[{\"frontendTokenSets\":[{\"frontendTokens\":[{\"defaultValue\":\"calc(3 / 4 * 100%)\",\"editorType\":\"ColorPicker\",\"label\":\"brand-color-1\",\"mappings\":[{\"type\":\"cssVariable\",\"value\":\"brand-color-1\"}],\"name\":\"brandColor1\",\"type\":\"String\"}]}]}]}"]
		}

		_testClientExtensionConfigJSON("theme-css-with-rtl-css-properties") {
			value ->

			assert value instanceof Map

			String typeSettings = String.valueOf(value.get("typeSettings"))

			assert typeSettings.contains("clayRTLURL=css/clay_rtl.css")
			assert typeSettings.contains("clayURL=css/clay.css")
			assert typeSettings.contains("mainRTLURL=css/main_rtl.css")
			assert typeSettings.contains("mainURL=css/main.css")

			Project clientExtensionProject = project(":theme-css-with-rtl-css-properties")

			assert FileUtil.exists(clientExtensionProject, "build/liferay-client-extension-build/static/css/clay_rtl.css")
			assert FileUtil.exists(clientExtensionProject, "build/liferay-client-extension-build/static/css/main_rtl.css")
		}

		_testClientExtensionConfigJSON("theme-css-without-frontend-token-definition-json") {
			value ->

			assert value instanceof Map

			String typeSettings = String.valueOf(value.get("typeSettings"))

			assert !typeSettings.contains("frontendTokenDefinitionJSON")
		}
	}
}

private void _testClientExtensionConfigJSON(String projectName, Closure<Void> valueClosure) {
	Project clientExtensionProject = project(":${projectName}")

	File clientExtensionBuildDir = new File(clientExtensionProject.buildDir, "liferay-client-extension-build")

	File configJSONFile = new File(clientExtensionBuildDir, "${projectName}.client-extension-config.json")

	assert configJSONFile.exists()

	JsonSlurper jsonSlurper = new JsonSlurper()

	Object jsonData = jsonSlurper.parse(configJSONFile)

	jsonData.each {
		key, value ->

		valueClosure value
	}
}