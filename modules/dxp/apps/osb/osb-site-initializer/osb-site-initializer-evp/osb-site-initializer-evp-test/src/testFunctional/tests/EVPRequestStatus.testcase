@component-name = "portal-site-management"
definition {

	var baseURL = PropsUtil.get("portal.url");

	property custom.properties = "feature.flag.LPS-169981=true";
	property osgi.modules.includes = "osb-site-initializer-evp";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "OSB Site Initializer EVP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Create a new EVP Site") {
			EVPUtils.addEVPSite();
		}

		task ("Add Liferay Manager role, so user can see Requests and Organizations") {
			for (var userEmailAddress : list "finance@liferay.com,manager@liferay.com") {
				JSONRole.assignRoleToUser(
					roleTitle = "Liferay Manager",
					userEmailAddress = ${userEmailAddress});
			}
		}

		task ("Create an organization") {
			JSONEVP.createOrganization(
				accountOwnerName = "User 1",
				bankingInfo = "Bank Test",
				city = "City Test",
				contactEmail = "OrganizationTest@liferay.com",
				contactName = "Contact Test",
				contactPhone = 12345,
				country = "Country Test",
				emailAddress = "employee@liferay.com",
				key_status = "awaitingApprovalOnEvp",
				organizationName = "Organization Test",
				organizationSite = "www.test.com.br",
				smallDescription = "Description Test",
				state = "State Test",
				status = "Awaiting Approval On EVP",
				street = "Street Test",
				taxId = 12345,
				zipCode = "12.345-67");
		}

		task ("Create new request") {
			JSONEVP.createRequest(
				emailAddress = "employee@liferay.com",
				fullName = "Employee User",
				grantAmount = 10,
				grantRequestType = "Proposed",
				grantRequestTypeKey = "proposed",
				messageEVPManager = ${messageEVPManager},
				organizationId = 35152,
				phoneNumber = 12345,
				requestDescription = "Request Description Test",
				requestStatus = "Awaiting Approval On EVP",
				requestStatusKey = "awaitingApprovalOnEvp",
				requestType = "Grant",
				requestTypeKey = "grant");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "EVP Portal");
		}
	}

	@description = "LPS-181773 - Verify that the request status changes to 'Awaiting Payment Confirmation' after clicking on 'Approve'"
	@priority = 4
	test CanFinanceUserChangeStatusAfterApprove {
		task ("Given that the manager user goes to request page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "manager@liferay.com",
				userLoginFullName = "Manager User");

			EVPUtils.gotoEVP();

			EVPNavigator.goToNavItem(navItem = "Request");
		}

		task ("And the manager user approves the request created") {
			EVPRequest.goToRequestOption(
				key_option = "Review",
				organizationName = "Organization Test");

			EVPUtils.changeStatus(
				button = "Approve",
				typeMessage = "Your request has been approved!");
		}

		task ("When the finance user goes to request page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "finance@liferay.com",
				userLoginFullName = "Finance User");

			EVPUtils.gotoEVP();

			EVPNavigator.goToNavItem(navItem = "Request");
		}

		task ("And the finance user approves the request created") {
			EVPRequest.goToRequestOption(
				key_option = "Review",
				organizationName = "Organization Test");

			EVPUtils.changeStatus(
				button = "Approve",
				typeMessage = "Your request has been approved!");
		}

		task ("Then the status changes to 'Awaiting Payment Confirmation'") {
			EVPUtils.viewStatus(
				organizationName = "Organization Test",
				status = "Awaiting Payment Confirmation");
		}
	}

	@description = "LPS-181773 - Verify that the request status changes to 'Awaiting More Info From Employee' after clicking on 'Request More Info'"
	@priority = 4
	test CanManagerUserChangeStatusAfterNeedMoreInfo {
		task ("Given the manager user goes to request page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "manager@liferay.com",
				userLoginFullName = "Manager User");

			EVPUtils.gotoEVP();

			EVPNavigator.goToNavItem(navItem = "Request");
		}

		task ("When the manager user clicks on 'Request More Info'") {
			EVPRequest.goToRequestOption(
				key_option = "Review",
				organizationName = "Organization Test");

			EVPUtils.changeStatus(
				button = "Request more Info",
				typeMessage = "Request more information.");
		}

		task ("Then the status changes to 'Awaiting More Info From Employee'") {
			EVPUtils.viewStatus(
				organizationName = "Organization Test",
				status = "Awaiting More Info From Employee");
		}
	}

	@description = "LPS-181773 - Verify that the request status changes to 'Rejected' after clicking on 'Reject'"
	@priority = 4
	test CanManagerUserChangeStatusAfterReject {
		task ("Given the Manager user goes to request page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "manager@liferay.com",
				userLoginFullName = "Manager User");

			EVPUtils.gotoEVP();

			EVPNavigator.goToNavItem(navItem = "Request");
		}

		task ("When the manager user rejects the request created") {
			EVPRequest.goToRequestOption(
				key_option = "Review",
				organizationName = "Organization Test");

			EVPUtils.changeStatus(
				button = "Reject",
				typeMessage = "Your request has been Reject");
		}

		task ("Then the status changes to 'Rejected'") {
			EVPUtils.viewStatus(
				organizationName = "Organization Test",
				status = "Rejected");
		}
	}

	@description = "LPS-181773 - Verify that the Employee can not see 'Review' button when request is in 'Awaiting Approval On Evp' status"
	@priority = 4
	test CanNotEmployeeUserSeeReviewInAwaitingApprovalOnEVPStatus {
		task ("Given that the employee user is logged in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");

			EVPUtils.gotoEVP();
		}

		task ("When the employee user creates a request") {
			EVPOrganization.goToCreateOrganization();

			EVPOrganization.fillOrganizationForm(
				bankingInfo = "Bank Test",
				city = "City Test",
				contactEmail = "test@liferay.com",
				contactName = "Contact Test",
				contactPhone = 12345,
				country = "Country Test",
				createRequest = "true",
				organizationName = "Organization Test",
				organizationSite = "www.test.com.br",
				smallDescription = "Description Test",
				state = "State Test",
				street = "Street Test",
				taxId = 12345,
				zipCode = "12.345-67");

			EVPRequest.fillRequestForm(
				grantAmount = 10,
				grantRequestType = "Proposed",
				organization = "Organization Test",
				phoneNumber = 12345,
				requestBehalf = "Global/Local Poor",
				requestDescription = "Request Description Test",
				requestPurposes = "Basic Education",
				requestType = "Grant");

			EVPNavigator.goToNavItem(navItem = "Request");
		}

		task ("Then the employee user can not see Review option in kebab menu") {
			Click(
				locator1 = "EVPRequest#REQUEST_KEBAB",
				organizationName = "Organization Test");

			MenuItem.viewNotPresent(menuItem = "Review");
		}
	}

}