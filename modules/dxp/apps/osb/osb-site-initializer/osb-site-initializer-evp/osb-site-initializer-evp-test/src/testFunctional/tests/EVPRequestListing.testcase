@component-name = "portal-site-management"
definition {

	var baseURL = PropsUtil.get("portal.url");

	property custom.properties = "feature.flag.LPS-169981=true";
	property osgi.modules.includes = "osb-site-initializer-evp";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "OSB Site Initializer EVP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Create a new EVP Site") {
			EVPUtils.addEVPSite();
		}

		task ("Add Liferay Manager Role to users can see Resquests and Organizations") {
			EVPUtils.addLiferayManagerUserRole();
		}

		task ("Create an Organization and Request") {
			var organizationId = JSONEVP.createOrganization(
				accountOwnerName = "User 4",
				bankingInfo = "Bank Test",
				city = "City Test",
				contactEmail = "OrganizationTest@liferay.com",
				contactName = "Contact Test",
				contactPhone = 12345,
				country = "Country Test",
				emailAddress = "employee@liferay.com",
				key_status = "awaitingApprovalOnEvp",
				organizationName = "Organization Test",
				organizationSite = "www.test.com.br",
				smallDescription = "Description Test",
				state = "State Test",
				status = "Awaiting Approval On EVP",
				street = "Street Test",
				taxId = 12345,
				zipCode = "12.345-67");

			JSONEVP.createRequest(
				emailAddress = "employee@liferay.com",
				fullName = "Employee User",
				grantAmount = ${requestValue},
				grantRequestType = "Proposed",
				grantRequestTypeKey = "proposed",
				messageEVPManager = "Test",
				organizationId = ${organizationId},
				phoneNumber = 12345,
				requestDescription = "Description Test",
				requestStatus = "Awaiting Approval On Evp",
				requestStatusKey = "awaitingApprovalOnEvp",
				requestType = "Grant");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "EVP Portal");
		}
	}

	@description = "LPS-162886 - Employee should see right columns on request listing (Request id, Organization, Grant Type, Grant Value, Service Hours and Status)."
	@priority = 5
	test CanViewColumnsOnListing {
		task ("When the Employee user goes to the Request page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");

			EVPUtils.gotoEVP();

			EVPNavigator.goToNavItem(navItem = "Request");
		}

		task ("Then the employee user can see columns names on grant and service request listing") {
			EVPUtils.assertColumnsPage(columnsList = "Request Id,Organization,Grant Type,Grant Value,Status");

			EVPNavigator.goToNavItem(navItem = "Service Requests");

			EVPUtils.assertColumnsPage(columnsList = "Request Id,Organization,Service Hours,Status");
		}
	}

	@description = "LPS-162886 - Details should be visible for employee and manager user."
	@priority = 3
	test userCanSeeRequestDetails {
		var table = '''
			| employee@liferay.com | Employee User |
			| manager@liferay.com | Manager User |
		''';

		var rawTable = TableUtil.newTable(${table});

		for (var row : table ${rawTable}) {
			var liferayStaffEmail = "${row[0]}";
			var userLoginFullName = "${row[1]}";

			task ("Given the user is logged in") {
				User.logoutAndLoginPG(
					userLoginEmailAddress = ${liferayStaffEmail},
					userLoginFullName = ${userLoginFullName});
			}

			task ("When the user goes to Request Page") {
				EVPUtils.gotoEVP();

				EVPNavigator.goToNavItem(navItem = "Request");
			}

			task ("Then the user can see and goes to details on the page") {
				EVPRequest.goToRequestOption(
					key_option = "Details",
					organizationName = "Organization Test");

				EVPUtils.assertTitlePage(listTitlePage = "Request Information");
			}
		}
	}

}