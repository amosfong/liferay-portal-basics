/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.journal.internal.upgrade.v6_1_4.test;

import com.liferay.arquillian.extension.junit.bridge.junit.Arquillian;
import com.liferay.journal.configuration.JournalServiceConfiguration;
import com.liferay.portal.configuration.metatype.annotations.ExtendedObjectClassDefinition;
import com.liferay.portal.configuration.test.util.ConfigurationTemporarySwapper;
import com.liferay.portal.kernel.cache.MultiVMPool;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.test.rule.AggregateTestRule;
import com.liferay.portal.kernel.test.rule.DeleteAfterTestRun;
import com.liferay.portal.kernel.test.util.CompanyTestUtil;
import com.liferay.portal.kernel.upgrade.UpgradeProcess;
import com.liferay.portal.kernel.util.HashMapDictionaryBuilder;
import com.liferay.portal.test.log.LogCapture;
import com.liferay.portal.test.log.LoggerTestUtil;
import com.liferay.portal.test.rule.Inject;
import com.liferay.portal.test.rule.LiferayIntegrationTestRule;
import com.liferay.portal.test.rule.PermissionCheckerMethodTestRule;
import com.liferay.portal.upgrade.registry.UpgradeStepRegistrator;
import com.liferay.portal.upgrade.test.util.UpgradeTestUtil;

import java.util.Dictionary;

import org.junit.Assert;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.osgi.service.cm.Configuration;
import org.osgi.service.cm.ConfigurationAdmin;

/**
 * @author Mikel Lorza
 */
@RunWith(Arquillian.class)
public class JournalArticleAutogenerateDDMKeyConfigurationUpgradeProcessTest {

	@ClassRule
	@Rule
	public static final AggregateTestRule aggregateTestRule =
		new AggregateTestRule(
			new LiferayIntegrationTestRule(),
			PermissionCheckerMethodTestRule.INSTANCE);

	@Before
	public void setUp() throws Exception {
		_company = CompanyTestUtil.addCompany();
	}

	@Test
	public void testUpgradeWithAutogenerateKeysInstanceConfigurationDisabled()
		throws Exception {

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"autogenerateDDMStructureKey", false
					).put(
						"autogenerateDDMTemplateKey", false
					).build())) {

			_runUpgrade();

			_assertJournalServiceConfiguration(false, false);
		}
	}

	@Test
	public void testUpgradeWithAutogenerateKeysInstanceConfigurationEnabled()
		throws Exception {

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"autogenerateDDMStructureKey", true
					).put(
						"autogenerateDDMTemplateKey", true
					).build())) {

			_runUpgrade();

			_assertJournalServiceConfigurationIsNull();
		}
	}

	@Test
	public void testUpgradeWithAutogenerateKeysInstanceConfigurationEnabledAndDisabled()
		throws Exception {

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"autogenerateDDMStructureKey", true
					).put(
						"autogenerateDDMTemplateKey", false
					).build())) {

			_runUpgrade();

			_assertJournalServiceConfiguration(true, false);
		}

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"autogenerateDDMStructureKey", false
					).put(
						"autogenerateDDMTemplateKey", true
					).build())) {

			_runUpgrade();

			_assertJournalServiceConfiguration(false, true);
		}
	}

	@Test
	public void testUpgradeWithAutogenerateKeysInstanceConfigurationUnset()
		throws Exception {

		try (ConfigurationTemporarySwapper configurationTemporarySwapper =
				new ConfigurationTemporarySwapper(
					"com.liferay.journal.web.internal.configuration." +
						"JournalWebConfiguration",
					HashMapDictionaryBuilder.<String, Object>put(
						"journal-article-force-autogenerate-id", true
					).build())) {

			_runUpgrade();

			_assertJournalServiceConfigurationIsNull();
		}
	}

	@Test
	public void testUpgradeWithoutAutogenerateKeysInstanceConfigurationConfigured()
		throws Exception {

		_runUpgrade();

		_assertJournalServiceConfigurationIsNull();
	}

	private void _assertJournalServiceConfiguration(
			boolean expectedAutogenerateDDMStructureKey,
			boolean expectedAutogenerateDDMTemplateKey)
		throws Exception {

		Configuration[] configurations = _configurationAdmin.listConfigurations(
			String.format(
				"(&(service.factoryPid=%s)(%s=%d))",
				JournalServiceConfiguration.class.getName() + ".scoped",
				ExtendedObjectClassDefinition.Scope.COMPANY.getPropertyKey(),
				_company.getCompanyId()));

		Assert.assertNotNull(configurations);

		Configuration configuration = configurations[0];

		Assert.assertNotNull(configuration);

		Dictionary<String, Object> properties = configuration.getProperties();

		Assert.assertNotNull(properties);

		boolean actualAutogenerateDDMStructureKey = (boolean)properties.get(
			"autogenerateDDMStructureKey");

		Assert.assertEquals(
			expectedAutogenerateDDMStructureKey,
			actualAutogenerateDDMStructureKey);

		boolean actualAutogenerateDDMTemplateKey = (boolean)properties.get(
			"autogenerateDDMTemplateKey");

		Assert.assertEquals(
			expectedAutogenerateDDMTemplateKey,
			actualAutogenerateDDMTemplateKey);
	}

	private void _assertJournalServiceConfigurationIsNull() throws Exception {
		Assert.assertNull(
			_configurationAdmin.listConfigurations(
				String.format(
					"(&(service.factoryPid=%s)(%s=%d))",
					JournalServiceConfiguration.class.getName() + ".scoped",
					ExtendedObjectClassDefinition.Scope.COMPANY.
						getPropertyKey(),
					_company.getCompanyId())));
	}

	private void _runUpgrade() throws Exception {
		try (LogCapture logCapture = LoggerTestUtil.configureLog4JLogger(
				_CLASS_NAME, LoggerTestUtil.OFF)) {

			UpgradeProcess upgradeProcess = UpgradeTestUtil.getUpgradeStep(
				_upgradeStepRegistrator, _CLASS_NAME);

			upgradeProcess.upgrade();

			_multiVMPool.clear();
		}
	}

	private static final String _CLASS_NAME =
		"com.liferay.journal.internal.upgrade.v6_1_4." +
			"JournalArticleAutogenerateDDMKeyConfigurationUpgradeProcess";

	@Inject(
		filter = "(&(component.name=com.liferay.journal.internal.upgrade.registry.JournalServiceUpgradeStepRegistrator))"
	)
	private static UpgradeStepRegistrator _upgradeStepRegistrator;

	@DeleteAfterTestRun
	private Company _company;

	@Inject
	private ConfigurationAdmin _configurationAdmin;

	@Inject
	private MultiVMPool _multiVMPool;

}