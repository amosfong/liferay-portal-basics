@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-178642=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "API Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given the API Application is created") {
			ApplicationAPI.createAPIApplication(
				baseURL = "test2",
				title = "test2");
		}

		task ("And Given I go to 'Endpoints' tab in 'Edit API Application'") {
			APIBuilderUI.switchToRelatedEntryInEditApplication(
				entity = "Endpoints",
				title = "test2");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 5
	test CanCreateEndpointWithCompanyScope {
		task ("And Given adding new endpoint with Company scope") {
			APIBuilderUI.createAPIEndpoint(
				method = "GET",
				path = "testendpoint1",
				retrieveType = "Collection",
				scope = "Company");
		}

		task ("Then the endpoint with Company scope is created successfully and listed") {
			Alert.viewSuccessMessage();

			AssertElementPresent(
				key_value = "Company",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");

			AssertTextEquals(
				key_fieldLabel = "Path",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "testendpoint1");
		}
	}

	@priority = 5
	test CanCreateEndpointWithSiteScope {
		task ("And Given adding new endpoint with Site scope") {
			APIBuilderUI.createAPIEndpoint(
				method = "GET",
				path = "testendpoint2",
				retrieveType = "Collection",
				scope = "Site");
		}

		task ("Then the endpoint with site scope is created successfully and listed") {
			Alert.viewSuccessMessage();

			AssertElementPresent(
				key_value = "Site",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");

			AssertTextEquals(
				key_fieldLabel = "Path",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "testendpoint2");
		}
	}

	@priority = 3
	test CanCreateEndpointWithSuccessAlert {
		task ("When I enter a path and Scope to create the API endpoint") {
			APIBuilderUI.createAPIEndpoint(
				method = "GET",
				path = "testendpoint2",
				retrieveType = "Collection",
				scope = "Company");
		}

		task ("Then I can see success alert") {
			Alert.viewSuccessMessage();
		}

		task ("And Then I can see info of created endpoint with 'Get' method, scope, path") {
			AssertElementPresent(
				fieldLabel = "Method",
				locator1 = "FormViewBuilder#FIELD_LABEL");

			AssertElementPresent(
				key_value = "GET",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");

			AssertElementPresent(
				fieldLabel = "Scope",
				locator1 = "FormViewBuilder#FIELD_LABEL");

			AssertElementPresent(
				fieldLabel = "Path",
				locator1 = "FormViewBuilder#FIELD_LABEL");
		}
	}

	@priority = 4
	test CanSeeAllFieldsInCreationModal {
		task ("When I click 'Add API Endpoint' button") {
			Click(locator1 = "APIBuilder#ADD_API_ENDPOINT");
		}

		task ("Then fields Scope *, Path * and Description are present") {
			AssertElementPresent(
				fieldLabel = "Scope",
				locator1 = "FormViewBuilder#FIELD_LABEL_REQUIRED");

			AssertElementPresent(
				fieldLabel = "Path",
				locator1 = "FormViewBuilder#FIELD_LABEL_REQUIRED");

			AssertElementPresent(
				fieldLabel = "Description",
				locator1 = "FormViewBuilder#FIELD_FROM_FIELDSET");
		}
	}

	@priority = 4
	test CanSeeInfoOfCreatedEndpoint {
		task ("When I enter a path to create the API endpoint") {
			APIBuilderUI.createAPIEndpoint(
				method = "GET",
				path = "testendpoint2",
				retrieveType = "Collection",
				scope = "Company");
		}

		task ("Then I can see info of created endpoint with 'Get' method, scope, path") {
			AssertElementPresent(
				key_value = "GET",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");

			AssertElementPresent(
				key_value = "Company",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");

			AssertElementPresent(
				key_fieldLabel = "Path",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "testendpoint2");
		}
	}

	@priority = 4
	test CanSeeInfoOfCreatedEndpointWithDescription {
		task ("When I enter a path and Scope to create the API endpoint through add by plus wizard") {
			APIBuilderUI.createAPIEndpoint(
				addByPlus = "true",
				description = "Description default",
				method = "GET",
				path = "testendpoint2",
				retrieveType = "Collection",
				scope = "Company");
		}

		task ("Then I can see info of created endpoint with 'Get' method and path and description") {
			AssertElementPresent(
				key_value = "GET",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");

			AssertElementPresent(
				key_fieldLabel = "Path",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "testendpoint2");

			AssertElementPresent(
				key_value = "endpoint",
				locator1 = "APIBuilder#DESCRIPTION",
				value1 = "Description default");
		}
	}

	@priority = 4
	test CanSeePathOfPathFields {
		task ("When I click 'Add API Endpoint' button") {
			Click(locator1 = "APIBuilder#ADD_API_ENDPOINT");
		}

		task ("Then I can see path under {portalUrl}/o/c/{applicationName}") {
			var portalURL = JSONCompany.getPortalURL();

			AssertTextEquals(
				locator1 = "APIBuilder#URL_LABEL",
				value1 = "${portalURL}/o/c/test2");
		}

		task ("And Then I can see path start with '/' with placeholder 'Enter path'") {
			AssertElementPresent(locator1 = "APIBuilder#SLASH");

			AssertElementPresent(
				key_placeHolder = "Enter Path",
				locator1 = "TextInput#ANY_PLACEHOLDER");
		}
	}

	@priority = 4
	test CanSeeValidationMessageForRequiredFields {
		task ("And Given I click 'Add API Endpoint' button") {
			Click(locator1 = "APIBuilder#ADD_API_ENDPOINT");
		}

		task ("When I click 'Create' button in 'New API Endpoint'") {
			Click(locator1 = "APIBuilder#CREATE_BUTTON");
		}

		task ("Then I can see error message about required Scope and Path") {
			AssertElementPresent(
				key_alertMessage = "Please select a scope.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE");

			AssertElementPresent(
				key_alertMessage = "Please enter a path.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE");
		}

		task ("And Then no endpoint is being created") {
			Click(locator1 = "Modal#CLOSE_BUTTON");

			AssertElementPresent(
				key_text = "No API Endpoint Found",
				locator1 = "ObjectAdmin#EMPTY_STATE_MESSAGE");
		}
	}

	@priority = 3
	test CanValidateMaximumDescription {
		task ("When I create an endpoint with description Field contains 281 characters") {
			APIBuilderUI.createAPIEndpoint(
				description = " Description default Description default Description default Description default Description default Description default Description default Description default Description default Description default Description default Description default Description default Description default D",
				method = "GET",
				path = "testendpoint2",
				retrieveType = "Collection",
				scope = "Company");
		}

		task ("Then I can see error message about maximum length of 280 characters blocks endpoint from being created") {
			Alert.viewErrorMessage(errorMessage = "Error:Object entry value exceeds the maximum length of 280 characters for object field \"description\"");
		}
	}

	@priority = 4
	test EndpointFieldsAreVisibleInCreationModal {
		task ("Then 'Add API Enpoint' and plus buttons are present") {
			AssertElementPresent(locator1 = "Button#PLUS");

			AssertElementPresent(locator1 = "APIBuilder#ADD_API_ENDPOINT");
		}

		task ("And Then I can see 'No API Endpoints found' message") {
			AssertElementPresent(
				key_text = "No API Endpoint Found",
				locator1 = "ObjectAdmin#EMPTY_STATE_MESSAGE");
		}
	}

	@priority = 4
	test EndpointIsNotCreatedAfterClickingCancel {
		task ("And Given I click 'Add API Endpoint' button") {
			Click(locator1 = "APIBuilder#ADD_API_ENDPOINT");
		}

		task ("And Given I enter a valid path") {
			Type(
				key_fieldLabel = "Path",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "path-defaul");
		}

		task ("When I click Cancel button") {
			Click(locator1 = "AppBuilder#BUTTON_CANCEL");
		}

		task ("Then no endpoint is created in endpoint list") {
			AssertElementPresent(
				key_text = "No API Endpoint Found",
				locator1 = "ObjectAdmin#EMPTY_STATE_MESSAGE");
		}
	}

	@priority = 4
	test PicklistScopeHasCorrectOptions {
		task ("When adding new endpoint") {
			Click(locator1 = "Button#PLUS");

			Click(
				key_value = "Select Scope",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");
		}

		task ("Then scope option is present for both site and company") {
			for (var scope : list "Site,Company") {
				AssertElementPresent(
					key_optionName = ${scope},
					locator1 = "ObjectAdmin#LAYOUT_ADD_FIELD_OPTION");
			}
		}
	}

}