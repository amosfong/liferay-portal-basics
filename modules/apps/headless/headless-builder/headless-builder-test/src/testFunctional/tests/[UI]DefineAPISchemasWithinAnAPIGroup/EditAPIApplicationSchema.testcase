@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-178642=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "API Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given create an published API application with related schema") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app1",
				mainObjectDefinitionErc = "L_API_APPLICATION",
				relatedSchema = "true",
				schemaName = "testSchema",
				status = "published",
				title = "My-app1");
		}

		task ("And Given create an unpublished API application with related schema") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app2",
				mainObjectDefinitionErc = "L_API_APPLICATION",
				relatedSchema = "true",
				schemaName = "testSchema",
				title = "My-app2");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test CanCancelWithoutSavingChangesForSchema {
		task ("And Given edit the schema in Edit API Application > Schemas") {
			APIBuilderUI.updateSchemaNameAndDescription(
				entity = "Schemas",
				name = "testSchema",
				schemaDescription = "Description edited",
				schemaName = "testSchema edited",
				tabEntity = "Info",
				title = "My-app1");
		}

		task ("When I click continue without saving the changes in cancel dialog") {
			Button.clickCancel();

			Click(locator1 = "APIBuilder#CONTINUE_WITHOUT_SAVING_BUTTON");
		}

		task ("Then I can see the original schema in list of Edit API Application > Schemas") {
			AssertElementPresent(
				key_name = "testSchema",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			AssertElementPresent(
				key_tabName = "description",
				locator1 = "ObjectAdmin#ANY_TAB_ON_ENTRY");
		}
	}

	@priority = 4
	test CanEditSchemaNameAndDescriptionInPublishedAPIApplication {
		task ("When I publish changed name and description") {
			APIBuilderUI.updateSchemaNameAndDescription(
				entity = "Schemas",
				name = "testSchema",
				publish = "true",
				schemaDescription = "Description edited",
				schemaName = "testSchema edited",
				tabEntity = "Info",
				title = "My-app1");
		}

		task ("Then I can see success alert message about API schema changes were published") {
			Alert.viewSuccessMessage();
		}

		task ("And Then I can see updated name and description in Info tab") {
			AssertElementPresent(
				locator1 = "TextInput#NAME",
				value1 = "testSchema edited");

			AssertElementPresent(
				key_fieldId = "Description",
				locator1 = "TextArea#ANY_ID",
				value1 = "Description edited");
		}
	}

	@priority = 4
	test CanEditSchemaNameAndDescriptionInUnpublishedAPIApplication {
		task ("When I save changed name and description") {
			APIBuilderUI.updateSchemaNameAndDescription(
				entity = "Schemas",
				name = "testSchema",
				schemaDescription = "Description edited",
				schemaName = "testSchema edited",
				tabEntity = "Info",
				title = "My-app2");

			Button.clickSave();
		}

		task ("Then I can see success alert message about API schema changes were saved") {
			Alert.viewSuccessMessageText(successMessage = "API schema changes were saved.");
		}

		task ("And Then I can see updated name and description in Info tab") {
			AssertElementPresent(
				locator1 = "TextInput#NAME",
				value1 = "testSchema edited");

			AssertElementPresent(
				key_fieldId = "Description",
				locator1 = "TextArea#ANY_ID",
				value1 = "Description edited");
		}
	}

	@priority = 4
	test CannotEditSchemaRelatedObject {
		task ("When I edit the schema in Edit API Application > Schemas") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "testSchema",
				tabEntity = "Info",
				title = "My-app2");
		}

		task ("Then I can see the value for Object is disabled with the correct value") {
			AssertTextEquals(
				key_text = "APIApplication",
				locator1 = "Button#ANY_DISABLED",
				value1 = "APIApplication");
		}
	}

	@priority = 4
	test CanSeeUpdatedSchemaInAPIExplorer {
		task ("And Given I update the schema Name and description") {
			APIBuilderUI.updateSchemaNameAndDescription(
				entity = "Schemas",
				name = "testSchema",
				publish = "true",
				schemaDescription = "Description edited",
				schemaName = "testSchema edited",
				tabEntity = "Info",
				title = "My-app1");
		}

		task ("When I navigate to /o/c/{aPIApplication}") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app1");
		}

		task ("Then I can see the update schema name and description") {
			AssertElementPresent(
				locator1 = "OpenAPI#SCHEMA_ENTITY",
				schema = "testSchema edited");

			Click(
				locator1 = "OpenAPI#SCHEMA_COLLAPSED",
				schema = "testSchema edited");

			AssertElementPresent(
				field = "Description edited",
				locator1 = "OpenAPI#SCHEMA_FIELD",
				schema = "testSchema edited");
		}

		task ("And Then the original schmea is not present") {
			AssertElementNotPresent(
				locator1 = "OpenAPI#SCHEMA_ENTITY",
				schema = "testSchema");
		}
	}

}