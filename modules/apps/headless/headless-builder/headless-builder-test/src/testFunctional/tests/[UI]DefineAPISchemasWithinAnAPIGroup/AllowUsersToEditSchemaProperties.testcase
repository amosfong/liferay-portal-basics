@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-178642=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "API Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given Custom Object Definition University with text field 'name' created and one-to-many relationship UniversityAPISorts created and published") {
			var universityId = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "University",
				en_US_plural_label = "Universities",
				name = "University",
				objectDefinitionExternalReferenceCode = "university",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "universityName");
			var apiSortId = ObjectDefinitionAPI.getObjectDefinitionIdByName(name = "APISort");

			ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "UniversityAPISorts",
				name = "universityAPISorts",
				objectDefinitionId1 = ${universityId},
				objectDefinitionId2 = ${apiSortId},
				type = "oneToMany");
		}

		task ("And Given APIApplication created") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				title = "My-app");
		}

		task ("And Given 'University' Schema based on University object created") {
			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "university",
				name = "University");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		JSONObject.deleteAllCustomObjects();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 4
	test CanAddPropertiesFromSidebarToList {
		task ("When adding the 'name' field from University section of Properties sidebar to 'Drop properties' box") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");

			Click(
				key_text = "name",
				locator1 = "APIBuilder#PROPERTY_CONTAINER");
		}

		task ("Then 'name' field is placed in Properties") {
			AssertElementPresent(
				key_commentValue = "name",
				locator1 = "PublicationsChanges#COMMENT_VALUE");
		}
	}

	@priority = 3
	test CanRearrangeOrderOfPropertiesOnTheList {
		task ("And Given 'name' field placed in Properties") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");

			Click(
				key_text = "name",
				locator1 = "APIBuilder#PROPERTY_CONTAINER");

			AssertElementPresent(
				key_commentValue = "name",
				locator1 = "PublicationsChanges#COMMENT_VALUE");
		}

		task ("When 'External Reference Code' field placed in Properties above 'name' field") {
			Click(
				key_text = "External Reference Code",
				locator1 = "APIBuilder#PROPERTY_CONTAINER");

			AssertElementPresent(
				key_commentValue = "externalReferenceCode",
				locator1 = "PublicationsChanges#COMMENT_VALUE");
		}

		task ("Then I can switch their order by dragging 'External Reference Code' uner 'name' field") {
			AssertTextPresent(
				locator1 = "APIBuilder#LAST_ELEMENT_IN_PROPERTY_BOX",
				value1 = "name");

			DragAndDrop.dragAndDrop(
				key_commentValue = "externalReferenceCode",
				locator1 = "PublicationsChanges#COMMENT_VALUE",
				value1 = "0,45");

			AssertTextPresent(
				locator1 = "APIBuilder#LAST_ELEMENT_IN_PROPERTY_BOX",
				value1 = "externalReferenceCode");
		}
	}

	@priority = 4
	test CanSearchThroughPropertiesFromTheList {
		task ("And Given 'name', 'External Reference Code', 'Create Date', 'ID' fields placed in Properties") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");

			var fieldNameList = "name,External Reference Code,Create Date,ID";

			for (var fieldName : list ${fieldNameList}) {
				Click(
					key_text = ${fieldName},
					locator1 = "APIBuilder#PROPERTY_CONTAINER");
			}
		}

		task ("When searching property 'External Reference Code' with Search box") {
			Type(
				locator1 = "TextInput#SEARCH",
				value1 = "externalReferenceCode");
		}

		task ("Then only 'External Reference Code' present in Properties list") {
			var fieldNameList = "name,Create Date,ID";

			for (var fieldName : list ${fieldNameList}) {
				AssertElementNotPresent(
					key_commentValue = "name",
					locator1 = "PublicationsChanges#COMMENT_VALUE");
			}

			AssertElementPresent(
				key_commentValue = "externalReferenceCode",
				locator1 = "PublicationsChanges#COMMENT_VALUE");
		}
	}

	@priority = 3
	test DroppedIntoPropertiesListObjectFieldIsDisabledInPropertiesSidebar {
		task ("And Given fields of APISort object definition present through View Related Objects'") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");

			APIBuilderUI.gotoRelatedObjectsProperties(relatedObjectName = "API Sort");
		}

		task ("When adding 'ID' of APISort to properties box") {
			Click(
				key_text = "ID",
				locator1 = "APIBuilder#PROPERTY_CONTAINER");

			AssertElementPresent(
				key_commentValue = "id",
				locator1 = "PublicationsChanges#COMMENT_VALUE");
		}

		task ("Then 'ID' of APISort disabled in Properties sidebar") {
			AssertElementPresent(
				key_text = "ID",
				locator1 = "APIBuilder#DISABLED_PROPERTY_CONTAINER");
		}

		task ("And Then 'ID' of University enabled in Properties sidebar") {
			Click(
				ariaLabel = "Back",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			AssertElementNotPresent(
				key_text = "ID",
				locator1 = "APIBuilder#DISABLED_PROPERTY_CONTAINER");
		}
	}

	@priority = 4
	test DroppedIntoPropertiesListRelatedObjectFieldIsDisabledInPropertiesSidebar {
		task ("And Given fields of APISort object definition present through View Related Objects'") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");

			APIBuilderUI.gotoRelatedObjectsProperties(relatedObjectName = "API Sort");
		}

		task ("When adding 'External Reference Code' of APISort to 'Drop properties' box") {
			Click(
				key_text = "External Reference Code",
				locator1 = "APIBuilder#PROPERTY_CONTAINER");
		}

		task ("Then 'External Reference Code' is placed in Properties") {
			AssertElementPresent(
				key_commentValue = "externalReferenceCode",
				locator1 = "PublicationsChanges#COMMENT_VALUE");
		}
	}

	@priority = 4
	test FieldsOfRelatedObjectsAreAccessibleFromPropertiesSidebar {
		task ("When clicking 'View Related Objects' option in Properties sidebar") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");

			APIBuilderUI.gotoRelatedObjectsProperties(relatedObjectName = "API Sort");
		}

		task ("Then all fields of APISort object definition are present") {
			var fieldNameList = "Author,Create Date,External Reference Code,ID,Modified Date,Status,OData Sort";

			for (var fieldName : list ${fieldNameList}) {
				AssertElementPresent(
					key_button = ${fieldName},
					locator1 = "CommerceWidget#PRODUCT_PUBLISHER_FILTER_ADD_SELECT_BUTTON");
			}
		}
	}

	@priority = 5
	test ObjectFieldsArePresentInPropertiesSidebar {
		task ("When going to Properties section in Schemas > University") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");
		}

		task ("Then University fields are present in Properties sidebar") {
			var fieldNameList = "Author,Create Date,External Reference Code,ID,Modified Date,Status,name";

			for (var fieldName : list ${fieldNameList}) {
				AssertElementPresent(
					key_button = ${fieldName},
					locator1 = "CommerceWidget#PRODUCT_PUBLISHER_FILTER_ADD_SELECT_BUTTON");
			}
		}
	}

	@priority = 3
	test PropertiesRemovedFromListAreEnabledInPropertiesSidebar {
		task ("And Given 'name', 'External Reference Code', 'Create Date', 'ID' fields placed in Properties") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");

			var fieldNameList = "name,External Reference Code,Create Date,ID";

			for (var fieldName : list ${fieldNameList}) {
				Click(
					key_text = ${fieldName},
					locator1 = "APIBuilder#PROPERTY_CONTAINER");
			}
		}

		task ("And Given 'Create Date' field disabled in Properties sidebar") {
			AssertElementPresent(
				key_text = "Create Date",
				locator1 = "APIBuilder#DISABLED_PROPERTY_CONTAINER");
		}

		task ("When removing 'Create Date' from Properties list") {
			Click(
				key_commentValue = "createDate",
				locator1 = "PublicationsChanges#COMMENT_VALUE");

			Click(
				key_commentValue = "createDate",
				locator1 = "APIBuilder#DELETE_BUTTON_FROM_PROPERTY_BOX");
		}

		AssertElementNotPresent(
			key_text = "createDate",
			locator1 = "APIBuilder#DISABLED_PROPERTY_CONTAINER");
	}

	@priority = 5
	test PropertiesSectionIsPresentForSchema {
		task ("When in Schemas of APIApplication a 'University1' Schema based on University object created") {
			APIBuilderUI.switchToRelatedEntryInEditApplication(
				entity = "Schemas",
				title = "My-app");

			APIBuilderUI.createAPISchema(
				addByPlus = "true",
				confirmCreation = "true",
				name = "University1",
				objectDefinitionName = "University");
		}

		task ("Then Properties section appears in Schemas > University1") {
			WaitForElementPresent(
				locator1 = "Button#BUTTON_WITH_VALUE",
				value = "Properties");
		}
	}

	@priority = 5
	test PropertiesSidebarIsPresentForSchema {
		task ("When going to Properties section in Schemas > University") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");
		}

		task ("Then Properties sidebar present") {
			WaitForElementPresent(
				key_header = "Properties",
				locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_HEADER");
		}
	}

	@priority = 4
	test RelatedObjectsOptionIsPresentInPropertiesSidebar {
		task ("When going to Properties section in Schemas > University") {
			APIBuilderUI.goToEditRelatedEntryInEditApplication(
				entity = "Schemas",
				name = "University",
				tabEntity = "Properties",
				title = "My-app");
		}

		task ("Then 'View Related Objects' option is present in Properties sidebar") {
			WaitForElementPresent(locator1 = "APIBuilder#VIEW_RELATED_OBJECTS");
		}
	}

}