@component-name = "portal-headless"
definition {

	property app.server.types = "tomcat";
	property ci.retries.disabled = "true";
	property custom.properties = "feature.flag.LPS-178642=true";
	property database.partition.enabled = "true";
	property database.types = "mysql";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "API Builder";
	property timeout.explicit.wait = "180";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given clusterised environment with two nodes") {
			Clustering.viewClusterStatusInConsole();

			Page.assertNodePortPG(nodePort = 8080);

			User.logoutPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");

			User.loginPG(
				nodePort = 9080,
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");

			Page.assertNodePortPG(nodePort = 9080);

			User.logoutPG(
				nodePort = 9080,
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");
		}

		task ("And Given Object Definition 'Student' with one Student entry created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				objectDefinitionExternalReferenceCode = "Student",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "nameStudent");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Jessica");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		JSONObject.deleteAllCustomObjects(
			userEmailAddress = "test@liferay.com",
			userPassword = PropsUtil.get("default.admin.password"));

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 5
	test CanAddAPIApplicationWithCluster {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property database.types = "mysql, postgresql";
		property minimum.slave.ram = "24";
		property remote.elasticsearch.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("And Given APIApplication with endpoint created on the default node") {
			var response = ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				mainObjectDefinitionErc = "Student",
				objectFieldErc = "nameStudent",
				relatedEndpoint = "true",
				relatedSchema = "true",
				schemaName = "testSchema",
				status = "published",
				title = "My-app");

			SchemaAPI.relateRequestSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				requestSchemaErc = "My-app_testSchema");

			SchemaAPI.relateResponseSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				responseSchemaErc = "My-app_testSchema");
		}

		task ("When executing the endpoint on second node") {
			var response = APIApplicationEndpoint.getEndpoint(
				baseURL = "my-app",
				path = "/testendpoint",
				portalURL = "http://localhost:9080");
		}

		task ("Then endpoint response is correct") {
			var itemsCount = JSONUtil.getWithJSONPath(${response}, "$..totalCount");

			TestUtils.assertEquals(
				actual = ${itemsCount},
				expected = 1);
		}

		task ("And Then api application present in API Builder of second node") {
			User.loginPG(
				nodePort = 9080,
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");

			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "API Builder");

			AssertElementPresent(
				key_name = "My-app",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@priority = 5
	test CanAddAPIApplicationWithClusterSecondNode {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property minimum.slave.ram = "24";
		property remote.elasticsearch.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("And Given APIApplication with endpoint created on the second node") {
			var response = ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				mainObjectDefinitionErc = "Student",
				objectFieldErc = "nameStudent",
				portalURL = "http://localhost:9080",
				relatedEndpoint = "true",
				relatedSchema = "true",
				schemaName = "testSchema",
				status = "published",
				title = "My-app");

			SchemaAPI.relateRequestSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				portalURL = "http://localhost:9080",
				requestSchemaErc = "My-app_testSchema");

			SchemaAPI.relateResponseSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				portalURL = "http://localhost:9080",
				responseSchemaErc = "My-app_testSchema");
		}

		task ("When executing the endpoint on the default node") {
			var response = APIApplicationEndpoint.getEndpoint(
				baseURL = "my-app",
				path = "/testendpoint",
				portalURL = "http://localhost:8080");
		}

		task ("Then endpoint response is correct") {
			var itemsCount = JSONUtil.getWithJSONPath(${response}, "$..totalCount");

			TestUtils.assertEquals(
				actual = ${itemsCount},
				expected = 1);
		}

		task ("And Then api application present in API Builder of the default node") {
			User.loginPG(
				nodePort = 8080,
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");

			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "API Builder");

			AssertElementPresent(
				key_name = "My-app",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

}