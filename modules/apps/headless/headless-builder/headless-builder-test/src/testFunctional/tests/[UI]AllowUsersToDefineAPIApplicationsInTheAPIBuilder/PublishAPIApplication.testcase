@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-178642=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "API Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given create an API application through Control Panel > Object > API Builder") {
			APIBuilderUI.createAPIApplication(
				addByPlus = "true",
				title = "App-test");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test CanBackToAPIBuilderAfterCancel {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("And Given I edit the API application") {
			APIBuilderUI.goToEditAPIApplicationPage(key_title = "App-test");
		}

		task ("When I click Cancel button") {
			Click(locator1 = "Button#CANCEL");
		}

		task ("Then it goes back to the API Builder page") {
			AssertElementPresent(
				key_objectLabel = "API Builder",
				locator1 = "ObjectPortlet#OBJECT_PORTLET_HEADER");
		}
	}

	@priority = 4
	test CanGetPublishedStatusInResponse {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("And given publish the API application in edit application wizard") {
			APIBuilderUI.publishApplication(key_title = "App-test");
		}

		task ("When with getAPIApplicationsPage to retrieve the api application") {
			var response = ApplicationAPI.getAPIApplications();
		}

		task ("Then I can get the publish status in response") {
			var actualValue = JSONUtil.getWithJSONPath(${response}, "$.items..applicationStatus.name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "published");
		}
	}

	@priority = 4
	test CanPromptCancelChangesDialog {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("And Given I edit the title of the API application") {
			APIBuilderUI.goToEditAPIApplicationPage(key_title = "App-test");

			Type(
				locator1 = "APIBuilder#ENTER_TITLE",
				value1 = "App-test-1");
		}

		task ("When I click Cancel button") {
			Click(locator1 = "Button#CANCEL");
		}

		task ("Then I can see the Cancel Changes dialog with message and Continue Without Saving button") {
			AssertTextEquals.assertPartialText(
				locator1 = "Modal#BODY",
				value1 = "Are you sure you want to continue without saving?");

			AssertElementPresent(locator1 = "APIBuilder#CONTINUE_WITHOUT_SAVING_BUTTON");
		}
	}

	@priority = 4
	test CanPublishAPIApplication {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I click Publish button in edit application wizard") {
			APIBuilderUI.publishApplication(key_title = "App-test");
		}

		task ("Then the status of the application changed to published") {
			AssertTextEquals(
				deployStatus = "Published",
				locator1 = "AppBuilder#DEPLOY_APP_STATUS",
				value1 = "Published");
		}
	}

	@priority = 4
	test CanPublishAPIApplicationWithChangePublicationStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I click Change Publication Status") {
			APIBuilderUI.changePublicationStatus(key_title = "App-test");
		}

		task ("Then the status of the application changed to published") {
			AssertElementPresent(
				key_status = "Published",
				key_title = "App-test",
				locator1 = "APIBuilder#APPLICATION_STATUS");
		}
	}

	@priority = 4
	test CanUpdateTitleAfterRePublish {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given I publish an API application") {
			APIBuilderUI.publishApplication(key_title = "App-test");
		}

		task ("And Given I save a changed title") {
			APIBuilderUI.goToEditAPIApplicationPage(key_title = "App-test");

			Type(
				locator1 = "APIBuilder#ENTER_TITLE",
				value1 = "App-test-1");
		}

		task ("When I republish the api application") {
			Click(locator1 = "APIBuilder#PUBLISH_BUTTON");
		}

		task ("Then I can see updated title in API Builder") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "API Builder");

			AssertElementPresent(
				key_name = "App-test-1",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@priority = 3
	test GetAvailableButtonsAfterPublish {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I publish the API application in edit application wizard") {
			APIBuilderUI.publishApplication(key_title = "App-test");
		}

		task ("Then only Cancel and Publish buttons are visible") {
			AssertElementPresent(locator1 = "Button#CANCEL");

			AssertElementPresent(locator1 = "APIBuilder#PUBLISH_BUTTON");
		}
	}

	@priority = 3
	test GetAvailableButtonsBeforePublish {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I finish creating the API application") {
			WaitForElementPresent(
				key_title = "Edit API Application",
				locator1 = "Header#H1_TITLE");
		}

		task ("Then I can see Cancel, Save and Publish buttons are visible") {
			AssertElementPresent(locator1 = "Button#CANCEL");

			AssertElementPresent(locator1 = "Button#SAVE");

			AssertElementPresent(locator1 = "APIBuilder#PUBLISH_BUTTON");
		}
	}

}