@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-178642=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "API Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given New API Application created") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				title = "My-app");
		}

		task ("And Given I go to the Schemas tab of API Application edition") {
			APIBuilderUI.switchToRelatedEntryInEditApplication(
				entity = "Schemas",
				title = "My-app");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		JSONObject.deleteAllCustomObjects();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 5
	test AllObjectDefinitionsAreAvailableInTheObjectMenu {
		task ("Given multiple custom object definitions created and published") {
			var i = 0;

			while (${i} != 21) {
				ObjectDefinitionAPI.createAndPublishObjectDefinition(
					en_US_label = "Student${i}",
					en_US_plural_label = "Student${i}s",
					name = "Student${i}",
					requiredStringFieldName = "name");

				var i = ${i} + 1;
			}
		}

		task ("And Given 20+ custom object definitions entities available in Objects") {
			ObjectAdmin.openObjectAdmin();
		}

		task ("And Given one of object definitions not on 1st page") {
			Click(locator1 = "DigitalSignatureListView#DIGITAL_SIGNATURE_NAVIGATE_NEXT");

			while ((IsElementPresent(locator1 = "DigitalSignatureListView#DIGITAL_SIGNATURE_NAVIGATE_NEXT")) && (maxIterations = "20")) {
				Click(locator1 = "DigitalSignatureListView#DIGITAL_SIGNATURE_NAVIGATE_NEXT");
			}

			WaitForElementPresent(locator1 = "Pagination#ACTIVE_PAGE");

			var text = selenium.getAttribute("//ul[contains(@class,'pagination')]/li[contains(@class,'page-item') and contains(@class,'active')]/a[contains(@class,'page-link')]@aria-label");

			var pageNumber = StringUtil.extractLast(${text}, ", ");

			echo(${pageNumber});

			var match = StringUtil.matches(1, ${pageNumber});

			if (${match} == "true") {
				fail("Pagination did not move past the 1st page.");
			}
		}

		task ("And Given I go to the Schemas tab of API Application edition") {
			APIBuilderUI.switchToRelatedEntryInEditApplication(
				entity = "Schemas",
				title = "My-app");
		}

		task ("And Given I click Add New Schema") {
			Click(locator1 = "APIBuilder#ADD_NEW_SCHEMA");
		}

		task ("When I click Object field") {
			Click(locator1 = "APIBuilder#SELECT_AN_OBJECT_DEFINITION");
		}

		task ("Then all modifiable object definition entities from Objects are listed including the one placed on 2nd page of Objects") {
			AssertElementPresent(
				index = 13,
				locator1 = "ObjectAdmin#KEBAB_MENU_OPTION_BY_INDEX");
		}
	}

	@priority = 5
	test CanCreateMultipleSchemasInApplication {
		task ("And Given a Schema created in the API Application") {
			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "L_API_APPLICATION",
				name = "testSchema_1");
		}

		task ("When I click Add New Schema") {
			APIBuilderUI.createAPISchema(
				confirmCreation = "true",
				name = "testSchema_2",
				objectDefinitionName = "APIApplication");
		}

		task ("Then I'm able to create another schema for the API Application") {
			APIBuilderUI.switchToRelatedEntryInEditApplication(
				entity = "Schemas",
				title = "My-app");

			APIBuilderUI.viewItemsInOrder(itemList = "testSchema_1,testSchema_2");
		}
	}

	@priority = 3
	test CannotCreateSchemaWithDescriptionSizeExceeded {
		task ("When I fill and public in description field with 281 characters") {
			APIBuilderUI.createAPISchema(
				confirmCreation = "true",
				fieldDescription = "fdsfsdfkjsijokersderedlakstiowerichaehtsljlncslmtafdsfsdfkjsijokersderedlakstiowerichaehtsljlncslmtafdsfsdfkjsijokersderedlakstiowerichaehtsljlncslmtafdsfsdfkjsijokersderedlakstiowerichaehtsljlncslmtafdsfsdfkjsijokersderedlakstiowerichaehtsljlncslmtafdsfsdfkjsijokersderedlakstiowq",
				name = "testSchema",
				objectDefinitionName = "APIApplication");
		}

		task ("Then error message 'Object entry value exceeds the maximum length of 280 characters for object field description' blocks schema from being created") {
			Alert.viewErrorMessage(errorMessage = "Error:Object entry value exceeds the maximum length of 280 characters for object field");
		}
	}

	@priority = 3
	test CanSeeDescriptionOfDescriptionField {
		task ("When I click Add New Schema") {
			Click(locator1 = "APIBuilder#ADD_NEW_SCHEMA");
		}

		task ("Then a text 'Add a short description that describes this schema' visible in the Description field") {
			AssertElementPresent(
				key_value = "schema",
				locator1 = "APIBuilder#DESCRIPTION");
		}
	}

	@priority = 3
	test CanSeeDescriptionOfNameField {
		task ("When I click Add New Schema") {
			Click(locator1 = "APIBuilder#ADD_NEW_SCHEMA");
		}

		task ("Then a text 'testSchema_2' visible in the Name field") {
			AssertElementPresent(
				locator1 = "TextInput#NAME",
				value1 = "testSchema_2");
		}
	}

	@priority = 3
	test CanSeeDescriptionOfObjectField {
		task ("When I click Add New Schema") {
			Click(locator1 = "APIBuilder#ADD_NEW_SCHEMA");
		}

		task ("Then a text ‘APIApplication’ visible in the Object field") {
			AssertElementPresent(
				locator1 = "APIBuilder#SELECT_AN_OBJECT_DEFINITION",
				objectDefinitionName = "APIApplication");
		}
	}

	@priority = 4
	test CanSeeInfoOfCreatedSchema {
		task ("When I create a schema with valid Name and Object") {
			APIBuilderUI.createAPISchema(
				confirmCreation = "true",
				name = "testSchema",
				objectDefinitionName = "APIApplication");
		}

		task ("Then I can see details info of the created schema") {
			AssertTextEquals(
				key_placeHolder = "Enter name",
				locator1 = "TextInput#ANY_PLACEHOLDER",
				value1 = "testSchema");

			AssertTextEquals(
				locator1 = "APIBuilder#SELECT_AN_OBJECT_DEFINITION",
				objectDefinitionName = "APIApplication",
				value1 = "APIApplication");
		}
	}

	@priority = 3
	test CanSeeSuccessMessageWhenSchemaCreated {
		task ("When I create a schema with valid Name and Object") {
			APIBuilderUI.createAPISchema(
				confirmCreation = "true",
				fieldDescription = "Description default",
				name = "testSchema_2",
				objectDefinitionName = "APIApplication");
		}

		task ("Then success message appears") {
			Alert.viewSuccessMessage();
		}
	}

	@priority = 3
	test SchemaFieldsAreVisibleInCreationModal {
		task ("When I click Add New Schema") {
			Click(locator1 = "APIBuilder#ADD_NEW_SCHEMA");
		}

		task ("Then Name, Description, Object fields are visible") {
			AssertElementPresent(
				fieldLabel = "Name",
				locator1 = "FormViewBuilder#FIELD_LABEL");

			AssertElementPresent(
				fieldLabel = "Description",
				locator1 = "FormViewBuilder#FIELD_LABEL");

			AssertElementPresent(
				fieldLabel = "Object",
				locator1 = "FormViewBuilder#FIELD_LABEL");
		}
	}

	@priority = 5
	test SchemaIsNotCreatedAfterClickingCancel {
		task ("And Given I fill in valid Name and Object fields") {
			APIBuilderUI.createAPISchema(
				name = "testSchema",
				objectDefinitionName = "APIApplication");
		}

		task ("When I click Cancel button") {
			Click(locator1 = "Button#CANCEL");
		}

		task ("Then no new schema on the list of schemas") {
			AssertElementNotPresent(
				key_name = "testSchema",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@priority = 5
	test SchemaNameMustBeUnique {
		task ("And Given a Schema 'new' created in the API Application") {
			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "L_API_APPLICATION",
				name = "new");
		}

		task ("When I try creating another schema with name 'new'") {
			APIBuilderUI.createAPISchema(
				confirmCreation = "true",
				name = "new",
				objectDefinitionName = "APIApplication");
		}

		task ("Then an error message 'There is an API schema with the same name in the API application' blocks schema from being created") {
			AssertElementPresent(
				locator1 = "Message#ERROR_DISMISSIBLE",
				value = "There is an API schema with the same name in the API application.");
		}
	}

}