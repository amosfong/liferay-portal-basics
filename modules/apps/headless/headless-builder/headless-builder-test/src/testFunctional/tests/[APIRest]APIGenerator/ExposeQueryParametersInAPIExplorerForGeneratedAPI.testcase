@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-178642=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "API Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given custom object Student with name text field is created and published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Student",
				en_US_plural_label = "Students",
				name = "Student",
				objectDefinitionExternalReferenceCode = "student",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "studentName");
		}

		task ("And Given Students Able, Tom and Test are created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "Students",
				name = "Able");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "Students",
				name = "Tom");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "Students",
				name = "Test");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		JSONObject.deleteAllCustomObjects();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 5
	test CanApplyFilterParameter {
		task ("And Given an published API application with endpoint with related schema with Student as the main object") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				mainObjectDefinitionErc = "student",
				relatedEndpoint = "true",
				relatedSchema = "true",
				schemaName = "testSchema",
				status = "published",
				title = "My-app");

			SchemaAPI.relateResponseSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				responseSchemaErc = "My-app_testSchema");
		}

		task ("And Given I create schema a property with erc of name field") {
			PropertyAPI.createAPIProperty(
				name = "entryName",
				objectFieldERC = "studentName",
				schemaERC = "My-app_testSchema");
		}

		task ("When execute get{Endpoint}Page with filter={property} eq 'Able' in API Explorer") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.executeAPIMethod(
				method = "getTestendpointPage",
				parameter = "filter",
				service = "testSchema",
				value = "entryName eq 'Able'");
		}

		task ("Then I can see correct response with property equals to Able") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "getTestendpointPage",
				value1 = "\"items\": [     {       \"entryName\": \"Able\"     }   ]");
		}
	}

	@priority = 4
	test CanApplyFilterParameterAndPreFilter {
		task ("And Given an published API application with endpoint with related schema with Student as the main object") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				mainObjectDefinitionErc = "student",
				relatedEndpoint = "true",
				relatedSchema = "true",
				schemaName = "testSchema",
				status = "published",
				title = "My-app");

			SchemaAPI.relateResponseSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				responseSchemaErc = "My-app_testSchema");
		}

		task ("And Given I create schema a property with erc of name field") {
			PropertyAPI.createAPIProperty(
				name = "entryName",
				objectFieldERC = "studentName",
				schemaERC = "My-app_testSchema");
		}

		task ("And Given I create endpoint a filter with name ne 'Test'") {
			FilterAPI.createAPIFilter(
				endpointERC = "My-app_testendpoint",
				filterValue = "name ne '\''Test'\''");
		}

		task ("When execute get{Endpoint}Page with filter={property} ne 'Able' in API Explorer") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.executeAPIMethod(
				method = "getTestendpointPage",
				parameter = "filter",
				service = "testSchema",
				value = "entryName ne 'Able'");
		}

		task ("Then only Tom returned in response") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "getTestendpointPage",
				value1 = "\"items\": [     {       \"entryName\": \"Tom\"     }   ]");
		}
	}

	@priority = 4
	test CanApplyFilterSortAndPreFilterWithSiteScopedEndpoint {
		task ("Given site scoped custom object University with name text field is created and published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "University",
				en_US_plural_label = "Universities",
				name = "University",
				objectDefinitionExternalReferenceCode = "University",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "univeristyName",
				scope = "site");
		}

		task ("And Given Universities Able, Tom and Test are created") {
			CustomObjectAPI.createObjectEntryWithFields(
				en_US_plural_label = "universities",
				fieldName = "name",
				fieldValue = "Able",
				scopeKey = "true");

			CustomObjectAPI.createObjectEntryWithFields(
				en_US_plural_label = "universities",
				fieldName = "name",
				fieldValue = "Tom",
				scopeKey = "true");

			CustomObjectAPI.createObjectEntryWithFields(
				en_US_plural_label = "universities",
				fieldName = "name",
				fieldValue = "Test",
				scopeKey = "true");
		}

		task ("And Given a published API application with site scoped endpoint with related schema with Student as the main object") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				mainObjectDefinitionErc = "University",
				relatedEndpoint = "true",
				relatedSchema = "true",
				schemaName = "testSchema",
				scopeKey = "site",
				status = "published",
				title = "My-app");

			SchemaAPI.relateResponseSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				responseSchemaErc = "My-app_testSchema");
		}

		task ("And Given I create schema a property with erc of name field") {
			PropertyAPI.createAPIProperty(
				name = "entryName",
				objectFieldERC = "univeristyName",
				schemaERC = "My-app_testSchema");
		}

		task ("And Given I create endpoint a filter with name ne 'Test'") {
			FilterAPI.createAPIFilter(
				endpointERC = "My-app_testendpoint",
				filterValue = "name ne '\''Test'\''");
		}

		task ("When execute getScopeScopeKey{Endpoint}Page with scopeKey and ?filter={property} ne 'Test'&sort={property}:desc in API Explorer") {
			var scopeKey = JSONGroupAPI._getGroupIdByNameNoSelenium(
				groupName = "Guest",
				site = "true");

			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.executeAPIMethod(
				method = "getScopeScopeKeyTestendpointPage",
				parameter = "filter",
				parameter_two = "sort",
				scopeKey = ${scopeKey},
				service = "testSchema",
				value = "entryName ne 'Test'",
				value_two = "entryName:desc");
		}

		task ("Then I can get correct response with items in desc {Tom, Able}") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "getScopeScopeKeyTestendpointPage",
				value1 = "\"items\": [     {       \"entryName\": \"Tom\"     },     {       \"entryName\": \"Able\"     }   ]");
		}
	}

	@priority = 5
	test CanApplySortParameter {
		task ("And Given an published API application with endpoint with related schema with Student as the main object") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				mainObjectDefinitionErc = "student",
				relatedEndpoint = "true",
				relatedSchema = "true",
				schemaName = "testSchema",
				status = "published",
				title = "My-app");

			SchemaAPI.relateResponseSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				responseSchemaErc = "My-app_testSchema");
		}

		task ("And Given I create schema a property with erc of name field") {
			PropertyAPI.createAPIProperty(
				name = "entryName",
				objectFieldERC = "studentName",
				schemaERC = "My-app_testSchema");
		}

		task ("When execute get{Endpoint}Page with sort={property}:desc in API Explorer") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.executeAPIMethod(
				method = "getTestendpointPage",
				parameter = "sort",
				service = "testSchema",
				value = "entryName:desc");
		}

		task ("Then I can see correct response with items in desc {Test,Tom,Able}") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "getTestendpointPage",
				value1 = "\"items\": [     {       \"entryName\": \"Tom\"     },     {       \"entryName\": \"Test\"     },     {       \"entryName\": \"Able\"     }   ]");
		}
	}

	@priority = 4
	test CanApplySortParameterAndPreSort {
		task ("And Given an published API application with endpoint with related schema with Student as the main object") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				mainObjectDefinitionErc = "student",
				relatedEndpoint = "true",
				relatedSchema = "true",
				schemaName = "testSchema",
				status = "published",
				title = "My-app");

			SchemaAPI.relateResponseSchemaToEndpointByErc(
				endpointErc = "My-app_testendpoint",
				responseSchemaErc = "My-app_testSchema");
		}

		task ("And Given I create schema a property with erc of name field") {
			PropertyAPI.createAPIProperty(
				name = "entryName",
				objectFieldERC = "studentName",
				schemaERC = "My-app_testSchema");
		}

		task ("And Given I create endpoint a sort with name:asc") {
			SortAPI.createAPISort(
				endpointERC = "My-app_testendpoint",
				sortValue = "name:asc");
		}

		task ("When execute get{Endpoint}Page with sort {property}:desc in API Explorer") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.executeAPIMethod(
				method = "getTestendpointPage",
				parameter = "sort",
				service = "testSchema",
				value = "entryName:desc");
		}

		task ("Then I can see items in desc sort order in response") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "getTestendpointPage",
				value1 = "\"items\": [     {       \"entryName\": \"Tom\"     },     {       \"entryName\": \"Test\"     },     {       \"entryName\": \"Able\"     }   ]");
		}
	}

	@priority = 4
	test CanSeeFilterAndSortParametersInComapnyScopedEndpoint {
		task ("Given an published API application with company scoped endpoint") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				relatedEndpoint = "true",
				status = "published",
				title = "My-app");
		}

		task ("When I expand get{endpoint}Page in /o/c/{aPIApplication}") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.expandAPIMethod(
				method = "getTestendpointPage",
				service = "default");
		}

		task ("Then I can see filter and sort parameters with string type are present") {
			AssertElementPresent(
				locator1 = "OpenAPI#PARAMETER_TYPE",
				parameter = "filter",
				type = "string");

			AssertElementPresent(
				locator1 = "OpenAPI#PARAMETER_TYPE",
				parameter = "sort",
				type = "string");
		}
	}

	@priority = 4
	test CanSeeFilterAndSortParametersInSiteScopedEndpoint {
		task ("Given an published API application with site scoped endpoint") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				relatedEndpoint = "true",
				scopeKey = "site",
				status = "published",
				title = "My-app");
		}

		task ("When I expand getscopeScopeKey{Endpoint}Page in /o/c/{aPIApplication}") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.expandAPIMethod(
				method = "getScopeScopeKeyTestendpointPage",
				service = "default");
		}

		task ("Then I can see filter and sort parameters with string type are present") {
			AssertElementPresent(
				locator1 = "OpenAPI#PARAMETER_TYPE",
				parameter = "filter",
				type = "string");

			AssertElementPresent(
				locator1 = "OpenAPI#PARAMETER_TYPE",
				parameter = "sort",
				type = "string");
		}
	}

}