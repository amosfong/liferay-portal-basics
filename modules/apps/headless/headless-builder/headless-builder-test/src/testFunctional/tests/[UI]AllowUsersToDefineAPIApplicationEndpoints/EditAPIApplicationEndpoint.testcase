@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.LPS-178642=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "API Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given API Application with endpoint of scope 'Company' created") {
			ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				endpointName = "testendpoint",
				endpointPath = "/testendpoint",
				relatedEndpoint = "true",
				status = "published",
				title = "My-app");
		}
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		JSONObject.deleteAllCustomObjects();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test CanChangeSchemaOfEndpoint {
		task ("And Given two API Schema in API Application") {
			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "L_API_APPLICATION",
				name = "schema1");

			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "L_API_APPLICATION",
				name = "schema2");
		}

		task ("And Given setting API Schema schema1 in Response Body Schema") {
			APIBuilderUI.addAndPublishEndpointConfiguration(
				entity = "Endpoints",
				name = "testendpoint",
				schemaName = "schema1",
				title = "My-app");

			AssertElementPresent(
				key_optionName = "schema1",
				locator1 = "ObjectAdmin#LAYOUT_ADD_FIELD_OPTION");
		}

		task ("When modifying endpoint again with API Schema schema2") {
			APIBuilderUI.addAndPublishEndpointConfiguration(
				currentSchema = "schema1",
				entity = "Endpoints",
				name = "testendpoint",
				schemaName = "schema2",
				title = "My-app");
		}

		task ("Then changes are saved correctly") {
			Alert.viewSuccessMessage();

			AssertElementPresent(
				key_value = "schema2",
				locator1 = "APIBuilder#DROPDOWN_TOGGLE");
		}
	}

	@priority = 3
	test CanCreateEndpointInPublishedAPIApplication {
		task ("When editing API Application") {
			APIBuilderUI.switchToRelatedEntryInEditApplication(
				entity = "Endpoints",
				title = "My-app");

			APIBuilderUI.createAPIEndpoint(
				addByPlus = "true",
				method = "GET",
				path = "testendpoint2",
				retrieveType = "Collection",
				scope = "Company");
		}

		task ("Then API Endpoint can be created") {
			AssertTextEquals(
				key_fieldLabel = "Path",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "testendpoint2");
		}
	}

	@priority = 4
	test CanRelateEndpointWithSchema {
		task ("And Given API Schema in API Application") {
			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "L_API_APPLICATION",
				name = "testSchema");
		}

		task ("When editing the Endpoint") {
			APIBuilderUI.addAndPublishEndpointConfiguration(
				entity = "Endpoints",
				name = "testendpoint",
				schemaName = "testSchema",
				title = "My-app");
		}

		task ("Then I can set API Schema in Response Body Schema") {
			AssertElementPresent(
				key_optionName = "testSchema",
				locator1 = "ObjectAdmin#LAYOUT_ADD_FIELD_OPTION");
		}
	}

	@priority = 4
	test CanRelateSchemaOfRelatedObjectsWithEndpoint {
		task ("Given Student, University objects of scope 'Company' created with text field 'name'") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				objectDefinitionExternalReferenceCode = "student",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "studentName");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				objectDefinitionExternalReferenceCode = "university",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "universityName");
		}

		task ("And Given universityStudents one-to-many relationship created") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "universityStudents",
				parentObjectName = "University",
				type = "oneToMany");
		}

		task ("And Given university entry related to student entry") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Oxford");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Pearl");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Pearl",
				parent_plural_label = "universities",
				parentEntryName = "Oxford",
				relationshipName = "universityStudents");
		}

		task ("And Given Schema with properties: 'name' of university, 'name' of Student, ERC of university, ERC of student") {
			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "university",
				name = "testSchema");

			APIBuilderUI.addAndPublishSchemaProperties(
				entity = "Schemas",
				fieldName = "name",
				name = "testSchema",
				propertyName = "universityName",
				relatedFieldName = "name",
				relatedObjectName = "student",
				relatedPropertyName = "studentName",
				title = "My-app");
		}

		task ("And Given Schema related to the endpoint") {
			APIBuilderUI.addAndPublishEndpointConfiguration(
				entity = "Endpoints",
				name = "testendpoint",
				schemaName = "testSchema",
				title = "My-app");
		}

		task ("When executing the endpoint") {
			APIExplorer.navigateToOpenAPI(customObjectPlural = "my-app");

			APIExplorer.executeAPIMethod(
				method = "getTestendpointPage",
				service = "testSchema");
		}

		task ("Then all fields are correctly returned") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "getTestendpointPage",
				value1 = "\"items\": [     {       \"universityName\": \"Oxford\",       \"studentName\": [         \"Pearl\"       ]     }   ]");
		}
	}

	@priority = 4
	test CanRelateSchemaWithManyEndpoints {
		task ("Given API Application with two endpoints created") {
			EndpointAPI.createAPIEndpoint(
				apiApplicationERC = "My-app",
				name = "testendpoint1",
				path = "/testendpoint1");
		}

		task ("And Given one API Schema in API Application") {
			SchemaAPI.createAPISchema(
				apiApplicationERC = "My-app",
				mainObjectDefinitionERC = "L_API_APPLICATION",
				name = "testSchema");
		}

		task ("And Given modifying endpoint1 with API Schema") {
			APIBuilderUI.addAndPublishEndpointConfiguration(
				entity = "Endpoints",
				name = "testendpoint",
				schemaName = "testSchema",
				title = "My-app");
		}

		task ("When modifying endpoint2 wit the same API Schema") {
			APIBuilderUI.addAndPublishEndpointConfiguration(
				entity = "Endpoints",
				name = "testendpoint1",
				schemaName = "testSchema",
				title = "My-app");
		}

		task ("Then both endpoints work with the same schema") {
			var response = EndpointAPI.getAPIEndpoints();

			var actualValue = JSONPathUtil.getProperty(
				property = "$.items..r_responseAPISchemaToAPIEndpoints_l_apiSchemaERC",
				response = ${response});

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "testSchema,testSchema");
		}
	}

	@priority = 4
	test CanUpdateEndpoint {
		task ("When editing Path and Description of an endpoint") {
			APIBuilderUI.addAndPublishEndpointInfo(
				description = "This is an updated endpoint",
				endpointPath = "updatedendpoint",
				entity = "Endpoints",
				name = "testendpoint",
				title = "My-app");
		}

		task ("Then the endpoint values are updated") {
			AssertTextEquals(
				key_value = "endpoint",
				locator1 = "APIBuilder#DESCRIPTION",
				value1 = "This is an updated endpoint");

			AssertTextEquals(
				key_placeHolder = "Enter Path",
				locator1 = "TextInput#ANY_PLACEHOLDER",
				value1 = "updatedendpoint");
		}
	}

}