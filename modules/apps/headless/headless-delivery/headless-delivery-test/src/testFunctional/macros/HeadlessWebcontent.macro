definition {

	@summary = "Default summary"
	macro addBasicWebContent(userPassword = null, description = null, relatedContents = null, userEmailAddress = null, source = null, title = null, groupName = null, site = null, assetCategoryIds = null, viewableBy = null, assetTagNames = null, folderName = null) {
		Variables.assertDefined(parameterList = "${content},${title}");

		if (!(isSet(groupId))) {
			var groupId = JSONWebcontentSetter.setGroupId(
				groupName = ${groupName},
				site = ${site});
		}

		if (isSet(folderName)) {
			var folderId = JSONWebcontentSetter.setFolderId(
				folderName = ${folderName},
				groupId = ${groupId});
		}

		var globalGroupId = JSONWebcontentSetter.setGroupId(
			groupName = "Global",
			site = "true");
		var classNameId = JSONClassname._getClassNameId(value = "com.liferay.journal.model.JournalArticle");

		var structureId = JSONDDMstructureAPI._getStructureId(
			classNameId = ${classNameId},
			groupId = ${globalGroupId},
			structureName = "Basic Web Content");

		if (${source} != "true") {
			var content = '''<p>${content}</p>''';
		}

		var titleMap = HeadlessWebcontentSetter.setTitleMap(titleMap = ${titleMap});
		var contentMap = HeadlessWebcontentSetter.setContentMap(contentMap = ${contentMap});
		var descriptionMap = HeadlessWebcontentSetter.setDescriptionMap(descriptionMap = ${descriptionMap});

		var articleId = HeadlessWebcontentAPI._addWebContent(
			assetCategoryIds = ${assetCategoryIds},
			assetTagNames = ${assetTagNames},
			content = ${content},
			contentMap = ${contentMap},
			description = ${description},
			descriptionMap = ${descriptionMap},
			folderId = ${folderId},
			groupId = ${groupId},
			relatedContents = ${relatedContents},
			structureId = ${structureId},
			title = ${title},
			titleMap = ${titleMap},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword},
			viewableBy = ${viewableBy});

		return ${articleId};
	}

	@summary = "Updates only the fields received in the request body, leaving any other fields untouched."
	macro patchStructuredContent(structuredContentId = null, data = null) {
		Variables.assertDefined(parameterList = "${data},${structuredContentId}");

		HeadlessWebcontentAPI._patchStructuredContent(
			data = ${data},
			structuredContentId = ${structuredContentId});
	}

}