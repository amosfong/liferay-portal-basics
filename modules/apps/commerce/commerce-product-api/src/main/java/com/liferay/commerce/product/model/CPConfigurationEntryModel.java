/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.commerce.product.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.AttachedModel;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.ExternalReferenceCodeModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.MVCCModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedAuditedModel;
import com.liferay.portal.kernel.model.change.tracking.CTModel;

import java.math.BigDecimal;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the CPConfigurationEntry service. Represents a row in the &quot;CPConfigurationEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.liferay.commerce.product.model.impl.CPConfigurationEntryModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.liferay.commerce.product.model.impl.CPConfigurationEntryImpl</code>.
 * </p>
 *
 * @author Marco Leo
 * @see CPConfigurationEntry
 * @generated
 */
@ProviderType
public interface CPConfigurationEntryModel
	extends AttachedModel, BaseModel<CPConfigurationEntry>,
			CTModel<CPConfigurationEntry>, ExternalReferenceCodeModel,
			GroupedModel, MVCCModel, ShardedModel, StagedAuditedModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a cp configuration entry model instance should use the {@link CPConfigurationEntry} interface instead.
	 */

	/**
	 * Returns the primary key of this cp configuration entry.
	 *
	 * @return the primary key of this cp configuration entry
	 */
	@Override
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this cp configuration entry.
	 *
	 * @param primaryKey the primary key of this cp configuration entry
	 */
	@Override
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the mvcc version of this cp configuration entry.
	 *
	 * @return the mvcc version of this cp configuration entry
	 */
	@Override
	public long getMvccVersion();

	/**
	 * Sets the mvcc version of this cp configuration entry.
	 *
	 * @param mvccVersion the mvcc version of this cp configuration entry
	 */
	@Override
	public void setMvccVersion(long mvccVersion);

	/**
	 * Returns the ct collection ID of this cp configuration entry.
	 *
	 * @return the ct collection ID of this cp configuration entry
	 */
	@Override
	public long getCtCollectionId();

	/**
	 * Sets the ct collection ID of this cp configuration entry.
	 *
	 * @param ctCollectionId the ct collection ID of this cp configuration entry
	 */
	@Override
	public void setCtCollectionId(long ctCollectionId);

	/**
	 * Returns the uuid of this cp configuration entry.
	 *
	 * @return the uuid of this cp configuration entry
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this cp configuration entry.
	 *
	 * @param uuid the uuid of this cp configuration entry
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the external reference code of this cp configuration entry.
	 *
	 * @return the external reference code of this cp configuration entry
	 */
	@AutoEscape
	@Override
	public String getExternalReferenceCode();

	/**
	 * Sets the external reference code of this cp configuration entry.
	 *
	 * @param externalReferenceCode the external reference code of this cp configuration entry
	 */
	@Override
	public void setExternalReferenceCode(String externalReferenceCode);

	/**
	 * Returns the cp configuration entry ID of this cp configuration entry.
	 *
	 * @return the cp configuration entry ID of this cp configuration entry
	 */
	public long getCPConfigurationEntryId();

	/**
	 * Sets the cp configuration entry ID of this cp configuration entry.
	 *
	 * @param CPConfigurationEntryId the cp configuration entry ID of this cp configuration entry
	 */
	public void setCPConfigurationEntryId(long CPConfigurationEntryId);

	/**
	 * Returns the group ID of this cp configuration entry.
	 *
	 * @return the group ID of this cp configuration entry
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this cp configuration entry.
	 *
	 * @param groupId the group ID of this cp configuration entry
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this cp configuration entry.
	 *
	 * @return the company ID of this cp configuration entry
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this cp configuration entry.
	 *
	 * @param companyId the company ID of this cp configuration entry
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this cp configuration entry.
	 *
	 * @return the user ID of this cp configuration entry
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this cp configuration entry.
	 *
	 * @param userId the user ID of this cp configuration entry
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this cp configuration entry.
	 *
	 * @return the user uuid of this cp configuration entry
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this cp configuration entry.
	 *
	 * @param userUuid the user uuid of this cp configuration entry
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this cp configuration entry.
	 *
	 * @return the user name of this cp configuration entry
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this cp configuration entry.
	 *
	 * @param userName the user name of this cp configuration entry
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this cp configuration entry.
	 *
	 * @return the create date of this cp configuration entry
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this cp configuration entry.
	 *
	 * @param createDate the create date of this cp configuration entry
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this cp configuration entry.
	 *
	 * @return the modified date of this cp configuration entry
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this cp configuration entry.
	 *
	 * @param modifiedDate the modified date of this cp configuration entry
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the fully qualified class name of this cp configuration entry.
	 *
	 * @return the fully qualified class name of this cp configuration entry
	 */
	@Override
	public String getClassName();

	public void setClassName(String className);

	/**
	 * Returns the class name ID of this cp configuration entry.
	 *
	 * @return the class name ID of this cp configuration entry
	 */
	@Override
	public long getClassNameId();

	/**
	 * Sets the class name ID of this cp configuration entry.
	 *
	 * @param classNameId the class name ID of this cp configuration entry
	 */
	@Override
	public void setClassNameId(long classNameId);

	/**
	 * Returns the class pk of this cp configuration entry.
	 *
	 * @return the class pk of this cp configuration entry
	 */
	@Override
	public long getClassPK();

	/**
	 * Sets the class pk of this cp configuration entry.
	 *
	 * @param classPK the class pk of this cp configuration entry
	 */
	@Override
	public void setClassPK(long classPK);

	/**
	 * Returns the cp configuration list ID of this cp configuration entry.
	 *
	 * @return the cp configuration list ID of this cp configuration entry
	 */
	public long getCPConfigurationListId();

	/**
	 * Sets the cp configuration list ID of this cp configuration entry.
	 *
	 * @param CPConfigurationListId the cp configuration list ID of this cp configuration entry
	 */
	public void setCPConfigurationListId(long CPConfigurationListId);

	/**
	 * Returns the cp tax category ID of this cp configuration entry.
	 *
	 * @return the cp tax category ID of this cp configuration entry
	 */
	public long getCPTaxCategoryId();

	/**
	 * Sets the cp tax category ID of this cp configuration entry.
	 *
	 * @param CPTaxCategoryId the cp tax category ID of this cp configuration entry
	 */
	public void setCPTaxCategoryId(long CPTaxCategoryId);

	/**
	 * Returns the allowed order quantities of this cp configuration entry.
	 *
	 * @return the allowed order quantities of this cp configuration entry
	 */
	@AutoEscape
	public String getAllowedOrderQuantities();

	/**
	 * Sets the allowed order quantities of this cp configuration entry.
	 *
	 * @param allowedOrderQuantities the allowed order quantities of this cp configuration entry
	 */
	public void setAllowedOrderQuantities(String allowedOrderQuantities);

	/**
	 * Returns the back orders of this cp configuration entry.
	 *
	 * @return the back orders of this cp configuration entry
	 */
	public boolean getBackOrders();

	/**
	 * Returns <code>true</code> if this cp configuration entry is back orders.
	 *
	 * @return <code>true</code> if this cp configuration entry is back orders; <code>false</code> otherwise
	 */
	public boolean isBackOrders();

	/**
	 * Sets whether this cp configuration entry is back orders.
	 *
	 * @param backOrders the back orders of this cp configuration entry
	 */
	public void setBackOrders(boolean backOrders);

	/**
	 * Returns the commerce availability estimate ID of this cp configuration entry.
	 *
	 * @return the commerce availability estimate ID of this cp configuration entry
	 */
	public long getCommerceAvailabilityEstimateId();

	/**
	 * Sets the commerce availability estimate ID of this cp configuration entry.
	 *
	 * @param commerceAvailabilityEstimateId the commerce availability estimate ID of this cp configuration entry
	 */
	public void setCommerceAvailabilityEstimateId(
		long commerceAvailabilityEstimateId);

	/**
	 * Returns the cp definition inventory engine of this cp configuration entry.
	 *
	 * @return the cp definition inventory engine of this cp configuration entry
	 */
	@AutoEscape
	public String getCPDefinitionInventoryEngine();

	/**
	 * Sets the cp definition inventory engine of this cp configuration entry.
	 *
	 * @param CPDefinitionInventoryEngine the cp definition inventory engine of this cp configuration entry
	 */
	public void setCPDefinitionInventoryEngine(
		String CPDefinitionInventoryEngine);

	/**
	 * Returns the depth of this cp configuration entry.
	 *
	 * @return the depth of this cp configuration entry
	 */
	public double getDepth();

	/**
	 * Sets the depth of this cp configuration entry.
	 *
	 * @param depth the depth of this cp configuration entry
	 */
	public void setDepth(double depth);

	/**
	 * Returns the display availability of this cp configuration entry.
	 *
	 * @return the display availability of this cp configuration entry
	 */
	public boolean getDisplayAvailability();

	/**
	 * Returns <code>true</code> if this cp configuration entry is display availability.
	 *
	 * @return <code>true</code> if this cp configuration entry is display availability; <code>false</code> otherwise
	 */
	public boolean isDisplayAvailability();

	/**
	 * Sets whether this cp configuration entry is display availability.
	 *
	 * @param displayAvailability the display availability of this cp configuration entry
	 */
	public void setDisplayAvailability(boolean displayAvailability);

	/**
	 * Returns the display stock quantity of this cp configuration entry.
	 *
	 * @return the display stock quantity of this cp configuration entry
	 */
	public boolean getDisplayStockQuantity();

	/**
	 * Returns <code>true</code> if this cp configuration entry is display stock quantity.
	 *
	 * @return <code>true</code> if this cp configuration entry is display stock quantity; <code>false</code> otherwise
	 */
	public boolean isDisplayStockQuantity();

	/**
	 * Sets whether this cp configuration entry is display stock quantity.
	 *
	 * @param displayStockQuantity the display stock quantity of this cp configuration entry
	 */
	public void setDisplayStockQuantity(boolean displayStockQuantity);

	/**
	 * Returns the free shipping of this cp configuration entry.
	 *
	 * @return the free shipping of this cp configuration entry
	 */
	public boolean getFreeShipping();

	/**
	 * Returns <code>true</code> if this cp configuration entry is free shipping.
	 *
	 * @return <code>true</code> if this cp configuration entry is free shipping; <code>false</code> otherwise
	 */
	public boolean isFreeShipping();

	/**
	 * Sets whether this cp configuration entry is free shipping.
	 *
	 * @param freeShipping the free shipping of this cp configuration entry
	 */
	public void setFreeShipping(boolean freeShipping);

	/**
	 * Returns the height of this cp configuration entry.
	 *
	 * @return the height of this cp configuration entry
	 */
	public double getHeight();

	/**
	 * Sets the height of this cp configuration entry.
	 *
	 * @param height the height of this cp configuration entry
	 */
	public void setHeight(double height);

	/**
	 * Returns the low stock activity of this cp configuration entry.
	 *
	 * @return the low stock activity of this cp configuration entry
	 */
	@AutoEscape
	public String getLowStockActivity();

	/**
	 * Sets the low stock activity of this cp configuration entry.
	 *
	 * @param lowStockActivity the low stock activity of this cp configuration entry
	 */
	public void setLowStockActivity(String lowStockActivity);

	/**
	 * Returns the max order quantity of this cp configuration entry.
	 *
	 * @return the max order quantity of this cp configuration entry
	 */
	public BigDecimal getMaxOrderQuantity();

	/**
	 * Sets the max order quantity of this cp configuration entry.
	 *
	 * @param maxOrderQuantity the max order quantity of this cp configuration entry
	 */
	public void setMaxOrderQuantity(BigDecimal maxOrderQuantity);

	/**
	 * Returns the min order quantity of this cp configuration entry.
	 *
	 * @return the min order quantity of this cp configuration entry
	 */
	public BigDecimal getMinOrderQuantity();

	/**
	 * Sets the min order quantity of this cp configuration entry.
	 *
	 * @param minOrderQuantity the min order quantity of this cp configuration entry
	 */
	public void setMinOrderQuantity(BigDecimal minOrderQuantity);

	/**
	 * Returns the min stock quantity of this cp configuration entry.
	 *
	 * @return the min stock quantity of this cp configuration entry
	 */
	public BigDecimal getMinStockQuantity();

	/**
	 * Sets the min stock quantity of this cp configuration entry.
	 *
	 * @param minStockQuantity the min stock quantity of this cp configuration entry
	 */
	public void setMinStockQuantity(BigDecimal minStockQuantity);

	/**
	 * Returns the multiple order quantity of this cp configuration entry.
	 *
	 * @return the multiple order quantity of this cp configuration entry
	 */
	public BigDecimal getMultipleOrderQuantity();

	/**
	 * Sets the multiple order quantity of this cp configuration entry.
	 *
	 * @param multipleOrderQuantity the multiple order quantity of this cp configuration entry
	 */
	public void setMultipleOrderQuantity(BigDecimal multipleOrderQuantity);

	/**
	 * Returns the purchasable of this cp configuration entry.
	 *
	 * @return the purchasable of this cp configuration entry
	 */
	public boolean getPurchasable();

	/**
	 * Returns <code>true</code> if this cp configuration entry is purchasable.
	 *
	 * @return <code>true</code> if this cp configuration entry is purchasable; <code>false</code> otherwise
	 */
	public boolean isPurchasable();

	/**
	 * Sets whether this cp configuration entry is purchasable.
	 *
	 * @param purchasable the purchasable of this cp configuration entry
	 */
	public void setPurchasable(boolean purchasable);

	/**
	 * Returns the shippable of this cp configuration entry.
	 *
	 * @return the shippable of this cp configuration entry
	 */
	public boolean getShippable();

	/**
	 * Returns <code>true</code> if this cp configuration entry is shippable.
	 *
	 * @return <code>true</code> if this cp configuration entry is shippable; <code>false</code> otherwise
	 */
	public boolean isShippable();

	/**
	 * Sets whether this cp configuration entry is shippable.
	 *
	 * @param shippable the shippable of this cp configuration entry
	 */
	public void setShippable(boolean shippable);

	/**
	 * Returns the shipping extra price of this cp configuration entry.
	 *
	 * @return the shipping extra price of this cp configuration entry
	 */
	public double getShippingExtraPrice();

	/**
	 * Sets the shipping extra price of this cp configuration entry.
	 *
	 * @param shippingExtraPrice the shipping extra price of this cp configuration entry
	 */
	public void setShippingExtraPrice(double shippingExtraPrice);

	/**
	 * Returns the ship separately of this cp configuration entry.
	 *
	 * @return the ship separately of this cp configuration entry
	 */
	public boolean getShipSeparately();

	/**
	 * Returns <code>true</code> if this cp configuration entry is ship separately.
	 *
	 * @return <code>true</code> if this cp configuration entry is ship separately; <code>false</code> otherwise
	 */
	public boolean isShipSeparately();

	/**
	 * Sets whether this cp configuration entry is ship separately.
	 *
	 * @param shipSeparately the ship separately of this cp configuration entry
	 */
	public void setShipSeparately(boolean shipSeparately);

	/**
	 * Returns the tax exempt of this cp configuration entry.
	 *
	 * @return the tax exempt of this cp configuration entry
	 */
	public boolean getTaxExempt();

	/**
	 * Returns <code>true</code> if this cp configuration entry is tax exempt.
	 *
	 * @return <code>true</code> if this cp configuration entry is tax exempt; <code>false</code> otherwise
	 */
	public boolean isTaxExempt();

	/**
	 * Sets whether this cp configuration entry is tax exempt.
	 *
	 * @param taxExempt the tax exempt of this cp configuration entry
	 */
	public void setTaxExempt(boolean taxExempt);

	/**
	 * Returns the visible of this cp configuration entry.
	 *
	 * @return the visible of this cp configuration entry
	 */
	public boolean getVisible();

	/**
	 * Returns <code>true</code> if this cp configuration entry is visible.
	 *
	 * @return <code>true</code> if this cp configuration entry is visible; <code>false</code> otherwise
	 */
	public boolean isVisible();

	/**
	 * Sets whether this cp configuration entry is visible.
	 *
	 * @param visible the visible of this cp configuration entry
	 */
	public void setVisible(boolean visible);

	/**
	 * Returns the weight of this cp configuration entry.
	 *
	 * @return the weight of this cp configuration entry
	 */
	public double getWeight();

	/**
	 * Sets the weight of this cp configuration entry.
	 *
	 * @param weight the weight of this cp configuration entry
	 */
	public void setWeight(double weight);

	/**
	 * Returns the width of this cp configuration entry.
	 *
	 * @return the width of this cp configuration entry
	 */
	public double getWidth();

	/**
	 * Sets the width of this cp configuration entry.
	 *
	 * @param width the width of this cp configuration entry
	 */
	public void setWidth(double width);

	@Override
	public CPConfigurationEntry cloneWithOriginalValues();

	public default String toXmlString() {
		return null;
	}

}