/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.commerce.product.model.impl;

import com.liferay.commerce.product.model.CPSpecificationOptionListTypeDefinitionRel;
import com.liferay.commerce.product.model.CPSpecificationOptionListTypeDefinitionRelModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPSpecificationOptionListTypeDefinitionRel service. Represents a row in the &quot;CPSOListTypeDefinitionRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CPSpecificationOptionListTypeDefinitionRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPSpecificationOptionListTypeDefinitionRelImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPSpecificationOptionListTypeDefinitionRelImpl
 * @generated
 */
@JSON(strict = true)
public class CPSpecificationOptionListTypeDefinitionRelModelImpl
	extends BaseModelImpl<CPSpecificationOptionListTypeDefinitionRel>
	implements CPSpecificationOptionListTypeDefinitionRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp specification option list type definition rel model instance should use the <code>CPSpecificationOptionListTypeDefinitionRel</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPSOListTypeDefinitionRel";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"ctCollectionId", Types.BIGINT},
		{"CPSOListTypeDefinitionRelId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"CPSpecificationOptionId", Types.BIGINT},
		{"listTypeDefinitionId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPSOListTypeDefinitionRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPSpecificationOptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("listTypeDefinitionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPSOListTypeDefinitionRel (mvccVersion LONG default 0 not null,ctCollectionId LONG default 0 not null,CPSOListTypeDefinitionRelId LONG not null,companyId LONG,CPSpecificationOptionId LONG,listTypeDefinitionId LONG,primary key (CPSOListTypeDefinitionRelId, ctCollectionId))";

	public static final String TABLE_SQL_DROP =
		"drop table CPSOListTypeDefinitionRel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpSpecificationOptionListTypeDefinitionRel.CPSpecificationOptionListTypeDefinitionRelId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPSOListTypeDefinitionRel.CPSOListTypeDefinitionRelId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPSPECIFICATIONOPTIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LISTTYPEDEFINITIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long
		CPSPECIFICATIONOPTIONLISTTYPEDEFINITIONRELID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CPSpecificationOptionListTypeDefinitionRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPSpecificationOptionListTypeDefinitionRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPSpecificationOptionListTypeDefinitionRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPSpecificationOptionListTypeDefinitionRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPSpecificationOptionListTypeDefinitionRel.class;
	}

	@Override
	public String getModelClassName() {
		return CPSpecificationOptionListTypeDefinitionRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map
			<String,
			 Function<CPSpecificationOptionListTypeDefinitionRel, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String,
				 Function<CPSpecificationOptionListTypeDefinitionRel, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPSpecificationOptionListTypeDefinitionRel, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CPSpecificationOptionListTypeDefinitionRel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map
			<String,
			 BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Object>>
				attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPSpecificationOptionListTypeDefinitionRel)this,
					entry.getValue());
			}
		}
	}

	public Map
		<String, Function<CPSpecificationOptionListTypeDefinitionRel, Object>>
			getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map
		<String, BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Object>>
			getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String,
			 Function<CPSpecificationOptionListTypeDefinitionRel, Object>>
				_attributeGetterFunctions;

		static {
			Map
				<String,
				 Function<CPSpecificationOptionListTypeDefinitionRel, Object>>
					attributeGetterFunctions =
						new LinkedHashMap
							<String,
							 Function
								 <CPSpecificationOptionListTypeDefinitionRel,
								  Object>>();

			attributeGetterFunctions.put(
				"mvccVersion",
				CPSpecificationOptionListTypeDefinitionRel::getMvccVersion);
			attributeGetterFunctions.put(
				"ctCollectionId",
				CPSpecificationOptionListTypeDefinitionRel::getCtCollectionId);
			attributeGetterFunctions.put(
				"CPSpecificationOptionListTypeDefinitionRelId",
				CPSpecificationOptionListTypeDefinitionRel::
					getCPSpecificationOptionListTypeDefinitionRelId);
			attributeGetterFunctions.put(
				"companyId",
				CPSpecificationOptionListTypeDefinitionRel::getCompanyId);
			attributeGetterFunctions.put(
				"CPSpecificationOptionId",
				CPSpecificationOptionListTypeDefinitionRel::
					getCPSpecificationOptionId);
			attributeGetterFunctions.put(
				"listTypeDefinitionId",
				CPSpecificationOptionListTypeDefinitionRel::
					getListTypeDefinitionId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String,
			 BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Object>>
				_attributeSetterBiConsumers;

		static {
			Map
				<String,
				 BiConsumer<CPSpecificationOptionListTypeDefinitionRel, ?>>
					attributeSetterBiConsumers =
						new LinkedHashMap
							<String,
							 BiConsumer
								 <CPSpecificationOptionListTypeDefinitionRel,
								  ?>>();

			attributeSetterBiConsumers.put(
				"mvccVersion",
				(BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Long>)
					CPSpecificationOptionListTypeDefinitionRel::setMvccVersion);
			attributeSetterBiConsumers.put(
				"ctCollectionId",
				(BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Long>)
					CPSpecificationOptionListTypeDefinitionRel::
						setCtCollectionId);
			attributeSetterBiConsumers.put(
				"CPSpecificationOptionListTypeDefinitionRelId",
				(BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Long>)
					CPSpecificationOptionListTypeDefinitionRel::
						setCPSpecificationOptionListTypeDefinitionRelId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Long>)
					CPSpecificationOptionListTypeDefinitionRel::setCompanyId);
			attributeSetterBiConsumers.put(
				"CPSpecificationOptionId",
				(BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Long>)
					CPSpecificationOptionListTypeDefinitionRel::
						setCPSpecificationOptionId);
			attributeSetterBiConsumers.put(
				"listTypeDefinitionId",
				(BiConsumer<CPSpecificationOptionListTypeDefinitionRel, Long>)
					CPSpecificationOptionListTypeDefinitionRel::
						setListTypeDefinitionId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getCtCollectionId() {
		return _ctCollectionId;
	}

	@Override
	public void setCtCollectionId(long ctCollectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ctCollectionId = ctCollectionId;
	}

	@JSON
	@Override
	public long getCPSpecificationOptionListTypeDefinitionRelId() {
		return _CPSpecificationOptionListTypeDefinitionRelId;
	}

	@Override
	public void setCPSpecificationOptionListTypeDefinitionRelId(
		long CPSpecificationOptionListTypeDefinitionRelId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPSpecificationOptionListTypeDefinitionRelId =
			CPSpecificationOptionListTypeDefinitionRelId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getCPSpecificationOptionId() {
		return _CPSpecificationOptionId;
	}

	@Override
	public void setCPSpecificationOptionId(long CPSpecificationOptionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPSpecificationOptionId = CPSpecificationOptionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPSpecificationOptionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPSpecificationOptionId"));
	}

	@JSON
	@Override
	public long getListTypeDefinitionId() {
		return _listTypeDefinitionId;
	}

	@Override
	public void setListTypeDefinitionId(long listTypeDefinitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_listTypeDefinitionId = listTypeDefinitionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalListTypeDefinitionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("listTypeDefinitionId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			CPSpecificationOptionListTypeDefinitionRel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CPSpecificationOptionListTypeDefinitionRel toEscapedModel() {
		if (_escapedModel == null) {
			Function
				<InvocationHandler, CPSpecificationOptionListTypeDefinitionRel>
					escapedModelProxyProviderFunction =
						EscapedModelProxyProviderFunctionHolder.
							_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPSpecificationOptionListTypeDefinitionRelImpl
			cpSpecificationOptionListTypeDefinitionRelImpl =
				new CPSpecificationOptionListTypeDefinitionRelImpl();

		cpSpecificationOptionListTypeDefinitionRelImpl.setMvccVersion(
			getMvccVersion());
		cpSpecificationOptionListTypeDefinitionRelImpl.setCtCollectionId(
			getCtCollectionId());
		cpSpecificationOptionListTypeDefinitionRelImpl.
			setCPSpecificationOptionListTypeDefinitionRelId(
				getCPSpecificationOptionListTypeDefinitionRelId());
		cpSpecificationOptionListTypeDefinitionRelImpl.setCompanyId(
			getCompanyId());
		cpSpecificationOptionListTypeDefinitionRelImpl.
			setCPSpecificationOptionId(getCPSpecificationOptionId());
		cpSpecificationOptionListTypeDefinitionRelImpl.setListTypeDefinitionId(
			getListTypeDefinitionId());

		cpSpecificationOptionListTypeDefinitionRelImpl.resetOriginalValues();

		return cpSpecificationOptionListTypeDefinitionRelImpl;
	}

	@Override
	public CPSpecificationOptionListTypeDefinitionRel
		cloneWithOriginalValues() {

		CPSpecificationOptionListTypeDefinitionRelImpl
			cpSpecificationOptionListTypeDefinitionRelImpl =
				new CPSpecificationOptionListTypeDefinitionRelImpl();

		cpSpecificationOptionListTypeDefinitionRelImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		cpSpecificationOptionListTypeDefinitionRelImpl.setCtCollectionId(
			this.<Long>getColumnOriginalValue("ctCollectionId"));
		cpSpecificationOptionListTypeDefinitionRelImpl.
			setCPSpecificationOptionListTypeDefinitionRelId(
				this.<Long>getColumnOriginalValue(
					"CPSOListTypeDefinitionRelId"));
		cpSpecificationOptionListTypeDefinitionRelImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cpSpecificationOptionListTypeDefinitionRelImpl.
			setCPSpecificationOptionId(
				this.<Long>getColumnOriginalValue("CPSpecificationOptionId"));
		cpSpecificationOptionListTypeDefinitionRelImpl.setListTypeDefinitionId(
			this.<Long>getColumnOriginalValue("listTypeDefinitionId"));

		return cpSpecificationOptionListTypeDefinitionRelImpl;
	}

	@Override
	public int compareTo(
		CPSpecificationOptionListTypeDefinitionRel
			cpSpecificationOptionListTypeDefinitionRel) {

		long primaryKey =
			cpSpecificationOptionListTypeDefinitionRel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CPSpecificationOptionListTypeDefinitionRel)) {
			return false;
		}

		CPSpecificationOptionListTypeDefinitionRel
			cpSpecificationOptionListTypeDefinitionRel =
				(CPSpecificationOptionListTypeDefinitionRel)object;

		long primaryKey =
			cpSpecificationOptionListTypeDefinitionRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CPSpecificationOptionListTypeDefinitionRel>
		toCacheModel() {

		CPSpecificationOptionListTypeDefinitionRelCacheModel
			cpSpecificationOptionListTypeDefinitionRelCacheModel =
				new CPSpecificationOptionListTypeDefinitionRelCacheModel();

		cpSpecificationOptionListTypeDefinitionRelCacheModel.mvccVersion =
			getMvccVersion();

		cpSpecificationOptionListTypeDefinitionRelCacheModel.ctCollectionId =
			getCtCollectionId();

		cpSpecificationOptionListTypeDefinitionRelCacheModel.
			CPSpecificationOptionListTypeDefinitionRelId =
				getCPSpecificationOptionListTypeDefinitionRelId();

		cpSpecificationOptionListTypeDefinitionRelCacheModel.companyId =
			getCompanyId();

		cpSpecificationOptionListTypeDefinitionRelCacheModel.
			CPSpecificationOptionId = getCPSpecificationOptionId();

		cpSpecificationOptionListTypeDefinitionRelCacheModel.
			listTypeDefinitionId = getListTypeDefinitionId();

		return cpSpecificationOptionListTypeDefinitionRelCacheModel;
	}

	@Override
	public String toString() {
		Map
			<String,
			 Function<CPSpecificationOptionListTypeDefinitionRel, Object>>
				attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String,
				 Function<CPSpecificationOptionListTypeDefinitionRel, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPSpecificationOptionListTypeDefinitionRel, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CPSpecificationOptionListTypeDefinitionRel)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CPSpecificationOptionListTypeDefinitionRel>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CPSpecificationOptionListTypeDefinitionRel.class,
						ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _ctCollectionId;
	private long _CPSpecificationOptionListTypeDefinitionRelId;
	private long _companyId;
	private long _CPSpecificationOptionId;
	private long _listTypeDefinitionId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CPSpecificationOptionListTypeDefinitionRel, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply(
			(CPSpecificationOptionListTypeDefinitionRel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("ctCollectionId", _ctCollectionId);
		_columnOriginalValues.put(
			"CPSOListTypeDefinitionRelId",
			_CPSpecificationOptionListTypeDefinitionRelId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put(
			"CPSpecificationOptionId", _CPSpecificationOptionId);
		_columnOriginalValues.put(
			"listTypeDefinitionId", _listTypeDefinitionId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put(
			"CPSOListTypeDefinitionRelId",
			"CPSpecificationOptionListTypeDefinitionRelId");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("ctCollectionId", 2L);

		columnBitmasks.put("CPSOListTypeDefinitionRelId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("CPSpecificationOptionId", 16L);

		columnBitmasks.put("listTypeDefinitionId", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CPSpecificationOptionListTypeDefinitionRel _escapedModel;

}