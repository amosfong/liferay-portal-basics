/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.commerce.product.model.impl;

import com.liferay.commerce.product.model.CPConfigurationEntry;
import com.liferay.commerce.product.model.CPConfigurationEntryModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.math.BigDecimal;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPConfigurationEntry service. Represents a row in the &quot;CPConfigurationEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CPConfigurationEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPConfigurationEntryImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPConfigurationEntryImpl
 * @generated
 */
@JSON(strict = true)
public class CPConfigurationEntryModelImpl
	extends BaseModelImpl<CPConfigurationEntry>
	implements CPConfigurationEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp configuration entry model instance should use the <code>CPConfigurationEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPConfigurationEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"ctCollectionId", Types.BIGINT},
		{"uuid_", Types.VARCHAR}, {"externalReferenceCode", Types.VARCHAR},
		{"CPConfigurationEntryId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"classNameId", Types.BIGINT},
		{"classPK", Types.BIGINT}, {"CPConfigurationListId", Types.BIGINT},
		{"CPTaxCategoryId", Types.BIGINT},
		{"allowedOrderQuantities", Types.VARCHAR},
		{"backOrders", Types.BOOLEAN},
		{"commerceAvailabilityEstimateId", Types.BIGINT},
		{"CPDefinitionInventoryEngine", Types.VARCHAR}, {"depth", Types.DOUBLE},
		{"displayAvailability", Types.BOOLEAN},
		{"displayStockQuantity", Types.BOOLEAN},
		{"freeShipping", Types.BOOLEAN}, {"height", Types.DOUBLE},
		{"lowStockActivity", Types.VARCHAR},
		{"maxOrderQuantity", Types.DECIMAL},
		{"minOrderQuantity", Types.DECIMAL},
		{"minStockQuantity", Types.DECIMAL},
		{"multipleOrderQuantity", Types.DECIMAL},
		{"purchasable", Types.BOOLEAN}, {"shippable", Types.BOOLEAN},
		{"shippingExtraPrice", Types.DOUBLE}, {"shipSeparately", Types.BOOLEAN},
		{"taxExempt", Types.BOOLEAN}, {"visible", Types.BOOLEAN},
		{"weight", Types.DOUBLE}, {"width", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("externalReferenceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CPConfigurationEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPConfigurationListId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPTaxCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("allowedOrderQuantities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backOrders", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("commerceAvailabilityEstimateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPDefinitionInventoryEngine", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("depth", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("displayAvailability", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("displayStockQuantity", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("freeShipping", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("height", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("lowStockActivity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxOrderQuantity", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("minOrderQuantity", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("minStockQuantity", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("multipleOrderQuantity", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("purchasable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("shippable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("shippingExtraPrice", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("shipSeparately", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("taxExempt", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("visible", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("weight", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("width", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPConfigurationEntry (mvccVersion LONG default 0 not null,ctCollectionId LONG default 0 not null,uuid_ VARCHAR(75) null,externalReferenceCode VARCHAR(75) null,CPConfigurationEntryId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,CPConfigurationListId LONG,CPTaxCategoryId LONG,allowedOrderQuantities VARCHAR(75) null,backOrders BOOLEAN,commerceAvailabilityEstimateId LONG,CPDefinitionInventoryEngine VARCHAR(75) null,depth DOUBLE,displayAvailability BOOLEAN,displayStockQuantity BOOLEAN,freeShipping BOOLEAN,height DOUBLE,lowStockActivity VARCHAR(75) null,maxOrderQuantity BIGDECIMAL null,minOrderQuantity BIGDECIMAL null,minStockQuantity BIGDECIMAL null,multipleOrderQuantity BIGDECIMAL null,purchasable BOOLEAN,shippable BOOLEAN,shippingExtraPrice DOUBLE,shipSeparately BOOLEAN,taxExempt BOOLEAN,visible BOOLEAN,weight DOUBLE,width DOUBLE,primary key (CPConfigurationEntryId, ctCollectionId))";

	public static final String TABLE_SQL_DROP =
		"drop table CPConfigurationEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpConfigurationEntry.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPConfigurationEntry.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPCONFIGURATIONLISTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSNAMEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSPK_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EXTERNALREFERENCECODE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CPConfigurationEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPConfigurationEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPConfigurationEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPConfigurationEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPConfigurationEntry.class;
	}

	@Override
	public String getModelClassName() {
		return CPConfigurationEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CPConfigurationEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CPConfigurationEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPConfigurationEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CPConfigurationEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CPConfigurationEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPConfigurationEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPConfigurationEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CPConfigurationEntry, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CPConfigurationEntry, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CPConfigurationEntry, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CPConfigurationEntry, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CPConfigurationEntry, Object>>();

			attributeGetterFunctions.put(
				"mvccVersion", CPConfigurationEntry::getMvccVersion);
			attributeGetterFunctions.put(
				"ctCollectionId", CPConfigurationEntry::getCtCollectionId);
			attributeGetterFunctions.put("uuid", CPConfigurationEntry::getUuid);
			attributeGetterFunctions.put(
				"externalReferenceCode",
				CPConfigurationEntry::getExternalReferenceCode);
			attributeGetterFunctions.put(
				"CPConfigurationEntryId",
				CPConfigurationEntry::getCPConfigurationEntryId);
			attributeGetterFunctions.put(
				"groupId", CPConfigurationEntry::getGroupId);
			attributeGetterFunctions.put(
				"companyId", CPConfigurationEntry::getCompanyId);
			attributeGetterFunctions.put(
				"userId", CPConfigurationEntry::getUserId);
			attributeGetterFunctions.put(
				"userName", CPConfigurationEntry::getUserName);
			attributeGetterFunctions.put(
				"createDate", CPConfigurationEntry::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CPConfigurationEntry::getModifiedDate);
			attributeGetterFunctions.put(
				"classNameId", CPConfigurationEntry::getClassNameId);
			attributeGetterFunctions.put(
				"classPK", CPConfigurationEntry::getClassPK);
			attributeGetterFunctions.put(
				"CPConfigurationListId",
				CPConfigurationEntry::getCPConfigurationListId);
			attributeGetterFunctions.put(
				"CPTaxCategoryId", CPConfigurationEntry::getCPTaxCategoryId);
			attributeGetterFunctions.put(
				"allowedOrderQuantities",
				CPConfigurationEntry::getAllowedOrderQuantities);
			attributeGetterFunctions.put(
				"backOrders", CPConfigurationEntry::getBackOrders);
			attributeGetterFunctions.put(
				"commerceAvailabilityEstimateId",
				CPConfigurationEntry::getCommerceAvailabilityEstimateId);
			attributeGetterFunctions.put(
				"CPDefinitionInventoryEngine",
				CPConfigurationEntry::getCPDefinitionInventoryEngine);
			attributeGetterFunctions.put(
				"depth", CPConfigurationEntry::getDepth);
			attributeGetterFunctions.put(
				"displayAvailability",
				CPConfigurationEntry::getDisplayAvailability);
			attributeGetterFunctions.put(
				"displayStockQuantity",
				CPConfigurationEntry::getDisplayStockQuantity);
			attributeGetterFunctions.put(
				"freeShipping", CPConfigurationEntry::getFreeShipping);
			attributeGetterFunctions.put(
				"height", CPConfigurationEntry::getHeight);
			attributeGetterFunctions.put(
				"lowStockActivity", CPConfigurationEntry::getLowStockActivity);
			attributeGetterFunctions.put(
				"maxOrderQuantity", CPConfigurationEntry::getMaxOrderQuantity);
			attributeGetterFunctions.put(
				"minOrderQuantity", CPConfigurationEntry::getMinOrderQuantity);
			attributeGetterFunctions.put(
				"minStockQuantity", CPConfigurationEntry::getMinStockQuantity);
			attributeGetterFunctions.put(
				"multipleOrderQuantity",
				CPConfigurationEntry::getMultipleOrderQuantity);
			attributeGetterFunctions.put(
				"purchasable", CPConfigurationEntry::getPurchasable);
			attributeGetterFunctions.put(
				"shippable", CPConfigurationEntry::getShippable);
			attributeGetterFunctions.put(
				"shippingExtraPrice",
				CPConfigurationEntry::getShippingExtraPrice);
			attributeGetterFunctions.put(
				"shipSeparately", CPConfigurationEntry::getShipSeparately);
			attributeGetterFunctions.put(
				"taxExempt", CPConfigurationEntry::getTaxExempt);
			attributeGetterFunctions.put(
				"visible", CPConfigurationEntry::getVisible);
			attributeGetterFunctions.put(
				"weight", CPConfigurationEntry::getWeight);
			attributeGetterFunctions.put(
				"width", CPConfigurationEntry::getWidth);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CPConfigurationEntry, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CPConfigurationEntry, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CPConfigurationEntry, ?>>();

			attributeSetterBiConsumers.put(
				"mvccVersion",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setMvccVersion);
			attributeSetterBiConsumers.put(
				"ctCollectionId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setCtCollectionId);
			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CPConfigurationEntry, String>)
					CPConfigurationEntry::setUuid);
			attributeSetterBiConsumers.put(
				"externalReferenceCode",
				(BiConsumer<CPConfigurationEntry, String>)
					CPConfigurationEntry::setExternalReferenceCode);
			attributeSetterBiConsumers.put(
				"CPConfigurationEntryId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setCPConfigurationEntryId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CPConfigurationEntry, String>)
					CPConfigurationEntry::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CPConfigurationEntry, Date>)
					CPConfigurationEntry::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CPConfigurationEntry, Date>)
					CPConfigurationEntry::setModifiedDate);
			attributeSetterBiConsumers.put(
				"classNameId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setClassNameId);
			attributeSetterBiConsumers.put(
				"classPK",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setClassPK);
			attributeSetterBiConsumers.put(
				"CPConfigurationListId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setCPConfigurationListId);
			attributeSetterBiConsumers.put(
				"CPTaxCategoryId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setCPTaxCategoryId);
			attributeSetterBiConsumers.put(
				"allowedOrderQuantities",
				(BiConsumer<CPConfigurationEntry, String>)
					CPConfigurationEntry::setAllowedOrderQuantities);
			attributeSetterBiConsumers.put(
				"backOrders",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setBackOrders);
			attributeSetterBiConsumers.put(
				"commerceAvailabilityEstimateId",
				(BiConsumer<CPConfigurationEntry, Long>)
					CPConfigurationEntry::setCommerceAvailabilityEstimateId);
			attributeSetterBiConsumers.put(
				"CPDefinitionInventoryEngine",
				(BiConsumer<CPConfigurationEntry, String>)
					CPConfigurationEntry::setCPDefinitionInventoryEngine);
			attributeSetterBiConsumers.put(
				"depth",
				(BiConsumer<CPConfigurationEntry, Double>)
					CPConfigurationEntry::setDepth);
			attributeSetterBiConsumers.put(
				"displayAvailability",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setDisplayAvailability);
			attributeSetterBiConsumers.put(
				"displayStockQuantity",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setDisplayStockQuantity);
			attributeSetterBiConsumers.put(
				"freeShipping",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setFreeShipping);
			attributeSetterBiConsumers.put(
				"height",
				(BiConsumer<CPConfigurationEntry, Double>)
					CPConfigurationEntry::setHeight);
			attributeSetterBiConsumers.put(
				"lowStockActivity",
				(BiConsumer<CPConfigurationEntry, String>)
					CPConfigurationEntry::setLowStockActivity);
			attributeSetterBiConsumers.put(
				"maxOrderQuantity",
				(BiConsumer<CPConfigurationEntry, BigDecimal>)
					CPConfigurationEntry::setMaxOrderQuantity);
			attributeSetterBiConsumers.put(
				"minOrderQuantity",
				(BiConsumer<CPConfigurationEntry, BigDecimal>)
					CPConfigurationEntry::setMinOrderQuantity);
			attributeSetterBiConsumers.put(
				"minStockQuantity",
				(BiConsumer<CPConfigurationEntry, BigDecimal>)
					CPConfigurationEntry::setMinStockQuantity);
			attributeSetterBiConsumers.put(
				"multipleOrderQuantity",
				(BiConsumer<CPConfigurationEntry, BigDecimal>)
					CPConfigurationEntry::setMultipleOrderQuantity);
			attributeSetterBiConsumers.put(
				"purchasable",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setPurchasable);
			attributeSetterBiConsumers.put(
				"shippable",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setShippable);
			attributeSetterBiConsumers.put(
				"shippingExtraPrice",
				(BiConsumer<CPConfigurationEntry, Double>)
					CPConfigurationEntry::setShippingExtraPrice);
			attributeSetterBiConsumers.put(
				"shipSeparately",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setShipSeparately);
			attributeSetterBiConsumers.put(
				"taxExempt",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setTaxExempt);
			attributeSetterBiConsumers.put(
				"visible",
				(BiConsumer<CPConfigurationEntry, Boolean>)
					CPConfigurationEntry::setVisible);
			attributeSetterBiConsumers.put(
				"weight",
				(BiConsumer<CPConfigurationEntry, Double>)
					CPConfigurationEntry::setWeight);
			attributeSetterBiConsumers.put(
				"width",
				(BiConsumer<CPConfigurationEntry, Double>)
					CPConfigurationEntry::setWidth);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getCtCollectionId() {
		return _ctCollectionId;
	}

	@Override
	public void setCtCollectionId(long ctCollectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ctCollectionId = ctCollectionId;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public String getExternalReferenceCode() {
		if (_externalReferenceCode == null) {
			return "";
		}
		else {
			return _externalReferenceCode;
		}
	}

	@Override
	public void setExternalReferenceCode(String externalReferenceCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_externalReferenceCode = externalReferenceCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalExternalReferenceCode() {
		return getColumnOriginalValue("externalReferenceCode");
	}

	@JSON
	@Override
	public long getCPConfigurationEntryId() {
		return _CPConfigurationEntryId;
	}

	@Override
	public void setCPConfigurationEntryId(long CPConfigurationEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPConfigurationEntryId = CPConfigurationEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classNameId = classNameId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalClassNameId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("classNameId"));
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPK = classPK;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalClassPK() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("classPK"));
	}

	@JSON
	@Override
	public long getCPConfigurationListId() {
		return _CPConfigurationListId;
	}

	@Override
	public void setCPConfigurationListId(long CPConfigurationListId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPConfigurationListId = CPConfigurationListId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPConfigurationListId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPConfigurationListId"));
	}

	@JSON
	@Override
	public long getCPTaxCategoryId() {
		return _CPTaxCategoryId;
	}

	@Override
	public void setCPTaxCategoryId(long CPTaxCategoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPTaxCategoryId = CPTaxCategoryId;
	}

	@JSON
	@Override
	public String getAllowedOrderQuantities() {
		if (_allowedOrderQuantities == null) {
			return "";
		}
		else {
			return _allowedOrderQuantities;
		}
	}

	@Override
	public void setAllowedOrderQuantities(String allowedOrderQuantities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allowedOrderQuantities = allowedOrderQuantities;
	}

	@JSON
	@Override
	public boolean getBackOrders() {
		return _backOrders;
	}

	@JSON
	@Override
	public boolean isBackOrders() {
		return _backOrders;
	}

	@Override
	public void setBackOrders(boolean backOrders) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_backOrders = backOrders;
	}

	@JSON
	@Override
	public long getCommerceAvailabilityEstimateId() {
		return _commerceAvailabilityEstimateId;
	}

	@Override
	public void setCommerceAvailabilityEstimateId(
		long commerceAvailabilityEstimateId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commerceAvailabilityEstimateId = commerceAvailabilityEstimateId;
	}

	@JSON
	@Override
	public String getCPDefinitionInventoryEngine() {
		if (_CPDefinitionInventoryEngine == null) {
			return "";
		}
		else {
			return _CPDefinitionInventoryEngine;
		}
	}

	@Override
	public void setCPDefinitionInventoryEngine(
		String CPDefinitionInventoryEngine) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionInventoryEngine = CPDefinitionInventoryEngine;
	}

	@JSON
	@Override
	public double getDepth() {
		return _depth;
	}

	@Override
	public void setDepth(double depth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_depth = depth;
	}

	@JSON
	@Override
	public boolean getDisplayAvailability() {
		return _displayAvailability;
	}

	@JSON
	@Override
	public boolean isDisplayAvailability() {
		return _displayAvailability;
	}

	@Override
	public void setDisplayAvailability(boolean displayAvailability) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_displayAvailability = displayAvailability;
	}

	@JSON
	@Override
	public boolean getDisplayStockQuantity() {
		return _displayStockQuantity;
	}

	@JSON
	@Override
	public boolean isDisplayStockQuantity() {
		return _displayStockQuantity;
	}

	@Override
	public void setDisplayStockQuantity(boolean displayStockQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_displayStockQuantity = displayStockQuantity;
	}

	@JSON
	@Override
	public boolean getFreeShipping() {
		return _freeShipping;
	}

	@JSON
	@Override
	public boolean isFreeShipping() {
		return _freeShipping;
	}

	@Override
	public void setFreeShipping(boolean freeShipping) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_freeShipping = freeShipping;
	}

	@JSON
	@Override
	public double getHeight() {
		return _height;
	}

	@Override
	public void setHeight(double height) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_height = height;
	}

	@JSON
	@Override
	public String getLowStockActivity() {
		if (_lowStockActivity == null) {
			return "";
		}
		else {
			return _lowStockActivity;
		}
	}

	@Override
	public void setLowStockActivity(String lowStockActivity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lowStockActivity = lowStockActivity;
	}

	@JSON
	@Override
	public BigDecimal getMaxOrderQuantity() {
		return _maxOrderQuantity;
	}

	@Override
	public void setMaxOrderQuantity(BigDecimal maxOrderQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxOrderQuantity = maxOrderQuantity;
	}

	@JSON
	@Override
	public BigDecimal getMinOrderQuantity() {
		return _minOrderQuantity;
	}

	@Override
	public void setMinOrderQuantity(BigDecimal minOrderQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minOrderQuantity = minOrderQuantity;
	}

	@JSON
	@Override
	public BigDecimal getMinStockQuantity() {
		return _minStockQuantity;
	}

	@Override
	public void setMinStockQuantity(BigDecimal minStockQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_minStockQuantity = minStockQuantity;
	}

	@JSON
	@Override
	public BigDecimal getMultipleOrderQuantity() {
		return _multipleOrderQuantity;
	}

	@Override
	public void setMultipleOrderQuantity(BigDecimal multipleOrderQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_multipleOrderQuantity = multipleOrderQuantity;
	}

	@JSON
	@Override
	public boolean getPurchasable() {
		return _purchasable;
	}

	@JSON
	@Override
	public boolean isPurchasable() {
		return _purchasable;
	}

	@Override
	public void setPurchasable(boolean purchasable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_purchasable = purchasable;
	}

	@JSON
	@Override
	public boolean getShippable() {
		return _shippable;
	}

	@JSON
	@Override
	public boolean isShippable() {
		return _shippable;
	}

	@Override
	public void setShippable(boolean shippable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shippable = shippable;
	}

	@JSON
	@Override
	public double getShippingExtraPrice() {
		return _shippingExtraPrice;
	}

	@Override
	public void setShippingExtraPrice(double shippingExtraPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shippingExtraPrice = shippingExtraPrice;
	}

	@JSON
	@Override
	public boolean getShipSeparately() {
		return _shipSeparately;
	}

	@JSON
	@Override
	public boolean isShipSeparately() {
		return _shipSeparately;
	}

	@Override
	public void setShipSeparately(boolean shipSeparately) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shipSeparately = shipSeparately;
	}

	@JSON
	@Override
	public boolean getTaxExempt() {
		return _taxExempt;
	}

	@JSON
	@Override
	public boolean isTaxExempt() {
		return _taxExempt;
	}

	@Override
	public void setTaxExempt(boolean taxExempt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taxExempt = taxExempt;
	}

	@JSON
	@Override
	public boolean getVisible() {
		return _visible;
	}

	@JSON
	@Override
	public boolean isVisible() {
		return _visible;
	}

	@Override
	public void setVisible(boolean visible) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_visible = visible;
	}

	@JSON
	@Override
	public double getWeight() {
		return _weight;
	}

	@Override
	public void setWeight(double weight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_weight = weight;
	}

	@JSON
	@Override
	public double getWidth() {
		return _width;
	}

	@Override
	public void setWidth(double width) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_width = width;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CPConfigurationEntry.class.getName()),
			getClassNameId());
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CPConfigurationEntry.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CPConfigurationEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CPConfigurationEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPConfigurationEntryImpl cpConfigurationEntryImpl =
			new CPConfigurationEntryImpl();

		cpConfigurationEntryImpl.setMvccVersion(getMvccVersion());
		cpConfigurationEntryImpl.setCtCollectionId(getCtCollectionId());
		cpConfigurationEntryImpl.setUuid(getUuid());
		cpConfigurationEntryImpl.setExternalReferenceCode(
			getExternalReferenceCode());
		cpConfigurationEntryImpl.setCPConfigurationEntryId(
			getCPConfigurationEntryId());
		cpConfigurationEntryImpl.setGroupId(getGroupId());
		cpConfigurationEntryImpl.setCompanyId(getCompanyId());
		cpConfigurationEntryImpl.setUserId(getUserId());
		cpConfigurationEntryImpl.setUserName(getUserName());
		cpConfigurationEntryImpl.setCreateDate(getCreateDate());
		cpConfigurationEntryImpl.setModifiedDate(getModifiedDate());
		cpConfigurationEntryImpl.setClassNameId(getClassNameId());
		cpConfigurationEntryImpl.setClassPK(getClassPK());
		cpConfigurationEntryImpl.setCPConfigurationListId(
			getCPConfigurationListId());
		cpConfigurationEntryImpl.setCPTaxCategoryId(getCPTaxCategoryId());
		cpConfigurationEntryImpl.setAllowedOrderQuantities(
			getAllowedOrderQuantities());
		cpConfigurationEntryImpl.setBackOrders(isBackOrders());
		cpConfigurationEntryImpl.setCommerceAvailabilityEstimateId(
			getCommerceAvailabilityEstimateId());
		cpConfigurationEntryImpl.setCPDefinitionInventoryEngine(
			getCPDefinitionInventoryEngine());
		cpConfigurationEntryImpl.setDepth(getDepth());
		cpConfigurationEntryImpl.setDisplayAvailability(
			isDisplayAvailability());
		cpConfigurationEntryImpl.setDisplayStockQuantity(
			isDisplayStockQuantity());
		cpConfigurationEntryImpl.setFreeShipping(isFreeShipping());
		cpConfigurationEntryImpl.setHeight(getHeight());
		cpConfigurationEntryImpl.setLowStockActivity(getLowStockActivity());
		cpConfigurationEntryImpl.setMaxOrderQuantity(getMaxOrderQuantity());
		cpConfigurationEntryImpl.setMinOrderQuantity(getMinOrderQuantity());
		cpConfigurationEntryImpl.setMinStockQuantity(getMinStockQuantity());
		cpConfigurationEntryImpl.setMultipleOrderQuantity(
			getMultipleOrderQuantity());
		cpConfigurationEntryImpl.setPurchasable(isPurchasable());
		cpConfigurationEntryImpl.setShippable(isShippable());
		cpConfigurationEntryImpl.setShippingExtraPrice(getShippingExtraPrice());
		cpConfigurationEntryImpl.setShipSeparately(isShipSeparately());
		cpConfigurationEntryImpl.setTaxExempt(isTaxExempt());
		cpConfigurationEntryImpl.setVisible(isVisible());
		cpConfigurationEntryImpl.setWeight(getWeight());
		cpConfigurationEntryImpl.setWidth(getWidth());

		cpConfigurationEntryImpl.resetOriginalValues();

		return cpConfigurationEntryImpl;
	}

	@Override
	public CPConfigurationEntry cloneWithOriginalValues() {
		CPConfigurationEntryImpl cpConfigurationEntryImpl =
			new CPConfigurationEntryImpl();

		cpConfigurationEntryImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		cpConfigurationEntryImpl.setCtCollectionId(
			this.<Long>getColumnOriginalValue("ctCollectionId"));
		cpConfigurationEntryImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cpConfigurationEntryImpl.setExternalReferenceCode(
			this.<String>getColumnOriginalValue("externalReferenceCode"));
		cpConfigurationEntryImpl.setCPConfigurationEntryId(
			this.<Long>getColumnOriginalValue("CPConfigurationEntryId"));
		cpConfigurationEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cpConfigurationEntryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cpConfigurationEntryImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cpConfigurationEntryImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cpConfigurationEntryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cpConfigurationEntryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cpConfigurationEntryImpl.setClassNameId(
			this.<Long>getColumnOriginalValue("classNameId"));
		cpConfigurationEntryImpl.setClassPK(
			this.<Long>getColumnOriginalValue("classPK"));
		cpConfigurationEntryImpl.setCPConfigurationListId(
			this.<Long>getColumnOriginalValue("CPConfigurationListId"));
		cpConfigurationEntryImpl.setCPTaxCategoryId(
			this.<Long>getColumnOriginalValue("CPTaxCategoryId"));
		cpConfigurationEntryImpl.setAllowedOrderQuantities(
			this.<String>getColumnOriginalValue("allowedOrderQuantities"));
		cpConfigurationEntryImpl.setBackOrders(
			this.<Boolean>getColumnOriginalValue("backOrders"));
		cpConfigurationEntryImpl.setCommerceAvailabilityEstimateId(
			this.<Long>getColumnOriginalValue(
				"commerceAvailabilityEstimateId"));
		cpConfigurationEntryImpl.setCPDefinitionInventoryEngine(
			this.<String>getColumnOriginalValue("CPDefinitionInventoryEngine"));
		cpConfigurationEntryImpl.setDepth(
			this.<Double>getColumnOriginalValue("depth"));
		cpConfigurationEntryImpl.setDisplayAvailability(
			this.<Boolean>getColumnOriginalValue("displayAvailability"));
		cpConfigurationEntryImpl.setDisplayStockQuantity(
			this.<Boolean>getColumnOriginalValue("displayStockQuantity"));
		cpConfigurationEntryImpl.setFreeShipping(
			this.<Boolean>getColumnOriginalValue("freeShipping"));
		cpConfigurationEntryImpl.setHeight(
			this.<Double>getColumnOriginalValue("height"));
		cpConfigurationEntryImpl.setLowStockActivity(
			this.<String>getColumnOriginalValue("lowStockActivity"));
		cpConfigurationEntryImpl.setMaxOrderQuantity(
			this.<BigDecimal>getColumnOriginalValue("maxOrderQuantity"));
		cpConfigurationEntryImpl.setMinOrderQuantity(
			this.<BigDecimal>getColumnOriginalValue("minOrderQuantity"));
		cpConfigurationEntryImpl.setMinStockQuantity(
			this.<BigDecimal>getColumnOriginalValue("minStockQuantity"));
		cpConfigurationEntryImpl.setMultipleOrderQuantity(
			this.<BigDecimal>getColumnOriginalValue("multipleOrderQuantity"));
		cpConfigurationEntryImpl.setPurchasable(
			this.<Boolean>getColumnOriginalValue("purchasable"));
		cpConfigurationEntryImpl.setShippable(
			this.<Boolean>getColumnOriginalValue("shippable"));
		cpConfigurationEntryImpl.setShippingExtraPrice(
			this.<Double>getColumnOriginalValue("shippingExtraPrice"));
		cpConfigurationEntryImpl.setShipSeparately(
			this.<Boolean>getColumnOriginalValue("shipSeparately"));
		cpConfigurationEntryImpl.setTaxExempt(
			this.<Boolean>getColumnOriginalValue("taxExempt"));
		cpConfigurationEntryImpl.setVisible(
			this.<Boolean>getColumnOriginalValue("visible"));
		cpConfigurationEntryImpl.setWeight(
			this.<Double>getColumnOriginalValue("weight"));
		cpConfigurationEntryImpl.setWidth(
			this.<Double>getColumnOriginalValue("width"));

		return cpConfigurationEntryImpl;
	}

	@Override
	public int compareTo(CPConfigurationEntry cpConfigurationEntry) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), cpConfigurationEntry.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CPConfigurationEntry)) {
			return false;
		}

		CPConfigurationEntry cpConfigurationEntry =
			(CPConfigurationEntry)object;

		long primaryKey = cpConfigurationEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CPConfigurationEntry> toCacheModel() {
		CPConfigurationEntryCacheModel cpConfigurationEntryCacheModel =
			new CPConfigurationEntryCacheModel();

		cpConfigurationEntryCacheModel.mvccVersion = getMvccVersion();

		cpConfigurationEntryCacheModel.ctCollectionId = getCtCollectionId();

		cpConfigurationEntryCacheModel.uuid = getUuid();

		String uuid = cpConfigurationEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cpConfigurationEntryCacheModel.uuid = null;
		}

		cpConfigurationEntryCacheModel.externalReferenceCode =
			getExternalReferenceCode();

		String externalReferenceCode =
			cpConfigurationEntryCacheModel.externalReferenceCode;

		if ((externalReferenceCode != null) &&
			(externalReferenceCode.length() == 0)) {

			cpConfigurationEntryCacheModel.externalReferenceCode = null;
		}

		cpConfigurationEntryCacheModel.CPConfigurationEntryId =
			getCPConfigurationEntryId();

		cpConfigurationEntryCacheModel.groupId = getGroupId();

		cpConfigurationEntryCacheModel.companyId = getCompanyId();

		cpConfigurationEntryCacheModel.userId = getUserId();

		cpConfigurationEntryCacheModel.userName = getUserName();

		String userName = cpConfigurationEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cpConfigurationEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cpConfigurationEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			cpConfigurationEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cpConfigurationEntryCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cpConfigurationEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cpConfigurationEntryCacheModel.classNameId = getClassNameId();

		cpConfigurationEntryCacheModel.classPK = getClassPK();

		cpConfigurationEntryCacheModel.CPConfigurationListId =
			getCPConfigurationListId();

		cpConfigurationEntryCacheModel.CPTaxCategoryId = getCPTaxCategoryId();

		cpConfigurationEntryCacheModel.allowedOrderQuantities =
			getAllowedOrderQuantities();

		String allowedOrderQuantities =
			cpConfigurationEntryCacheModel.allowedOrderQuantities;

		if ((allowedOrderQuantities != null) &&
			(allowedOrderQuantities.length() == 0)) {

			cpConfigurationEntryCacheModel.allowedOrderQuantities = null;
		}

		cpConfigurationEntryCacheModel.backOrders = isBackOrders();

		cpConfigurationEntryCacheModel.commerceAvailabilityEstimateId =
			getCommerceAvailabilityEstimateId();

		cpConfigurationEntryCacheModel.CPDefinitionInventoryEngine =
			getCPDefinitionInventoryEngine();

		String CPDefinitionInventoryEngine =
			cpConfigurationEntryCacheModel.CPDefinitionInventoryEngine;

		if ((CPDefinitionInventoryEngine != null) &&
			(CPDefinitionInventoryEngine.length() == 0)) {

			cpConfigurationEntryCacheModel.CPDefinitionInventoryEngine = null;
		}

		cpConfigurationEntryCacheModel.depth = getDepth();

		cpConfigurationEntryCacheModel.displayAvailability =
			isDisplayAvailability();

		cpConfigurationEntryCacheModel.displayStockQuantity =
			isDisplayStockQuantity();

		cpConfigurationEntryCacheModel.freeShipping = isFreeShipping();

		cpConfigurationEntryCacheModel.height = getHeight();

		cpConfigurationEntryCacheModel.lowStockActivity = getLowStockActivity();

		String lowStockActivity =
			cpConfigurationEntryCacheModel.lowStockActivity;

		if ((lowStockActivity != null) && (lowStockActivity.length() == 0)) {
			cpConfigurationEntryCacheModel.lowStockActivity = null;
		}

		cpConfigurationEntryCacheModel.maxOrderQuantity = getMaxOrderQuantity();

		cpConfigurationEntryCacheModel.minOrderQuantity = getMinOrderQuantity();

		cpConfigurationEntryCacheModel.minStockQuantity = getMinStockQuantity();

		cpConfigurationEntryCacheModel.multipleOrderQuantity =
			getMultipleOrderQuantity();

		cpConfigurationEntryCacheModel.purchasable = isPurchasable();

		cpConfigurationEntryCacheModel.shippable = isShippable();

		cpConfigurationEntryCacheModel.shippingExtraPrice =
			getShippingExtraPrice();

		cpConfigurationEntryCacheModel.shipSeparately = isShipSeparately();

		cpConfigurationEntryCacheModel.taxExempt = isTaxExempt();

		cpConfigurationEntryCacheModel.visible = isVisible();

		cpConfigurationEntryCacheModel.weight = getWeight();

		cpConfigurationEntryCacheModel.width = getWidth();

		return cpConfigurationEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CPConfigurationEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CPConfigurationEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPConfigurationEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CPConfigurationEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CPConfigurationEntry>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CPConfigurationEntry.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _ctCollectionId;
	private String _uuid;
	private String _externalReferenceCode;
	private long _CPConfigurationEntryId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _classNameId;
	private long _classPK;
	private long _CPConfigurationListId;
	private long _CPTaxCategoryId;
	private String _allowedOrderQuantities;
	private boolean _backOrders;
	private long _commerceAvailabilityEstimateId;
	private String _CPDefinitionInventoryEngine;
	private double _depth;
	private boolean _displayAvailability;
	private boolean _displayStockQuantity;
	private boolean _freeShipping;
	private double _height;
	private String _lowStockActivity;
	private BigDecimal _maxOrderQuantity;
	private BigDecimal _minOrderQuantity;
	private BigDecimal _minStockQuantity;
	private BigDecimal _multipleOrderQuantity;
	private boolean _purchasable;
	private boolean _shippable;
	private double _shippingExtraPrice;
	private boolean _shipSeparately;
	private boolean _taxExempt;
	private boolean _visible;
	private double _weight;
	private double _width;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CPConfigurationEntry, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CPConfigurationEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("ctCollectionId", _ctCollectionId);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"externalReferenceCode", _externalReferenceCode);
		_columnOriginalValues.put(
			"CPConfigurationEntryId", _CPConfigurationEntryId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("classNameId", _classNameId);
		_columnOriginalValues.put("classPK", _classPK);
		_columnOriginalValues.put(
			"CPConfigurationListId", _CPConfigurationListId);
		_columnOriginalValues.put("CPTaxCategoryId", _CPTaxCategoryId);
		_columnOriginalValues.put(
			"allowedOrderQuantities", _allowedOrderQuantities);
		_columnOriginalValues.put("backOrders", _backOrders);
		_columnOriginalValues.put(
			"commerceAvailabilityEstimateId", _commerceAvailabilityEstimateId);
		_columnOriginalValues.put(
			"CPDefinitionInventoryEngine", _CPDefinitionInventoryEngine);
		_columnOriginalValues.put("depth", _depth);
		_columnOriginalValues.put("displayAvailability", _displayAvailability);
		_columnOriginalValues.put(
			"displayStockQuantity", _displayStockQuantity);
		_columnOriginalValues.put("freeShipping", _freeShipping);
		_columnOriginalValues.put("height", _height);
		_columnOriginalValues.put("lowStockActivity", _lowStockActivity);
		_columnOriginalValues.put("maxOrderQuantity", _maxOrderQuantity);
		_columnOriginalValues.put("minOrderQuantity", _minOrderQuantity);
		_columnOriginalValues.put("minStockQuantity", _minStockQuantity);
		_columnOriginalValues.put(
			"multipleOrderQuantity", _multipleOrderQuantity);
		_columnOriginalValues.put("purchasable", _purchasable);
		_columnOriginalValues.put("shippable", _shippable);
		_columnOriginalValues.put("shippingExtraPrice", _shippingExtraPrice);
		_columnOriginalValues.put("shipSeparately", _shipSeparately);
		_columnOriginalValues.put("taxExempt", _taxExempt);
		_columnOriginalValues.put("visible", _visible);
		_columnOriginalValues.put("weight", _weight);
		_columnOriginalValues.put("width", _width);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("ctCollectionId", 2L);

		columnBitmasks.put("uuid_", 4L);

		columnBitmasks.put("externalReferenceCode", 8L);

		columnBitmasks.put("CPConfigurationEntryId", 16L);

		columnBitmasks.put("groupId", 32L);

		columnBitmasks.put("companyId", 64L);

		columnBitmasks.put("userId", 128L);

		columnBitmasks.put("userName", 256L);

		columnBitmasks.put("createDate", 512L);

		columnBitmasks.put("modifiedDate", 1024L);

		columnBitmasks.put("classNameId", 2048L);

		columnBitmasks.put("classPK", 4096L);

		columnBitmasks.put("CPConfigurationListId", 8192L);

		columnBitmasks.put("CPTaxCategoryId", 16384L);

		columnBitmasks.put("allowedOrderQuantities", 32768L);

		columnBitmasks.put("backOrders", 65536L);

		columnBitmasks.put("commerceAvailabilityEstimateId", 131072L);

		columnBitmasks.put("CPDefinitionInventoryEngine", 262144L);

		columnBitmasks.put("depth", 524288L);

		columnBitmasks.put("displayAvailability", 1048576L);

		columnBitmasks.put("displayStockQuantity", 2097152L);

		columnBitmasks.put("freeShipping", 4194304L);

		columnBitmasks.put("height", 8388608L);

		columnBitmasks.put("lowStockActivity", 16777216L);

		columnBitmasks.put("maxOrderQuantity", 33554432L);

		columnBitmasks.put("minOrderQuantity", 67108864L);

		columnBitmasks.put("minStockQuantity", 134217728L);

		columnBitmasks.put("multipleOrderQuantity", 268435456L);

		columnBitmasks.put("purchasable", 536870912L);

		columnBitmasks.put("shippable", 1073741824L);

		columnBitmasks.put("shippingExtraPrice", 2147483648L);

		columnBitmasks.put("shipSeparately", 4294967296L);

		columnBitmasks.put("taxExempt", 8589934592L);

		columnBitmasks.put("visible", 17179869184L);

		columnBitmasks.put("weight", 34359738368L);

		columnBitmasks.put("width", 68719476736L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CPConfigurationEntry _escapedModel;

}