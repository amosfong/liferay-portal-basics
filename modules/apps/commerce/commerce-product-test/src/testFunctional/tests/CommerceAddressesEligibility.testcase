@ccomponent-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp();

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-12894. Verify that is possibile to create a default channel with eligible addresses and do the checkout with it"
	@priority = 5
	test CanCreateAChannelDefaultWithEligibleAddressesAndCompleteTheCheckout {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And two addresses one billing and one shipping") {
			for (var addressList : list "Billing:1,Shipping:3") {
				var name = StringUtil.extractFirst(${addressList}, ":");
				var type = StringUtil.extractLast(${addressList}, ":");

				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City",
					countryISOCode = "US",
					defaultBilling = "false",
					defaultShipping = "false",
					name = "${name} Test Address",
					street1 = "Test Street",
					type = ${type},
					zip = "Test Zip Code");
			}
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin opens the 'eligibility tab'") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping") {
				LexiconEntry.gotoEntry(rowEntry = "${typeList} Test Address");

				Account.gotoAssigneeTab(assigneeTab = "Eligibility");

				task ("And the admin selects the specific channel 'Minium Portal'") {
					CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
				}

				Navigator.gotoBack();
			}
		}

		task ("And the addresses are set as channel default for both Shipping and Billing for Minium channel") {
			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			for (var typeList : list "Billing,Shipping") {
				Account.addDefaultCommerceAddressEntry(
					addressEntry = "${typeList} Test Address",
					addressType = ${typeList},
					channelEntry = "Minium Portal");
			}
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then during the checkout is possible to use the account default addresses because they are eligible (the address will be pre-selected)") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "${typeList} Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-12892. Verify that is not possibile to create a default channel with illegible addresses"
	@priority = 5
	test CanNotCreateAChannelDefaultWithIllegibleAddresses {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And three addresses one billing one shipping and the last one for shipping/billing") {
			for (var addressList : list "Billing:1,Shipping:3,ValidShippingBilling:2") {
				var name = StringUtil.extractFirst(${addressList}, ":");
				var type = StringUtil.extractLast(${addressList}, ":");

				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City",
					countryISOCode = "US",
					defaultBilling = "false",
					defaultShipping = "false",
					name = "${name} Test Address",
					street1 = "Test Street",
					type = ${type},
					zip = "Test Zip Code");
			}
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin opens the 'eligibility tab'") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping,ValidShippingBilling") {
				LexiconEntry.gotoEntry(rowEntry = "${typeList} Test Address");

				Account.gotoAssigneeTab(assigneeTab = "Eligibility");

				task ("When the admin set the eligibility for all the addresses") {
					if (${typeList} != "ValidShippingBilling") {
						CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
					}
					else {
						CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
					}
				}

				Navigator.gotoBack();
			}
		}

		task ("Then the admin can't create a new default channel using those addresses with Minium") {
			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			for (var typeList : list "Billing,Shipping") {
				Click(
					key_termType = "${typeList}CommerceAddresses",
					locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Click(
					key_fieldLabel = "Channel",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				Select(
					key_fieldLabel = "Channel",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Minium Portal");

				Click(
					key_fieldLabel = "${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementNotPresent(
					key_fieldLabel = "${typeList} Address",
					key_value = "${typeList} Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementPresent(
					key_fieldLabel = "${typeList} Address",
					key_value = "ValidShippingBilling Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Button.clickSave();

				SelectFrameTop();
			}
		}

		task ("And if the admin try to add a new default channel with the Channel field set to 'All Channels' or 'Test Channel'") {
			for (var typeList : list "Billing,Shipping") {
				Click(
					key_termType = "${typeList}CommerceAddresses",
					locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				task ("Then all the available addresses will change based on the selected channel") {
					for (var channelList : list "Test Channel,All Other Channels") {
						Click(
							key_fieldLabel = "Channel",
							locator1 = "Select#GENERIC_SELECT_FIELD");

						Select(
							key_fieldLabel = "Channel",
							locator1 = "Select#GENERIC_SELECT_FIELD",
							value1 = ${channelList});

						Click(
							key_fieldLabel = "${typeList} Address",
							locator1 = "Select#GENERIC_SELECT_FIELD");

						if (${channelList} == "All Other Channels") {
							AssertElementNotPresent(
								key_fieldLabel = "${typeList} Address",
								key_value = "${typeList} Test Address",
								locator1 = "Select#GENERIC_SELECT_VALUE");

							AssertElementNotPresent(
								key_fieldLabel = "${typeList} Address",
								key_value = "ValidShippingBilling Test Address",
								locator1 = "Select#GENERIC_SELECT_VALUE");
						}
						else {
							AssertElementPresent(
								key_fieldLabel = "${typeList} Address",
								key_value = "${typeList} Test Address",
								locator1 = "Select#GENERIC_SELECT_VALUE");

							AssertElementNotPresent(
								key_fieldLabel = "${typeList} Address",
								key_value = "ValidShippingBilling Test Address",
								locator1 = "Select#GENERIC_SELECT_VALUE");
						}
					}
				}

				Click(locator1 = "Icon#CLOSE");

				SelectFrameTop();
			}
		}
	}

	@description = "This is a test for COMMERCE-12890. Verify that an address that is not elligible can't be used into the checkout"
	@priority = 5
	test CanNotUseIllegibleAddressesOnCheckout {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And an address is created manually") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			Account.addAddress(
				addressCity = "Test City",
				addressCountry = "United States",
				addressName = "Test Address",
				addressPostalCode = 1111,
				addressRegion = "California",
				addressStreet1 = "Test Street");
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin opens the eligibility tab") {
			LexiconEntry.gotoEntry(rowEntry = "Test Address");

			Account.gotoAssigneeTab(assigneeTab = "Eligibility");
		}

		task ("And the default is set on 'All Channels'") {
			AssertElementPresent(
				key_entry = "All Channels",
				locator1 = "CommerceEntry#CHECK_ELIGIBILITY_CHECKBOX");
		}

		task ("When the admin selects the specific channel 'Test Channel'") {
			CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
		}

		task ("And the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then during the checkout is not possible to use the addresses because they are illegible") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementNotPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				CommerceCheckout.setAddress(
					newAddressAddress = "New ${typeList} Test Address",
					newAddressCity = "New Test City",
					newAddressCountry = "United States",
					newAddressName = "New Address Name",
					newAddressZipCode = "Test Zip Code");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-12910. Verify that is not possibile to do the checkout with default account that uses illegible addresses"
	@priority = 5
	test CanNotUseIllegibleAddressesOnCheckoutWithAccountDefault {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And three addresses one billing one shipping and the last one for shipping/billing") {
			for (var addressList : list "Billing:1,Shipping:3,ValidShippingBilling:2") {
				var name = StringUtil.extractFirst(${addressList}, ":");
				var type = StringUtil.extractLast(${addressList}, ":");

				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City",
					countryISOCode = "US",
					defaultBilling = "false",
					defaultShipping = "false",
					name = "${name} Test Address",
					street1 = "Test Street",
					type = ${type},
					zip = "Test Zip Code");
			}
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin opens the 'eligibility tab'") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping") {
				LexiconEntry.gotoEntry(rowEntry = "${typeList} Test Address");

				Account.gotoAssigneeTab(assigneeTab = "Eligibility");

				task ("And the admin selects the specific channel 'Test Channel'") {
					CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
				}

				Navigator.gotoBack();
			}
		}

		task ("And the addresses are set as account default for both Shipping and Billing for Minium channel") {
			Account.gotoAssigneeTab(assigneeTab = "Details");

			Account.setDefaultShippingAddress(addressName = "Shipping Test Address");

			Account.setDefaultBillingAddress(addressName = "Billing Test Address");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then during the checkout is not possible to use the account default addresses because they are illegible") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementNotPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "${typeList} Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Select(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "ValidShippingBilling Test Address");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-12891. Verify that the addresses with the channel default that are not elligible can't be used into the checkout"
	@priority = 5
	test CanNotUseIllegibleAddressesOnCheckoutWithChannelDefault {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And two addresses are created one billing and one shipping") {
			for (var addressList : list "Billing:1,Shipping:3") {
				var name = StringUtil.extractFirst(${addressList}, ":");
				var type = StringUtil.extractLast(${addressList}, ":");

				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City",
					countryISOCode = "US",
					defaultBilling = "false",
					defaultShipping = "false",
					name = "${name} Test Address",
					street1 = "Test Street",
					type = ${type},
					zip = "Test Zip Code");
			}
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the addresses are set as default channel for both Shipping and Billing for Minium channel") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			for (var typeList : list "Billing,Shipping") {
				Account.addDefaultCommerceAddressEntry(
					addressEntry = "${typeList} Test Address",
					addressType = ${typeList},
					channelEntry = "Minium Portal");
			}
		}

		task ("And the admin opens the eligibility tab") {
			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping") {
				LexiconEntry.gotoEntry(rowEntry = "${typeList} Test Address");

				Account.gotoAssigneeTab(assigneeTab = "Eligibility");

				task ("And the admin selects the specific channel 'Test Channel'") {
					CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
				}

				Navigator.gotoBack();
			}
		}

		task ("When the admin opens back the default section the channel defaults are still there") {
			Account.gotoAssigneeTab(assigneeTab = "Channel Defaults");

			for (var typeList : list "Billing,Shipping") {
				Account.viewDefaultDeliveryCommerceTermsEntry(
					termEntry = "${typeList} Test Address",
					termType = ${typeList});
			}
		}

		task ("Then if the admin try to edit the defaults is not possibile to use the addresses for Minium") {
			for (var typeList : list "Billing,Shipping") {
				Click(
					key_currentDefault = "${typeList} Test Address",
					key_settingHeader = "${typeList}CommerceAddresses",
					locator1 = "Account#DEFAULT_SETTINGS_TABLE_ACTION_BUTTON");

				MenuItem.click(menuItem = "Edit");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Click(
					key_fieldLabel = "${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementNotPresent(
					key_fieldLabel = "${typeList} Address",
					key_value = "${typeList} Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Button.clickSave();

				AssertTextEquals.assertPartialText(
					locator1 = "TextInput#REQUIRED_ALERT",
					value1 = "The ${typeList} Address field is required.");

				Click(locator1 = "Icon#CLOSE");

				SelectFrameTop();
			}
		}

		task ("Given a valid address is created") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				defaultBilling = "false",
				defaultShipping = "false",
				name = "ValidShippingBilling Test Address",
				street1 = "Test Street",
				type = 2,
				zip = "Test Zip Code");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then during the checkout is not possible to use the addresses even with the channel default because they are illegible") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementNotPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "${typeList} Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Select(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "ValidShippingBilling Test Address");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-12934. Verify that is possible to remove a channel from the address eligibility"
	@priority = 5
	test CanRemoveAChannelFromTheEligibility {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And an address is created") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				defaultBilling = "false",
				defaultShipping = "false",
				name = "Test Address",
				street1 = "Test Street",
				type = 2,
				zip = "Test Zip Code");
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin opens the eligibility tab") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			LexiconEntry.gotoEntry(rowEntry = "Test Address");

			Account.gotoAssigneeTab(assigneeTab = "Eligibility");
		}

		task ("When the admin selects the specific channel 'Test Channel'") {
			CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
		}

		task ("And the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then during the checkout is not possible to use the addresses because they are illegible") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Click(
				key_fieldLabel = "Choose Shipping Address",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			AssertElementPresent(
				key_fieldLabel = "Choose Shipping Address",
				key_value = "Add New Address",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			AssertElementNotPresent(
				key_fieldLabel = "Choose Shipping Address",
				key_value = "Test Address",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			User.logoutPG();

			User.firstLoginPG();
		}

		task ("But if the eligibility is deleted for that address") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			CommerceEntry.removeAddressEligibility(
				addressName = "Test Address",
				channelEntries = "Test Channel");
		}

		task ("Then now is possible to use the address created before because now is eligible") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Select(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Test Address");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-12958. Verify that is not possible to view and use an ineligible address for a reorder"
	@priority = 5
	test CanUseAnIneligibleAddressForReorder {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And two addresses are created") {
			for (var addressList : list "InvalidShippingBilling:2,ValidShippingBilling:2") {
				var name = StringUtil.extractFirst(${addressList}, ":");
				var type = StringUtil.extractLast(${addressList}, ":");

				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City",
					countryISOCode = "US",
					defaultBilling = "false",
					defaultShipping = "false",
					name = "${name} Test Address",
					street1 = "Test Street",
					type = ${type},
					zip = "Test Zip Code");
			}
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the buyer compleate an order with the address created before") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "InvalidShippingBilling Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Select(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "InvalidShippingBilling Test Address");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}

		task ("But if the address used before is now become ineligible") {
			User.logoutPG();

			User.firstLoginPG();

			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			LexiconEntry.gotoEntry(rowEntry = "InvalidShippingBilling Test Address");

			Account.gotoAssigneeTab(assigneeTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
		}

		task ("When the buyer try to reorder the earlier order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			Click(
				key_orderAuthor = "Commerce Account",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

			Click(
				key_text = "Reorder",
				locator1 = "Button#ANY");

			Button.click(button = "Checkout");
		}

		task ("Then is not possible to use that address anymore") {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementNotPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "InvalidShippingBilling Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Select(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "ValidShippingBilling Test Address");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-12893. Verify that an address that is elligible can be used into the checkout"
	@priority = 5
	test CanUseEligibleAddressesOnCheckout {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And an address is created") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				defaultBilling = "false",
				defaultShipping = "false",
				name = "Test Address",
				street1 = "Test Street",
				type = 2,
				zip = "Test Zip Code");
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin opens the 'eligibility tab'") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			LexiconEntry.gotoEntry(rowEntry = "Test Address");

			Account.gotoAssigneeTab(assigneeTab = "Eligibility");
		}

		task ("When the admin selects the specific channel 'Minium Portal'") {
			CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
		}

		task ("And the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then during the checkout is possible to use those addresses because they are eligible") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Select(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Test Address");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

	@description = "This is a test for COMMERCE-12911. Verify that is possibile to do the checkout with default account that uses illegible addresses"
	@priority = 5
	test CanUseEligibleAddressesOnCheckoutWithAccountDefault {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an Account with the buyer is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And two addresses one billing and one shipping are created") {
			for (var addressList : list "Billing:1,Shipping:3") {
				var name = StringUtil.extractFirst(${addressList}, ":");
				var type = StringUtil.extractLast(${addressList}, ":");

				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = "Test City",
					countryISOCode = "US",
					defaultBilling = "false",
					defaultShipping = "false",
					name = "${name} Test Address",
					street1 = "Test Street",
					type = ${type},
					zip = "Test Zip Code");
			}
		}

		task ("And a new channel called 'Test Channel' is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin opens the 'eligibility tab'") {
			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Commerce Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			for (var typeList : list "Billing,Shipping") {
				LexiconEntry.gotoEntry(rowEntry = "${typeList} Test Address");

				Account.gotoAssigneeTab(assigneeTab = "Eligibility");

				task ("And the admin selects the specific channel 'Minium Portal'") {
					CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
				}

				Navigator.gotoBack();
			}
		}

		task ("And the addresses are set as account default for both Shipping and Billing") {
			Account.gotoAssigneeTab(assigneeTab = "Details");

			Account.setDefaultShippingAddress(addressName = "Shipping Test Address");

			Account.setDefaultBillingAddress(addressName = "Billing Test Address");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then during the checkout is possible to use the account default addresses because they are eligible") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			Uncheck.uncheckToggleSwitch(
				checkboxName = "Use shipping address as billing address",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var typeList : list "Shipping,Billing") {
				Click(
					key_fieldLabel = "Choose ${typeList} Address",
					locator1 = "Select#GENERIC_SELECT_FIELD");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "Add New Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				AssertElementPresent(
					key_fieldLabel = "Choose ${typeList} Address",
					key_value = "${typeList} Test Address",
					locator1 = "Select#GENERIC_SELECT_VALUE");

				Click(locator1 = "Button#CONTINUE");

				Click(locator1 = "Button#CONTINUE");
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Success! Your order has been processed.");
		}
	}

}