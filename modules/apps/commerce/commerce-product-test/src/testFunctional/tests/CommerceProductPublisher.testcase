@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12633. As an admin, I can verify that the Product Publisher pagination works in product details content page."
	@priority = 5
	test CanAssertProductPublisherPaginationWorksInProductDetails {
		property portal.acceptance = "true";

		task ("Given the Product Publisher is deployed on a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Publisher");
		}

		task ("And the Product Publisher is configured to show Data Source and Products in same category together with pagination") {
			CommerceWidget.updateProductPublisherConfigurationInDPT(
				dataSourceValue = "Products of the Same Categories",
				itemsPerPage = 4,
				portletName = "Product Publisher",
				productSelection = "Data Source");

			Button.clickPublish();
		}

		task ("And the content page is set as Default Product Display Page in Minium Portal Channel") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Content Page",
				pageType = "Public");
		}

		task ("When the pagination is updated to show 8 products in the product details page of U-Joint") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");

			Pagination.changePagination(itemsPerPage = 8);
		}

		task ("Then no error is shown and 8 products are listed on the page") {
			AssertElementNotPresent(locator1 = "Message#ERROR");

			for (var productName : list "Transmission Cooler Line Assembly,Torque Converters,Wheel Seal - Front,Mount,Transmission Fluid,Drive Shafts,Universal CV Boot,CV Axles") {
				AssertElementPresent(
					key_productName = ${productName},
					locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
			}

			Pagination.viewResults(results = "Showing 1 to 8 of 8 entries.");
		}

		task ("When the pagination is updated to show 4 products") {
			Pagination.changePagination(itemsPerPage = 4);
		}

		task ("Then no error is shown and 4 products are listed on the page") {
			AssertElementNotPresent(locator1 = "Message#ERROR");

			for (var productName : list "Transmission Cooler Line Assembly,Torque Converters,Wheel Seal - Front,Mount") {
				AssertElementPresent(
					key_productName = ${productName},
					locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
			}

			Pagination.viewResults(results = "Showing 1 to 4 of 8 entries.");
		}

		task ("And on the next page link no error is shown and products from 5 to 8 are listed ") {
			Click(locator1 = "Pagination#NEXT_LINK");

			AssertElementNotPresent(locator1 = "Message#ERROR");

			for (var productName : list "Transmission Fluid,Drive Shafts,Universal CV Boot,CV Axles") {
				AssertElementPresent(
					key_productName = ${productName},
					locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
			}

			Pagination.viewResults(results = "Showing 5 to 8 of 8 entries.");
		}
	}

	@description = "This is a test for COMMERCE-10454. When the user changes the Product Source selected, the 'Product Publisher' modal is updated accordingly"
	@priority = 3
	test CanAssertProductSourceUpdated {
		task ("Given the Product Publisher is deployed on a page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceAcceleratorsInitializer.addPortlet(portletName = "Product Publisher");

			Portlet.gotoPortletOptions(
				portletName = "Product Publisher",
				portletOption = "Configuration");
		}

		task ("And the Product Entries panel is not shown") {
			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#CONFIGURATION");

			AssertElementNotPresent(
				key_panel = "Product Entries",
				locator1 = "Panel#PANEL");
		}

		task ("When the Manual option is selected") {
			Click(
				locator1 = "Radio#ANY",
				radioLabel = "Manual");
		}

		task ("Then the 'Product Entries' panel is automatically shown") {
			AssertElementPresent(
				key_panel = "Product Entries",
				locator1 = "Panel#PANEL");
		}
	}

}