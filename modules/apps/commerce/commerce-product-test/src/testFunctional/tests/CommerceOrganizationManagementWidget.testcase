@component-name = "portal-commerce"
definition {

	property custom.properties = "company.security.strangers.verify=false${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Users and Organizations";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Setup: Add a Minium page with an Organization Management widget") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Organization Management Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Organization Management Widget Page",
				widgetName = "Organization Management");
		}

		task ("Setup: Add buyer account") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		task ("Deleting the Sub Organizations first for teardown purposes") {
			for (var organizationEntries : list "Org 1:SubOrg 1,Org 2:SubOrg 2") {
				var organization = StringUtil.extractFirst(${organizationEntries}, ":");
				var subOrganization = StringUtil.extractLast(${organizationEntries}, ":");
				var parentOrganizationId = JSONOrganization.getOrganizationIdByName(organizationName = ${organization});

				var organizationId = JSONOrganization.getOrganizationIdByName(
					organizationName = ${subOrganization},
					parentOrganizationId = ${parentOrganizationId});

				CommerceJSONOrganizationsAPI._deleteOrganizationById(organizationId = ${organizationId});
			}
		}

		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12586 | Verify that changing the root configuration for the Organization Management widget affect the search results"
	@priority = 5
	test CanChangeTheRootAffectTheSearchOrganizationManagement {
		property portal.acceptance = "true";

		task ("Given a setup scenario is created for the Organization Management Widget") {
			for (var organizationAccountEntries : list "Org 1:Account A,Org 2:Account B") {
				var organization = StringUtil.extractFirst(${organizationAccountEntries}, ":");
				var account = StringUtil.extractLast(${organizationAccountEntries}, ":");

				JSONOrganization.addOrganization(
					organizationName = ${organization},
					organizationSite = "false");

				JSONAccountEntry.addAccountEntry(
					accountEntryName = ${account},
					accountEntryType = "Business");

				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${account},
					organizationName = ${organization});
			}

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Account A",
				organizationName = "Org 2");
		}

		task ("And the admin goes to the widget page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And before changing the root the search work normally") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Account A");

			Click(
				key_columnOption = "Account A",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			for (var rowList : list "1,2") {
				AssertElementPresent(
					key_entry = "Account A",
					key_row = ${rowList},
					locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");
			}
		}

		task ("When the Organization Management root is changed for only 'Org 1'") {
			Portlet.gotoPortletOptions(
				portletName = "Organization Management",
				portletOption = "Configuration");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Org 1");

			PortletEntry.save();

			IFrame.closeFrame();
		}

		task ("And the admin searches 'Account A'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Account A");

			Click(
				key_columnOption = "Account A",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then only one result should be present in the select search results, and in the graph") {
			AssertElementPresent(
				key_entry = "Account A",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			AssertElementNotPresent(
				key_entry = "Account A",
				key_row = 2,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			AssertElementPresent(
				key_searchResults = "1 Result for Account A",
				locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
		}

		task ("But if the admin searches for 'Org 2'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Org 2");

			Click(
				key_columnOption = "Org 2",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then no entries are present in the graph (no entry will be highlighted)") {
			AssertElementNotPresent(
				key_entry = "Org 2",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");

			AssertElementPresent(
				key_searchResults = "0 Results for Org 2",
				locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
		}
	}

	@description = "COMMERCE-12584 | Verify that is possibile to search for an entry that is present multiple times inside the widget"
	@priority = 5
	test CanSearchAnEntryPresentMultipleTimesIntoOrganizationManagement {
		property portal.acceptance = "true";

		task ("And an organization is created and configured") {
			for (var organizationList : list "Org 1,Org 2") {
				JSONOrganization.addOrganization(
					organizationName = ${organizationList},
					organizationSite = "false");
			}

			JSONOrganization.addOrganization(
				organizationName = "SubOrg 1",
				parentOrganizationName = "Org 1");

			for (var accountsList : list "Account A,Account B_1,Account B_2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = ${accountsList},
					accountEntryType = "Business");

				if (${accountsList} != "Account B_1") {
					JSONAccountEntryUser.addExistUsertoAccount(
						accountEntryName = ${accountsList},
						userEmailAddress = "buyer@liferay.com");
				}
				else {
					JSONAccountEntryUser.addAccountEntryUser(
						accountEntryName = "Account B_1",
						userEmailAddress = "admin@liferay.com",
						userFirstName = "admin",
						userLastName = "admin",
						userScreenName = "admin");
				}
			}

			JSONAccountEntry.addAccountEntrySubOrganization(
				accountEntryName = "Account A",
				parentOrganizationName = "Org 1",
				subOrganizationName = "SubOrg 1");

			for (var accountsList : list "Account B_1,Account B_2") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${accountsList},
					organizationName = "Org 2");
			}
		}

		task ("And the admin goes to the widget page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And the admin searches 'buyer@liferay.com'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "buyer@liferay.com");

			var first_position = selenium.getAttribute("//div[contains(@class,'org-chart-container')]//*[name()='svg']//*[name()='g']@transform");

			var first_zoom_level = StringUtil.extractLast(${first_position}, "scale");

			Click(
				key_columnOption = "Buyer User",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then the Organization widget expands and opens the graph to show the entries highlighted with the black color") {
			AssertElementNotPresent(
				key_entry = "admin admin",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");

			AssertElementPresent(
				key_entry = "Buyer User",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			AssertElementPresent(
				key_entry = "Buyer User",
				key_row = 2,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			task ("And the message 2 entities found is present") {
				AssertElementPresent(
					key_searchResults = "2 Results for Buyer User",
					locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
			}

			// Pausing 5 seconds need it for giving the time to actually change the position COMMERCE-12430

			Pause(locator1 = 5000);

			var second_position = selenium.getAttribute("//div[contains(@class,'org-chart-container')]//*[name()='svg']//*[name()='g']@transform");

			var second_zoom_level = StringUtil.extractLast(${second_position}, "scale");

			if (${first_position} != ${second_position}) {
				echo("The position is changed (expected behaviour)");
			}
			else {
				fail("The position is not changed the expected position it must be different from ${first_position}");
			}

			if (${first_zoom_level} != ${second_zoom_level}) {
				echo("The zoom is changed (expected behaviour)");
			}
			else {
				fail("The expected zoom must be the different from ${first_zoom_level}");
			}
		}

		task ("But if the admin clicks on the 'Collapse' button") {
			Click(
				key_text = "Collapse All",
				locator1 = "Button#ANY");
		}

		task ("And search again the 'buyer@liferay.com'") {
			Click(locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD");

			Click(
				key_columnOption = "Buyer User",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then again the Organization widget expands and opens the graph to show the entries highlighted with the black color") {
			AssertElementNotPresent(
				key_entry = "admin admin",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");

			AssertElementPresent(
				key_entry = "Buyer User",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			AssertElementPresent(
				key_entry = "Buyer User",
				key_row = 2,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			task ("And the message 2 entities found is still present") {
				AssertElementPresent(
					key_searchResults = "2 Results for Buyer User",
					locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
			}
		}
	}

	@description = "COMMERCE-12594 | Verify that even if all the accounts has the same name, when the admin use the search can highlight the correct one based on the ID"
	@priority = 5
	test CanSearchDifferentAccountsWithTheSameNameOrganizationManagement {
		property portal.acceptance = "true";

		task ("And an organization is created and configured") {
			for (var organizationEntries : list "Org 1,Org 2") {
				JSONOrganization.addOrganization(
					organizationName = ${organizationEntries},
					organizationSite = "false");
			}

			for (var accountEntries : list "Account A,Account B") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = ${accountEntries},
					accountEntryType = "Business");
			}

			for (var accountEntries : list "Account A,Account B") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${accountEntries},
					organizationName = "Org 1");
			}

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Account A",
				organizationName = "Org 2");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account B");

			PortletEntry.inputName(name = "Account A");

			Button.clickSave();
		}

		task ("And the admin goes to the widget page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And the admin searches 'Account A'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Account A");
		}

		task ("Then two results should be present in the select with the same name") {
			for (var row : list "1,2") {
				AssertElementPresent(
					key_columnOption = "Account A",
					key_row = ${row},
					locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_COMPLETE_OPTION_ROW");
			}

			AssertElementNotPresent(
				key_columnOption = "Account A",
				key_row = 3,
				locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_COMPLETE_OPTION_ROW");
		}

		task ("When the admin clicks on the first one") {
			Click(
				key_columnOption = "Account A",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_COMPLETE_OPTION_ROW");
		}

		task ("Then the Organization widget expands and opens the graph to show the entries highlighted with the black color") {
			for (var row : list "1,2") {
				AssertElementPresent(
					key_entry = "Account A",
					key_row = ${row},
					locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");
			}

			AssertElementNotPresent(
				key_entry = "Account A",
				key_row = 3,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			task ("And the message 2 entities found is present") {
				AssertElementPresent(
					key_searchResults = "2 Results for Account A",
					locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
			}
		}

		task ("But if the admin clicks on the second one") {
			Click(locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD");

			Click(
				key_columnOption = "Account A",
				key_row = 2,
				locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_COMPLETE_OPTION_ROW");
		}

		task ("Then again the Organization widget expands and opens the graph to show the entries highlighted with the black color") {
			AssertElementPresent(
				key_entry = "Account A",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			AssertElementNotPresent(
				key_entry = "Account A",
				key_row = 2,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			task ("And the message 1 entities found is present") {
				AssertElementPresent(
					key_searchResults = "1 Result for Account A",
					locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
			}
		}
	}

	@description = "COMMERCE-12582 | Verify that is possibile to search an entity into Organization Management Widget and that the position change based on the entity searched"
	@priority = 4
	test CanSearchOneEntityIntoOrganizationManagement {
		property portal.acceptance = "false";

		task ("Given a setup scenario is created for the Organization Management Widget") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account A",
				accountEntryType = "Business");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account A",
				userEmailAddress = "admin@liferay.com",
				userFirstName = "admin",
				userLastName = "admin",
				userScreenName = "admin");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Account A",
				organizationName = "Org 1");
		}

		task ("And the admin goes to the widget page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("When the admin search 'admin'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "admin");
		}

		task ("Then the Organization widget expands and opens the graph to show the entry highlighted with the black color") {
			var first_position = selenium.getAttribute("//div[contains(@class,'org-chart-container')]//*[name()='svg']//*[name()='g']@transform");

			var first_zoom_level = StringUtil.extractLast(${first_position}, "scale");

			Click(
				key_columnOption = "admin",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			// Pausing 5 seconds need it for giving the time to actually change the position COMMERCE-12430

			Pause(locator1 = 5000);

			var second_position = selenium.getAttribute("//div[contains(@class,'org-chart-container')]//*[name()='svg']//*[name()='g']@transform");
			var second_zoom_level = StringUtil.extractLast(${first_position}, "scale");

			if (${first_position} != ${second_position}) {
				echo("The position is changed (expected behaviour)");
			}
			else {
				fail("The position is not changed the expected position it must be different from ${first_position}");
			}

			if (${first_zoom_level} == ${second_zoom_level}) {
				echo("The zoom is still the same (expected behaviour)");
			}
			else {
				fail("The expected zoom must be the same from ${first_zoom_level}");
			}

			AssertElementPresent(
				key_entry = "admin admin",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}
	}

	@description = "COMMERCE-12583 | Verify that is possibile to search an entity two times in a row"
	@priority = 5
	test CanSearchTwoTimesInRowTheSameEntityIntoOrganizationManagement {
		property portal.acceptance = "true";

		task ("Given a setup scenario is created for the Organization Management Widget") {
			for (var organizationAccountEntries : list "Org 1:Account A,Org 2:Account B") {
				var organization = StringUtil.extractFirst(${organizationAccountEntries}, ":");
				var account = StringUtil.extractLast(${organizationAccountEntries}, ":");

				JSONOrganization.addOrganization(
					organizationName = ${organization},
					organizationSite = "false");

				JSONAccountEntry.addAccountEntry(
					accountEntryName = ${account},
					accountEntryType = "Business");

				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${account},
					organizationName = ${organization});
			}
		}

		task ("And the admin goes to the widget page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("When the admin search 'Org 1'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Org 1");
		}

		task ("And the Organization widget shows the entry highlighted with the black color") {
			Click(
				key_columnOption = "Org 1",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			AssertElementPresent(
				key_entry = "Org 1",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}

		task ("When the admin searches again 'Org 1' without clears the field") {
			Click(
				key_entry = "Org 2",
				locator1 = "CommerceOrganizationManagementWidget#CHART_ENTRY");

			Click(locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD");

			Click(
				key_columnOption = "Org 1",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then the Organization widget shows the entry highlighted with the black color") {
			AssertElementPresent(
				key_entry = "Org 1",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}

		task ("When the admin search 'Account B'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Account B");

			Click(
				key_columnOption = "Account B",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then the Organization widget shows the entry highlighted with the black color") {
			AssertElementPresent(
				key_entry = "Account B",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}

		task ("But if the admin remove the focus on the highlighted entry") {
			Click(
				key_text = "Collapse All",
				locator1 = "Button#ANY");
		}

		task ("And clears search field again") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Account B");

			Click(
				key_columnOption = "Account B",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then the Organization widget shows the entry highlighted with the black color") {
			AssertElementPresent(
				key_entry = "Account B",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}
	}

	@description = "COMMERCE-12586 | Verify that the select dropdown is working when it used for compile the search field for the searching"
	@priority = 5
	test CanSelectDropdownIsWorkingIntoOrganizationManagement {
		property portal.acceptance = "true";

		task ("Given a setup scenario is created for the Organization Management Widget") {
			for (var organizationEntries : list "Org 1:SubOrg 1,Org 2:SubOrg 2") {
				var organization = StringUtil.extractFirst(${organizationEntries}, ":");
				var subOrganization = StringUtil.extractLast(${organizationEntries}, ":");

				JSONOrganization.addOrganization(
					organizationName = ${organization},
					organizationSite = "false");

				JSONOrganization.addOrganization(
					organizationName = ${subOrganization},
					parentOrganizationName = ${organization});
			}

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And the admin searches 'Org 1'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Org 1");

			Click(
				key_columnOption = "Org 1",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("And the Organization widget show the entry highlighted with the black color") {
			AssertElementPresent(
				key_entry = "Org 1",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}

		task ("And the admin clicks on the highlighted entry (the graph should open after the click and the entry is not highlighted anymore)") {
			Click(
				key_entry = "Org 1",
				locator1 = "CommerceOrganizationManagementWidget#CHART_ENTRY");

			AssertElementNotPresent(
				key_entry = "Org 1",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}

		task ("When the admin searches again for 'Org 1'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Org 1");
		}

		task ("But the admin into the autocomplete clicks for 'Org 2'") {
			Click(
				key_columnOption = "Org 2",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then the select should take the “Org 2“ as a parameter for the search") {

			// Pausing 5 seconds for to be able to test a timing issue that was present into the story COMMERCE-12430

			Pause(locator1 = 5000);

			task ("And highlight 'Org 2' with the black color") {
				AssertElementPresent(
					key_entry = "Org 2",
					locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
			}
		}
	}

	@description = "COMMERCE-12584 | Verify that is possible to use the suggestion into the autocomplete for the searching"
	@priority = 4
	test CanUseAutoSearchSuggestionIntoOrganizationManagement {
		property portal.acceptance = "false";

		task ("And an organization is created and configured") {
			for (var organizationEntries : list "Org 1:SubOrg 1,Org 2:SubOrg 2") {
				var organization = StringUtil.extractFirst(${organizationEntries}, ":");
				var subOrganization = StringUtil.extractLast(${organizationEntries}, ":");

				JSONOrganization.addOrganization(
					organizationName = ${organization},
					organizationSite = "false");

				JSONOrganization.addOrganization(
					organizationName = ${subOrganization},
					parentOrganizationName = ${organization});
			}

			for (var accountList : list "Account A_1,Account B_1,SubOrg 2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = ${accountList},
					accountEntryType = "Business");
			}

			CommerceEntry.addAccountEntryUser(
				accountName = "Account A_2",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "admin@liferay.com",
				userFirstName = "Admin",
				userLastName = "User",
				userScreenName = "adminuser",
				userSiteMembership = "Minium");

			for (var accountList : list "Account A_1,SubOrg 2") {
				JSONAccountEntryUser.addExistUsertoAccount(
					accountEntryName = ${accountList},
					userEmailAddress = "buyer@liferay.com");
			}

			for (var accountList : list "Account A_1,Account A_2") {
				JSONAccountEntry.addAccountEntrySubOrganization(
					accountEntryName = ${accountList},
					parentOrganizationName = "Org 1",
					subOrganizationName = "SubOrg 1");
			}

			for (var accountList : list "Account B_1,SubOrg 2") {
				JSONAccountEntry.addAccountEntrySubOrganization(
					accountEntryName = ${accountList},
					parentOrganizationName = "Org 2",
					subOrganizationName = "SubOrg 2");
			}
		}

		task ("And the admin goes to the widget page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("When the admin searches 'Org'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Org");

			task ("Then the select will show “Org 1” and “Org 2” as the results") {
				for (var organizationName : list "Org 1,Org 2") {
					AssertElementPresent(
						key_columnOption = ${organizationName},
						locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
				}
			}
		}

		task ("When the admin use the exact search") {
			var searchTerm = '''"Or"''';

			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = ${searchTerm});

			task ("Then in case the admin search 'Or' no results will be present") {
				AssertElementPresent(locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_DISABLED");
			}

			task ("But in case the admin search for 'Account B_1'") {
				var searchTerm = '''"Account B_1"''';

				Type(
					locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
					value1 = ${searchTerm});

				task ("Then only one results will be present") {
					AssertElementPresent(
						key_columnOption = "Account",
						key_row = 1,
						locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_COMPLETE_OPTION_ROW");

					AssertElementNotPresent(
						key_columnOption = "Account",
						key_row = 2,
						locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_COMPLETE_OPTION_ROW");
				}
			}
		}

		task ("When the search for the Commerce Account (this one is not present in any organization and is not present in the graph)") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Commerce Account");
		}

		task ("Then is possible to see the account in the select, but if the admin clicks on it, no results will be present") {
			AssertElementPresent(
				key_columnOption = "Commerce Account",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			Click(
				key_columnOption = "Commerce Account",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			AssertElementNotPresent(
				key_entry = "Commerce Account",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");
		}

		task ("And the message “0 entities found” is present") {
			AssertElementPresent(
				key_searchResults = "0 Results for Commerce Account",
				locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
		}

		task ("When the admin search for something that doesn't exist") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Commp");
		}

		task ("Then the message 'No items were be found' is present") {
			AssertElementPresent(locator1 = "CommerceOrganizationManagementWidget#SELECT_AUTO_DISABLED");
		}

		task ("But if the admin searched for 'SubOrg 2'") {
			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "SubOrg 2");
		}

		task ("Then two results will be presented in the select") {
			for (var entryName : list "SubOrg 2 - Organization,SubOrg 2 - Account") {
				AssertElementPresent(
					key_columnOption = ${entryName},
					locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
			}
		}

		task ("When the SubOrg 2 - Organization is selected") {
			Click(
				key_columnOption = "SubOrg 2 - Organization",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then only one entry is found") {
			AssertElementPresent(
				key_entry = "SubOrg 2",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			AssertElementNotPresent(
				key_entry = "SubOrg 2",
				key_row = 2,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			task ("And the message 1 results is present") {
				AssertElementPresent(
					key_searchResults = "1 Result for SubOrg 2",
					locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
			}
		}

		task ("When the SubOrg 2 - Account is selected") {
			Click(locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD");

			Click(
				key_columnOption = "SubOrg 2 - Account",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then only one entry is found") {
			AssertElementPresent(
				key_entry = "SubOrg 2",
				key_row = 1,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			AssertElementNotPresent(
				key_entry = "SubOrg 2",
				key_row = 2,
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY_ROW");

			task ("And the message 1 results is present") {
				AssertElementPresent(
					key_searchResults = "1 Result for SubOrg 2",
					locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
			}
		}
	}

	@description = "COMMERCE-12581 | Verify that the Organization Management Widget is still working even without any entities"
	@priority = 3
	test CanUseOrganizationManagementWithoutAnyEntity {
		property portal.acceptance = "false";

		task ("Given the admin navigates to the Organization Management Widget Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("Then when no entity is present, an alert message is displayed") {
			AssertElementPresent(locator1 = "CommerceOrganizationManagementWidget#ALERT_INFO_MESSAGE");
		}
	}

	@description = "COMMERCE-12825. As a user, I can delete account definetely from Organization Management Chart."
	@priority = 5
	test CanUserDeleteAccountFromOrganizationManagementChart {
		property portal.acceptance = "true";

		task ("Given an organization is created and the account is linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Commerce Account",
				organizationName = "Org 1");
		}

		task ("And the user is given a Regular role and required permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Organization",
				roleTitle = "Power User");

			for (var resourceAction : list "DELETE,UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Power User");
			}
		}

		task ("When the user navigates to the widget page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And deletes the account from Organization Management Chart") {
			CommerceWidget.deleteEntryFromOrganizationManagement(entryName = "Commerce Account");
		}

		task ("Then the account will be deleted definetely both from Organization Management Chart and Account Management") {
			CommerceWidget.clearOrganizationManagementWidgetSearchBar();

			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "Commerce Account");

			AssertElementNotPresent(
				key_columnOption = "Commerce Account",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			LexiconEntry.viewNoEntry(rowEntry = "Commerce Account");
		}
	}

	@description = "COMMERCE-12875. As a user, I can delete another user definetely from Organization Management Chart."
	@priority = 5
	test CanUserDeleteAnotherUserFromOrganizationManagementChart {
		property portal.acceptance = "true";

		task ("Given a second account with a new user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "new@liferay.com",
				userFirstName = "New",
				userLastName = "User",
				userScreenName = "newuser",
				userSiteMembership = "Minium");
		}

		task ("And an organization is created and the accounts are linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			for (var accountNameList : list "Commerce Account,Commerce Account 2") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${accountNameList},
					organizationName = "Org 1");
			}
		}

		task ("And the user is given a Regular role and required permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Organization",
				roleTitle = "Power User");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_users_admin_web_portlet_UsersAdminPortlet",
				roleTitle = "Power User");

			for (var resourceActionList : list "MANAGE_USERS,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionList},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Power User");
			}

			for (var resourceAction : list "DELETE,UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.portal.kernel.model.User",
					roleTitle = "Power User");
			}
		}

		task ("When the user navigates to the widget page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And deletes the user from Organization Management Chart") {
			CommerceWidget.deleteEntryFromOrganizationManagement(entryName = "New User");
		}

		task ("Then the account will be deleted definetely both from Organization Management Chart and from Users and Organizations Page") {
			CommerceWidget.clearOrganizationManagementWidgetSearchBar();

			Type(
				locator1 = "CommerceOrganizationManagementWidget#SEARCH_FIELD",
				value1 = "New User");

			AssertElementNotPresent(
				key_columnOption = "New User",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			User.openUsersAdmin();

			LexiconEntry.viewNoEntry(rowEntry = "New User");
		}
	}

	@description = "COMMERCE-12824. As a user, I can edit account details from Organization Management Chart."
	@priority = 5
	test CanUserEditAccountDetailsFromOrganizationManagementChart {
		property portal.acceptance = "true";

		task ("Given an organization is created and the account is linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Commerce Account",
				organizationName = "Org 1");
		}

		task ("And the user is given a Regular role and required permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Organization",
				roleTitle = "Power User");

			for (var resourceAction : list "DELETE,UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Power User");
			}
		}

		task ("When the user navigates to the widget page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("Then can view current account details") {
			CommerceWidget.viewAccountDetailsAtSidebar(
				accountDescription = "Account Entry Description",
				accountImage = "Default",
				accountName = "Commerce Account",
				accountTaxID = "-",
				accountType = "Business",
				viewCurrentInfo = "true");
		}

		task ("When the user edits account details from Organization Management Chart") {
			CommerceWidget.editAccountFromOrganizationManagement(
				accountDescription = "New Account Description",
				accountERC = "newERC",
				accountImage = "Commerce_Blue.jpg",
				accountName = "Commerce Account",
				accountTaxID = 1234,
				newAccountName = "New Account Name");
		}

		task ("Then the edited fields are saved and shown correctly") {
			CommerceWidget.viewAccountDetailsAtSidebar(
				accountDescription = "New Account Description",
				accountImage = "Custom Image",
				accountName = "New Account Name",
				accountTaxID = 1234,
				accountType = "Business");
		}
	}

	@description = "COMMERCE-12874. As a user, I can edit user information from Organization Management Chart."
	@priority = 5
	test CanUserEditUserInformationFromOrganizationManagementChart {
		property portal.acceptance = "true";

		task ("Given a second account with a new user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "new@liferay.com",
				userFirstName = "New",
				userLastName = "User",
				userScreenName = "newuser",
				userSiteMembership = "Minium");
		}

		task ("And an organization is created and the accounts are linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			for (var accountNameList : list "Commerce Account,Commerce Account 2") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${accountNameList},
					organizationName = "Org 1");
			}
		}

		task ("And the user is given a Regular role and required permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			for (var resourceNameList : list "com.liferay.account.model.AccountEntry,com.liferay.portal.kernel.model.Organization") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "VIEW",
					resourceName = ${resourceNameList},
					roleTitle = "Power User");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_USERS",
				resourceName = "com.liferay.account.model.AccountEntry",
				roleTitle = "Power User");

			for (var resourceAction : list "DELETE,UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.portal.kernel.model.User",
					roleTitle = "Power User");
			}
		}

		task ("When the user navigates to the widget page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("Then can view current account details") {
			CommerceWidget.viewUserInformationAtSidebar(
				userBirthday = "02/01/1970",
				userEmailAddress = "new@liferay.com",
				userFirstName = "New",
				userImage = "Default",
				userJobTitle = "-",
				userLanguage = "English (United States)",
				userLastName = "User",
				userMiddleName = "-",
				userName = "New User",
				userPrefix = "-",
				userScreenName = "newuser",
				userSuffix = "-",
				viewCurrentInfo = "true");
		}

		task ("When the user edits user information from Organization Management Chart") {
			CommerceWidget.editUserInformationFromOrganizationManagement(
				userBirthday = "true",
				userEmailAddress = "new1@liferay.com",
				userFirstName = "New1",
				userImage = "Commerce_Blue.jpg",
				userJobTitle = "Account Manager",
				userLanguage = "Portuguese (Brazil)",
				userLastName = "User1",
				userMiddleName = "Test",
				userPrefix = "Mr",
				userScreenName = "newtestuser1",
				userSuffix = "Jr",
				valueDay = 10,
				valueMonth = "March",
				valueYear = 1998);
		}

		task ("Then the edited fields are saved and shown correctly") {
			CommerceWidget.viewUserInformationAtSidebar(
				userBirthday = "03/10/1998",
				userEmailAddress = "new1@liferay.com",
				userFirstName = "New1",
				userImage = "Custom Image",
				userJobTitle = "Account Manager",
				userLanguage = "Portuguese (Brazil)",
				userLastName = "User1",
				userMiddleName = "Test",
				userName = "New1 Test User1",
				userPrefix = "Mr",
				userScreenName = "newtestuser1",
				userSuffix = "Jr");
		}
	}

	@description = "COMMERCE-12826 . As a user, I can remove account from the organization in Organization Management Chart."
	@priority = 4
	test CanUserRemoveAccountFromOrganization {
		property portal.acceptance = "false";

		task ("Given an organization is created and the account is linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Commerce Account",
				organizationName = "Org 1");
		}

		task ("And the user is given a Regular role and required permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Organization",
				roleTitle = "Power User");

			for (var resourceAction : list "DELETE,UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Power User");
			}
		}

		task ("When the user navigates to the widget page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And removes the account from Organization Management Chart") {
			CommerceWidget.removeAccountFromOrganization(
				accountName = "Commerce Account",
				organizationName = "Org 1");
		}

		task ("Then the account will be removed from the organization") {
			CommerceWidget.clearOrganizationManagementWidgetSearchBar();

			CommerceWidget.searchAndGoToOrganizationManagementWidgetEntry(entryName = "Commerce Account");

			AssertElementNotPresent(
				key_entry = "Commerce Account",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");

			AssertElementPresent(
				key_searchResults = "0 Results for Commerce Account",
				locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
		}
	}

	@description = "COMMERCE-12876. As a user, I can remove user from the account in Organization Management Chart."
	@priority = 4
	test CanUserRemoveAnotherUserFromAccountInOrganizationManagementChart {
		property portal.acceptance = "false";

		task ("Given a second account with a new user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "new@liferay.com",
				userFirstName = "New",
				userLastName = "User",
				userScreenName = "newuser",
				userSiteMembership = "Minium");
		}

		task ("And an organization is created and the accounts are linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			for (var accountNameList : list "Commerce Account,Commerce Account 2") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${accountNameList},
					organizationName = "Org 1");
			}
		}

		task ("And the user is given a Regular role and required permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			for (var resourceNameList : list "com.liferay.account.model.AccountEntry,com.liferay.portal.kernel.model.Organization") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "VIEW",
					resourceName = ${resourceNameList},
					roleTitle = "Power User");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_users_admin_web_portlet_UsersAdminPortlet",
				roleTitle = "Power User");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_USERS",
				resourceName = "com.liferay.account.model.AccountEntry",
				roleTitle = "Power User");

			for (var resourceAction : list "UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.portal.kernel.model.User",
					roleTitle = "Power User");
			}
		}

		task ("When the user navigates to the widget page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");
		}

		task ("And removes the user from the account in Organization Management Chart") {
			CommerceWidget.removeUserFromAccount(
				accountName = "Commerce Account 2",
				userName = "New User");
		}

		task ("Then the user will be removed from the account") {
			CommerceWidget.clearOrganizationManagementWidgetSearchBar();

			CommerceWidget.searchAndGoToOrganizationManagementWidgetEntry(entryName = "New User");

			AssertElementNotPresent(
				key_entry = "New User",
				locator1 = "CommerceOrganizationManagementWidget#CHART_DISCOVERED_ENTRY");

			AssertElementPresent(
				key_searchResults = "0 Results for New User",
				locator1 = "CommerceOrganizationManagementWidget#CHART_SEARCH_RESULTS");
		}

		task ("But the user is not deleted definetely from the system") {
			User.openUsersAdmin();

			LexiconEntry.viewEntryName(rowEntry = "New User");
		}
	}

	@description = "COMMERCE-12823. As a user, I can view options as Edit, Delete, Remove, View for account in Organization Management Chart if the necessary permissions are given."
	@priority = 5
	test CanUserViewActionOptionsForAccountInOrganizationManagementChart {
		property portal.acceptance = "true";

		task ("Given an organization is created and the account is linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "Commerce Account",
				organizationName = "Org 1");
		}

		task ("And the user is given a Regular role and View permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			for (var resourceNameList : list "com.liferay.account.model.AccountEntry,com.liferay.portal.kernel.model.Organization") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "VIEW",
					resourceName = ${resourceNameList},
					roleTitle = "Power User");
			}
		}

		task ("When the user navigates to the widget page clicking the account's ellipsis") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");

			CommerceWidget.searchAndGoToOrganizationManagementWidgetEntry(entryName = "Commerce Account");

			Click(
				key_nodeName = "Commerce Account",
				locator1 = "CommerceOrganizationManagementWidget#VERTICAL_ELLIPSIS");
		}

		task ("Then can verify Edit, Delete and Remove options are not shown to the user without permissions, only View option is shown") {
			for (var menuItem : list "Edit,Delete,Remove") {
				AssertElementNotPresent(
					key_menuItem = ${menuItem},
					locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
			}

			AssertElementPresent(
				key_menuItem = "View",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
		}

		task ("When the necessary permissions are given to the user (Account Entry > View, Update, Delete)") {
			for (var resourceAction : list "DELETE,UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Power User");
			}

			Refresh();
		}

		task ("Then can verify Edit, Delete, Remove and View options are shown") {
			CommerceWidget.searchAndGoToOrganizationManagementWidgetEntry(entryName = "Commerce Account");

			Click(
				key_nodeName = "Commerce Account",
				locator1 = "CommerceOrganizationManagementWidget#VERTICAL_ELLIPSIS");

			for (var menuItem : list "Edit,Delete,Remove,View") {
				AssertElementPresent(
					key_menuItem = ${menuItem},
					locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
			}
		}
	}

	@description = "COMMERCE-12873. As a user, I can view options as Edit, Delete, Remove, View for user in Organization Management Chart if the necessary permissions are given."
	@priority = 5
	test CanUserViewActionOptionsForUserInOrganizationManagementChart {
		property portal.acceptance = "true";

		task ("Given a second account with a new user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "new@liferay.com",
				userFirstName = "New",
				userLastName = "User",
				userScreenName = "newuser",
				userSiteMembership = "Minium");
		}

		task ("And an organization is created and the accounts are linked to it") {
			JSONOrganization.addOrganization(
				organizationName = "Org 1",
				organizationSite = "false");

			for (var accountNameList : list "Commerce Account,Commerce Account 2") {
				JSONAccountEntry.addAccountEntryOrganization(
					accountEntryName = ${accountNameList},
					organizationName = "Org 1");
			}
		}

		task ("And the buyer user is given a Regular role and View permissions are given to that role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "buyer@liferay.com");

			for (var resourceNameList : list "com.liferay.account.model.AccountEntry,com.liferay.portal.kernel.model.Organization,com.liferay.portal.kernel.model.User") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "VIEW",
					resourceName = ${resourceNameList},
					roleTitle = "Power User");
			}
		}

		task ("When the buyer user navigates to the widget page clicking the new user's ellipsis") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Organization Management Widget Page");

			CommerceWidget.searchAndGoToOrganizationManagementWidgetEntry(entryName = "New User");

			Click(
				key_nodeName = "New User",
				locator1 = "CommerceOrganizationManagementWidget#VERTICAL_ELLIPSIS");
		}

		task ("Then can verify Edit, Delete and Remove options are not shown to the user without permissions, only View option is shown") {
			for (var menuItem : list "Edit,Delete,Remove") {
				AssertElementNotPresent(
					key_menuItem = ${menuItem},
					locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
			}

			AssertElementPresent(
				key_menuItem = "View",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
		}

		task ("When the necessary permissions are given to the user (User > View, Update, Delete)") {
			for (var resourceAction : list "DELETE,UPDATE,VIEW,") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceAction},
					resourceName = "com.liferay.portal.kernel.model.User",
					roleTitle = "Power User");
			}

			Refresh();
		}

		task ("Then can verify Edit, Delete, Remove and View options are shown") {
			CommerceWidget.searchAndGoToOrganizationManagementWidgetEntry(entryName = "New User");

			Click(
				key_nodeName = "New User",
				locator1 = "CommerceOrganizationManagementWidget#VERTICAL_ELLIPSIS");

			for (var menuItem : list "Edit,Delete,Remove,View") {
				AssertElementPresent(
					key_menuItem = ${menuItem},
					locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
			}
		}
	}

	@description = "COMMERCE-9399. Verify organizations can be viewed in the Organization Management widget."
	@priority = 3
	test CanViewOrganizationWidget {
		property portal.acceptance = "false";

		task ("Setup: Add an organization") {
			JSONOrganization.addOrganization(
				organizationName = "Organization 1",
				organizationSite = "false");
		}

		task ("When the Organization Management Widget Page is reached") {
			CommerceWidget.openOrganizationWidget();
		}

		task ("Then the organization is shown within the widget") {
			CommerceWidget.assertOrganizationManagementWigetTitlePresent(key_nodeName = "Organization 1");
		}
	}

}