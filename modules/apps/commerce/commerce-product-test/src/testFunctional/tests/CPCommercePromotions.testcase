@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12302 | Verify that is possible to see the created UOMs in the item finder for Promotion"
	@priority = 4
	test CanItemFinderShowsUOMPromotion {
		property portal.acceptance = "false";

		task ("Given a Minium site with 2 UOMs is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				productSKU = "MIN93015",
				uomKey = "Liter",
				uomName = "Liter");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				productSKU = "MIN93015",
				uomKey = "Gallon",
				uomName = "Gallon");
		}

		task ("And the admin uses the item search for the Promotion") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			Type(
				key_title = "Add SKUs",
				locator1 = "CommerceEntry#ADD_RELATION_FIELD",
				value1 = "MIN93015");

			while ((IsElementNotPresent(key_entryName = "MIN93015", key_title = "Add SKUs", locator1 = "CommerceEntry#ADD_RELATION_FIELD_SELECT")) && (maxIterations = "5")) {
				echo("The element is not present, retrying...");

				Click(locator1 = "WorkflowMetricsProcessListView#METRICS_WORKFLOW_SEARCH_BAR_BUTTON");

				Type(
					key_title = "Add SKUs",
					locator1 = "CommerceEntry#ADD_RELATION_FIELD",
					value1 = "MIN93015");
			}
		}

		task ("Then is possible to see all the created UOMs for a particular SKU") {
			for (var rowList : list "Liter:1,Gallon:2") {
				var entry = StringUtil.extractFirst(${rowList}, ":");
				var row = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entry = ${entry},
					key_rowNumber = ${row},
					locator1 = "CommerceEntry#ENTRY_CONTENT_ROW_NUMBER_DATASET");

				echo("The UOM ${entry} at the ${row} is present");
			}
		}
	}

	@description = "This is a test for COMMERCE-10053. An error message shows up when the eligibility element is already linked"
	@priority = 3
	test CannotSelectPromotionEligibilitiesTwice {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a business account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}

		task ("And an order type is created") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeName = "Order Type Test");
		}

		task ("And a promotion is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("When the admin navigates to the promotion's entry") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion");
		}

		task ("And sets the eligibilities for the promotion") {
			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(
				accountsEligibility = "Commerce Account",
				channelsEligibility = "Minium Portal",
				orderTypesEligibility = "Order Type Test");
		}

		task ("And sets again the same eligibility for channel") {
			CommerceEntry.setEntryEligibility(
				channelsEligibility = "Minium Portal",
				unpublish = "true");
		}

		task ("Then an error message shows up") {
			Alert.viewErrorMessage(errorMessage = "The channel relation already exists.");
		}

		task ("When the admin sets again the same eligibility for account") {
			CommerceEntry.setEntryEligibility(
				accountsEligibility = "Commerce Account",
				unpublish = "true");
		}

		task ("Then an error message shows up") {
			Alert.viewErrorMessage(errorMessage = "The account relation already exists.");
		}

		task ("When the admin sets again the same eligibility for order type") {
			CommerceEntry.setEntryEligibility(
				orderTypesEligibility = "Order Type Test",
				unpublish = "true");
		}

		task ("Then an error message shows up") {
			Alert.viewErrorMessage(errorMessage = "The order type relation already exists.");
		}
	}

}