@component-name = "portal-commerce"
definition {

	property custom.properties = "company.security.strangers.verify=false${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12467. As a user, I can verify all of the UOM and Tier Price combinations for Brake Fluid that has multiple SKUs are shown correctly."
	@priority = 5
	test CanVerifyDifferentTableViewsForMultipleSKUsProduct {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And 2 UOMs are created for MIN93016A with different pricing configurations") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 3,
				productSKU = "MIN93016A",
				uomKey = "Lt",
				uomName = "Liter");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				productSKU = "MIN93016A",
				uomKey = "Bt",
				uomName = "Bottle");

			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 5,
				price = 45,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93016A",
				unitOfMeasureKey = "Bt");

			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 10,
				price = 80,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93016A",
				unitOfMeasureKey = "Bt");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93016A");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Lt",
				menuItem = "Edit");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And 3 tier prices are created for MIN93016C") {
			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 15,
				price = 200,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93016C");

			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 25,
				price = 320,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93016C");

			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 50,
				price = 600,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93016C");
		}

		task ("When admin navigates to the product details page of Brake Fluid") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/brake-fluid");
		}

		task ("Then can verify the table information with UOMs is shown correctly for MIN93016A") {
			for (var fieldValue : list "Liter,Lt,1,Price on Application") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 1,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,1,$ 10.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 2,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,5,$ 45.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 3,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,10,$ 80.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 4,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}
		}

		task ("When goes to the option value 48 for MIN93016B") {
			FrontStore.selectAssociatedFSOptionsValue(
				fsOptionName = "Package Quantity",
				fsOptionValue = 48);
		}

		task ("Then can verify no table is shown but only the regular price information is visible for MIN93016B") {
			for (var tableHeader : list "Unit,Key,Quantity,Net Price") {
				AssertElementNotPresent(
					key_columnName = ${tableHeader},
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_HEADER");
			}

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
				value1 = "$ 80.00");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
				value1 = "$ 72.00");
		}

		task ("When goes to the option value 112 for MIN93016C") {
			FrontStore.selectAssociatedFSOptionsValue(
				fsOptionName = "Package Quantity",
				fsOptionValue = 112);
		}

		task ("Then can verify the table with tier prices is shown correctly for MIN93016C") {
			for (var fieldValue : list "1,$ 80.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 1,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "15,$ 200.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 2,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "25,$ 320.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 3,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "50,$ 600.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 4,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}
		}
	}

	@description = "COMMERCE-12465. As a user, I can verify no table is shown when there is only one UOM without a tier price on the product details page."
	@priority = 4
	test CanVerifyNoTableisShownForSingleUOMWithoutTierPrice {
		property portal.acceptance = "false";

		task ("Given a Minium site with a UOM are created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				productSKU = "MIN93015",
				uomKey = "Bt",
				uomName = "Bottle");
		}

		task ("When admin navigates to the product details page of ABS Sensor") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then can verify no table is shown on the product details page") {
			for (var tableHeader : list "Unit,Key,Quantity,Net Price") {
				AssertElementNotPresent(
					key_columnName = ${tableHeader},
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_HEADER");
			}
		}

		task ("And can verify the preselected UOM and price information of the product") {
			AssertSelectedLabel(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "Bottle");

			FrontStore.assertProductDetails(
				productListPrice = "10.00",
				productName = "ABS Sensor",
				productSKU = "MIN93015");
		}
	}

	@description = "COMMERCE-12468. As a user, I can verify the table is updated correctly if UOM or Tier Prices are edited and deleted."
	@priority = 5
	test CanVerifyTableUpdatedAfterEditingAndDeletingUOMsAndTierPrices {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And 2 UOMs are created for MIN93015 with 2 tier prices and 1 bulk price for one of them") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 3,
				incrementalOrderQuantity = "3.5",
				productSKU = "MIN93015",
				uomKey = "Lt",
				uomName = "Liter");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				productSKU = "MIN93015",
				uomKey = "Bt",
				uomName = "Bottle");

			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 5,
				price = 45,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93015",
				unitOfMeasureKey = "Bt");

			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 10,
				price = 80,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93015",
				unitOfMeasureKey = "Bt");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Bt",
				menuItem = "Edit");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 40,
				key_value = 700);
		}

		task ("When admin navigates to the product details page of ABS Sensor") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then can verify the price table on the product details page with respective information") {
			for (var fieldValue : list "Liter,Lt,3.5,$ 3.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 1,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,1,$ 10.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 2,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,5,$ 45.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 3,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,10,$ 80.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 4,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,40,$ 700.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 5,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}
		}

		task ("When the UOM without tier price is deleted and one of the tier prices of the other UOM is edited") {
			CommerceJSONSKUsAPI._deleteCommerceSkuUom(
				productSKU = "MIN93015",
				uomKey = "Lt");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Bt",
				menuItem = "Edit");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "$ 45.00",
				menuItem = "Edit");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Type(
				key_text = "Quantity",
				locator1 = "TextInput#ANY",
				value1 = "2.5");

			Type(
				key_text = "Tier Price",
				locator1 = "TextInput#ANY",
				value1 = 210);

			Button.clickSave();

			Alert.viewErrorMessage(errorMessage = "Error:The specified quantity is not allowed.");

			Type(
				key_text = "Quantity",
				locator1 = "TextInput#ANY",
				value1 = 25);

			Type(
				key_text = "Tier Price",
				locator1 = "TextInput#ANY",
				value1 = 210);

			Button.clickSave();
		}

		task ("Then can verify the price table on the product details page is updated correctly") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");

			for (var fieldValue : list "Bottle,Bt,1,$ 10.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 1,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,10,$ 80.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 2,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,25,$ 210.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 3,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Bottle,Bt,40,$ 700.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 4,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			var index = 1;

			for (var fieldValue : list "Liter,Lt,3.5,$ 3.00") {
				AssertElementNotPresent(
					key_fieldValue = ${fieldValue},
					key_index = ${index},
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");

				var index = ${index} + 1;
			}
		}
	}

	@description = "COMMERCE-12464. As a user, I can verify table with unitOfMeasureName, unitOfMeasureKey, quantity and net price information on product details page."
	@priority = 4
	test CanVerifyTableWithMultipleUOMsAndBasePriceInformation {
		property portal.acceptance = "false";

		task ("Given a Minium site with 3 UOMs are created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceJSONSKUsAPI._addCommerceUOM(
				active = "false",
				basePrice = 3,
				productSKU = "MIN93015",
				uomKey = "Lt",
				uomName = "Liter");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				productSKU = "MIN93015",
				uomKey = "Bt",
				uomName = "Bottle");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 55,
				productSKU = "MIN93015",
				uomKey = "Cr",
				uomName = "Carrier");
		}

		task ("When admin navigates to the product details page of ABS Sensor") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then can verify the price table on the product details page with respective information") {
			for (var tableHeader : list "Unit,Key,Quantity,Net Price") {
				AssertElementPresent(
					key_columnName = ${tableHeader},
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_HEADER");
			}

			for (var fieldValue : list "Bottle,Bt,1,$ 10.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 1,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "Carrier,Cr,1,$ 55.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 2,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			var index = 1;

			for (var fieldValue : list "Liter,Lt,1,$ 3.00") {
				AssertElementNotPresent(
					key_fieldValue = ${fieldValue},
					key_index = ${index},
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");

				var index = ${index} + 1;
			}
		}
	}

	@description = "COMMERCE-12466. As a user, I can verify the table is shown with the respective quantities and tier/bulk prices on product details page even  when there is no UOM set for the SKU."
	@priority = 4
	test CanVerifyTableWithTierAndBulkPricesWhenNoUOMIsPresent {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And 2 tier price entries and 1 bulk price entry are added to ABS Sensor") {
			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 5,
				price = 240,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93015");

			CommerceJSONPriceListsAndPromotionsAPI._addTierPriceEntry(
				minimumQuantity = 10,
				price = 450,
				priceListName = "Minium Base Price List",
				productSKU = "MIN93015");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 20,
				key_value = 900);
		}

		task ("When admin navigates to the product details page of ABS Sensor") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then can verify the table shows only Quantity and Net Price on the product details page") {
			for (var tableHeader : list "Quantity,Net Price") {
				AssertElementPresent(
					key_columnName = ${tableHeader},
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_HEADER");
			}

			for (var tableHeader : list "Unit,Key") {
				AssertElementNotPresent(
					key_columnName = ${tableHeader},
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_HEADER");
			}

			for (var fieldValue : list "1,$ 50.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 1,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "5,$ 240.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 2,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "10,$ 450.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 3,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}

			for (var fieldValue : list "20,$ 900.00") {
				AssertElementPresent(
					key_fieldValue = ${fieldValue},
					key_index = 4,
					locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_TABLE_FIELD_ENTRY");
			}
		}
	}

}