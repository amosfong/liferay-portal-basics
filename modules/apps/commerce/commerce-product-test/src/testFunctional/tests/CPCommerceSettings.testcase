@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Test for COMMERCE-11974 | Verify that is not possible to perform XSS attack by injecting malicious script in Addressess"
	@priority = 5
	test CannotExecuteXSSInAddresses {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And Commerce Addresses widget is deployed on Minium's Catalog page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			CommerceAcceleratorsInitializer.addPortlet(portletName = "Commerce Addresses");
		}

		task ("And a business account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");
		}

		task ("When a billing and a shipping addresses with the XSS are created for the account") {
			for (var address : list "billing,shipping") {
				var city = "<script>alert('${address}-city')</script>";
				var name = "<script>alert('${address}-name')</script>";
				var street1 = "<script>alert('${address}-street-1')</script>";
				var street2 = "<script>alert('${address}-street-2')</script>";
				var street3 = "<script>alert('${address}-street-3')</script>";
				var zip = "<script>alert('${address}-zip')</script>";

				if (${address} == "billing") {
					var type = 1;
				}
				else if (${address} == "shipping") {
					var type = 3;
				}

				CommerceJSONAccountsAPI._addCommerceAccountAddress(
					accountEntryName = "Commerce Account",
					city = ${city},
					countryISOCode = "US",
					name = ${name},
					street1 = ${street1},
					street2 = ${street2},
					street3 = ${street3},
					type = ${type},
					zip = ${zip});
			}
		}

		task ("Then the injected script is not executed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertAlertNotPresent();
		}

		task ("When an order is created with the XSS addresses") {
			var billingAddressName = "<script>alert(billing-name)</script>";
			var shippingAddressName = "<script>alert(shipping-name)</script>";

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = ${billingAddressName},
				cartItems = "MIN55861:5",
				shippingAddressName = ${shippingAddressName},
				shippingOption = "Standard Delivery");
		}

		task ("Then in the Orders UI the injected script is not executed") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Open");

			AssertAlertNotPresent();
		}
	}

	@description = "This is a test for COMMERCE-11451. CanViewLanguageTagsForCategoryOnSitemapPage. Verify that the sitemap contain the URL for the translated category friendly URL"
	@priority = 5
	test CanViewLanguageTagsForCategoryOnSitemapPage {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given an account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce",
				accountEntryType = "Business");
		}

		task ("And a new widget page with the Category Content is created") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page",
				widgetName = "Category Content");
		}

		task ("And a category friendly URL is translated") {
			Category.openCategoriesAdmin(siteURLKey = "global");

			Navigator.gotoNavNested(navNested = "Minium");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Brake System");

			Navigator.gotoNavUnderline(navUnderline = "Friendly URL");

			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "ca-ES");

			Type(
				key_fieldLabel = "Friendly URL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "system-brake-es");

			PortletEntry.save();
		}

		task ("And Uuid is acquired") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Minium",
				site = "true");
			var basePortalURL = PropsUtil.get("portal.url");

			Open.openNoError(value1 = "${basePortalURL}/sitemap.xml?groupId=${groupId}");

			var responseToParse = CommerceJSONProductsAPI._getCommerceFieldValue(
				field = "uuid",
				groupName = "Minium",
				title = "Widget Page");
		}

		task ("When the widget page sitemap link is opened") {
			var uuid = JSONUtil.getWithJSONPath(${responseToParse}, "$..['items'][0].uuid");

			var link = selenium.getHtmlNodeText("//*[contains(text(),'${uuid}')][1]");

			Open.openNoErrorNoSPARefresh(value1 = ${link});
		}

		task ("Then the default and translated category friendly URL are shown") {
			for (var categoryNameList : list "brake-system:,system-brake-es:ca") {
				var categoryName = StringUtil.extractFirst(${categoryNameList}, ":");
				var categoryNameLanguage = StringUtil.extractLast(${categoryNameList}, ":");

				if (${categoryNameLanguage} == "") {
					AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
						key_basePortalURL = ${basePortalURL},
						key_categoryName = ${categoryName},
						locator1 = "CommerceEntry#CATEGORY_SITEMAP_URL");
				}
				else {
					AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
						key_basePortalURL = ${basePortalURL},
						key_categoryName = ${categoryName},
						key_language = ${categoryNameLanguage},
						locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL");
				}
			}

			for (var categoryURLName : list "brake-system,system-brake-es") {
				for (var categoryNameList : list "brake-system:en-US,system-brake-es:ca-ES") {
					var categoryName = StringUtil.extractFirst(${categoryNameList}, ":");
					var categoryNameLang = StringUtil.extractLast(${categoryNameList}, ":");

					if (${categoryURLName} == "brake-system") {
						if (${categoryName} == "system-brake-es") {
							var categoryLanguage = "/ca";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								key_languageHref = ${categoryLanguage},
								key_languageLoc = "",
								locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								locator1 = "CommerceEntry#CATEGORY_SITEMAP_URL_HREF_HREFLANG");
						}
					}
					else {
						if (${categoryName} == "system-brake-es") {
							var categoryLanguage = "/ca";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								key_languageHref = ${categoryLanguage},
								key_languageLoc = ${categoryLanguage},
								locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								key_languageHref = "",
								key_languageLoc = ${categoryLanguage},
								locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL_HREF_HREFLANG");
						}
					}
				}
			}

			Open.openNoErrorNoSPARefresh(value1 = ${basePortalURL});
		}
	}

	@description = "This is a test for COMMERCE-11452. CanViewSubcategoryForCategoryOnSitemapPage. Verify that the sitemap contain the URL for the subcategory"
	@priority = 5
	test CanViewSubcategoryForCategoryOnSitemapPage {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given an account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce",
				accountEntryType = "Business");
		}

		task ("And a new widget page with the Category Content is created") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page",
				widgetName = "Category Content");
		}

		task ("And a subcategory is created") {
			Category.openCategoriesAdmin(siteURLKey = "global");

			Subcategory.addCP(
				categoryName = "Brake System",
				subcategoryName = "System Brake Sub Category",
				vocabularyName = "Minium");
		}

		task ("And Uuid is acquired") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Minium",
				site = "true");
			var basePortalURL = PropsUtil.get("portal.url");

			Open.openNoError(value1 = "${basePortalURL}/sitemap.xml?groupId=${groupId}");

			var responseToParse = CommerceJSONProductsAPI._getCommerceFieldValue(
				field = "uuid",
				groupName = "Minium",
				title = "Widget Page");
		}

		task ("When the widget page sitemap link is opened") {
			var uuid = JSONUtil.getWithJSONPath(${responseToParse}, "$..['items'][0].uuid");

			var link = selenium.getHtmlNodeText("//*[contains(text(),'${uuid}')][1]");

			Open.openNoErrorNoSPARefresh(value1 = ${link});
		}

		task ("Then both the category and subcategoty URL are shown") {
			for (var subCategoryName : list "brake-system,system-brake-sub-category") {
				AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
					key_basePortalURL = ${basePortalURL},
					key_categoryName = ${subCategoryName},
					locator1 = "CommerceEntry#CATEGORY_SITEMAP_URL");
			}

			Open.openNoErrorNoSPARefresh(value1 = ${basePortalURL});
		}
	}

	@priority = 5
	test CreateNewAvailabilityEstimate {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Availability Estimates");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewAvailabilityEstimatesEntry(entryName = "New Availability Estimate");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@priority = 5
	test CreateNewMeasurementUnits {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Settings",
			portlet = "Measurement Units");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDimensionUnit(entryName = "New Dimension Unit");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Weight");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewWeightUnit(entryName = "New Weight Unit");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test to check the instance currencies available"
	@priority = 5
	test ViewInstanceCurrenciesAvailable {
		property environment.acceptance = "true";
		property operating.system.types = "alpine,amazonlinux,centos,debian,fedora,orcllinux,osx,redhat,rockylinux,solaris,suse,ubuntu,windows";
		property portal.acceptance = "true";
		property portal.upstream = "true";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Currencies");

		CommerceEntry.viewCurrenciesEntry(currenciesList = "US Dollar,Australian Dollar,British Pound,Canadian Dollar,Chinese Yuan Renminbi,Euro,Hong Kong Dollar,Japanese Yen,Indian Rupee,Brazilian Real");
	}

}