@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6030. AddAnAttachment"
	@priority = 3
	test AddAnAttachment {
		property portal.acceptance = "false";

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addAttachmentImages(imageTitles = "Black");
	}

	@description = "This is a test for COMMERCE-6032. AddAnAttachmentToAnOption"
	@ignore = "true"
	@priority = 3
	test AddAnAttachmentToAnOption {

		// TODO COMMERCE-6032 AddAnAttachmentToAnOption

	}

	@description = "This is a test for COMMERCE-6025. AddAnImage"
	@priority = 3
	test AddAnImage {
		property portal.acceptance = "false";

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			validationImage = "true");
	}

	@description = "This is a test for COMMERCE-6028. AddAnImageToAnOption"
	@priority = 5
	test AddAnImageToAnOption {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			facetable = "true",
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color",
			required = "true",
			skuContributor = "true");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CPCommerceCatalog.addOptionValues(
			optionEntryName = "Color",
			optionValuesList = "Black:1");

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Color",
			title = "Add Option");

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			optionValue = "Black",
			validationImage = "true");

		Alert.viewSuccessMessage();
	}

	@description = "COMMERCE-12853 | Verify that is possible to add tags to the attachments and remove it"
	@priority = 5
	test CanAddAndRemoveTagsForAttachments {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin opens the product ABS Sensor") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");
		}

		task ("And the admin adds some tags for an attachment") {
			CommerceEntry.gotoMenuTab(menuTab = "Media");

			CommerceProductImages.addAttachmentImages(
				imageTitles = "Black",
				tags = "featured,fnew_tag");
		}

		task ("Then the tags are correctly added") {
			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			for (var tagNameList : list "featured,fnew_tag") {
				AssertElementPresent(
					key_tagName = ${tagNameList},
					locator1 = "CommerceEntry#IMAGE_TAG");
			}
		}

		task ("But when the admin removes a tag") {
			Click(
				key_tagName = "fnew_tag",
				locator1 = "CommerceEntry#REMOVE_IMAGE_TAG");

			CommerceEntry.publishProductImage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("Then the tag is removed") {
			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_tagName = "featured",
				locator1 = "CommerceEntry#IMAGE_TAG");

			AssertElementNotPresent(
				key_tagName = "fnew_tag",
				locator1 = "CommerceEntry#IMAGE_TAG");
		}

		task ("But if the admin tries to add a tag by using the 'Select' button") {
			Click(
				key_text = "Select",
				locator1 = "Button#ANY");

			SelectFrame.selectFrameNoLoading(
				key_title = "Tags",
				locator1 = "IFrame#MODAL_ANY");

			task ("Then the admin can add a tag again") {
				Click(
					key_columnName = "name",
					key_tableEntry = "fnew_tag",
					locator1 = "LexiconTable#TABLE_ENTRY_INFO_CHECKBOX");

				SelectFrameTop();

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				Button.click(button = "Done");

				CommerceEntry.publishProductImage();

				Click(locator1 = "Icon#CLOSE");

				SelectFrame.selectFrameTop();

				CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				for (var tagNameList : list "featured,fnew_tag") {
					AssertElementPresent(
						key_tagName = ${tagNameList},
						locator1 = "CommerceEntry#IMAGE_TAG");
				}
			}
		}

		task ("When the admin use the 'Clear all' button") {
			Click(locator1 = "CommerceEntry#REMOVE_ALL_IMAGE_TAG");

			CommerceEntry.publishProductImage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			task ("Then all the tags will be removed") {
				for (var tagNameList : list "featured,fnew_tag") {
					AssertElementNotPresent(
						key_tagName = ${tagNameList},
						locator1 = "CommerceEntry#IMAGE_TAG");
				}
			}
		}

		task ("But if the admin uses the dropdown to add a tag") {
			Type(
				locator1 = "ACSettings#INVITE_USERS_INPUT",
				value1 = "f");

			for (var rowList : list "featured,fnew_tag") {
				AssertElementPresent(
					key_columnOption = ${rowList},
					locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
			}

			Type(
				locator1 = "ACSettings#INVITE_USERS_INPUT",
				value1 = "fn");

			AssertElementPresent(
				key_columnOption = "fnew_tag",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			AssertElementNotPresent(
				key_columnOption = "featured",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			Click(
				key_columnOption = "fnew_tag",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			CommerceEntry.publishProductImage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			task ("Then the tag 'fnew_tag' is present") {
				AssertElementPresent(
					key_tagName = "fnew_tag",
					locator1 = "CommerceEntry#IMAGE_TAG");

				AssertElementNotPresent(
					key_tagName = "featured",
					locator1 = "CommerceEntry#IMAGE_TAG");
			}
		}
	}

	@description = "COMMERCE-12852 | Verify that is possible to add tags to the images and remove it"
	@priority = 5
	test CanAddAndRemoveTagsForImages {
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin opens the product ABS Sensor") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");
		}

		task ("And the admin adds some tags for an image") {
			CommerceEntry.gotoMenuTab(menuTab = "Media");

			CommerceProductImages.addProductImages(
				imageTitles = "Black",
				tags = "featured,fnew_tag");
		}

		task ("Then the tags are correctly added") {
			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			for (var tagNameList : list "featured,fnew_tag") {
				AssertElementPresent(
					key_tagName = ${tagNameList},
					locator1 = "CommerceEntry#IMAGE_TAG");
			}
		}

		task ("But when the admin removes a tag") {
			Click(
				key_tagName = "fnew_tag",
				locator1 = "CommerceEntry#REMOVE_IMAGE_TAG");

			CommerceEntry.publishProductImage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("Then the tag is removed") {
			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_tagName = "featured",
				locator1 = "CommerceEntry#IMAGE_TAG");

			AssertElementNotPresent(
				key_tagName = "fnew_tag",
				locator1 = "CommerceEntry#IMAGE_TAG");
		}

		task ("But if the admin tries to add a tag by using the 'Select' button") {
			Click(
				key_text = "Select",
				locator1 = "Button#ANY");

			SelectFrame.selectFrameNoLoading(
				key_title = "Tags",
				locator1 = "IFrame#MODAL_ANY");

			task ("Then the admin can add a tag again") {
				Click(
					key_columnName = "name",
					key_tableEntry = "fnew_tag",
					locator1 = "LexiconTable#TABLE_ENTRY_INFO_CHECKBOX");

				SelectFrameTop();

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				Button.click(button = "Done");

				CommerceEntry.publishProductImage();

				Click(locator1 = "Icon#CLOSE");

				SelectFrame.selectFrameTop();

				CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				for (var tagNameList : list "featured,fnew_tag") {
					AssertElementPresent(
						key_tagName = ${tagNameList},
						locator1 = "CommerceEntry#IMAGE_TAG");
				}
			}
		}

		task ("When the admin uses the 'Clear all' button") {
			Click(locator1 = "CommerceEntry#REMOVE_ALL_IMAGE_TAG");

			CommerceEntry.publishProductImage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			task ("Then all the tags will be removed") {
				for (var tagNameList : list "featured,fnew_tag") {
					AssertElementNotPresent(
						key_tagName = ${tagNameList},
						locator1 = "CommerceEntry#IMAGE_TAG");
				}
			}
		}

		task ("But if the admin uses the dropdown to add a tag") {
			Type(
				locator1 = "ACSettings#INVITE_USERS_INPUT",
				value1 = "f");

			for (var rowList : list "featured,fnew_tag") {
				AssertElementPresent(
					key_columnOption = ${rowList},
					locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
			}

			Type(
				locator1 = "ACSettings#INVITE_USERS_INPUT",
				value1 = "fn");

			AssertElementPresent(
				key_columnOption = "fnew_tag",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			AssertElementNotPresent(
				key_columnOption = "featured",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			Click(
				key_columnOption = "fnew_tag",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");

			CommerceEntry.publishProductImage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			task ("Then the tag 'fnew_tag' is present") {
				AssertElementPresent(
					key_tagName = "fnew_tag",
					locator1 = "CommerceEntry#IMAGE_TAG");

				AssertElementNotPresent(
					key_tagName = "featured",
					locator1 = "CommerceEntry#IMAGE_TAG");
			}
		}
	}

	@description = "This is a test for COMMERCE-12305. The admin can delete a product's attachment via API"
	@priority = 5
	test CanDeleteProductAttachmentViaAPI {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an attachment for ABS Sensor is uploaded via API") {
			var attachment = CommerceUtilities.getConvertedBase64File(file = "Commerce_Black.jpg");

			CommerceJSONProductsAPI._patchCommerceProductAttachmentUsingERC(
				attachment = ${attachment},
				attachmentTitle = "Black T-Shirt",
				productERC = "MIN93015minium-initializer");
		}

		task ("And the attachment is successfully uploaded") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Attachments",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}

		task ("When the admin tries to delete the attachment via API") {
			CommerceJSONProductsAPI._deleteCommerceProductAttachment(
				attachmentName = "Black T-Shirt",
				productName = "ABS Sensor",
				type = "attachment");
		}

		task ("Then the attachment item is successfully removed from the UI") {
			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementNotPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Attachments",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}
	}

	@description = "This is a test for COMMERCE-12304. The admin can delete a product's image via API"
	@priority = 5
	test CanDeleteProductImageViaAPI {
		property portal.acceptance = "true";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an image for ABS Sensor is uploaded via API") {
			var attachment = CommerceUtilities.getConvertedBase64File(file = "Commerce_Black.jpg");

			CommerceJSONProductsAPI._patchCommerceProductImageUsingERC(
				attachment = ${attachment},
				contentType = "image/png",
				imageTitle = "Black T-Shirt",
				productERC = "MIN93015minium-initializer");
		}

		task ("And the image is successfully uploaded") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Images",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}

		task ("When the admin tries to delete the image via API") {
			CommerceJSONProductsAPI._deleteCommerceProductAttachment(
				attachmentName = "Black T-Shirt",
				productName = "ABS Sensor",
				type = "images");
		}

		task ("Then the image item is successfully removed from the UI") {
			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementNotPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Images",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}
	}

	@description = "COMMERCE-12627 Verify that the product details is using the adaptive media"
	@priority = 5
	test CanProductDetailsUseAdaptiveMedia {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a business account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the product image is changed for U-Joint") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			Click(
				key_value = "Minium_ProductImage_64.png",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Delete");

			CommerceProductImages.addProductImages(
				imageTitles = "Black",
				validationImage = "true");
		}

		task ("And the buyer logs on Minium") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When the buyer open the details page for U-Joint") {
			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("Then the product details is using the Adaptive Media") {
			AssertElementPresent(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_PRODUCT_IMAGE");
		}
	}

	@description = "This is a test for COMMERCE-11447. The admin can post an attachment with a custom field to a product via API"
	@priority = 3
	test CanUploadProductAttachmentWithCustomFieldViaAPI {
		property portal.acceptance = "false";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a custom field for Commerce Product Attachments is added") {
			CustomFields.addCP(
				customFieldName = "Text Field",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				modelResource = "com.liferay.commerce.product.model.CPAttachmentFileEntry");
		}

		task ("When an attachment with custom field value for the product ABS Sensor is posted via API") {
			var attachment = CommerceUtilities.getConvertedBase64File(file = "Commerce_Black.jpg");

			CommerceJSONProductsAPI._patchCommerceProductAttachmentUsingERC(
				attachment = ${attachment},
				attachmentTitle = "Commerce_Black.jpg",
				customFieldContent = "Yes",
				customFieldName = "Text Field",
				customFieldType = "Text",
				productERC = "MIN93015minium-initializer");
		}

		task ("Then a new attachment with a custom field value is present on the product ABS Sensor Media tab") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			CommerceEntry.clickTableEntryEditButton(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				locator1 = "TextInput#CUSTOM_FIELD",
				value1 = "Yes");
		}
	}

	@description = "COMMERCE-12773 | Verify that it is possible to use the toggle Shopping Experience Image Gallery to decide which image shows on the storefront product details"
	@priority = 5
	test CanViewImagesCorrectlyByUsingTheShoppingExperienceImageGalleryToggle {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a Minium Site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a new product with an option is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Simple_Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "select",
				optionKey = "package-quantity",
				optionName = "Package Quantity",
				productName = "Simple_Product");
		}

		task ("And open the product admin details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "Simple_Product");
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And disable the toggle Shopping Experience Image Gallery for an image") {
			CommerceEntry.gotoMenuTab(menuTab = "Media");

			CommerceProductImages.addProductImages(
				imageTitles = "Black",
				optionValues = 6,
				shoppingExperienceImageGallery = "false");

			CommerceProductImages.addProductImages(
				imageTitles = "White",
				optionValues = 12,
				shoppingExperienceImageGallery = "true");

			CommerceProductImages.addProductImages(
				imageTitles = "Blue",
				optionValues = 24);
		}

		task ("And the buyer logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When the buyer opens the product details") {
			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Simple_Product");
		}

		task ("Then only two images are present into the gallery") {
			for (var optionValues : list "6,12,24") {
				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${optionValues});

				if (${optionValues} == 24) {
					AssertElementPresent(
						key_fsProductImage = "Blue",
						locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");

					for (var fsProductImage : list "White,Black") {
						AssertElementNotPresent(
							key_fsProductImage = ${fsProductImage},
							locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");
					}
				}
				else {
					AssertElementPresent(
						key_fsProductImage = "White",
						locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");

					for (var fsProductImage : list "Black,Blue") {
						AssertElementNotPresent(
							key_fsProductImage = ${fsProductImage},
							locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");
					}
				}
			}

			for (var fsProductImage : list "White,Blue") {
				AssertElementPresent(
					key_fsProductImage = ${fsProductImage},
					locator1 = "CommerceFrontStore#FS_PRODUCT_THUMBNAIL_IMAGE");
			}

			AssertElementNotPresent(
				key_fsProductImage = "Black",
				locator1 = "CommerceFrontStore#FS_PRODUCT_THUMBNAIL_IMAGE");
		}

		task ("But if the admin enable again the toggle Shopping Experience Image Gallery for all the images") {
			User.logoutPG();

			CommerceLogin.miniumLogin(urlAppend = "web/minium");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "Simple_Product");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			CommerceNavigator.gotoEntry(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Use in Shopping Experience Image Gallery",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			CommerceEntry.publishProductImage();
		}

		task ("Then three images will be presented in the gallery") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Simple_Product");

			for (var optionValues : list "6,12,24") {
				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${optionValues});

				if (${optionValues} == 6) {
					AssertElementPresent(
						key_fsProductImage = "Black",
						locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");

					for (var fsProductImage : list "White,Blue") {
						AssertElementNotPresent(
							key_fsProductImage = ${fsProductImage},
							locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");
					}
				}
				else {
					if (${optionValues} == 12) {
						AssertElementPresent(
							key_fsProductImage = "White",
							locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");

						for (var fsProductImage : list "Black,Blue") {
							AssertElementNotPresent(
								key_fsProductImage = ${fsProductImage},
								locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");
						}
					}
					else {
						AssertElementPresent(
							key_fsProductImage = "Blue",
							locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");

						for (var fsProductImage : list "Black,White") {
							AssertElementNotPresent(
								key_fsProductImage = ${fsProductImage},
								locator1 = "CommerceFrontStore#FS_PRODUCT_MAIN_IMAGE");
						}
					}
				}
			}

			for (var fsProductImage : list "White,Black,White") {
				AssertElementPresent(
					key_fsProductImage = ${fsProductImage},
					locator1 = "CommerceFrontStore#FS_PRODUCT_THUMBNAIL_IMAGE");
			}
		}
	}

	@description = "This is a test for COMMERCE-6031. EditAnAttachment"
	@priority = 3
	test EditAnAttachment {
		property portal.acceptance = "false";

		CustomFields.openCustomFieldAdmin();

		CustomFields.addCP(
			customFieldName = "Custom Field",
			customFieldType = "Text",
			customInputDataType = "Text",
			resourceName = "Product Attachment");

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addAttachmentImages(imageTitles = "Black");

		Click(
			key_value = "Commerce_Black.jpg",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#TITLE",
			value1 = "Commerce_Black_Edit");

		Type(
			locator1 = "TextInput#CUSTOM_FIELD",
			value1 = "Test");

		Button.clickSaveAsDraft();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6027. EditAnImage"
	@priority = 5
	test EditAnImage {
		property portal.acceptance = "true";

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			validationImage = "false");

		Click(
			key_value = "Commerce_Black",
			locator1 = "CommerceEntry#ORDERS_ENTRY_BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#TITLE",
			value1 = "Commerce_Black_Edit");

		Button.clickPublish();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		AssertElementNotPresent(
			key_entryName = "Commerce_Black",
			key_table = "Images",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME_NOT_CONTAINS");

		echo("Commerce_Black is not present");

		AssertElementPresent(
			key_entryName = "Commerce_Black_Edit",
			key_table = "Images",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME_NOT_CONTAINS");

		echo("Commerce_Black_Edit is present");
	}

	@description = "This is a test for COMMERCE-6033. RemoveAnAttachment"
	@priority = 3
	test RemoveAnAttachment {
		property portal.acceptance = "false";

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addAttachmentImages(imageTitles = "Black");

		Alert.viewSuccessMessage();

		Click(
			key_value = "Commerce_Black",
			locator1 = "CommerceEntry#ORDERS_ENTRY_BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			key_entryName = "Commerce_Black",
			key_table = "Attachments",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME");

		echo("Commerce_Black is not present");
	}

	@description = "This is a test for COMMERCE-6026. RemoveAnImage"
	@priority = 3
	test RemoveAnImage {
		property portal.acceptance = "false";

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			validationImage = "true");

		Click(
			key_value = "Commerce_Black",
			locator1 = "CommerceEntry#ORDERS_ENTRY_BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			key_entryName = "Commerce_Black",
			key_table = "Images",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
	}

}