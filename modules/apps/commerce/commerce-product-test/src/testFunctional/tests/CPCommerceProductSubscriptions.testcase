@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-9744 and COMMERCE-9798. The admin can view whether the subscription type that in subscription length field is singular or plural according to the value of the subscription length when the Delivery Subscription is enabled"
	@priority = 3
	test CanViewDeliverySubscriptionTypeFormatInSubscriptionLengthField {
		property portal.acceptance = "false";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin navigates to the Subscription tab in a product ABS Sensor") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Subscription");
		}

		task ("When the Delivery Subscription is enabled") {
			Click(locator1 = "CommerceEntry#DELIVERY_SUBSCRIPTION_TOGGLE");
		}

		task ("Then the default settings(Type:Day,Length:1,Type in Length:Day) are displayed") {
			AssertSelectedLabel(
				key_subscriptionFieldLabel = "Subscription Type",
				key_subscriptionName = "Delivery Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
				value1 = "Day");

			AssertTextEquals(
				key_fieldLabel = "Subscription Length",
				key_indexNumber = 2,
				locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
				value1 = 1);

			AssertTextEquals(
				key_subscriptionFieldLabel = "Subscription Length",
				key_subscriptionName = "Delivery Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_TYPE_IN_LENGTH",
				value1 = "Day");
		}

		task ("When switching all the subscription type fields when 'Subscription Length = 1'") {
			for (var subscriptionType : list "Week,Month,Year") {
				Select(
					key_subscriptionFieldLabel = "Subscription Type",
					key_subscriptionName = "Delivery Subscription",
					locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
					value1 = ${subscriptionType});

				Button.clickPublish();

				task ("Then the subscription type field in Subscription Length is updated accordingly and is singular") {
					AssertTextEquals(
						key_subscriptionFieldLabel = "Subscription Length",
						key_subscriptionName = "Delivery Subscription",
						locator1 = "CommerceEntry#SUBSCRIPTION_TYPE_IN_LENGTH",
						value1 = ${subscriptionType});
				}
			}
		}

		task ("But if switching all the subscription type fields when 'Subscription Length > 1'") {
			Type(
				key_fieldLabel = "Subscription Length",
				key_indexNumber = 2,
				locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
				value1 = 2);

			for (var subscriptionTypeSet : list "Day:Days,Week:Weeks,Month:Months,Year:Years") {
				var subscriptionType = StringUtil.extractFirst(${subscriptionTypeSet}, ":");
				var subscriptionTypeInLength = StringUtil.extractLast(${subscriptionTypeSet}, ":");

				Select(
					key_subscriptionFieldLabel = "Subscription Type",
					key_subscriptionName = "Delivery Subscription",
					locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
					value1 = ${subscriptionType});

				Button.clickPublish();

				task ("Then the subscription type field in Subscription Length is updated accordingly and is plural") {
					AssertTextEquals(
						key_subscriptionFieldLabel = "Subscription Length",
						key_subscriptionName = "Delivery Subscription",
						locator1 = "CommerceEntry#SUBSCRIPTION_TYPE_IN_LENGTH",
						value1 = ${subscriptionTypeInLength});
				}
			}
		}
	}

	@description = "This is a test for COMMERCE-9806. Verify exact day of year subscription configuration is correctly saved"
	@priority = 3
	test CanViewExactDayOfYearSubscriptionConfigurationCorrectlySaved {
		property portal.acceptance = "false";

		var subscriptionType = "Year";
		var subscriptionMode = "Exact Day of Year";
		var subscriptionMonth = "March";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When the admin navigates to Commerce -> Product Management -> Products -> ABS Sensor -> Subscription") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Subscription");
		}

		task ("And configures a subscription with exact day of year") {
			CommerceProducts.configureSubscription(
				subscriptionExactDay = 5,
				subscriptionLength = 5,
				subscriptionMode = ${subscriptionMode},
				subscriptionMonth = ${subscriptionMonth},
				subscriptionName = "Delivery Subscription",
				subscriptionType = ${subscriptionType});
		}

		task ("And navigates back again to subscription tab") {
			for (var tabName : list "Details,Subscription") {
				CommerceEntry.gotoMenuTab(menuTab = ${tabName});
			}
		}

		task ("Then all subscription fields are correctly saved") {
			for (var subscriptionFieldLabel : list "Subscription Type:${subscriptionType},Mode:${subscriptionMode},Month:${subscriptionMonth}") {
				var subscriptionFieldName = StringUtil.extractFirst(${subscriptionFieldLabel}, ":");
				var subscriptionValue = StringUtil.extractLast(${subscriptionFieldLabel}, ":");

				AssertElementPresent(
					key_fieldLabel = ${subscriptionFieldName},
					key_value = ${subscriptionValue},
					locator1 = "CreateObject#ASSERT_SELECTED_VALUE");
			}

			for (var subscriptionFieldName : list "Day,Subscription Length") {
				AssertTextEquals(
					key_fieldLabel = ${subscriptionFieldName},
					key_indexNumber = 2,
					locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
					value1 = 5);
			}
		}
	}

	@description = "This is a test for COMMERCE-9743, As a buyer I can view Payment Subscription field on the Product Details page with multiple SKUs"
	@priority = 3
	test CanViewPaymentSubscriptionOnProductDetailsPageWithMultipleSKU {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "false";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a new product with an option is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Simple_Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
				fieldType = "select",
				optionKey = "package-quantity",
				optionName = "Package Quantity",
				productName = "Simple_Product");
		}

		task ("And all SKUs are generated") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "Simple_Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And the admin navigates to the Subscription tab of the Simple_Product") {
			CommerceEntry.gotoMenuTab(menuTab = "Subscription");
		}

		task ("And the Payment Subscription is enabled") {
			Click(locator1 = "CommerceEntry#PAYMENT_SUBSCRIPTION_TOGGLE");
		}

		task ("And the default settings(Type:Day,Length:1,Type in Length:Day) are displayed") {
			AssertSelectedLabel(
				key_subscriptionFieldLabel = "Subscription Type",
				key_subscriptionName = "Payment Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
				value1 = "Day");

			AssertTextEquals(
				key_fieldLabel = "Subscription Length",
				key_indexNumber = 1,
				locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
				value1 = 1);

			AssertTextEquals(
				key_subscriptionFieldLabel = "Subscription Length",
				key_subscriptionName = "Payment Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_TYPE_IN_LENGTH",
				value1 = "Day");

			Button.clickPublish();
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When the buyer navigates to the product details page") {
			CommerceNavigator.gotoProductDetails(productName = "Simple_Product");
		}

		task ("Then the Payment Subscription is shown correctly") {
			AssertElementPresent(
				key_subscriptionName = "Payment",
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_SUBSCRIPTION_INFO",
				value1 = "Every 1 Day");

			AssertElementNotPresent(
				key_subscriptionName = "Delivery",
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_SUBSCRIPTION_INFO",
				value1 = "Every 1 Day");
		}
	}

	@description = "This is a test for COMMERCE-9744 and COMMERCE-9798. The admin can view whether the subscription type that in subscription length field is singular or plural according to the value of the subscription length when the Payment Subscription is enabled"
	@priority = 3
	test CanViewPaymentSubscriptionTypeFormatInSubscriptionLengthField {
		property portal.acceptance = "false";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin navigates to the Subscription tab in a product ABS Sensor") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Subscription");
		}

		task ("When the Payment Subscription is enabled") {
			Click(locator1 = "CommerceEntry#PAYMENT_SUBSCRIPTION_TOGGLE");
		}

		task ("Then the default settings(Type:Day,Length:1,Type in Length:Day) are displayed") {
			AssertSelectedLabel(
				key_subscriptionFieldLabel = "Subscription Type",
				key_subscriptionName = "Payment Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
				value1 = "Day");

			AssertTextEquals(
				key_fieldLabel = "Subscription Length",
				key_indexNumber = 1,
				locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
				value1 = 1);

			AssertTextEquals(
				key_subscriptionFieldLabel = "Subscription Length",
				key_subscriptionName = "Payment Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_TYPE_IN_LENGTH",
				value1 = "Day");
		}

		task ("When switching all the subscription type fields when 'Subscription Length = 1'") {
			for (var subscriptionType : list "Week,Month,Year") {
				Select(
					key_subscriptionFieldLabel = "Subscription Type",
					key_subscriptionName = "Payment Subscription",
					locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
					value1 = ${subscriptionType});

				Button.clickPublish();

				task ("Then the subscription type field in Subscription Length is updated accordingly and is singular") {
					AssertTextEquals(
						key_subscriptionFieldLabel = "Subscription Length",
						key_subscriptionName = "Payment Subscription",
						locator1 = "CommerceEntry#SUBSCRIPTION_TYPE_IN_LENGTH",
						value1 = ${subscriptionType});
				}
			}
		}

		task ("But if switching all the subscription type fields when 'Subscription Length > 1'") {
			Type(
				key_fieldLabel = "Subscription Length",
				key_indexNumber = 1,
				locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
				value1 = 2);

			for (var subscriptionTypeSet : list "Day:Days,Week:Weeks,Month:Months,Year:Years") {
				var subscriptionType = StringUtil.extractFirst(${subscriptionTypeSet}, ":");
				var subscriptionTypeInLength = StringUtil.extractLast(${subscriptionTypeSet}, ":");

				Select(
					key_subscriptionFieldLabel = "Subscription Type",
					key_subscriptionName = "Payment Subscription",
					locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
					value1 = ${subscriptionType});

				Button.clickPublish();

				task ("Then the subscription type field in Subscription Length is updated accordingly and is plural") {
					AssertTextEquals(
						key_subscriptionFieldLabel = "Subscription Length",
						key_subscriptionName = "Payment Subscription",
						locator1 = "CommerceEntry#SUBSCRIPTION_TYPE_IN_LENGTH",
						value1 = ${subscriptionTypeInLength});
				}
			}
		}
	}

	@description = "This is a test for COMMERCE-11150. Can view if the product and SKU subscription configurations are correctly saved"
	@priority = 3
	test CanViewProductAndSKUSubscriptionConfigurationsCorrectlySaved {
		property portal.acceptance = "false";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When the admin configures a product's delivery subscription with exact day of year") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Subscription");

			CommerceProducts.configureSubscription(
				subscriptionExactDay = 5,
				subscriptionLength = 5,
				subscriptionMode = "Exact Day of Year",
				subscriptionMonth = "March",
				subscriptionName = "Delivery Subscription",
				subscriptionType = "Year");
		}

		task ("Then all subscription fields are correctly saved") {
			CommerceEntry.gotoMenuTab(menuTab = "Subscription");

			for (var subscriptionFieldLabel : list "Subscription Type:Year,Mode:Exact Day of Year,Month:March") {
				var subscriptionFieldName = StringUtil.extractFirst(${subscriptionFieldLabel}, ":");
				var subscriptionValue = StringUtil.extractLast(${subscriptionFieldLabel}, ":");

				AssertElementPresent(
					key_fieldLabel = ${subscriptionFieldName},
					key_value = ${subscriptionValue},
					locator1 = "CreateObject#ASSERT_SELECTED_VALUE");
			}

			for (var subscriptionFieldName : list "Day,Subscription Length") {
				AssertTextEquals(
					key_fieldLabel = ${subscriptionFieldName},
					key_indexNumber = 2,
					locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
					value1 = 5);
			}
		}

		task ("And the delivery subscription fields does not affect the default payment subscription") {
			Check.checkToggleSwitch(
				key_subscriptionName = "Payment Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_TOGGLE");

			Button.clickPublish();

			AssertElementPresent(
				key_fieldLabel = "Subscription Type",
				key_value = "Day",
				locator1 = "CreateObject#ASSERT_SELECTED_VALUE");

			Select(
				key_subscriptionFieldLabel = "Subscription Type",
				key_subscriptionName = "Payment Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
				value1 = "Year");

			Button.clickPublish();

			AssertElementPresent(
				key_fieldLabel = "Mode",
				key_value = "Order Date",
				locator1 = "CreateObject#ASSERT_SELECTED_VALUE");
		}

		task ("When the admin goes to a SKU's delivery subscription") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Subscriptions");

			Check.checkToggleSwitch(
				key_subscriptionName = "Override Subscription Settings",
				locator1 = "ACUtils#TOGGLE_ICON");

			Check.checkToggleSwitch(
				key_subscriptionName = "Delivery Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_TOGGLE");

			Button.clickSave();
		}

		task ("Then the subscription fields are shown as default and can be updated") {
			AssertElementPresent(
				key_fieldLabel = "Subscription Type",
				key_value = "Day",
				locator1 = "CreateObject#ASSERT_SELECTED_VALUE");

			Select(
				key_subscriptionFieldLabel = "Subscription Type",
				key_subscriptionName = "Delivery Subscription",
				locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
				value1 = "Year");

			AssertElementPresent(
				key_fieldLabel = "Mode",
				key_value = "Order Date",
				locator1 = "CreateObject#ASSERT_SELECTED_VALUE");

			Button.clickSave();

			for (var subscriptionFieldLabel : list "Subscription Type:Year,Mode:Order Date") {
				var subscriptionFieldName = StringUtil.extractFirst(${subscriptionFieldLabel}, ":");
				var subscriptionValue = StringUtil.extractLast(${subscriptionFieldLabel}, ":");

				AssertElementPresent(
					key_fieldLabel = ${subscriptionFieldName},
					key_value = ${subscriptionValue},
					locator1 = "CreateObject#ASSERT_SELECTED_VALUE");
			}

			AssertTextEquals(
				key_fieldLabel = "Subscription Length",
				key_indexNumber = 2,
				locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
				value1 = 1);
		}
	}

	@description = "This is a test for COMMERCE-6085. UseSubscriptions"
	@priority = 5
	test UseSubscriptions {
		property portal.acceptance = "true";

		// TODO Review

		CommerceProducts.openProductsAdmin();

		CPCommerceCatalog.newProductsEntry(
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Subscription");

		Click(locator1 = "CommerceEntry#PAYMENT_SUBSCRIPTION_TOGGLE");

		Click(locator1 = "CommerceEntry#DELIVERY_SUBSCRIPTION_TOGGLE");

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

}