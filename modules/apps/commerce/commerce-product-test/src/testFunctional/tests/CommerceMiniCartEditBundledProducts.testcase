@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userRole = "Buyer",
			userScreenName = "buyeruser",
			userSiteMembership = "Minium");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12610. As a buyer, I can assert the bundled product works with all types of the options"
	@priority = 5
	test CanAssertAllTypesOfOptionsWorkWithProductOptions {
		property portal.acceptance = "true";

		task ("Given a new bundled product with all types of options is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			for (var fieldType : list "checkbox,date,numeric,text") {
				CommerceJSONOptionsAPI._addCommerceOption(
					fieldType = ${fieldType},
					optionKey = "option-${fieldType}-key",
					optionName = ${fieldType},
					skuContributor = "false");
			}

			for (var fieldType : list "checkbox_multiple,radio") {
				CommerceJSONOptionsAPI._addCommerceOption(
					fieldType = ${fieldType},
					optionKey = "option-${fieldType}-key",
					optionName = ${fieldType},
					optionValues = "value1:value1:1,value2:value2:2",
					skuContributor = "false");
			}

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			for (var optionName : list "Color,checkbox,checkbox_multiple,date,numeric,radio,text") {
				CommerceRelations.assignSingleRelationToProductsEntry(
					entryName = ${optionName},
					title = "Add Option");
			}

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Static",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");
		}

		task ("And the admin sets the linked product with a delta price for each option value of Color") {
			for (var optionValueList : list "Blue:MIN93015:20,White:MIN93020:30") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");

				var optionValueList = StringUtil.replaceFirst(${optionValueList}, "${optionValueName}:", "");

				var sku = StringUtil.extractFirst(${optionValueList}, ":");
				var deltaPrice = StringUtil.extractLast(${optionValueList}, ":");

				CommerceOptions.setDeltaPrice(
					deltaPrice = ${deltaPrice},
					key_index = ${optionValueName},
					key_optionIndex = "Color",
					multipleValuesLeft = "true",
					productSKU = ${sku});
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("When the buyer navigates to the Bundled Product's details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");
		}

		task ("Then can view all types of options listed with values in the bundled product's details") {
			for (var optionFields : list "Color,checkbox,checkbox_multiple,date,numeric,radio,text") {
				AssertVisible(
					key_fieldName = ${optionFields},
					locator1 = "ClientExtension#ANY_FIELD");
			}

			for (var checkboxValues : list "value1,value2,") {
				AssertNotChecked.assertNotCheckedNotVisible(
					checkboxName = ${checkboxValues},
					locator1 = "Checkbox#ANY_CHECKBOX");

				AssertElementPresent(
					key_radioOption = ${checkboxValues},
					locator1 = "CommerceEntry#RADIO_BUTTON");
			}
		}

		task ("When adding BLUE to the cart with filled option values") {
			FrontStore.addToCartFromProductDetails(
				boolean = "enabled:checkbox",
				date = "10/23/2023",
				multipleSelectionValuesChecked = "value1,value2",
				numeric = 10,
				optionNamesAndValues = "Color:Blue",
				productName = "Bundled Product",
				productSku = "BLUE",
				singleSelectionValueChecked = "value2",
				text = "Text Content");

			var cartItemOption1 = '''Color:Blue,checkbox:option-checkbox-key,date:2023-10-23,numeric:10,text:Text Content,checkbox_multiple:value1,checkbox_multiple:value2,radio:value2''';
		}

		task ("Then can view the filled option values for the order item shown in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemOption = ${cartItemOption1},
				cartItemPriceValue = "20.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");
		}

		task ("And can view the option values set in the Edit Bundled Product panel") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "BLUE");

			FrontStore.viewMiniCartEditProductOption(
				boolean = "enabled:checkbox",
				cartItemOptionName = "Color",
				cartItemOptionValue = "Blue",
				cartItemPriceAsConfiguredValue = "$ 20.00",
				cartItemPriceValue = "$ 20.00",
				date = "10/23/2023",
				multipleSelectionValuesChecked = "value1,value2",
				numeric = 10,
				singleSelectionValueChecked = "value2",
				singleSelectionValueNotChecked = "value1",
				text = "Text Content");
		}

		task ("When editing the option values in the Edit Bundled Product panel") {
			FrontStore.editMiniCartItemProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "Blue",
				date = "10/20/2023",
				multipleSelectionValuesNotChecked = "value2",
				numeric = 20,
				singleSelectionValueChecked = "value1",
				text = "Text Content Edit");

			var cartItemOption1 = '''Color:Blue,checkbox:option-checkbox-key,date:2023-10-20,numeric:20,text:Text Content Edit,checkbox_multiple:value1,radio:value1''';
		}

		task ("Then can view the option values saved in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemOption = ${cartItemOption1},
				cartItemPriceValue = "20.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");
		}

		task ("When adding BLUE to the cart with filled the same option values again in the bundled product details") {
			Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");

			var cartItemOption2 = '''Color:Blue,checkbox:option-checkbox-key,date:2023-10-23,numeric:10,text:Text Content,checkbox_multiple:value1,checkbox_multiple:value2,radio:value2''';
		}

		task ("Then can view the option values saved and shown as another item in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemOption = ${cartItemOption1},
				cartItemPriceValue = "20.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");

			Click(
				key_cartItemSku = "BLUE",
				key_index = 1,
				locator1 = "CommerceAccelerators#MINI_CART_SPECIFIC_ITEM_BUNDLED_ITEM_HIDE_OPTIONS_PANEL_EXPANDED");

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemOption = ${cartItemOption2},
				cartItemPriceValue = "20.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				index = 2,
				optionName = "Color");
		}

		task ("And can view the order items with filled option values in the pending order page") {
			var productOption1 = '''Blue, option-checkbox-key, 2023-10-20, 20, Text Content Edit, value1, value1''';
			var productOption2 = '''Blue, option-checkbox-key, 2023-10-23, 10, Text Content, value1,value2, value2''';

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/pending-orders");

			Button.click(button = "View");

			CommerceOrders.viewOrdersDetails(
				productListPrice = "20.00",
				productName = "ABS Sensor",
				productOptions = "Blue",
				productPrice = "20.00",
				productQuantity = 1,
				productSku = "MIN93015",
				productTotalPrice = "$ 20.00");

			CommerceOrders.viewOrdersDetails(
				productListPrice = "20.00",
				productName = "Bundled Product",
				productOptions = "${productOption1},${productOption2}",
				productPrice = "20.00",
				productQuantity = 1,
				productSku = "BLUE",
				productTotalPrice = "$ 20.00");
		}
	}

	@description = "COMMERCE-12609. As a buyer, I can assert all types of pricing work with product options shown in the Edit Bundled Product panel"
	@priority = 5
	test CanAssertAllTypesOfPricingWorkWithProductOptions {
		property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommercePriceConfiguration.config";
		property osgi.module.configurations = "displayDiscountLevels=B\"true\"";
		property portal.acceptance = "true";

		task ("Given a new bundled product with an option(five values) and Dynamic Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2,black:Black:3,red:Red:4,green:Green:5");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Dynamic",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");

			SelectFrameTop();
		}

		task ("And the admin selects different SKU as the linked product for each option value") {
			for (var optionValueList : list "Blue:MIN93015,White:MIN93017,Black:MIN93020,Red:MIN93021,Green:MIN93027") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");
				var sku = StringUtil.extractLast(${optionValueList}, ":");

				CommerceNavigator.gotoEntry(entryName = "Color");

				CommerceProductOptions.editOptionValue(
					optionValue = ${optionValueName},
					sku = ${sku});
			}
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And the price on application is set for sku BLACK") {
			CommerceNavigator.gotoTableListEntry(entryName = "BLACK");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("And a 50% discount is applied to sku RED") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 50,
				productSKUs = "RED",
				target = "skus",
				title = "Test Discount",
				usePercentage = "true");
		}

		task ("And a new Price List applies the Discount levels to sku GREEN is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 100,
				priceListName = "Test Price List 1",
				productSKU = "GREEN");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "GREEN");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommercePriceLists.setOverrideDiscount(overrideDiscounts = "L1-10,L2-20,L3-0,L4-0");
		}

		task ("When the buyer adds the first sku BLUE to the cart in the Bundled Product's detail page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");

			Select(
				key_optionName = "Color",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTIONS_SELECT",
				value1 = "Black - $ 10.00");

			AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_DETAILS_PRICE_ON_APPLICATION");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:Blue",
				productName = "Bundled Product",
				productSku = "BLUE");
		}

		task ("Then can view the order item for BLUE has the correct linked sku and base price in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");
		}

		task ("When the buyer edits WHITE as the bundled product option") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "BLUE");

			Select(
				key_optionName = "Color",
				locator1 = "CommerceAccelerators#MINI_CART_PRODUCT_OPTIONS_SELECT",
				value1 = "White");
		}

		task ("Then can view the order item updated for WHITE has the correct linked sku and promo price in both the Edit Bundled Product panel and the mini-cart") {
			FrontStore.viewMiniCartEditProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "White",
				cartItemPriceAsConfiguredValue = "$ 90.00",
				cartItemPriceInactiveValue = "$ 100.00",
				cartItemPromoPriceValue = "$ 90.00");

			Button.clickSave();

			FrontStore.viewMiniCartItem(
				bundledItems = "White(1 × Premium Brake Fluid )",
				cartItemName = "Bundled Product",
				cartItemPromoPriceValue = "90.00",
				cartItemQuantity = 1,
				cartItemSku = "WHITE",
				optionName = "Color");
		}

		task ("When the buyer edits BLACK as the bundled product option") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "WHITE");

			Select(
				key_optionName = "Color",
				locator1 = "CommerceAccelerators#MINI_CART_PRODUCT_OPTIONS_SELECT",
				value1 = "Black");
		}

		task ("Then can view the order item updated for BLACK has the correct linked sku and price with POA in both the Edit Bundled Product panel and the mini-cart") {
			FrontStore.viewMiniCartEditProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "Black",
				cartItemPriceOnApplication = "true");

			Button.clickSave();

			FrontStore.viewMiniCartItem(
				bundledItems = "Black(1 × Brake Rotors )",
				cartItemName = "Bundled Product",
				cartItemPriceOnApplication = "true",
				cartItemQuantity = 1,
				cartItemSku = "BLACK",
				optionName = "Color");

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");
		}

		task ("When the buyer edits RED as the bundled product option") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "BLACK");

			Select(
				key_optionName = "Color",
				locator1 = "CommerceAccelerators#MINI_CART_PRODUCT_OPTIONS_SELECT",
				value1 = "Red");
		}

		task ("Then can view the order item updated for RED has the correct linked sku and discount in both the Edit Bundled Product panel and the mini-cart") {
			FrontStore.viewMiniCartEditProductOption(
				cartItemDiscountValue = "-50%",
				cartItemOptionName = "Color",
				cartItemOptionValue = "Red",
				cartItemPriceAsConfiguredValue = "$ 45.00",
				cartItemPriceInactiveValue = "$ 90.00");

			Button.clickSave();

			// The discounted price for the order item needs to be updated after the COMMERCE-12493 is fixed

			FrontStore.viewMiniCartItem(
				bundledItems = "Red(1 × Calipers )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "90.00",
				cartItemQuantity = 1,
				cartItemSku = "RED",
				optionName = "Color");
		}

		task ("When the buyer edits GREEN as the bundled product option") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "RED");

			Select(
				key_optionName = "Color",
				locator1 = "CommerceAccelerators#MINI_CART_PRODUCT_OPTIONS_SELECT",
				value1 = "Green");
		}

		task ("Then can view the order item updated for GREEN has the correct linked sku and discount levels in both the Edit Bundled Product panel and the mini-cart") {

			// The assertion for the discounted price in the Edit Bundled Product panel needs to be added after the COMMERCE-12493 is fixed

			Button.clickSave();

			FrontStore.viewMiniCartItem(
				bundledItems = "Green(1 × Wear Sensors )",
				cartItemName = "Bundled Product",
				cartItemPriceInactiveValue = "160.00",
				cartItemQuantity = 1,
				cartItemSku = "GREEN",
				optionName = "Color");

			var i = 1;

			for (var discount : list "10,20,0,0") {
				AssertTextEquals.assertPartialText(
					key_index = ${i},
					locator1 = "CommerceAccelerators#MINI_CART_DISCOUNT_LEVELS",
					value1 = ${discount});

				var i = ${i} + 1;
			}

			AssertTextEquals(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
				value1 = "$ 132.00");
		}
	}

	@description = "COMMERCE-12605. As a buyer, I can assert that there is a Show Product Options panel with the correct linked SKUs' information for the bundled product's order item in the mini-cart"
	@priority = 5
	test CanAssertBundledProductShownLinkedSkusInMiniCartItems {
		property portal.acceptance = "true";

		task ("Given a new bundled product with an option(two values) and Static Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Static",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");
		}

		task ("And the admin sets the linked product with a delta price for each option value") {
			for (var optionValueList : list "Blue:MIN93015:20,White:MIN93020:30") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");

				var optionValueList = StringUtil.replaceFirst(${optionValueList}, "${optionValueName}:", "");

				var sku = StringUtil.extractFirst(${optionValueList}, ":");
				var deltaPrice = StringUtil.extractLast(${optionValueList}, ":");

				CommerceOptions.setDeltaPrice(
					deltaPrice = ${deltaPrice},
					key_index = ${optionValueName},
					key_optionIndex = "Color",
					multipleValuesLeft = "true",
					productSKU = ${sku});
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And the price and inventory of generated SKUs are configured for the bundled product") {
			for (var value : list "BLUE:10,WHITE:20") {
				var sku = StringUtil.extractFirst(${value}, ":");
				var priceAndQuantity = StringUtil.extractLast(${value}, ":");

				CommerceNavigator.gotoEntry(entryName = ${sku});

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				CommerceEntry.gotoMenuTab(menuTab = "Price");

				CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

				CommerceEntry.editSkuPricingAndInventory(
					basePrice = ${priceAndQuantity},
					italyQuantity = ${priceAndQuantity},
					publish = "true");
			}
		}

		task ("When the buyer adds both SKUs to the cart in the Bundled Product's detail page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:Blue",
				productName = "Bundled Product",
				productSku = "BLUE");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:White + $ 20.00",
				productName = "Bundled Product",
				productSku = "WHITE");
		}

		task ("Then each order item has an expandable panel 'Show Product Options' with option values and the Edit action for the bundled product in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "30.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");

			AssertElementPresent(
				key_cartItemSku = "BLUE",
				key_index = 1,
				locator1 = "CommerceAccelerators#MINI_CART_SPECIFIC_ITEM_BUNDLED_ITEM_BODY_VERTICAL_ELLIPSIS");

			FrontStore.viewMiniCartItem(
				bundledItems = "White(1 × Brake Rotors )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 1,
				cartItemSku = "WHITE",
				optionName = "Color");

			AssertElementPresent(
				key_cartItemSku = "WHITE",
				key_index = 1,
				locator1 = "CommerceAccelerators#MINI_CART_SPECIFIC_ITEM_BUNDLED_ITEM_BODY_VERTICAL_ELLIPSIS");
		}

		task ("But if the buyer adds another non-bundled product to the cart(e.g. Brake Fluid)") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/brake-fluid");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Package Quantity:12",
				productName = "Brake Fluid",
				productSku = "MIN93016A");
		}

		task ("Then there is 'Show Options' panel but no Edit action button for the non-bundled product") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			CommerceNavigator.gotoMiniCart();

			AssertElementPresent(
				key_cartItemSku = "MIN93016A",
				key_index = 1,
				locator1 = "CommerceAccelerators#MINI_CART_SPECIFIC_ITEM_BUNDLED_ITEM_SHOW_OPTIONS_PANEL_COLLAPSED");

			AssertElementPresent(
				key_cartItemSku = "MIN93016A",
				key_index = 1,
				locator1 = "CommerceAccelerators#MINI_CART_SPECIFIC_ITEM_BUNDLED_ITEM_BODY_VERTICAL_ELLIPSIS");

			AssertElementNotPresent(
				key_cartItemSku = "MIN93016A",
				locator1 = "CommerceAccelerators#MINI_CART_REMOVE_ITEM");
		}

		task ("When the Edit Bundled Product panel is opened for an order item") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "BLUE");

			AssertVisible(
				key_productName = "Bundled Product",
				locator1 = "CommerceAccelerators#MINI_CART_EDIT_ITEM_PANEL");
		}

		task ("And clicks outside the Edit panel") {
			SelectFrameTop();

			Click(locator1 = "CommerceNavigation#SEARCH_FIELD");
		}

		task ("Then can see the current page in the mini-cart is still in the Edit panel") {
			CommerceNavigator.gotoMiniCart();

			AssertVisible(
				key_productName = "Bundled Product",
				locator1 = "CommerceAccelerators#MINI_CART_EDIT_ITEM_PANEL");
		}

		task ("But when the buyer clicks the close button of the mini-cart for the Edit panel") {
			Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");
		}

		task ("Then can see the current page is not in the Edit panel, shows the resume page in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			AssertElementNotPresent(
				key_productName = "Bundled Product",
				locator1 = "CommerceAccelerators#MINI_CART_EDIT_ITEM_PANEL");

			AssertVisible(locator1 = "CommerceAccelerators#MINI_CART_RESUME");
		}
	}

	@description = "COMMERCE-12628. As a buyer, I want to be able to assert decimal UOM prices are converted in the Edit Bundeld Product panel for the product bundles"
	@priority = 5
	test CanAssertDecimalUOMPricesAreConvertedInEditBundledProductPanel {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Minimum Order Quantity is set to 0.1 and Multiple Order Quantity is set to 0.1 for ABS Sensor") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = "0.1",
				multipleOrderQuantity = "0.1",
				productName = "ABS Sensor");
		}

		task ("Given 2 UOMs are created to MIN93015(base price: $30, incremental: 0.6 for UOM1; base price: $50, promo price: $40, incremental: 1.5 for UOM2)") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 30,
				incrementalOrderQuantity = "0.6",
				productSKU = "MIN93015",
				uomKey = "UOM1KEY",
				uomName = "UOM1");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 50,
				incrementalOrderQuantity = "1.5",
				productSKU = "MIN93015",
				promoPrice = 40,
				uomKey = "UOM2KEY",
				uomName = "UOM2");
		}

		task ("And a new Bundled product with an option(two values) and Dynamic Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Dynamic",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");

			SelectFrameTop();
		}

		task ("And the admin selects SKU/UOM as the linked product for each option value") {
			for (var optionValueList : list "Blue:MIN93015 - UOM1KEY,White:MIN93015 - UOM2KEY") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");
				var sku = StringUtil.extractLast(${optionValueList}, ":");

				if (${optionValueName} == "Blue") {
					var quantity = "0.6";
				}
				else {
					var quantity = "1.5";
				}

				CommerceNavigator.gotoEntry(entryName = "Color");

				CommerceProductOptions.editOptionValue(
					optionValue = ${optionValueName},
					quantity = ${quantity},
					sku = ${sku});
			}
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("When the buyer navigates to Bundled Product's detail page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");
		}

		task ("Then assert that the prices for each SKU/UOM are converted to 1 quantity in the bundled product") {
			for (var optionValueAndPrice : list "Blue:50.00,White:40.00") {
				var optionValue = StringUtil.extractFirst(${optionValueAndPrice}, ":");
				var price = StringUtil.extractLast(${optionValueAndPrice}, ":");
				var sku = StringUtil.toUpperCase(${optionValue});

				if (${optionValue} == "White") {
					var optionValue = "${optionValue} + $ 10.00";
				}

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Color",
					fsOptionValue = ${optionValue});

				WaitForElementPresent(
					key_productSku = ${sku},
					locator1 = "CommerceFrontStore#FS_PRODUCT_SKU");

				if (${optionValue} == "Blue") {
					FrontStore.assertProductDetails(
						productListPrice = ${price},
						productName = "Bundled Product",
						productSKU = ${sku});
				}
				else {
					FrontStore.assertProductDetails(
						productListPriceInactive = ${price},
						productName = "Bundled Product",
						productSalePrice = "40.00",
						productSKU = ${sku});
				}

				Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
			}
		}

		task ("And assert the prices for the order items are the same as in the product detail in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(0.6 × ABS Sensor UOM1KEY)",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "30.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");

			FrontStore.viewMiniCartItem(
				bundledItems = "White(1.5 × ABS Sensor UOM2KEY)",
				cartItemName = "Bundled Product",
				cartItemPromoPriceValue = "40.00",
				cartItemQuantity = 1,
				cartItemSku = "WHITE",
				optionName = "Color");
		}

		task ("When the buyer edits BLUE as the bundled product option") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "BLUE");

			// The assertion for the PriceAsConfigured price in the Edit Bundled Product panel needs to be added after the COMMERCE-12493 is fixed

			Select(
				key_optionName = "Color",
				locator1 = "CommerceAccelerators#MINI_CART_PRODUCT_OPTIONS_SELECT",
				value1 = "White");

			FrontStore.viewMiniCartEditProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "White",
				cartItemPriceAsConfiguredValue = "$ 40.00",
				cartItemPriceInactiveValue = "$ 50.00",
				cartItemPromoPriceValue = "$ 40.00");
		}

		task ("When the buyer edits WHITE as the bundled product option and save") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			CommerceNavigator.gotoMiniCart();

			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "WHITE");

			// The assertion for the PriceAsConfigured price in the Edit Bundled Product panel needs to be added after the COMMERCE-12493 is fixed

			Select(
				key_optionName = "Color",
				locator1 = "CommerceAccelerators#MINI_CART_PRODUCT_OPTIONS_SELECT",
				value1 = "Blue");

			FrontStore.viewMiniCartEditProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "Blue",
				cartItemPriceAsConfiguredValue = "$ 30.00",
				cartItemPriceValue = "$ 30.00");

			Button.clickSave();
		}

		task ("Then the cart items are merged into 1 cart item for BLUE only in the mini-cart") {
			AssertElementNotPresent(
				key_cartItemSku = "WHITE",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_SKU");

			// The assertion for the cart items merged into 1 item needs to be added after the COMMERCE-12664 is fixed

		}
	}

	@description = "COMMERCE-12611. As a buyer, I can verify product options work with the decimal quantity correctly"
	@priority = 5
	test CanBundledProductSkusWorkWithDecimalQuantity {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a new bundled product with an option(two values) and Dynamic Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Dynamic",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");

			SelectFrameTop();
		}

		task ("And the admin selects different SKU as the linked product for each option value") {
			for (var optionValueList : list "Blue:MIN93015,White:MIN93020") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");
				var sku = StringUtil.extractLast(${optionValueList}, ":");

				CommerceNavigator.gotoEntry(entryName = "Color");

				CommerceProductOptions.editOptionValue(
					optionValue = ${optionValueName},
					sku = ${sku});
			}
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And a UOM for BLUE with allowed quantity:0.5 is set") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 50,
				incrementalOrderQuantity = "0.5",
				productSKU = "BLUE",
				uomKey = "UOM1KEY",
				uomName = "UOM1");
		}

		task ("And Bundled Product Minimum Order Quantity is set to 0.1 and Multiple Order Quantity is set to 0.5") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = "0.1",
				multipleOrderQuantity = "0.5",
				productName = "Bundled Product");
		}

		task ("When the buyer navigates to Bundled Product's detail page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");
		}

		task ("Then assert that the quantity for BLUE is 0.5 in the bundled product") {
			AssertElementPresent(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "0.5");

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("And assert the price for the order item is the same as in the product detail in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "100.00",
				cartItemQuantity = "0.5",
				cartItemSku = "BLUE",
				optionName = "Color");
		}

		task ("And can view the correct updates for product option when using up/down keys to increase/decrease the quantity") {
			for (var valueList : list "UP:1:2,DOWN:0.5:1") {
				var arrowAction = StringUtil.extractFirst(${valueList}, ":");

				var valueList = StringUtil.replaceFirst(${valueList}, "${arrowAction}:", "");

				var cartItemQuantity = StringUtil.extractFirst(${valueList}, ":");
				var bundledItemQuantity = StringUtil.extractLast(${valueList}, ":");

				Click(
					key_cartItemSku = "BLUE",
					key_index = 1,
					locator1 = "CommerceAccelerators#MINI_CART_SPECIFIC_ITEM_BUNDLED_ITEM_HIDE_OPTIONS_PANEL_EXPANDED");

				FrontStore.changeQuantityByUsingKeyArrows(
					arrowAction = ${arrowAction},
					productSKU = "BLUE",
					quantitySelectorType = "Mini-cart");

				FrontStore.viewMiniCartItem(
					bundledItems = "Blue(${bundledItemQuantity} × ABS Sensor )",
					cartItemName = "Bundled Product",
					cartItemPriceValue = "100.00",
					cartItemQuantity = ${cartItemQuantity},
					cartItemSku = "BLUE",
					optionName = "Color");
			}
		}
	}

	@description = "COMMERCE-12608. As a buyer, I cannot edit the sku in the order item's Edit Bundled Product panel in mini-cart when the sku stock quantity is zero and the allow back order is disabled"
	@priority = 5
	test CannotEditProductOptionsWhenStockIsZeroAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given a new bundled product with an option(two values) and Static Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Static",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");
		}

		task ("And the admin sets the linked product with a delta price for each option value") {
			for (var optionValueList : list "Blue:MIN93015:20,White:MIN93020:30") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");

				var optionValueList = StringUtil.replaceFirst(${optionValueList}, "${optionValueName}:", "");

				var sku = StringUtil.extractFirst(${optionValueList}, ":");
				var deltaPrice = StringUtil.extractLast(${optionValueList}, ":");

				CommerceOptions.setDeltaPrice(
					deltaPrice = ${deltaPrice},
					key_index = ${optionValueName},
					key_optionIndex = "Color",
					multipleValuesLeft = "true",
					productSKU = ${sku});
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("When Allow Back Orders toggle is switched off for ABS Sensor") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "ABS Sensor");
		}

		task ("And the stock quantity of ABS Sensor is set to 0") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN93015",
					quantity = 0,
					warehouseName = ${warehouseName});
			}
		}

		task ("And the buyer tries to add the option value BLUE linked to ABS Sensor in the Bundled Product's details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("Then an alert is shown: Danger:The specified quantity is unavailable") {
			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}

		task ("When the buyer adds option value WHITE to the cart in the Bundled Product's detail page") {
			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:White + $ 10.00",
				productName = "Bundled Product",
				productSku = "WHITE");
		}

		task ("And tries to edit the option value to BLUE in the Edit Bundled Product panel in the mini-cart of the order item sku White") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "WHITE");

			Select(
				key_optionName = "Color",
				locator1 = "CommerceAccelerators#MINI_CART_PRODUCT_OPTIONS_SELECT",
				value1 = "Blue");

			Button.clickSave();
		}

		// The assertion with alert needs to be updated after the COMMERCE-12612 is fixed

	}

	@description = "COMMERCE-12607. As a buyer, I can verify that editing the bundled product for an order item works with the basic price in the mini-cart"
	@priority = 5
	test CanVerifyEditBundledProductPanelWorksWithBasicPriceInMiniCart {
		property portal.acceptance = "true";

		task ("Given a new bundled product with an option(two values) and Static Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Static",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");
		}

		task ("And the admin sets the linked product with a delta price for each option value") {
			for (var optionValueList : list "Blue:MIN93015:20,White:MIN93020:30") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");

				var optionValueList = StringUtil.replaceFirst(${optionValueList}, "${optionValueName}:", "");

				var sku = StringUtil.extractFirst(${optionValueList}, ":");
				var deltaPrice = StringUtil.extractLast(${optionValueList}, ":");

				CommerceOptions.setDeltaPrice(
					deltaPrice = ${deltaPrice},
					key_index = ${optionValueName},
					key_optionIndex = "Color",
					multipleValuesLeft = "true",
					productSKU = ${sku});
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And the price and inventory of generated SKUs are configured for the bundled product") {
			for (var value : list "BLUE:10,WHITE:20") {
				var sku = StringUtil.extractFirst(${value}, ":");
				var priceAndQuantity = StringUtil.extractLast(${value}, ":");

				CommerceNavigator.gotoEntry(entryName = ${sku});

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				CommerceEntry.gotoMenuTab(menuTab = "Price");

				CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

				CommerceEntry.editSkuPricingAndInventory(
					basePrice = ${priceAndQuantity},
					italyQuantity = ${priceAndQuantity},
					publish = "true");
			}
		}

		task ("When the buyer adds both SKUs to the cart in the Bundled Product's detail page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:Blue",
				productName = "Bundled Product",
				productSku = "BLUE");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:White + $ 20.00",
				productName = "Bundled Product",
				productSku = "WHITE");

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "30.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");

			FrontStore.viewMiniCartItem(
				bundledItems = "White(1 × Brake Rotors )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 1,
				cartItemSku = "WHITE",
				optionName = "Color");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 2,
				cartSummarySubtotal = "80.00",
				cartSummaryTotal = "80.00");
		}

		task ("When the buyer selects Blue(itself) again and saves the change in the order item's Edit page") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "BLUE");

			FrontStore.editMiniCartItemProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "Blue");
		}

		task ("Then can see the order items' info has no change in the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			AssertVisible(locator1 = "CommerceAccelerators#MINI_CART_RESUME");

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "30.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");

			FrontStore.viewMiniCartItem(
				bundledItems = "White(1 × Brake Rotors )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 1,
				cartItemSku = "WHITE",
				optionName = "Color");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 2,
				cartSummarySubtotal = "80.00",
				cartSummaryTotal = "80.00");
		}

		task ("And the cart items can be updated correctly after regularly adding BLUE to cart in the mini-cart") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(2 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "30.00",
				cartItemQuantity = 2,
				cartItemSku = "BLUE",
				optionName = "Color");

			FrontStore.viewMiniCartItem(
				bundledItems = "White(1 × Brake Rotors )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 1,
				cartItemSku = "WHITE",
				optionName = "Color");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 3,
				cartSummarySubtotal = "110.00",
				cartSummaryTotal = "110.00");
		}

		task ("But if the buyer edits the Blue to White in the edit bundled product panel and save") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "BLUE");

			FrontStore.editMiniCartItemProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "White");
		}

		task ("Then the item for Blue has changed to White with price in the mini-cart") {
			FrontStore.viewMiniCartItem(
				bundledItems = "White(3 × Brake Rotors )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 3,
				cartItemSku = "WHITE",
				optionName = "Color");

			AssertElementNotPresent(
				key_cartItemSku = "BLUE",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_SKU");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 3,
				cartSummarySubtotal = "150.00",
				cartSummaryTotal = "150.00");
		}

		task ("When using quick add to cart for both BLUE and WHITE") {
			for (var orderItemSku : list "BLUE,WHITE") {
				FrontStore.quickAddToCartSearchAndSelectItem(orderItemSku = ${orderItemSku});

				Click(locator1 = "CommerceAccelerators#QUICK_ADD_TO_CART_BUTTON");
			}
		}

		task ("Then the cart items can be updated correctly after quick add to cart in the mini-cart") {
			FrontStore.viewMiniCartItem(
				bundledItems = "White(4 × Brake Rotors )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "50.00",
				cartItemQuantity = 4,
				cartItemSku = "WHITE",
				optionName = "Color");

			FrontStore.viewMiniCartItem(
				bundledItems = "Blue(1 × ABS Sensor )",
				cartItemName = "Bundled Product",
				cartItemPriceValue = "30.00",
				cartItemQuantity = 1,
				cartItemSku = "BLUE",
				optionName = "Color");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 5,
				cartSummarySubtotal = "230.00",
				cartSummaryTotal = "230.00");
		}

		task ("And can see the List Price and Price as Configured fields are still the single prices, will not update with the quantities in the Edit Bundled Product panel") {
			FrontStore.gotoEditMiniCartItemProductOption(cartItemSku = "WHITE");

			FrontStore.viewMiniCartEditProductOption(
				cartItemOptionName = "Color",
				cartItemOptionValue = "White",
				cartItemPriceAsConfiguredValue = "$ 200.00",
				cartItemPriceValue = "$ 50.00");
		}
	}

}