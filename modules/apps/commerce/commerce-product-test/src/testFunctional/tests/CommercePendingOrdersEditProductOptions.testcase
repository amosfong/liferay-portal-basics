@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userRole = "Buyer",
			userScreenName = "buyeruser",
			userSiteMembership = "Minium");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12745. As an admin, I can view buyer's changes on the Admin Order page"
	@priority = 4
	test CanAdminViewBuyerChangesOnThePendingOrder {
		property portal.acceptance = "false";

		task ("Given a new bundled product with an option (two values) and Static Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Static",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");
		}

		task ("And the admin sets the linked product with a delta price for each option value") {
			for (var optionValueList : list "Blue:MIN93015:20,White:MIN93020:30") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");

				var optionValueList = StringUtil.replaceFirst(${optionValueList}, "${optionValueName}:", "");

				var sku = StringUtil.extractFirst(${optionValueList}, ":");
				var deltaPrice = StringUtil.extractLast(${optionValueList}, ":");

				CommerceOptions.setDeltaPrice(
					deltaPrice = ${deltaPrice},
					key_index = ${optionValueName},
					key_optionIndex = "Color",
					multipleValuesLeft = "true",
					productSKU = ${sku});
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And the price and inventory of generated SKUs are configured for the bundled product") {
			for (var value : list "BLUE:10,WHITE:20") {
				var sku = StringUtil.extractFirst(${value}, ":");
				var priceAndQuantity = StringUtil.extractLast(${value}, ":");

				CommerceNavigator.gotoEntry(entryName = ${sku});

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				CommerceEntry.gotoMenuTab(menuTab = "Price");

				CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

				CommerceEntry.editSkuPricingAndInventory(
					basePrice = ${priceAndQuantity},
					italyQuantity = ${priceAndQuantity},
					publish = "true");
			}
		}

		task ("And the buyer adds Blue to the cart for the bundled product, a single SKU product (e.g. MIN55858) and MIN93016A") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:Blue",
				productName = "Bundled Product",
				productSku = "BLUE");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/brake-fluid");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Package Quantity:12",
				productName = "Brake Fluid",
				productSku = "MIN93016A");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/wheel-seal-front");

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("And the buyer navigates to the order from the pending orders page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");
		}

		task ("When the buyer edits Brake Fluid option value, selecting MIN93016B and edits the bundled product option value, selecting White") {
			for (var optionValueList : list "Brake Fluid:Package Quantity:48,Bundled Product:Color:White") {
				var productName = StringUtil.extractFirst(${optionValueList}, ":");

				var optionValueList = StringUtil.replaceFirst(${optionValueList}, "${productName}:", "");

				var optionName = StringUtil.extractFirst(${optionValueList}, ":");
				var optionValue = StringUtil.extractLast(${optionValueList}, ":");

				Click(
					key_value = ${productName},
					locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

				Click(
					key_menuItem = "Edit",
					locator1 = "CommerceNavigation#DROPDOWN_ITEM");

				FrontStore.editMiniCartItemProductOption(
					cartItemOptionName = ${optionName},
					cartItemOptionValue = ${optionValue});
			}
		}

		task ("And the admin logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(urlAppend = "web/minium");
		}

		task ("And navigates to the orders admin page") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Open");
		}

		task ("Then the order is successfully updated") {
			CommerceOrders.viewOrdersEntry(
				productListPrice = "80.00",
				productName = "Brake Fluid",
				productOptions = 48,
				productQuantity = 1,
				productSku = "MIN93016B",
				productTotalPrice = "$ 72.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "50.00",
				productName = "Bundled Product",
				productOptions = "White",
				productQuantity = 1,
				productSku = "WHITE",
				productTotalPrice = "$ 50.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "30.00",
				productName = "Brake Rotors",
				productQuantity = 1,
				productSku = "MIN93020",
				productTotalPrice = "$ 30.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "4.00",
				productName = "Wheel Seal - Front",
				productQuantity = 1,
				productSku = "MIN55858",
				productTotalPrice = "$ 4.00");
		}
	}

	@description = "COMMERCE-12746. As a buyer, I can edit all types of product options from the Pending Order page"
	@priority = 4
	test CanBuyerEditAllTypesOfOptionsOnPendingOrder {
		property portal.acceptance = "false";

		task ("Given a new product with all types of options is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Options Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "color",
				optionValues = "value1:Value1:1,value2:Value2:2",
				skuContributor = "true");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "radio",
				optionKey = "radio",
				optionName = "radio",
				optionValues = "value3:Value3:1,value4:Value4:2",
				skuContributor = "true");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "checkbox_multiple",
				optionKey = "option-checkbox_multiple-key",
				optionName = "checkbox_multiple",
				optionValues = "value5:Value5:1,value6:Value6:2",
				skuContributor = "false");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "checkbox",
				optionKey = "option-checkbox-key",
				optionName = "checkbox",
				optionValues = "value7:Value7:1",
				skuContributor = "false");

			for (var fieldType : list "date,numeric,text") {
				CommerceJSONOptionsAPI._addCommerceOption(
					fieldType = ${fieldType},
					optionKey = "option-${fieldType}-key",
					optionName = ${fieldType},
					skuContributor = "false");
			}

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Options Product"''');

			CommerceNavigator.gotoEntry(entryName = "Options Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			for (var optionName : list "color,checkbox,checkbox_multiple,date,numeric,radio,text") {
				CommerceRelations.assignSingleRelationToProductsEntry(
					entryName = ${optionName},
					title = "Add Option");
			}
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And the price and inventory of generated SKUs are configured for the options product") {
			if (IsElementPresent(locator1 = "//div[@class='data-set-wrapper' or @class='searchcontainer-content']//*[text()='VALUE3VALUE1']")) {
				CommerceNavigator.gotoEntry(entryName = "VALUE3VALUE1");

				CommerceSKUs.editSkuName(
					closeFrame = "true",
					productSku = "VALUE1VALUE3",
					publish = "true");
			}

			if (IsElementPresent(locator1 = "//div[@class='data-set-wrapper' or @class='searchcontainer-content']//*[text()='VALUE4VALUE2']")) {
				CommerceNavigator.gotoEntry(entryName = "VALUE4VALUE2");

				CommerceSKUs.editSkuName(
					closeFrame = "true",
					productSku = "VALUE2VALUE4",
					publish = "true");
			}

			for (var value : list "VALUE1VALUE3:10,VALUE2VALUE4:20") {
				var sku = StringUtil.extractFirst(${value}, ":");
				var priceAndQuantity = StringUtil.extractLast(${value}, ":");

				CommerceNavigator.gotoEntry(entryName = ${sku});

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				CommerceEntry.gotoMenuTab(menuTab = "Price");

				CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

				CommerceEntry.editSkuPricingAndInventory(
					basePrice = ${priceAndQuantity},
					italyQuantity = ${priceAndQuantity},
					publish = "true");
			}
		}

		task ("When the buyer navigates to the Options Product's details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/options-product");
		}

		task ("And adds the product to the cart, filling all the fields and selecting value1 and value3") {
			FrontStore.addToCartFromProductDetails(
				boolean = "enabled",
				date = "01/02/2023",
				multipleSelectionValuesChecked = "Value5,Value6",
				numeric = 10,
				optionNamesAndValues = "color:Value1",
				productName = "Bundled Product",
				productSku = "VALUE1VALUE3",
				singleSelectionValueChecked = "Value3",
				text = "Text Content");
		}

		task ("Then pricing info are correct on the minicart") {
			CommerceNavigator.gotoMiniCart();

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
				value1 = "$ 10.00");
		}

		task ("When the buyer navigates to the order from the pending orders page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");
		}

		task ("And edits all the fields from the Pending Orders selecting value2 and value4") {
			Click(
				key_value = "Options Product",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			Click(
				key_menuItem = "Edit",
				locator1 = "CommerceNavigation#DROPDOWN_ITEM");

			FrontStore.editMiniCartItemProductOption(
				boolean = "disabled",
				cartItemOptionName = "color",
				cartItemOptionValue = "Value2",
				date = "01/01/2023",
				multipleSelectionValuesNotChecked = "Value5,Value6",
				numeric = 20,
				singleSelectionValueChecked = "Value4",
				text = "Text Content Edit");
		}

		task ("Then pricing info are correctly updated") {
			CommerceNavigator.gotoMiniCart();

			AssertTextEquals(
				locator1 = "CommerceAccelerators#MINI_CART_SUMMARY_TABLE_TOTAL",
				value1 = "$ 20.00");
		}

		task ("And he can view the fields in the Pending Orders page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");

			CommerceOrders.viewOrdersDetails(
				productListPrice = "20.00",
				productName = "Options Product",
				productOptions = "Value2,2023-01-01,20,Value4,Text Content Edit",
				productQuantity = 1,
				productSku = "VALUE2VALUE4",
				productTotalPrice = "$ 20.00");
		}
	}

	@description = "COMMERCE-12744. As a buyer, I cannot edit product options from the Placed Orders page"
	@priority = 5
	test CannotBuyerEditOnThePlacedOrder {
		property portal.acceptance = "true";

		task ("Given a new bundled product with an option (two values) and Static Price Type is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Bundled Product",
				productType = "Simple");

			CommerceJSONOptionsAPI._addCommerceOption(
				fieldType = "select",
				optionKey = "color",
				optionName = "Color",
				optionValues = "blue:Blue:1,white:White:2");

			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = '''"Bundled Product"''');

			CommerceNavigator.gotoEntry(entryName = "Bundled Product");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "Color",
				title = "Add Option");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Color",
				key_priceType = "Static",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");
		}

		task ("And the admin sets the linked product with a delta price for each option value") {
			for (var optionValueList : list "Blue:MIN93015:20,White:MIN93020:30") {
				var optionValueName = StringUtil.extractFirst(${optionValueList}, ":");

				var optionValueList = StringUtil.replaceFirst(${optionValueList}, "${optionValueName}:", "");

				var sku = StringUtil.extractFirst(${optionValueList}, ":");
				var deltaPrice = StringUtil.extractLast(${optionValueList}, ":");

				CommerceOptions.setDeltaPrice(
					deltaPrice = ${deltaPrice},
					key_index = ${optionValueName},
					key_optionIndex = "Color",
					multipleValuesLeft = "true",
					productSKU = ${sku});
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("And all SKUs are generated") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();
		}

		task ("And the price and inventory of generated SKUs are configured for the bundled product") {
			for (var value : list "BLUE:10,WHITE:20") {
				var sku = StringUtil.extractFirst(${value}, ":");
				var priceAndQuantity = StringUtil.extractLast(${value}, ":");

				CommerceNavigator.gotoEntry(entryName = ${sku});

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				CommerceEntry.gotoMenuTab(menuTab = "Price");

				CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

				CommerceEntry.editSkuPricingAndInventory(
					basePrice = ${priceAndQuantity},
					italyQuantity = ${priceAndQuantity},
					publish = "true");
			}
		}

		task ("When the buyer adds Blue to the cart for the bundled product, a single SKU product (e.g. MIN55858) and MIN93016A") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/bundled-product");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Color:Blue",
				productName = "Bundled Product",
				productSku = "BLUE");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/brake-fluid");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Package Quantity:12",
				productName = "Brake Fluid",
				productSku = "MIN93016A");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/wheel-seal-front");

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("And the buyer completes the checkout") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("And the buyer navigates to the order from the pending orders page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			Button.click(button = "View");
		}

		task ("Then there’s no ‘edit’ selectable from the single SKU’s ellipsis") {
			for (var productName : list "Wheel Seal - Front,Brake Fluid,Bundled Product") {
				Click(
					key_value = ${productName},
					locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

				AssertElementNotPresent(
					key_menuItem = "Edit",
					locator1 = "CommerceNavigation#DROPDOWN_ITEM");
			}
		}
	}

}