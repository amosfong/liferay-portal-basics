@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp();

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-12756. As an admin I can add a refund reason."
	@priority = 5
	test CanAddRefundReason {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the admin navigates to Payment page on System Settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Payment",
				configurationName = "Refund Reasons",
				configurationScope = "Virtual Instance Scope");
		}

		task ("When adds a refund reason") {
			CommercePaymentEntry.addRefundReason(
				key = "test",
				priority = 3,
				refundName = "reason");
		}

		task ("Then the refund reason is added successfully") {
			AssertElementPresent(
				key_configurationEntry = "test",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("When an admin adds a refund reason without a key") {
			Button.clickAdd();

			Type(
				locator1 = "SystemSettings#KEY",
				value1 = "");

			Button.clickSave();
		}

		task ("Then the reason is not added") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "This field is required.");
		}
	}

	@description = "This is a test for COMMERCE-6219. MoneyOrder Payment Method lifecycle"
	@priority = 5
	test CancelPayment {
		property portal.acceptance = "true";

		// TODO Review

		task ("Given a minium site with a buyer user ") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();

			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

			CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test Account");

			CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
				accountName = "Test Account",
				emailAddress = "buyer@liferay.com",
				role = "Buyer",
				userFirstName = "Buyer",
				userLastName = "User",
				userScreenName = "buyeruser");

			User.openUsersAdmin();

			ManagementBar.setFilterAndOrder(filterBy = "Account Users");

			CommerceLogin.editPasswordCP(
				newPassword = "ttest",
				requirePasswordReset = "true",
				userScreenName = "buyeruser");

			User.logoutPG();
		}

		task ("and the buyer places an order ") {
			CommerceLogin.miniumLogin(
				newPassword = PropsUtil.get("default.admin.password"),
				password = "ttest",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			Refresh();

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			User.logoutPG();
		}

		task ("When the order status is changed from Pending to Cancelled") {
			CommerceLogin.miniumLogin(urlAppend = "web/minium");

			CommerceOrders.openOrdersAdmin();

			WaitForElementPresent(
				key_orderStatus = "Pending",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

			ClickNoError(
				key_orderStatus = "Pending",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

			CommerceEntry.clickNoError(menuItem = "View");

			CommerceEntry.gotoMenuTab(menuTab = "Payments");

			CommercePaymentStatus.editPaymentStatus(statusValue = "Canceled");
		}

		task ("Then the payment should be cancelled") {
			Refresh();

			CommercePaymentStatus.assertPaymentStatus(statusValue = "Canceled");
		}
	}

	@description = "This is a test for COMMERCE-12756. As an admin I can delete a refund reason."
	@priority = 5
	test CanDeleteRefundReason {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the admin navigates to Payment page on System Settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Payment",
				configurationName = "Refund Reasons",
				configurationScope = "Virtual Instance Scope");
		}

		task ("And adds a refund reason") {
			CommercePaymentEntry.addRefundReason(key = "test");

			AssertElementPresent(
				key_configurationEntry = "test",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("When deletes the refund reason created") {
			LexiconEntry.openEntryMenu(rowEntry = "test");

			MenuItem.click(menuItem = "Delete");

			Alert.viewSuccessMessage();
		}

		task ("Then the reason created is no longer present in the Refund Reason list") {
			AssertElementNotPresent(
				key_configurationEntry = "test",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}
	}

	@description = "This is a test for COMMERCE-12756. As an admin I can edit a refund reason."
	@priority = 5
	test CanEditRefundReason {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the admin navigates to Payment page on System Settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Payment",
				configurationName = "Refund Reasons",
				configurationScope = "Virtual Instance Scope");
		}

		task ("And adds a refund reason") {
			CommercePaymentEntry.addRefundReason(key = "test");

			AssertElementPresent(
				key_configurationEntry = "test",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("And opens the refund reason created") {
			LexiconEntry.openEntryMenu(rowEntry = "test");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then can edit the refund reason created") {
			CommercePaymentEntry.updateRefundReason(key = "NewKey");

			AssertElementPresent(
				key_configurationEntry = "NewKey",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}
	}

	@description = "This is a test for COMMERCE-11432. Users can view the Mercanet secret key as masked from both page and page's HTML source"
	@priority = 3
	test CanViewMercanetSecretKeyisMasked {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When the admin sets the secret key for Mercanet Payment from site settings") {
			Site.openSiteSettingsAdmin(siteURLKey = "minium");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Payment",
				configurationName = "Mercanet Payment Engine Method Group Service",
				configurationScope = "Site Scope");

			Type(
				key_fieldName = "secretKey",
				locator1 = "FormFields#PASSWORD_FIELD",
				value1 = "MercanetPassword");

			SystemSettings.saveConfiguration();
		}

		task ("Then the secret key is masked on the page") {
			AssertTextEquals(
				key_fieldName = "secretKey",
				locator1 = "FormFields#PASSWORD_FIELD",
				value1 = "TEMP_OBFUSCATION_VALUE");

			AssertTextNotEquals(
				key_fieldName = "secretKey",
				locator1 = "FormFields#PASSWORD_FIELD",
				value1 = "MercanetPassword");
		}

		task ("And the secret key is masked in the page's HTML source") {
			var currentURL = Navigator.getCurrentURL();

			Navigator.openSpecificURL(url = "view-source:${currentURL}");

			AssertTextPresent(value1 = "\"value\":\"TEMP_OBFUSCATION_VALUE\"");

			AssertTextNotPresent(value1 = "\"value\":\"MercanetPassword\"");
		}

		task ("When the admin sets the secret key for Mercanet Payment from channels admin page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Mercanet");

			CommerceEntry.clickTableEntryEditButton(
				entryName = "Mercanet",
				table = "Payment Methods");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Click(
				locator1 = "CommerceEntry#PAYMENT_METHODS_SIDE_PANEL_NAV_ITEMS",
				navItem = "Configuration");

			Type(
				key_fieldName = "secretKey",
				locator1 = "FormFields#PASSWORD_FIELD",
				value1 = "MercanetPassword");

			PortletEntry.save();
		}

		task ("Then the secret key is masked on the page") {
			AssertTextEquals(
				key_fieldName = "secretKey",
				locator1 = "FormFields#PASSWORD_FIELD",
				value1 = "TEMP_OBFUSCATION_VALUE");

			AssertTextNotEquals(
				key_fieldName = "secretKey",
				locator1 = "FormFields#PASSWORD_FIELD",
				value1 = "MercanetPassword");
		}

		task ("And the secret key is masked in the page's HTML source") {
			var channelId = CommerceJSONChannelsAPI._getCommerceChannelIdByName(channelName = "Minium Portal");

			CommerceChannels.openMercanetConfigurationFrame(channelId = ${channelId});

			var currentURL = Navigator.getCurrentURL();

			Navigator.openSpecificURL(url = "view-source:${currentURL}");

			AssertTextPresent(value1 = "value=\"TEMP_OBFUSCATION_VALUE\"");

			AssertTextNotPresent(value1 = "value:\"MercanetPassword\"");
		}
	}

	@description = "This is a test for COMMERCE-6218. MoneyOrder Payment Method lifecycle"
	@priority = 5
	test MoneyOrderCheckout {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceCheckout.gotoCheckout();

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "Italy",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24,
			shippingMethod = "Standard");
	}

}