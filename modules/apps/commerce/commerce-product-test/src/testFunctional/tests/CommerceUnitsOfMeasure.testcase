@component-name = "portal-commerce"
definition {

	property custom.properties = "company.security.strangers.verify=false${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-12424. The admin can add and verify the SKU/UOM combination information on the discount admin page"
	@priority = 5
	test CanAddSKUUOMsAndVerifyInfoOnDiscountPage {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a Discount applied to SKU target without being applied to a specific SKU is created") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 50,
				target = "skus",
				title = "Test Discount",
				usePercentage = "true");
		}

		task ("When searching a SKU(e.g. MIN93015) on the discount detail admin page") {
			CommerceNavigator.goToDiscountAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Discount");

			Type(
				key_placeHolder = "Find a SKU",
				locator1 = "TextInput#ANY_PLACEHOLDER",
				value1 = "MIN93015");
		}

		task ("Then a new column for SKU/UOM combination for the UOM Key can be searched with uomKey column empty") {
			AssertTextEquals(
				key_colunmPosition = 4,
				key_linePosition = 1,
				locator1 = "CommerceEntry#TABLE_EXPOSE_ENTRY_BY_POSITION",
				value1 = "");
		}

		task ("When the sku is selected into the SKU list") {
			Click(
				key_indexNumber = 1,
				key_text = "Select",
				locator1 = "Button#ANY_N");
		}

		task ("Then a new column is added to the List of SKUs selected for the UOM Key and the uomKey column is empty") {
			SelectFrameTop();

			CommerceEntry.gotoMenuTab(menuTab = "Details");

			AssertElementPresent(
				key_field = "UOM",
				locator1 = "FrontendDataSet#TABLE_ITEM_COLUMN");

			AssertTextEquals(
				key_cellName1 = "MIN93015",
				key_cellName2 = "ABS Sensor",
				key_columnNumber = 3,
				locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
				value1 = "");

			Pagination.viewResults(results = "Showing 1 to 1 of 1 entries.");

			Click(
				key_value = "MIN93015",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Remove");
		}

		task ("When one UOM is added to the SKU MIN93015") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				productSKU = "MIN93015",
				uomKey = "uomKey1",
				uomName = "uomName1");
		}

		task ("Then the entry for SKU/UOM combination can be searched with an updated UOM key") {
			SelectFrameTop();

			CommerceEntry.gotoMenuTab(menuTab = "Details");

			Type(
				key_placeHolder = "Find a SKU",
				locator1 = "TextInput#ANY_PLACEHOLDER",
				value1 = "MIN93015");

			AssertTextEquals(
				key_colunmPosition = 4,
				key_linePosition = 1,
				locator1 = "CommerceEntry#TABLE_EXPOSE_ENTRY_BY_POSITION",
				value1 = "uomKey1");
		}

		task ("And the UOM key is shown in the List of SKUs after selecting") {
			Click(
				key_indexNumber = 1,
				key_text = "Select",
				locator1 = "Button#ANY_N");

			SelectFrameTop();

			CommerceEntry.gotoMenuTab(menuTab = "Details");

			AssertTextEquals(
				key_cellName1 = "MIN93015",
				key_cellName2 = "ABS Sensor",
				key_columnNumber = 3,
				locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
				value1 = "uomKey1");

			Pagination.viewResults(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("When the second UOM is added to the SKU MIN93015") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				productSKU = "MIN93015",
				uomKey = "uomKey2",
				uomName = "uomName2");
		}

		task ("Then two entries for each SKU/UOM combination can be searched with UOM keys") {
			SelectFrameTop();

			CommerceEntry.gotoMenuTab(menuTab = "Details");

			Type(
				key_placeHolder = "Find a SKU",
				locator1 = "TextInput#ANY_PLACEHOLDER",
				value1 = "MIN93015");

			for (var index : list "1,2") {
				AssertTextEquals(
					key_colunmPosition = 4,
					key_linePosition = ${index},
					locator1 = "CommerceEntry#TABLE_EXPOSE_ENTRY_BY_POSITION",
					value1 = "uomKey${index}");
			}
		}

		task ("And two entries with UOM keys are shown in the List of SKUs after selecting") {
			Click(
				key_indexNumber = 2,
				key_text = "Select",
				locator1 = "Button#ANY_N");

			SelectFrameTop();

			CommerceEntry.gotoMenuTab(menuTab = "Details");

			for (var index : list "1,2") {
				AssertTextEquals(
					key_cellName1 = "MIN93015",
					key_cellName2 = "uomKey${index}",
					key_columnNumber = 3,
					locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
					value1 = "uomKey${index}");
			}

			Pagination.viewResults(results = "Showing 1 to 2 of 2 entries.");
		}
	}

	@description = "COMMERCE-12335. As admin, I can create the first UOM for an SKU verifying the info message, obligatory fields and tooltip messages on the modal."
	@priority = 5
	test CanAddTheFirstUOMAndVerifyInfoOnModal {
		property portal.acceptance = "true";

		task ("Given a new simple product is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 25,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");
		}

		task ("And admin reaches the new product's SKUs tab") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");
		}

		task ("And goes to the Units of Measure (UOM) tab") {
			CommerceNavigator.gotoEntry(entryName = "TESTSKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Units of Measure (UOM)");
		}

		task ("When clicks the plus button to add the first Unit of Measure") {
			Click(locator1 = "Button#PLUS");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then can verify that the info message for the first UOM and it cannot be added without entering name and key") {
			AssertElementPresent(
				key_infoMessage = "By creating the first unit of measure for this SKU, all existing SKU stock and pricing (if any) will be mapped to the first unit of measure created. If you wish to continue selling this SKU by the unit, it is recommended to create this unit of measure first. Otherwise you can continue and any existing stock and pricing will be mapped to this unit of measure.",
				locator1 = "Message#INFO_SPECIFIC");

			Button.clickAdd();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertTextEquals.assertText(
				key_alertMessage = "The Unit of Measure field is required.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "The Unit of Measure field is required.");

			AssertTextEquals.assertText(
				key_alertMessage = "The Key field is required.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "The Key field is required.");

			Type(
				key_fieldLabel = "Unit of Measure",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Bottle");

			Type(
				locator1 = "CommerceEntry#KEY_FIELD",
				value1 = "bt");
		}

		task ("And can verify default values for other fields") {
			AssertElementPresent(
				key_fieldLabel = "Decimal Allowed",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = 0);

			AssertElementPresent(
				key_fieldLabel = "Base Unit Quantity",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = 1);

			MouseOver(
				key_label = "Base Unit Quantity",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_ICON");

			VerifyElementPresent(
				key_label = "Base Unit Quantity",
				key_text = "Buyers can only purchase in increments of the base unit quantity.",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_TEXT_WITH_TITLE");

			AssertElementPresent(
				key_text = "Base Price",
				locator1 = "TextInput#ANY",
				value1 = "25.00");

			Type(
				key_text = "Base Price",
				locator1 = "TextInput#ANY",
				value1 = 3);

			AssertElementPresent(
				key_text = "Promotion Price",
				locator1 = "TextInput#ANY",
				value1 = "0.00");

			Type(
				key_text = "Promotion Price",
				locator1 = "TextInput#ANY",
				value1 = 2);
		}

		task ("And can verify the tooltip message on the Priority field is present and the Purchasable checkbox is checked by default") {
			MouseOver(
				key_label = "Priority",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_ICON");

			VerifyElementPresent(
				key_label = "Priority",
				key_text = "This determines which UOM gets set as the default in the shopping experience. The closer to zero, the higher the priority in choosing the default.",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_TEXT_WITH_TITLE");

			Type(
				key_fieldLabel = "Priority",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = 1);

			AssertChecked(
				key_toggleSwitchLabel = "Purchasable",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickAdd();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");
		}

		task ("And can verify the first UOM is populated on the table") {
			CommerceEntry.viewUOMEntry(uomRowList = "UOM:Bottle,Key:bt,Decimal Allowed:0,Base Unit Quantity:1,Conversion Rate:1,Purchasable:Yes,Primary:Yes");
		}
	}

	@description = "COMMERCE-12336. As admin, I can create the second UOM for an SKU verifying various fields on the modal."
	@priority = 5
	test CanAddTheSecondUOMAndVerifyInfoOnModal {
		property portal.acceptance = "true";

		task ("Given a new simple product is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 25,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");
		}

		task ("And admin reaches the new product's SKUs tab") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");
		}

		task ("And creates the first Unit of Measure") {
			CommerceNavigator.gotoEntry(entryName = "TESTSKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Units of Measure (UOM)");

			// Check if it's possible to use API for the creation of the UOM

			CommerceEntry.addUOMEntry(
				basePrice = "1.75",
				baseUnitQuantity = "0.75",
				decimalAllowed = 2,
				priority = 1,
				unitOfMeasureKey = "lt",
				unitOfMeasureName = "Liter");
		}

		task ("When clicks the plus button to add the second Unit of Measure") {
			Click(locator1 = "Button#PLUS");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then can verify 'Set as Primary UOM' toggle is disabled by default and the Primay UOM info is shown on the modal") {
			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Set as Primary Unit of Measure",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementPresent(
				key_unitOfMeasureName = "Liter",
				locator1 = "CommerceEntry#PRIMARY_UNIT_OF_MEASURE_LABEL_ON_MODAL");
		}

		task ("When enters a name and the same key of the previous UOM for the second Unit of Measure") {
			Type(
				key_fieldLabel = "Unit of Measure",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Bottle");

			Type(
				locator1 = "CommerceEntry#KEY_FIELD",
				value1 = "lt");

			Button.clickAdd();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then can verify the error alert on the modal") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "There is another unit of measure with the same key.");
		}

		task ("When enters the Conversion Rate as 0 for the second Unit of Measure") {
			ScrollWebElementIntoView(
				key_fieldLabel = "Conversion Rate",
				locator1 = "TextInput#GENERIC_TEXT_INPUT");

			Type(
				key_fieldLabel = "Conversion Rate",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = 0);

			KeyPress(
				key_fieldLabel = "Conversion Rate",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "\ENTER");
		}

		task ("Then can verify the error alert to enter a valid conversion rate") {
			AssertTextEquals.assertText(
				key_alertMessage = "Please enter a value greater than 0.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "Please enter a value greater than 0.");
		}

		task ("When creates the second Unit of Measure") {
			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.addUOMEntry(
				basePrice = "3.50",
				baseUnitQuantity = "1.50",
				conversionRate = 2,
				decimalAllowed = 2,
				priority = 2,
				unitOfMeasureKey = "bt",
				unitOfMeasureName = "Bottle");
		}

		task ("Then can view the second UOM entry is populated on the table") {
			CommerceEntry.viewUOMEntry(uomRowList = "UOM:Bottle,Key:bt,Decimal Allowed:2,Base Unit Quantity:1.5,Conversion Rate:2,Purchasable:Yes,Primary:No");
		}
	}

	@description = "COMMERCE-12374, As a buyer user I can add to cart products SKU with multiple UOMs"
	@priority = 5
	test CanAddToCartSKUWithMultipleUOMs {
		property portal.acceptance = "true";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("2 UOMs are created to MIN55861 with 0.6 as incremental order quantity") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.6",
				productSKU = "MIN55861",
				uomKey = "UOM1KEY",
				uomName = "UOM1");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.6",
				productSKU = "MIN55861",
				promoPrice = 15,
				uomKey = "UOM2KEY",
				uomName = "UOM2");
		}

		task ("And from the MIN55861 product configuration, multiple quantity is set as 0.6") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "0.6",
				productName = "U-Joint");
		}

		task ("When the buyer user logs in ") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then assert U-Joint product card shows the 'View All Variants' button instead of the add to cart") {
			CommerceNavigator.searchEntry(entryName = "U-Joint");

			AssertElementPresent(
				key_text = "View all variants",
				locator1 = "Button#ANY");
		}

		task ("When the buyer navigates to Minium catalog → MIN55861 product details") {
			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("And assert that the information shown on the page is related to the selected SKU/UOM(availability, stock quantity, list price, promo price)") {
			FrontStore.assertProductDetails(
				productAvailability = "Available",
				productListPrice = "20.00",
				productName = "Virtual Product",
				productSKU = "MIN55861",
				productStockQuantity = 120);
		}

		task ("And adds to the cart the SKU/first UOM combination with quantity 3") {
			FrontStore.addInitializerProductToCartFromProductDetails(
				productName = "U-Joint",
				productQuantity = 3);
		}

		task ("And selects the second UOM") {
			Select(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM2");
		}

		task ("And assert that the information shown on the page is related to the selected SKU/UOM(availability, stock quantity, list price, promo price)") {
			FrontStore.assertProductDetails(
				productAvailability = "Unavailable",
				productName = "Virtual Product",
				productSalePrice = "15.00",
				productSKU = "MIN55861",
				productStockQuantity = 0);
		}

		task ("And try to add to the cart the SKU/Second UOM combination") {
			task ("But the add to cart button is disabled") {
				AssertElementPresent(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE_DISABLED");
			}
		}

		task ("And selects the first UOM again and adds it to the cart with quantity 3") {
			FrontStore.addInitializerProductToCartFromProductDetails(
				productName = "U-Joint",
				productQuantity = 3);
		}

		task ("Then the SKUs/UOMs are correctly shown on the minicart showing the right UOM keys, quantities, unit price and total price") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemName = "U-Joint",
				cartItemPriceValue = "20.00",
				cartItemQuantity = 6,
				cartItemSku = "MIN55861",
				cartItemUOMKey = "UOM1KEY",
				cartSummaryTotal = "200.00");
		}
	}

	@description = "COMMERCE-12394. As a Buyer user, I can view quantity selector Popover errors for not allowed quantities"
	@priority = 4
	test CanAssertQuantitySelectorPopUpUOMErrors {
		property portal.acceptance = "false";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("2 UOMs are created to MIN55861 with incremental and precision order quantity") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.444",
				precision = 3,
				productSKU = "MIN55861",
				uomKey = "UOM1KEY",
				uomName = "UOM1");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.25",
				precision = 2,
				productSKU = "MIN55861",
				uomKey = "UOM2KEY",
				uomName = "UOM2");

			CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
				productSku = "MIN55861",
				quantity = 10,
				uomKey = "UOM2KEY",
				warehouseName = "Italy");
		}

		task ("And from the MIN55861 product configuration, multiple quantity is set as 0.01") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "0.01",
				productName = "U-Joint");
		}

		task ("When the buyer user logs in ") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When the buyer navigates to the U-Joint Product Detail page") {
			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("And for UOM1, the buyer sets the quantity to 0.0555") {
			Type(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "0.0555");
		}

		task ("Then assert that the errors are shown in the quantity selector popover") {
			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "true",
				quantity = "2.22",
				quantityConfiguration = "multiple",
				quantityConfigurationDecimalText = 3);
		}

		task ("When the buyer sets the quantity to a valid quantity(2.22)") {
			Type(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "2.22");
		}

		task ("Then assert that the popover does not show any error") {
			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "false",
				quantity = "2.22",
				quantityConfiguration = "multiple");
		}

		task ("When the buyer selects UOM2") {
			Select(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM2");
		}

		task ("Then assert that the following errors are shown in the quantity selector popover") {
			Type(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "0.888");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "true",
				quantity = "0.25",
				quantityConfiguration = "multiple",
				quantityConfigurationDecimalText = 2);
		}
	}

	@description = "COMMERCE-12393. As a buyer I can view the UOMs sorted by priority on the UOM selector from the product details page."
	@priority = 4
	test CanAssertUOMsAreSortedByPriority {
		property portal.acceptance = "false";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And 4 UOMs with decreasing priority are created and assigned to a SKU (e.g. MIN93015)") {
			for (var indexAndActivation : list "4:10:true,1:25:true,2:15:false,3:20:true") {
				var index = StringUtil.extractFirst(${indexAndActivation}, ":");

				var indexAndActivation = StringUtil.replaceFirst(${indexAndActivation}, "${index}:", "");

				var price = StringUtil.extractFirst(${indexAndActivation}, ":");
				var active = StringUtil.extractLast(${indexAndActivation}, ":");

				CommerceJSONSKUsAPI._addCommerceUOM(
					active = ${active},
					basePrice = ${price},
					priority = ${index},
					productSKU = "MIN93015",
					uomKey = "uom${index}",
					uomName = "UOM${index}");
			}
		}

		task ("When the buyer user logs in ") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the buyer goes to the product details page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then the buyer user can assert the UOMs are sorted by priority ") {
			AssertSelectedLabel(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM1");

			for (var indexAndUOMName : list "1:uom1,2:uom3,3:uom4") {
				var index = StringUtil.extractFirst(${indexAndUOMName}, ":");
				var uomName = StringUtil.extractLast(${indexAndUOMName}, ":");

				AssertElementPresent(
					index = ${index},
					locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE_BY_INDEX",
					uomName = ${uomName});
			}

			AssertElementNotPresent(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE",
				uomName = "uom2");

			FrontStore.assertProductDetails(
				productListPrice = "25.00",
				productName = "ABS Sensor",
				productSKU = "MIN93015");
		}
	}

	@description = "This is a test for COMMERCE-12456. The admin can view the base price of a product updated based on the primary SKU/UOM combination"
	@priority = 5
	test CanBasePriceBeUpdatedBasedOnTheOneFromPrimaryUOM {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And one UOM is added to the SKU MIN93015 with '56.00 USD' as the base price") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 56,
				productSKU = "MIN93015",
				uomKey = "uomKey1",
				uomName = "uomName1");
		}

		task ("And the admin navigates to Commerce → Products → ABS Sensor → SKUs → MIN93015 → Units of Measure (UOM) tab") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Units of Measure (UOM)");
		}

		task ("When the admin clicks on the plus button trying to create a second UOM") {
			Click(locator1 = "Button#PLUS");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then on the modal base price is set with default value '56.00 USD'") {
			AssertTextEquals(
				key_text = "Base Price",
				locator1 = "TextInput#ANY",
				value1 = "56.00");
		}

		task ("When the admin saves the second UOM by giving 'UOM2' as name and 'uom2' as key") {
			ClickNoError(
				key_modalTitle = "Add Unit of Measure",
				locator1 = "Button#CLOSE_MODAL");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.addUOMEntry(
				unitOfMeasureKey = "uom2",
				unitOfMeasureName = "UOM2");
		}

		task ("And the admin clicks on the plus button trying to create a third UOM") {
			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Click(locator1 = "Button#PLUS");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then on the modal base price is set with default value '56.00 USD'") {
			AssertTextEquals(
				key_text = "Base Price",
				locator1 = "TextInput#ANY",
				value1 = "56.00");
		}
	}

	@description = "COMMERCE-12405. It is possible for the buyer user to view information about UOM and quantity for each order item."
	@priority = 5
	test CanBuyerViewOrderItemUOMAndQuantity {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And 2 UOMs are added for MIN93016A (uom1 and uom2), 1 UOM for MIN93016B (uom3) all with precision 1 (this last one with incremental order quantity of 0.6)") {
			for (var index : list "1,2") {
				CommerceJSONSKUsAPI._addCommerceUOM(
					basePrice = ${index},
					productSKU = "MIN93016A",
					uomKey = "uom${index}",
					uomName = "UOM${index}");
			}

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 3,
				incrementalOrderQuantity = "0.6",
				productSKU = "MIN93016B",
				uomKey = "uom3",
				uomName = "UOM3");
		}

		task ("And Brake Fluid's Multiple Order Quantity is set to 0.1") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "0.1",
				productName = "Brake Fluid");
		}

		task ("When the buyer logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And adds to cart MIN93016A/uom1 with quantity 2, MIN93016A/uom2 with quantity 3, MIN93016B/uom3 with quantity 1.2, MIN93016C with quantity 1") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				cartItems = "MIN93016A:2:uom1,MIN93016A:3:uom2,MIN93016C:1,MIN93016B:1.2:uom3",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");
		}

		task ("And views the order from Pending Order Minium page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");
		}

		task ("Then the UOMs keys and quantities are all correct") {
			for (var rowList : list "MIN93016A:2,MIN93016A:3,MIN93016B:1.2,MIN93016C:1") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var quantity = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 7,
					key_value = ${quantity},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var rowList : list "MIN93016A:uom1,MIN93016A:uom2,MIN93016B:uom3,MIN93016C:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 8,
					key_value = ${uomKey},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}

		task ("When the buyer starts the checkout of the order") {
			CommerceCheckout.gotoCheckout();

			CommerceCheckout.setAddress(selectedAddressName = "Test Address");

			Click(locator1 = "Button#CONTINUE");

			CommerceCheckout.setStandardShippingOption();
		}

		task ("Then on the order summary page the quantities and UOMs are correct for each order item") {
			for (var quantity : list "2,3,1,1.2") {
				AssertTextEquals(
					key_productQuantity = ${quantity},
					locator1 = "CommerceAccelerators#CHECKOUT_SUMMARY_PRODUCT_TABLE_QUANTITY",
					value1 = ${quantity});
			}

			for (var rowList : list "1:uom1,2:uom2,3:,4:uom3") {
				var key_row = StringUtil.extractFirst(${rowList}, ":");
				var key_uom = StringUtil.extractLast(${rowList}, ":");

				AssertTextEquals(
					key_row = ${key_row},
					key_uom = ${key_uom},
					locator1 = "CommerceAccelerators#CHECKOUT_SUMMARY_PRODUCT_TABLE_UOM",
					value1 = ${key_uom});
			}

			Click(locator1 = "Button#CONTINUE");
		}

		task ("When navigates to the order from Placed Order Minium page") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			Button.click(button = "View");
		}

		task ("Then the UOMs keys and quantities are shown correctly") {
			for (var rowList : list "MIN93016A:2,MIN93016A:3,MIN93016B:1.2,MIN93016C:1") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var quantity = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 7,
					key_value = ${quantity},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var rowList : list "MIN93016A:uom1,MIN93016A:uom2,MIN93016B:uom3,MIN93016C:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 8,
					key_value = ${uomKey},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}
	}

	@description = "COMMERCE-12337. As admin, I can edit and delete the Units of Measure entries."
	@priority = 5
	test CanEditAndDeleteUOM {
		property portal.acceptance = "true";

		task ("Given a new simple product is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 25,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");
		}

		task ("And admin reaches the new product's SKUs tab") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Simple Product");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");
		}

		task ("And creates two Units of Measure") {
			CommerceNavigator.gotoEntry(entryName = "TESTSKU");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Units of Measure (UOM)");

			// Check if it's possible to use API for the creation of the UOM

			CommerceEntry.addUOMEntry(
				basePrice = "1.75",
				baseUnitQuantity = "0.75",
				decimalAllowed = 2,
				priority = 1,
				unitOfMeasureKey = "lt",
				unitOfMeasureName = "Liter");

			CommerceEntry.addUOMEntry(
				basePrice = "3.50",
				baseUnitQuantity = "1.50",
				conversionRate = 2,
				decimalAllowed = 2,
				priority = 2,
				unitOfMeasureKey = "bt",
				unitOfMeasureName = "Bottle");
		}

		task ("When edits the Decimal Allowed and Base Unit Quantity fields of the first UOM entry") {
			Click(
				key_value = "Liter",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			ClickNoError(
				key_selectAction = "Edit",
				locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Type(
				key_fieldLabel = "Decimal Allowed",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = 0);

			Type(
				key_fieldLabel = "Base Unit Quantity",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "1.70");

			Button.clickSave();
		}

		task ("Then an error alert is shown to enter the valid value for Decimal Allowed field") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "Error:Decimals Allowed cannot be less than the number of decimals in the Base Unit Quantity.");

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");
		}

		task ("When edits the second UOM entry and sets it as the Primary UOM") {
			CommerceEntry.editUOMEntry(
				baseUnitQuantity = 1,
				conversionRate = 12,
				decimalAllowed = 0,
				entryName = "Bottle",
				purchasable = "false",
				setAsPrimaryUOM = "true",
				unitOfMeasureKey = "cr",
				unitOfMeasureNewName = "Crate");
		}

		task ("Then can verify the fields are updated on the table") {
			CommerceEntry.viewUOMEntry(uomRowList = "UOM:Crate,Key:cr,Decimal Allowed:0,Base Unit Quantity:1,Conversion Rate:12,Purchasable:No,Primary:Yes");
		}

		task ("And can also delete one of the Units of Measure entries") {
			Click(
				key_value = "Liter",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			ClickNoError(
				key_selectAction = "Delete",
				locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

			Alert.viewSuccessMessage();

			AssertElementNotPresent(
				key_firstRowValue = "UOM",
				key_secondRowValue = "Liter",
				locator1 = "CommerceEntry#GENERIC_TABLE_ROW_VALUE");
		}
	}

	@description = "This is a test for COMMERCE-12551. As a buyer user, I cannot add the UOM to the cart when the SKU/UOM's stock quantity is zero and the allow back order is disabled"
	@priority = 5
	test CannotAddToCartUOMWhenStockIsZeroAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And two UOMs are added to the SKU MIN93015, the UOM2 has no inventory") {
			for (var index : list "1,2") {
				CommerceJSONSKUsAPI._addCommerceUOM(
					basePrice = ${index},
					productSKU = "MIN93015",
					uomKey = "uomKey${index}",
					uomName = "uomName${index}");
			}
		}

		task ("And Allow Back Orders toggle is switched off for product ABS Sensor") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "ABS Sensor");
		}

		task ("And the buyer navigates to ABS Sensor's product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("When the buyer switches to UOM2 using the select") {
			Select(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "uomName2");
		}

		task ("Then the stock value is 0 and unavailable label is shown") {
			AssertElementPresent(
				key_filterOption = "0 in Stock",
				locator1 = "AppBuilder#CHOOSE_APP_SEARCH_FILTER_BY_OPTION");

			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}

		task ("And the add to cart button is disabled") {
			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");

			AssertElementPresent(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE_DISABLED");
		}

		task ("And no items are added to the cart") {
			AssertElementNotPresent(
				key_itemCount = 1,
				locator1 = "CommerceAccelerators#MINI_CART_BUTTON_DATA_BADGE_COUNT");
		}
	}

	@description = "This is a test for COMMERCE-12461. If the feature flags for UOM and POA are set, then the admin can view the pricing section in the SKU details frame has been removed, including the POA switch"
	@priority = 4
	test CannotViewPricingInformationFromSKUDetails {
		property portal.acceptance = "false";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When the admin navigates to Commerce → Products → ABS Sensor → SKUs → MIN93015 → Details tab") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Details");
		}

		task ("Then the whole pricing section is removed from the details, including the Price on Application switch") {
			AssertElementNotPresent(
				key_title = "Pricing",
				locator1 = "Header#H4_TITLE");

			for (var pricingEntry : list "Base Price,Promotion Price,Cost") {
				AssertElementNotPresent(
					key_text = ${pricingEntry},
					locator1 = "TextInput#ANY");
			}

			AssertElementNotPresent(
				key_toggleSwitchLabel = "Price on Application",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		task ("When the admin clicks the plus button for creating a new SKU") {
			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");
		}

		task ("Then the whole pricing section is removed from the side panel, including the Price on Application switch") {
			AssertElementNotPresent(
				key_title = "Pricing",
				locator1 = "Header#H4_TITLE");

			for (var pricingEntry : list "Base Price,Promotion Price,Cost") {
				AssertElementNotPresent(
					key_text = ${pricingEntry},
					locator1 = "TextInput#ANY");
			}

			AssertElementNotPresent(
				key_toggleSwitchLabel = "Price on Application",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "COMMERCE-12531. It is possible for the order manager to view information about UOM and quantity for each order item."
	@priority = 5
	test CanOrderManagerViewOrderItemUOMAndQuantity {
		property portal.acceptance = "true";

		task ("Given a Minium site with a business account") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Commerce Account",
				accountType = "Business");
		}

		task ("And 2 UOMs are added for MIN93016A (uom1 and uom2), 1 UOM for MIN93016B (uom3) all with precision 1 (this last one with incremental order quantity of 0.6)") {
			for (var index : list "1,2") {
				CommerceJSONSKUsAPI._addCommerceUOM(
					basePrice = ${index},
					productSKU = "MIN93016A",
					uomKey = "uom${index}",
					uomName = "UOM${index}");
			}

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 3,
				incrementalOrderQuantity = "0.6",
				productSKU = "MIN93016B",
				uomKey = "uom3",
				uomName = "UOM3");
		}

		task ("And Brake Fluid's Multiple Order Quantity is set to 0.1") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "0.1",
				productName = "Brake Fluid");
		}

		task ("And MIN93016A/uom1 with quantity 2, MIN93016A/uom2 with quantity 3, MIN93016B/uom3 with quantity 1.2, MIN93016C with quantity 1 are added to cart") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				cartItems = "MIN93016A:2:uom1,MIN93016A:3:uom2,MIN93016C:1,MIN93016B:1.2:uom3",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");
		}

		task ("When navigating to the order from the admin order page") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Open");
		}

		task ("Then the UOMs keys and quantities are all correct") {
			for (var rowList : list "MIN93016A:2,MIN93016A:3,MIN93016B:1.2,MIN93016C:1") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var quantity = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 9,
					key_value = ${quantity},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var rowList : list "MIN93016A:uom1,MIN93016A:uom2,MIN93016B:uom3,MIN93016C:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 10,
					key_value = ${uomKey},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}

		task ("When updating the precision of uom3 to be 3") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 3,
				incrementalOrderQuantity = "0.6",
				precision = 3,
				productSKU = "MIN93016B",
				uomKey = "uom3",
				uomName = "UOM3");
		}

		task ("Then the order item quantity is updated to be 1.200") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Open");

			AssertElementPresent(
				key_entryTitle = "MIN93016B",
				key_index = 9,
				key_value = "1.2",
				locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");

			AssertElementPresent(
				key_entryTitle = "MIN93016B",
				key_index = 10,
				key_value = "uom3",
				locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
		}

		task ("When navigating to the order from the Minium pending order page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");
		}

		task ("Then the order item quantity is updated to be 1.200") {
			AssertElementPresent(
				key_entryTitle = "MIN93016B",
				key_index = 7,
				key_value = "1.2",
				locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");

			AssertElementPresent(
				key_entryTitle = "MIN93016B",
				key_index = 8,
				key_value = "uom3",
				locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
		}

		task ("When completing checkout of the order") {
			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();

			CommerceJSONDeliveryCart._postCommerceCartCheckout(cartId = ${orderId});
		}

		task ("And navigating to the order from the Minium placed order page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			Button.click(button = "View");
		}

		task ("Then the order item quantity is updated to be 1.200") {
			AssertElementPresent(
				key_entryTitle = "MIN93016B",
				key_index = 7,
				key_value = "1.2",
				locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");

			AssertElementPresent(
				key_entryTitle = "MIN93016B",
				key_index = 8,
				key_value = "uom3",
				locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
		}
	}

	@description = "This is a test for COMMERCE-12539. It is possible for the order manager to view information about UOM and quantity for each order item during the shipping process."
	@priority = 5
	test CanOrderManagerViewOrderItemUOMAndQuantityDuringShippingProcess {
		property portal.acceptance = "true";

		task ("Given a Minium site with a business account") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Commerce Account",
				accountType = "Business");
		}

		task ("And 2 UOMs for MIN93016A and 1 for MIN93016B are created") {
			for (var rowList : list "0.2:1,0.7:2") {
				var incrementalOrderQuantity = StringUtil.extractFirst(${rowList}, ":");
				var uomKeyIndex = StringUtil.extractLast(${rowList}, ":");

				CommerceJSONSKUsAPI._addCommerceUOM(
					basePrice = 10,
					incrementalOrderQuantity = ${incrementalOrderQuantity},
					productSKU = "MIN93016A",
					uomKey = "uom${uomKeyIndex}",
					uomName = "UOM${uomKeyIndex}");
			}

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				incrementalOrderQuantity = "1.3",
				productSKU = "MIN93016B",
				uomKey = "uom3",
				uomName = "UOM3");
		}

		task ("And Brake Fluid's Multiple Order Quantity is set to 0.1") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = "0.1",
				productName = "Brake Fluid");
		}

		task ("And some quantity is added to MIN93016A/uom2 in the inventory") {
			CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
				productSku = "MIN93016A",
				quantity = 10,
				uomKey = "uom2",
				warehouseName = "Italy");
		}

		task ("And MIN93016A, MIN93016B and MIN93016C are added to the cart in different quantities with different uoms") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				cartItems = "MIN93016A:1.2:uom1,MIN93016A:1.4:uom2,MIN93016B:2.6:uom3,MIN93016C:2",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");
		}

		task ("And the order checkout is completed") {
			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();

			CommerceJSONDeliveryCart._postCommerceCartCheckout(cartId = ${orderId});
		}

		task ("And the order is accepted") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("And a shipment process is started") {
			Click(
				key_index = "Create Shipment",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("When the plus button is clicked in order to add order items to the shiment") {
			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then on the modal the UOM and column quantities display the right values") {
			for (var rowList : list "MIN93016A:1.2:uom1,MIN93016A:1.4:uom2,MIN93016B:2.6:uom3,MIN93016C:2:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${sku}:", "");

				var outstandingQuantity = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertTextEquals(
					key_cellName1 = ${sku},
					key_cellName2 = ${uomKey},
					key_columnNumber = 4,
					locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
					value1 = ${outstandingQuantity});
			}
		}

		task ("When all 4 order items are added to the shipment") {
			Click.clickNoMouseOverNoWaitForVisible(locator1 = "CommerceNavigation#SELECT_ALL_CHECKBOX");

			Button.clickSubmitButton();
		}

		task ("And each order item is edited to set the quantity in shipment (e.g. until outstanding quantity reaches 0 using Italy warehouse) and using the quantity arrows for MIN93016A/uom1") {
			Click(
				key_entryName = "MIN93016A",
				key_uom = "uom1",
				locator1 = "CommerceNavigation#ENTRY_NAME_WITH_UOM");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Click(
				key_warehouseName = "Italy",
				locator1 = "CommerceOrders#ORDER_QUANTITY_IN_SHIPMENT_BY_WAREHOUSE");

			KeyPress(
				key_warehouseName = "Italy",
				locator1 = "CommerceOrders#ORDER_QUANTITY_IN_SHIPMENT_BY_WAREHOUSE",
				value1 = "\UP");

			Button.clickSave();

			Alert.viewSuccessMessage();

			AssertTextEquals(
				key_warehouseName = "Italy",
				locator1 = "CommerceOrders#ORDER_QUANTITY_IN_SHIPMENT_BY_WAREHOUSE",
				value1 = "0.2");

			for (var index : list "1,2,3,4,5") {
				KeyPress(
					key_warehouseName = "Italy",
					locator1 = "CommerceOrders#ORDER_QUANTITY_IN_SHIPMENT_BY_WAREHOUSE",
					value1 = "\UP");
			}

			Button.clickSave();

			Alert.viewSuccessMessage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();

			for (var rowList : list "MIN93016A:1.4:uom2,MIN93016B:2.6:uom3,MIN93016C:2:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${sku}:", "");

				var outstandingQuantity = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				Click(
					key_entryName = ${sku},
					key_uom = ${uomKey},
					locator1 = "CommerceNavigation#ENTRY_NAME_WITH_UOM");

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				Type(
					key_warehouseName = "Italy",
					locator1 = "CommerceOrders#ORDER_QUANTITY_IN_SHIPMENT_BY_WAREHOUSE",
					value1 = ${outstandingQuantity});

				Button.clickSave();

				Alert.viewSuccessMessage();

				Click(locator1 = "Icon#CLOSE");

				SelectFrameTop();
			}
		}

		task ("Then the outstanding quantity column displays 0 for each item") {
			for (var rowList : list "MIN93016A:uom1,MIN93016A:uom2,MIN93016B:uom3,MIN93016C:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertTextEquals(
					key_cellName1 = ${sku},
					key_cellName2 = ${uomKey},
					key_columnNumber = 5,
					locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
					value1 = 0);
			}
		}

		task ("When clicking on 'Finish Processing' button") {
			Click(
				key_index = "Finish Processing",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("Then the table keeps showing the right quantities and UOMs") {
			for (var rowList : list "MIN93016A:1.2,MIN93016A:1.4,MIN93016B:2.6,MIN93016C:2") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var quantity = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 6,
					key_value = ${quantity},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var rowList : list "MIN93016A:uom1,MIN93016A:uom2,MIN93016B:uom3,MIN93016C:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 7,
					key_value = ${uomKey},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}

		task ("When clicking on 'Ship' button") {
			Click(
				key_index = "Ship",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("Then the table keeps showing the right quantities and UOMs") {
			for (var rowList : list "MIN93016A:1.2,MIN93016A:1.4,MIN93016B:2.6,MIN93016C:2") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var quantity = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 5,
					key_value = ${quantity},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var rowList : list "MIN93016A:uom1,MIN93016A:uom2,MIN93016B:uom3,MIN93016C:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 6,
					key_value = ${uomKey},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}

		task ("When clicking on 'Deliver' button") {
			Click(
				key_index = "Deliver",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("Then the table keeps showing the right quantities and UOMs") {
			for (var rowList : list "MIN93016A:1.2,MIN93016A:1.4,MIN93016B:2.6,MIN93016C:2") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var quantity = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 5,
					key_value = ${quantity},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var rowList : list "MIN93016A:uom1,MIN93016A:uom2,MIN93016B:uom3,MIN93016C:") {
				var sku = StringUtil.extractFirst(${rowList}, ":");
				var uomKey = StringUtil.extractLast(${rowList}, ":");

				AssertElementPresent(
					key_entryTitle = ${sku},
					key_index = 6,
					key_value = ${uomKey},
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}
	}

	@description = "COMMERCE-12339. As admin, I can verify how the language settings work for the Units of Measure entries."
	@priority = 4
	test CanVerifyHowLanguageSettingsWorkForUOM {
		property portal.acceptance = "false";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin creates the first UOM") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Premium Brake Fluid");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93017");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Units of Measure (UOM)");

			// Check if it's possible to use API for the creation of the UOM

			CommerceEntry.addUOMEntry(
				basePrice = 75,
				baseUnitQuantity = 2,
				decimalAllowed = 0,
				priority = 1,
				promoPrice = 70,
				unitOfMeasureKey = "cr",
				unitOfMeasureName = "Crate");
		}

		task ("When admin translates in Spanish the name of the UOM") {
			CommerceEntry.editUOMEntry(
				changeLocale = "true",
				entryName = "Crate",
				locale = "es-ES",
				localizedName = "Caja");
		}

		task ("And changes the Catalog Language into Spanish") {
			CommerceCatalog.openCatalogsAdmin();

			CommerceCatalog.editCatalogEntry(
				catalogLanguage = "Spanish (Spain)",
				catalogName = "Minium");
		}

		task ("Then can verify the UOM name is shown in Spanish when it's opened and es-ES is shown as the displayed language") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Premium Brake Fluid");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93017");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Units of Measure (UOM)");

			Click(
				key_value = "Crate",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			ClickNoError(
				key_selectAction = "Edit",
				locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				key_fieldLabel = "Unit of Measure",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Caja");

			AssertTextEquals(
				locator1 = "Button#LOCALIZATION_GENERIC",
				value1 = "es-ES");
		}
	}

	@description = "COMMERCE-12338. As admin, I can verify how the product pricing is affected by the Units of Measure entries."
	@priority = 5
	test CanVerifyHowProductPricingIsAffectedByUOM {
		property portal.acceptance = "true";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And admin reaches the Premium Brake Fluid's SKU tab") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Premium Brake Fluid");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");
		}

		task ("When clicks the plus button to create the first Unit of Measure") {
			CommerceNavigator.gotoEntry(entryName = "MIN93017");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Units of Measure (UOM)");

			Click(locator1 = "Button#PLUS");

			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then can verify the Minium Base and Promo Price Lists prices are shown as default for the first Unit of Measure") {
			ScrollWebElementIntoView(
				key_text = "Base Price",
				locator1 = "TextInput#ANY");

			AssertElementPresent(
				key_text = "Base Price",
				locator1 = "TextInput#ANY",
				value1 = "100.00");

			AssertElementPresent(
				key_text = "Promotion Price",
				locator1 = "TextInput#ANY",
				value1 = "90.00");

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");
		}

		task ("When creates the first Unit of Measure and updates the base and promo prices") {

			// Check if it's possible to use API for the creation of the UOM

			CommerceEntry.addUOMEntry(
				basePrice = 75,
				baseUnitQuantity = 2,
				decimalAllowed = 0,
				priority = 1,
				promoPrice = 70,
				unitOfMeasureKey = "cr",
				unitOfMeasureName = "Crate");
		}

		task ("Then can verify the Minium Base Price and the Minium Promotion prices in Price tab are updated according to the first UOM") {
			CommerceEntry.gotoMenuTab(menuTab = "Price");

			AssertTextEquals(
				key_columnIndex = 4,
				key_rowIndex = 1,
				locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
				value1 = "$ 75.00");

			AssertTextEquals(
				key_columnIndex = 4,
				key_rowIndex = 2,
				locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
				value1 = "$ 70.00");
		}

		task ("And can verify the Minium Base Price and the Minium Promotion prices in Price Lists are also updated according to the first UOM") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93017");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_text = "Base Price",
				locator1 = "TextInput#ANY",
				value1 = 75);

			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93017");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				key_text = "Promotion Price",
				locator1 = "TextInput#ANY",
				value1 = 70);
		}
	}

	@description = "This is a test for COMMERCE-12324. The admin can verify the inventory information from the SKU/UOM combination on the Inventory admin page"
	@priority = 5
	test CanVerifyUOMInventoryInfoOnInventoryPage {
		property portal.acceptance = "true";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When the admin searches for MIN93015 on the inventory admin page") {
			CommerceInventory.openInventoryAdmin();

			CommerceNavigator.searchEntry(entryName = "MIN93015");
		}

		task ("Then the new column for UOM can be viewed next to the SKU column with an empty value") {
			AssertElementPresent(
				key_field = "UOM",
				locator1 = "FrontendDataSet#TABLE_ITEM_COLUMN");

			AssertTextEquals(
				key_cellName1 = "MIN93015",
				key_cellName2 = "",
				key_columnNumber = 2,
				locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
				value1 = "");

			Pagination.viewResults(results = "Showing 1 to 1 of 1 entries.");
		}

		task ("When 2 UOMs are added to the SKU MIN93015") {
			for (var index : list "1,2") {
				CommerceJSONSKUsAPI._addCommerceUOM(
					basePrice = ${index},
					productSKU = "MIN93015",
					uomKey = "uomKey${index}",
					uomName = "uomName${index}");
			}
		}

		task ("Then two separate line items for each SKU/UOM combination can be viewed") {
			CommerceInventory.openInventoryAdmin();

			CommerceNavigator.searchEntry(entryName = "MIN93015");

			for (var index : list "1,2") {
				AssertTextEquals(
					key_cellName1 = "MIN93015",
					key_cellName2 = "uomKey${index}",
					key_columnNumber = 2,
					locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
					value1 = "uomKey${index}");
			}

			Pagination.viewResults(results = "Showing 1 to 2 of 2 entries.");
		}

		task ("And the default quantities for UOM1 are On Hand:140, Available:140, On Order:0, Incoming:0, for UOM2 are all 0") {
			for (var uomQuantityList : list "3:140,4:140,5:0,6:0") {
				var uomIndex = StringUtil.extractFirst(${uomQuantityList}, ":");
				var uomQuantity = StringUtil.extractLast(${uomQuantityList}, ":");

				AssertTextEquals(
					key_cellName1 = "MIN93015",
					key_cellName2 = "uomKey1",
					key_columnNumber = ${uomIndex},
					locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
					value1 = ${uomQuantity});
			}

			for (var uomQuantityList : list "3:0,4:0,5:0,6:0") {
				var uomIndex = StringUtil.extractFirst(${uomQuantityList}, ":");
				var uomQuantity = StringUtil.extractLast(${uomQuantityList}, ":");

				AssertTextEquals(
					key_cellName1 = "MIN93015",
					key_cellName2 = "uomKey2",
					key_columnNumber = ${uomIndex},
					locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
					value1 = ${uomQuantity});
			}
		}

		task ("And the admin can edit the warehouse inventory for each SKU/UOM combination") {
			for (var uomQuantityList : list "1:10,2:20") {
				var uomIndex = StringUtil.extractFirst(${uomQuantityList}, ":");
				var uomQuantity = StringUtil.extractLast(${uomQuantityList}, ":");

				CommerceInventory.editInventoryByWarehouse(
					index = ${uomIndex},
					quantityOnHand = ${uomQuantity},
					sku = "MIN93015",
					warehouse = "Italy,United States - Northeast,United States - Southwest");

				for (var index : list "2,4") {
					CommerceInventory.viewInventoryByWarehouse(
						index = ${index},
						inventory = ${uomQuantity},
						warehouse = "Italy,United States - Northeast,United States - Southwest");
				}

				task ("And the SKU and UOM Key are shown in the header") {
					AssertElementPresent(
						key_title = "MIN93015 uomKey${uomIndex}",
						locator1 = "Header#H3_TITLE");
				}
			}
		}
	}

	@description = "This is a test for COMMERCE-12324. The admin can verify the inventory information of the SKU/UOM combination on the Product's SKU page"
	@priority = 5
	test CanVerifyUOMInventoryInfoOnSKUPage {
		property portal.acceptance = "true";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When the admin goes to the MIN93015's SKU panel -> Inventory tab on the product admin page") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");
		}

		task ("Then the new column of UOM can be viewed next to the warehouse column with an empty value") {
			AssertTextEquals(
				key_index = 2,
				locator1 = "WorkflowSubmissions#HEADER_INDEX",
				value1 = "UOM");

			CommerceSKUs.viewSkuUomWarehouse(
				uomKey = "",
				uomLists = "0:Italy,1:United States - Northeast,2:United States - Southwest");

			CommerceSKUs.viewSkuUomInventory(uomQuantityLists = "0:20,1:60,2:60");
		}

		task ("When one UOM is added to the SKU MIN93015") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 10,
				precision = 0,
				productSKU = "MIN93015",
				uomKey = "uomKey1",
				uomName = "uomName1");
		}

		task ("Then the three warehouses with quantities of SKU associated with the SKU/UOM combination are updated") {
			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			CommerceSKUs.viewSkuUomWarehouse(
				uomKey = "uomKey1",
				uomLists = "0:Italy,1:United States - Northeast,2:United States - Southwest");

			CommerceSKUs.viewSkuUomInventory(uomQuantityLists = "0:20,1:60,2:60");
		}

		task ("When 2nd UOM is added to the SKU MIN93015") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				precision = 0,
				productSKU = "MIN93015",
				uomKey = "uomKey2",
				uomName = "uomName2");
		}

		task ("Then the warehouses are shown correctly for each SKU/UOM combination") {
			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			CommerceSKUs.viewSkuUomWarehouse(
				uomKey = "uomKey1",
				uomLists = "0:Italy,2:United States - Northeast,4:United States - Southwest");

			CommerceSKUs.viewSkuUomWarehouse(
				uomKey = "uomKey2",
				uomLists = "1:Italy,3:United States - Northeast,5:United States - Southwest");
		}

		task ("And the 2nd SKU/UOM combination quantities are set to 0 by default") {
			CommerceSKUs.viewSkuUomInventory(uomQuantityLists = "1:0,3:0,5:0");
		}

		task ("And the admin can edit the warehouse inventory for each SKU/UOM combination") {
			CommerceSKUs.setSkuUomInventory(uomQuantityLists = "0:1,1:2,2:3,3:4,4:5,5:6");

			CommerceSKUs.viewSkuUomInventory(uomQuantityLists = "0:1,1:2,2:3,3:4,4:5,5:6");
		}

		task ("But if the UOMs are deleted") {
			CommerceJSONSKUsAPI._deleteAllCommerceUOMs(productSKU = "MIN93015");
		}

		task ("Then the quantities of warehouses are updated based on the order of deletion of UOM (Keep the last deleted UOM quantity values as SKU default)") {
			SelectFrameTop();

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			CommerceSKUs.viewSkuUomWarehouse(
				uomKey = "",
				uomLists = "0:Italy,1:United States - Northeast,2:United States - Southwest");

			CommerceSKUs.viewSkuUomInventory(uomQuantityLists = "0:2,1:4,2:6");
		}
	}

	@description = "COMMERCE-12342. As an admin, I can view default price informations of a SKU like its price lists and promotions without creating any UOM."
	@priority = 5
	test CanViewDefaultPriceInfoOnTablesEntriesWhenNoUOMsAreCreated {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When the admin navigates to Commerce -> Products -> Product (e.g. ABS Sensor) -> SKU -> Price tab") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price");
		}

		task ("Then Unit Price is set to the default value and UOM field is empty") {
			for (var rowAndValue : list "1:$ 50.00,2:$ 0.00") {
				var rowIndex = StringUtil.extractFirst(${rowAndValue}, ":");
				var value = StringUtil.extractLast(${rowAndValue}, ":");

				AssertTextEquals(
					key_columnIndex = 4,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = ${value});

				AssertTextEquals(
					key_columnIndex = 2,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "");
			}
		}

		task ("When the admin navigates to Commerce -> Price Lists -> Minium Base Price List -> Entries searching for MIN93015") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");
		}

		task ("Then UOM field is empty and Base Price and Price List Price are set to the default values assigned at Minium creation") {
			for (var columnAndValue : list "4:,6:$ 50.00,7:$ 50.00") {
				var columnIndex = StringUtil.extractFirst(${columnAndValue}, ":");
				var value = StringUtil.extractLast(${columnAndValue}, ":");

				AssertTextEquals(
					key_columnIndex = ${columnIndex},
					key_rowIndex = 1,
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = ${value});
			}
		}

		task ("When the admin navigates to Commerce -> Promotions -> Minium Base Promotion -> Entries searching for MIN93015") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");
		}

		task ("Then UOM field is empty and Base Promo Price and Promo Price are set to the default values assigned at Minium creation") {
			for (var columnAndValue : list "4:,6:$ 0.00,7:$ 0.00") {
				var columnIndex = StringUtil.extractFirst(${columnAndValue}, ":");
				var value = StringUtil.extractLast(${columnAndValue}, ":");

				AssertTextEquals(
					key_columnIndex = ${columnIndex},
					key_rowIndex = 1,
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = ${value});
			}
		}
	}

	@description = "COMMERCE-12343. As admin, I can view SKU-UOM's related price informations on SKU, price list and promotion levels."
	@priority = 5
	test CanViewPriceInfoOnTablesEntriesWhenUOMsAreCreated {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin adds 2 UOMs to a SKU (MIN93015)") {
			for (var index : list "1,2") {
				CommerceJSONSKUsAPI._addCommerceUOM(
					basePrice = ${index},
					productSKU = "MIN93015",
					promoPrice = ${index},
					uomKey = "uom${index}",
					uomName = "uom${index}");
			}
		}

		task ("When the admin navigates to Commerce -> Products -> Product -> SKU -> Price tab") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price");
		}

		task ("Then the UOM and unit price fields are correctly filled") {
			for (var rowAndValue : list "1:1,2:1,3:2,4:2") {
				var rowIndex = StringUtil.extractFirst(${rowAndValue}, ":");
				var value = StringUtil.extractLast(${rowAndValue}, ":");

				AssertTextEquals(
					key_columnIndex = 4,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ ${value}.00");

				AssertTextEquals(
					key_columnIndex = 2,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "uom${value}");
			}
		}

		task ("When the admin navigates to Commerce -> Price Lists -> Minium Base Price List -> Entries searching for MIN93015") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");
		}

		task ("Then the fields are correctly filled on Minium Base Price List SKU entry") {
			for (var rowIndex : list "1,2") {
				AssertTextEquals(
					key_columnIndex = 4,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "uom${rowIndex}");

				AssertTextEquals(
					key_columnIndex = 6,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ 1.00");

				AssertTextEquals(
					key_columnIndex = 7,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ ${rowIndex}.00");
			}
		}

		task ("When the admin navigates to Commerce -> Promotions -> Minium Base Promotion -> Entries searching for MIN93015") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");
		}

		task ("Then the fields are correctly filled on Minium Base Promotion SKU entry") {
			for (var rowIndex : list "1,2") {
				AssertTextEquals(
					key_columnIndex = 4,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "uom${rowIndex}");

				AssertTextEquals(
					key_columnIndex = 6,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ 1.00");

				AssertTextEquals(
					key_columnIndex = 7,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ ${rowIndex}.00");
			}
		}

		task ("When a UOM is deleted from the SKU") {
			CommerceJSONSKUsAPI._deleteCommerceSkuUom(
				productSKU = "MIN93015",
				uomKey = "uom1");
		}

		task ("And the admin navigates to Commerce -> Products -> Product -> SKU -> Price tab") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price");
		}

		task ("Then the UOM and unit price fields are correctly updated") {
			for (var rowIndex : list "1,2") {
				AssertTextEquals(
					key_columnIndex = 4,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ 2.00");

				AssertTextEquals(
					key_columnIndex = 2,
					key_rowIndex = ${rowIndex},
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "uom2");
			}
		}

		task ("When the admin navigates to Commerce → Price Lists → Minium Base Price List → Entries searching for MIN93015") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");
		}

		task ("Then the fields are correctly updated on Minium Base Price List SKU entry") {
			AssertTextEquals(
				key_columnIndex = 4,
				key_rowIndex = 1,
				locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
				value1 = "uom2");

			for (var columnIndex : list "6,7") {
				AssertTextEquals(
					key_columnIndex = ${columnIndex},
					key_rowIndex = 1,
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ 2.00");
			}
		}

		task ("When the admin navigates to Commerce -> Promotions -> Minium Base Promotion -> Entries searching for MIN93015") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "MIN93015");
		}

		task ("Then the fields are correctly updated on Minium Base Promotion SKU entry") {
			AssertTextEquals(
				key_columnIndex = 4,
				key_rowIndex = 1,
				locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
				value1 = "uom2");

			for (var columnIndex : list "6,7") {
				AssertTextEquals(
					key_columnIndex = ${columnIndex},
					key_rowIndex = 1,
					locator1 = "CommerceEntry#TABLE_ENTRY_ROW_FIELD_GENERIC",
					value1 = "$ 2.00");
			}
		}
	}

}