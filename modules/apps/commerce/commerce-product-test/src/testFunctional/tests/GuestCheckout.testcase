@component-name = "portal-commerce"
definition {

	property custom.properties = "company.security.strangers.verify=false${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp();

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@priority = 5
	test AssertGuestCartIsTransferredToAccount {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Alert.viewSuccessMessage();

		Site.openSiteSettingsAdmin(siteURLKey = "speedwell");

		Site.manageMembershipOptions(allowManualMembershipManagement = "true");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		User.editUserSiteCP(
			siteName = "Speedwell",
			userScreenName = "buyer");

		User.logoutPG();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "U-Joint,",
			cartItemPriceValues = "24,",
			cartItemQuantities = "1,",
			cartItemSkUs = "SPEED55861,");

		Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");

		CommerceNavigator.gotoSpeedwellAccountDropdownItem(dropdownItem = "Sign In");

		CommerceLogin.loginPG(
			newPassword = PropsUtil.get("default.admin.password"),
			password = "ttest",
			samlEnabled = "true",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "U-Joint,",
			cartItemPriceValues = "24,",
			cartItemQuantities = "1,",
			cartItemSkUs = "SPEED55861,");

		Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");
	}

	@priority = 5
	test AssertGuestCartItemIsNotTransferredIfSkuIsAlreadyPresent {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Alert.viewSuccessMessage();

		Site.openSiteSettingsAdmin(siteURLKey = "speedwell");

		Site.manageMembershipOptions(allowManualMembershipManagement = "true");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		User.editUserSiteCP(
			siteName = "Speedwell",
			userScreenName = "buyer");

		User.logoutPG();

		CommerceLogin.speedwellLogin(
			newPassword = PropsUtil.get("default.admin.password"),
			password = "ttest",
			urlAppend = "web/speedwell",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "U-Joint,",
			cartItemPriceValues = "24,",
			cartItemQuantities = "1,",
			cartItemSkUs = "SPEED55861,",
			cartSummaryQuantity = 1,
			cartSummarySubtotal = 24,
			cartSummaryTotal = ${cartSummarySubtotal});

		Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");

		CommerceLogin.speedwellLogout();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 5);

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "U-Joint,",
			cartItemPriceValues = "24,",
			cartItemQuantities = "5,",
			cartItemSkUs = "SPEED55861,",
			cartSummaryQuantity = 5,
			cartSummarySubtotal = 120,
			cartSummaryTotal = ${cartSummarySubtotal});

		Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");

		CommerceLogin.speedwellLogin(
			password = PropsUtil.get("default.admin.password"),
			urlAppend = "web/speedwell",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "U-Joint,",
			cartItemPriceValues = "24,",
			cartItemQuantities = "1,",
			cartItemSkUs = "SPEED55861,",
			cartSummaryQuantity = 1,
			cartSummarySubtotal = 24,
			cartSummaryTotal = ${cartSummarySubtotal});
	}

	@priority = 5
	test AssertGuestCartItemIsTransferredToExistingCart {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Alert.viewSuccessMessage();

		Site.openSiteSettingsAdmin(siteURLKey = "speedwell");

		Site.manageMembershipOptions(allowManualMembershipManagement = "true");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		CommerceLogin.editPasswordCP(
			newPassword = "ttest",
			requirePasswordReset = "true",
			userScreenName = "buyer");

		Click(locator1 = "Icon#BACK");

		User.editUserSiteCP(
			siteName = "Speedwell",
			userScreenName = "buyer");

		User.logoutPG();

		CommerceLogin.speedwellLogin(
			newPassword = PropsUtil.get("default.admin.password"),
			password = "ttest",
			urlAppend = "web/speedwell",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "U-Joint,",
			cartItemPriceValues = "24,",
			cartItemQuantities = "1,",
			cartItemSkUs = "SPEED55861,",
			cartSummaryQuantity = 1,
			cartSummarySubtotal = 24,
			cartSummaryTotal = ${cartSummarySubtotal});

		Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");

		CommerceLogin.speedwellLogout();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "Transmission Cooler Line Assembly",
			productQuantity = 5);

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "Transmission Cooler Line Assembly,",
			cartItemPriceValues = "15,",
			cartItemQuantities = "5,",
			cartItemSkUs = "SPEED55860,",
			cartSummaryQuantity = 5,
			cartSummarySubtotal = 75,
			cartSummaryTotal = ${cartSummarySubtotal});

		Click(locator1 = "CommerceAccelerators#MINI_CART_CLOSE");

		CommerceLogin.speedwellLogin(
			password = PropsUtil.get("default.admin.password"),
			urlAppend = "web/speedwell",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		CommerceNavigator.gotoMiniCart();

		FrontStore.viewMiniCart(
			cartItemNames = "U-Joint,Transmission Cooler Line Assembly,",
			cartItemPriceValues = "24,15,",
			cartItemQuantities = "1,5,",
			cartItemSkUs = "SPEED55861,SPEED55860,",
			cartSummaryQuantity = 6,
			cartSummarySubtotal = 99,
			cartSummaryTotal = ${cartSummarySubtotal});
	}

	@priority = 5
	test AssertGuestCheckoutAuthenticationPage {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Alert.viewSuccessMessage();

		User.logoutPG();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		GuestCheckout.assertGuestCheckoutAuthenticationPage();
	}

	@description = "COMMERCE-12938. As a guest user, I want to be able to create a quote request order that must work with email populated and submit the quote request without notes on Minium site"
	@priority = 5
	test CanGuestUserCreateQuoteRequestOnMinium {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin marks the U-Joint's SKU as 'Price on Application'") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price");

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("And 'Guest Checkout' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Guest Checkout",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And a SAP is created to view the pending order for Guest") {
			ServiceAccessPolicy.openServiceAccessPolicyAdmin();

			ServiceAccessPolicy.addServiceAccessPolicy(
				defaultSwitch = "true",
				enabled = "true",
				methodName = "getFDSData",
				policyName = "FDSApplication_getFDSData",
				serviceClass = "com.liferay.frontend.data.set.taglib.internal.jaxrs.application.FDSApplication",
				title = "FDSApplication_getFDSData");
		}

		task ("And the View permission of Catalog and Pending Orders pages for Guest are checked") {
			for (var pageName : list "Catalog,Pending Orders") {
				PagesAdmin.openPagesAdmin(siteURLKey = "minium");

				PagesAdmin.gotoPageEllipsisMenuItem(
					menuItem = "Permissions",
					pageName = ${pageName});

				Role.definePermissionPG(
					permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
					roleTitle = "guest");
			}
		}

		task ("And the guest user adds the 'Price on Application' product to Cart") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("When clicking the 'Request a Quote' button in the Open Order Details Page") {
			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Request a Quote");

			Click(
				buttonId = "requestQuote",
				locator1 = "Button#BUTTON_ID");
		}

		task ("Then can view a new empty field related to 'Enter an email address.' present in the Request a Quote popup") {
			AssertElementPresent(
				key_title = "Request a Quote",
				locator1 = "CommerceFrontStore#MODAL_TITLE");

			AssertTextEquals(
				key_placeHolder = "Enter an email address.",
				locator1 = "TextInput#ANY_PLACEHOLDER",
				value1 = "");
		}

		task ("And the guest cannot submit the request without filling in email info") {
			Button.click(button = "Submit");

			AssertElementPresent(
				key_alertMessage = "The  field is required.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE");
		}

		task ("When the guest user submits the request by filling in the email format for the email field") {
			Type(
				key_placeHolder = "Enter an email address.",
				locator1 = "TextInput#ANY_PLACEHOLDER",
				value1 = "guestuser@liferay.com");

			Button.click(button = "Submit");
		}

		task ("Then admin can view the order with the status 'Quote Requested' in the Orders admin page") {
			User.logoutAndLoginPG();

			CommerceOrders.openOrdersAdmin();

			AssertElementPresent(
				key_orderStatus = "Quote Requested",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");

			CommerceJSONOrdersAPI._deleteAllCommerceOrders();
		}

		task ("But if the guest user submits the request by filling in non-email format for the email field") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			CommerceOrders.createQuoteRequest(
				quoteRequestEmail = "guestuser",
				requestAQuoteInMiniCart = "true",
				requestAQuoteInOpenOrdersPage = "true");
		}

		task ("Then it's not allowed to submit a request with invalid email address") {
			AssertElementPresent(
				key_alertMessage = "Please enter a valid email address.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE");
		}
	}

	@description = "COMMERCE-11277. As a Guest User, I can create a Quote Request in the Cart Summary by entering a personal message."
	@priority = 5
	test CanGuestUserCreateQuoteRequestOnSpeedwell {
		property portal.acceptance = "true";

		task ("Given a Speedwell site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");
		}

		task ("And 'Allow Request a Quote on a Fully Priced Cart' and 'Guest Checkout' are enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Guest Checkout",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And the Guest User clicks the 'Request a Quote' button in the Mini Cart") {
			User.logoutPG();

			Navigator.openSiteURL(siteName = "Speedwell");

			CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Request a Quote");
		}

		task ("When the Guest clicks again the 'Request a Quote' button in the Cart Summary") {
			Click(
				buttonId = "requestQuote",
				locator1 = "Button#BUTTON_ID");
		}

		task ("Then the a modal named Request a Quote is shown") {
			AssertElementPresent(
				key_title = "Request a Quote",
				locator1 = "CommerceFrontStore#MODAL_TITLE");
		}

		task ("When the Guest submits the request after writing a message in the note area") {
			CommerceOrders.createQuoteRequest(
				quoteRequestEmail = "guestuser@liferay.com",
				quoteRequestValue = "I kindly request a quote for this product.");
		}

		task ("Then the quote request is placed with the status 'Quote Requested' in the Orders Page") {
			User.loginPG();

			CommerceOrders.openOrdersAdmin();

			AssertElementPresent(
				key_orderStatus = "Quote Requested",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");
		}
	}

	@description = "COMMERCE-12929. As an authenticated user, I want to be able to view the open order address for checkout that is not inherited from the guest's address and no default address pre-selected"
	@priority = 5
	test CanLoggedUserNotInheritGuestAddress {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And an account address is added") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Commerce Account");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			Account.addAddress(
				addressCity = "Test City",
				addressCountry = "United States",
				addressName = "Test Address",
				addressPostalCode = "Test Zip Code",
				addressRegion = "California",
				addressStreet1 = "Test Street");
		}

		task ("And 'Guest Checkout' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Guest Checkout",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And the Manage Addresses permission of Accounts is removed for the Buyer role") {
			Permissions.removePermissionViaAPI(
				groupName = "Minium",
				resourceAction = "MANAGE_ADDRESSES",
				resourceName = "com.liferay.account.model.AccountEntry",
				roleTitle = "Buyer",
				roleType = "account");
		}

		task ("And the View permission of Catalog, Pending Orders, Checkout pages for Guest are checked") {
			for (var pageName : list "Catalog,Pending Orders,Checkout") {
				PagesAdmin.openPagesAdmin(siteURLKey = "minium");

				if (${pageName} == "Checkout") {
					PagesAdmin.gotoPageEllipsisMenuItem(
						menuItem = "Permissions",
						pageName = ${pageName},
						parentPagesHierarchy = "Pending Orders");
				}
				else {
					PagesAdmin.gotoPageEllipsisMenuItem(
						menuItem = "Permissions",
						pageName = ${pageName});
				}

				Role.definePermissionPG(
					permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
					roleTitle = "guest");
			}
		}

		task ("And the guest user adds a product to the cart") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("And adds an address in the checkout page and moves to next step") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			AssertElementNotPresent(
				key_fieldLabel = "Choose Shipping Address",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			for (var fieldNames : list "Name,Address,Zip,City") {
				AssertTextEquals(
					key_fieldName = ${fieldNames},
					locator1 = "CommerceAccelerators#CHECKOUT_GENERIC_TEXT_INPUT",
					value1 = "");
			}

			CommerceCheckout.setAddress(
				guestEmail = "guest@liferay.com",
				newAddressAddress = "Guest Address",
				newAddressCity = "Guest City",
				newAddressCountry = "United States",
				newAddressName = "Guest Address Name",
				newAddressZipCode = "Guest Zip Code");

			Click(locator1 = "Button#CONTINUE");
		}

		task ("When the buyer navigates to the checkout page via mini-cart on Minium") {
			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then can view only account addresses that are created by admin are selectable and no default address pre-selected") {
			AssertSelectedLabel(
				key_fieldLabel = "Choose Shipping Address",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Choose Address");

			for (var optionName : list "Choose Address,Test Address,Guest Address Name") {
				if (${optionName} == "Guest Address Name") {
					AssertElementNotPresent(
						key_fieldLabel = "Choose Shipping Address",
						key_value = ${optionName},
						locator1 = "Select#GENERIC_SELECT_VALUE");
				}
				else {
					AssertElementPresent(
						key_fieldLabel = "Choose Shipping Address",
						key_value = ${optionName},
						locator1 = "Select#GENERIC_SELECT_VALUE");
				}
			}

			for (var fieldNames : list "Name,Address,Zip,City") {
				AssertTextEquals(
					key_fieldName = ${fieldNames},
					locator1 = "CommerceAccelerators#CHECKOUT_GENERIC_TEXT_INPUT_DISABLED",
					value1 = "");
			}
		}
	}

	@priority = 5
	test GuestCheckoutDisabled {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		User.logoutPG();

		Navigator.openSiteURL(siteName = "Speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED");

		CommerceAcceleratorsInitializer.viewEnabledAddToCartButton(productName = "U-Joint");
	}

	@priority = 5
	test GuestCheckoutEnabled {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Button.clickSave();

		User.logoutPG();

		Navigator.openSiteURL(siteName = "Speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Button.click(button = "Continue as a Guest");

		CommerceCheckout.initializersCheckout(
			guestEmail = "buyer@liferay.com",
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24,
			shippingMethod = "Standard");

		AssertTextEquals(
			locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
			value1 = "Your order has been processed but not completed yet.");
	}

	@priority = 5
	test GuestCheckoutEnabledWithoutAuthenticationPage {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		User.logoutPG();

		Navigator.openSiteURL(siteName = "Speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		CommerceCheckout.initializersCheckout(
			guestEmail = "buyer@liferay.com",
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24,
			shippingMethod = "Standard");
	}

	@priority = 5
	test GuestCheckoutWithNoShippableProduct {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Button.clickSave();

		CommerceProducts.openProductsAdmin();

		CommerceProducts.searchProduct(search = "U-Joint");

		CommerceNavigator.gotoEntry(entryName = "U-Joint");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Shippable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickPublish();

		User.logoutPG();

		Navigator.openSiteURL(siteName = "Speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Button.click(button = "Continue as a Guest");

		AssertElementNotPresent(
			key_label = "Shipping Address",
			locator1 = "CommerceAccelerators#CHECKOUT_MULTI_STEP_INDICATOR_LABEL");

		CommerceCheckout.initializersCheckout(
			guestEmail = "buyer@liferay.com",
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24);
	}

	@priority = 5
	test GuestCheckoutWithShippableProduct {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Button.clickSave();

		User.logoutPG();

		Navigator.openSiteURL(siteName = "Speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Button.click(button = "Continue as a Guest");

		AssertElementPresent(locator1 = "CommerceAccelerators#GUEST_CHECKOUT_CHECK_EMAIL_LABEL");

		CommerceCheckout.initializersCheckout(
			guestEmail = "buyer@liferay.com",
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24,
			shippingMethod = "Standard");
	}

	@priority = 5
	test UserAccountIsNotCombinedWithExistingGuestAccount {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Security Tools",
			configurationName = "CAPTCHA",
			configurationScope = "System Scope");

		SystemSettings.configureSystemSetting(
			enableSetting = "false",
			settingFieldName = "Create Account CAPTCHA Enabled");

		Refresh();

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceChannels.openChannelsAdmin();

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Refresh();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "Guest Checkout",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_fixIssueButtonName = "Guest Checkout Authentication",
			locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

		Alert.viewSuccessMessage();

		User.logoutPG();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Button.click(button = "Continue as a Guest");

		CommerceCheckout.initializersCheckout(
			guestEmail = "buyer@liferay.com",
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Guest Account",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24,
			shippingMethod = "Standard");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");

		FrontStore.addInitializerProductToCart(
			productName = "U-Joint",
			productQuantity = 1);

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		Click(locator1 = "Link#CREATE_ACCOUNT");

		CommerceLogin.createAccount(
			newPassword = "ttest",
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userScreenName = "buyeruser");

		CommerceLogin.speedwellLogin(
			newPassword = PropsUtil.get("default.admin.password"),
			password = "ttest",
			urlAppend = "web/speedwell",
			userEmailAddress = "buyer@liferay.com");

		CommerceNavigator.gotoMiniCart();

		Button.click(button = "Submit");

		CommerceCheckout.initializersCheckout(
			newAddressAddress = "Test Address",
			newAddressCity = "Test City",
			newAddressCountry = "United States",
			newAddressName = "Address Name",
			newAddressZipCode = "Test Zip Code",
			paymentMethod = "Money Order",
			productName = "U-Joint",
			productQuantity = 1,
			productUnitPrice = 24,
			shippingMethod = "Standard");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "My Account");

		CommerceNavigator.gotoSpeedwellDashboardItem(dashboardItem = "My Orders");

		AssertElementPresent(
			key_accountName = "Buyer User",
			locator1 = "CommerceAccelerators#SPEEDWELL_MY_ORDERS_ORDER_ACCOUNT");

		AssertElementNotPresent(
			key_accountName = "Guest Account",
			locator1 = "CommerceAccelerators#SPEEDWELL_MY_ORDERS_ORDER_ACCOUNT");

		User.logoutPG();

		User.loginPG();

		Account.openAccountsAdmin();

		LexiconEntry.viewEntryStatus(
			rowEntry = "Guest Account",
			rowStatus = "Active");

		CommerceNavigator.gotoEntry(entryName = "Guest Account");

		CommerceEntry.viewAccountsEntry(
			accountEmail = "buyer@liferay.com",
			accountName = "Guest Account",
			accountType = "Guest");

		Click(locator1 = "Icon#BACK");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Buyer User",
			rowStatus = "Active");

		CommerceNavigator.gotoEntry(entryName = "Buyer User");

		CommerceEntry.viewAccountsEntry(
			accountEmail = "buyer@liferay.com",
			accountName = "Buyer User",
			accountType = "Person");
	}

}