@component-name = "portal-commerce"
definition {

	property custom.properties = "company.security.strangers.verify=false${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-8164 | A discontinued product cannot be replaced by another discontinued product"
	@priority = 5
	test CannotReplaceDiscontinuedProductWithDiscontinuedProduct {
		property portal.acceptance = "true";

		task ("Given 2 products are set as Discontinued with a replacement product") {
			CommerceProducts.openProductsAdmin();

			Search.searchCP(searchTerm = "ABS Sensor");

			CommerceNavigator.gotoTableListEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");

			SelectFrame(locator1 = "IFrame#IFRAME");

			CommerceProducts.discontinueSKU();

			CommerceProducts.setReplacementSKU(replacementSKU = "MIN55861");

			CommerceProducts.openProductsAdmin();

			Search.searchCP(searchTerm = "U-Joint");

			CommerceNavigator.gotoTableListEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			SelectFrame(locator1 = "IFrame#IFRAME");

			CommerceProducts.discontinueSKU();

			CommerceProducts.setReplacementSKU(replacementSKU = "MIN93021");
		}

		task ("and a product is set as Discontinued with a discontinued replacement product") {
			CommerceProducts.openProductsAdmin();

			Search.searchCP(searchTerm = "Calipers");

			CommerceNavigator.gotoTableListEntry(entryName = "Calipers");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN93021");

			SelectFrame(locator1 = "IFrame#IFRAME");

			CommerceProducts.discontinueSKU();

			CommerceProducts.setReplacementSKU(replacementSKU = "MIN93015");
		}

		task ("Then the product replacement will not be assigned.") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoTableListEntry(entryName = "Calipers");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN93021");

			SelectFrame(locator1 = "IFrame#IFRAME");

			CommerceProducts.discontinueSKU();

			AssertElementPresent(
				locator1 = "TextInput#REPLACEMENT",
				value1 = "");
		}
	}

	@description = "COMMERCE-12026 | When an admin need to add to cart a product with a discontinued SKU without inventory and allow back orders switched off, your replacement has to be added to the cart"
	@priority = 5
	test CanReplacementSKUAddedToCart {
		property portal.acceptance = "true";

		task ("Given U-Joint product set as Discontinued with a replacement product") {
			CommerceProducts.openProductsAdmin();

			Search.searchCP(searchTerm = "U-Joint");

			CommerceNavigator.gotoTableListEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			SelectFrame(locator1 = "IFrame#IFRAME");

			CommerceProducts.discontinueSKU();

			CommerceProducts.setReplacementSKU(replacementSKU = "MIN93015");
		}

		task ("And ABS Sensor product set as Discontinued with a replacement product") {
			CommerceProducts.openProductsAdmin();

			Search.searchCP(searchTerm = "ABS Sensor");

			CommerceNavigator.gotoTableListEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");

			SelectFrame(locator1 = "IFrame#IFRAME");

			CommerceProducts.discontinueSKU();

			CommerceProducts.setReplacementSKU(replacementSKU = "MIN93017");
		}

		task ("And the available quantity is set to 0 for the 2 products") {
			var warehouseList = "0:Italy,0:United States - Southwest,0:United States - Northeast";

			for (var productSKU : list "MIN93015,MIN55861") {
				for (var warehouse : list ${warehouseList}) {
					var warehouseName = StringUtil.extractLast(${warehouse}, ":");
					var warehouseQuantity = StringUtil.extractFirst(${warehouse}, ":");

					CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
						productSku = ${productSKU},
						quantity = ${warehouseQuantity},
						warehouseName = ${warehouseName});
				}
			}
		}

		task ("And Allow Back Orders is set to false for the 2 products") {
			for (var productName : list "ABS Sensor,U-Joint") {
				CommerceJSONProductsAPI._patchCommerceProductConfiguration(
					allowBackOrder = "false",
					productName = ${productName});
			}
		}

		task ("Then the first discontinued SKU is added to minicart using Quick Add to Cart") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

			CommerceNavigator.gotoMiniCart();

			FrontStore.quickAddToCartSearchAndSelectItem(orderItemSku = "MIN55861");

			Click(locator1 = "CommerceAccelerators#QUICK_ADD_TO_CART_BUTTON");
		}
	}

	@description = "COMMERCE-12548. As a buyer, I want to be able to see a SKU/UOM replace a discounted SKU"
	@priority = 5
	test CanSkuWithUOMReplaceDiscontinuedSku {
		property custom.properties = "company.security.strangers.verify=false${line.separator}jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given 2 UOMs are created to MIN93015(base price: $20, incremental: 0.6 for UOM1; base price: $30, incremental: 1.5 for UOM2)") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.6",
				priority = 4,
				productSKU = "MIN93015",
				uomKey = "UOM1KEY",
				uomName = "UOM1");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 30,
				incrementalOrderQuantity = "1.5",
				priority = 1,
				productSKU = "MIN93015",
				uomKey = "UOM2KEY",
				uomName = "UOM2");
		}

		task ("And minimum and multiple order quantities are set to '0.1' for ABS Sensor") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = "0.1",
				multipleOrderQuantity = "0.1",
				productName = "ABS Sensor");
		}

		task ("And the available quantity is set to 0 for U-Joint(sku MIN55861)") {
			var warehouseList = "0:Italy,0:United States - Southwest,0:United States - Northeast";

			for (var warehouse : list ${warehouseList}) {
				var warehouseName = StringUtil.extractLast(${warehouse}, ":");
				var warehouseQuantity = StringUtil.extractFirst(${warehouse}, ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = ${warehouseQuantity},
					warehouseName = ${warehouseName});
			}
		}

		task ("And MIN55861 is flagged as 'Discontinued' and a replacement SKU MIN93015 is set") {
			CommerceJSONProductsAPI._patchCommerceSku(
				discontinued = "true",
				productSku = "MIN55861",
				replacementSku = "MIN93015");
		}

		task ("And Allow Back Orders is set to false for U-Joint") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("When the buyer navigates to U-Joint's detail page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then assert that the U-Joint's add to cart button and quantity selector are disabled") {
			AssertElementPresent(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE_DISABLED");

			AssertElementPresent(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_PRODUCT_DETAILS_PAGE_DISABLED");
		}

		task ("And assert that the 'Replacement Product' button redirects to ABS Sensor and that the UOM with highest priority is pre-selected(UOM2)") {
			AssertElementPresent(
				key_text = "Replacement Product",
				locator1 = "Link#ANY");

			Click(
				key_text = "Replacement Product",
				locator1 = "Link#ANY");

			AssertLocation.assertPartialLocation(value1 = "web/minium/p/abs-sensor");

			AssertSelectedLabel(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM2");

			AssertTextEquals(
				key_productName = "ABS Sensor",
				locator1 = "CommerceFrontStore#PRODUCT_DETAILS_QUANTITY_SELECTOR",
				value1 = "1.5");
		}

		task ("When the buyer uses quick add to cart to add U-Joint to the cart") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.quickAddToCartSearchAndSelectItem(orderItemSku = "MIN55861");

			Click(locator1 = "CommerceAccelerators#QUICK_ADD_TO_CART_BUTTON");
		}

		task ("Then assert that the replacement sku/uom with the highest priority is added instead(UOM2, quantity: 1.5, price $30)") {
			FrontStore.viewMiniCartItem(
				cartItemName = "ABS Sensor",
				cartItemPriceValue = "30.00",
				cartItemQuantity = "1.5",
				cartItemSku = "MIN93015",
				cartItemUOMKey = "UOM2KEY");
		}

		task ("And the info message 'There are replacement products in your cart' is shown in the mini-cart") {
			AssertElementPresent(
				key_text = "There are replacement products in your cart.",
				locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_REPLACEMENT_ALERT");
		}

		task ("And the cart item has the replacement label") {
			AssertElementPresent(
				key_status = "Replacement",
				locator1 = "ImportExport#IMPORT_EXPORT_STATUS");
		}
	}

	@description = "COMMERCE-12579. As a buyer, I can view discontinued SKUs shown in the replacement tab of the product's details page"
	@priority = 3
	test CanViewDiscontinuedReplacementSkusInProductDetails {
		property portal.acceptance = "false";

		task ("Given 5 SKUs are set as Discontinued with the same replacement SKU MIN93015") {
			for (var productSku : list "MIN93016A,MIN93016B,MIN93016C,MIN93027,MIN93021") {
				CommerceJSONProductsAPI._patchCommerceSku(
					discontinued = "true",
					productSku = ${productSku},
					replacementSku = "MIN93015");
			}
		}

		task ("When the buyer navigates to ABS Sensor's product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("Then can assert that the Replacements tab is shown") {
			AssertElementPresent(
				key_text = "Replacements",
				locator1 = "Button#ANY");
		}

		task ("And can view the correct replaced products and pagination results in the Replacements details") {
			AssertClick(
				key_text = "Replacements",
				locator1 = "Button#ANY",
				value1 = "Replacements");

			AssertTextEquals(
				locator1 = "CP2ActivationKeys#PAGINATION_BUTTON",
				value1 = "10 Items");

			Pagination.viewResults(results = "Showing 1 to 5 of 5 entries.");

			for (var sku : list "MIN93016A,MIN93016B,MIN93016C,MIN93027,MIN93021") {
				LexiconEntry.viewEntryName(rowEntry = ${sku});
			}
		}

		task ("When the pagination is changed to 4") {
			Pagination.changePagination(itemsPerPage = "4 Items");
		}

		task ("Then the pagination results are shown accordingly") {
			Pagination.viewResults(results = "Showing 1 to 4 of 5 entries.");

			for (var sku : list "MIN93016A,MIN93016B,MIN93016C,MIN93027") {
				LexiconEntry.viewEntryName(rowEntry = ${sku});
			}

			Click(locator1 = "Pagination#NEXT_LINK");

			Pagination.viewResults(results = "Showing 5 to 5 of 5 entries.");

			AssertElementPresent(
				key_entryName = "MIN93021",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the product 'Wear Sensors' is searched on the page") {
			CommerceNavigator.searchEntry(entryName = "MIN93027");
		}

		task ("Then the pagination results are changed accordingly only for the searched product") {
			AssertElementPresent(
				key_entryName = "MIN93027",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertTextEquals(
				locator1 = "CP2ActivationKeys#PAGINATION_BUTTON",
				value1 = "4 Items");

			Pagination.viewResults(results = "Showing 1 to 1 of 1 entries.");

			AssertElementPresent(locator1 = "Pagination#FIRST_LINK");

			AssertElementNotPresent(
				key_pageNumber = 2,
				locator1 = "Pagination#ANY_PAGE");
		}
	}

	@description = "COMMERCE-9352 | Verify if discontinued products are replaced by the replacement product when adding a discontinued product to an order"
	@priority = 5
	test DiscontinuedProductIsReplacedWhenImportedFromOrders {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Given a complete order with a discontinued product") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			var currentOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("And given ABS Sensor as Discontinued and set a new Replacement") {
			User.logoutAndLoginPG();

			CommerceProducts.openProductsAdmin();

			CommerceEntry.editWarehousesQuantity(
				italyQuantity = 0,
				northeastQuantity = 0,
				productName = "U-Joint",
				productSku = "MIN55861",
				southwestQuantity = 0);

			CommerceProducts.discontinueSKU();

			CommerceProducts.setReplacementSKU(replacementSKU = "MIN93015");
		}

		task ("And given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When we try to import the previous order with the discontinued product") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();

			CommerceOrders.importOrderFromType(orderType = "Orders");

			SelectFrameTop();

			IFrame.selectModalFrame();

			CommerceNavigator.gotoTableListEntry(entryName = ${currentOrderId});

			SelectFrameTop();

			IFrame.selectModalFrame();
		}

		task ("Then the older product is replaced with the new one ") {
			CommerceOrders.assertOrderImportPreviewEntry(
				importStatus = "OK",
				productName = "ABS Sensor",
				productQuantity = 1,
				productSku = "MIN93015",
				totalPrice = "50.00",
				unitPrice = "50.00");
		}

		task ("And then after we click on 'Import' button verify if the product is actually replaced") {
			Button.click(button = "Import");

			SelectFrameTop();

			CommerceOrders.viewOrdersDetails(
				productListPrice = "50.00",
				productName = "ABS Sensor",
				productQuantity = 1,
				productSku = "MIN93015",
				productTotalPrice = "$ 50.00");
		}
	}

	@description = "COMMERCE-9348 | Replacement product's button redirects to the right product's product details page"
	@priority = 5
	test ReplacementProductButtonRedirectsToRightProductDetailsPage {
		property portal.acceptance = "true";

		task ("Given a simple product with a SKU") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				productName = "Test Simple Product Replacement",
				productType = "Simple",
				sku = "SKU1001");
		}

		task ("And given a simple product with a SKU marked as discontinued with a replacement product set") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				discontinued = "True",
				productName = "Test Simple Product",
				productType = "Simple",
				replacementSKU = "SKU1001",
				sku = "SKU1002");
		}

		task ("And given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When the replaced product's product details page is reached") {
			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Test Simple Product Replacement");
		}

		task ("And when the replacement product's is selected") {
			Click(
				key_text = "Replacements",
				locator1 = "Button#ANY");

			ScrollWebElementIntoView(
				key_itemName = "SKU1002",
				locator1 = "CommerceEntry#VIEW_ITEM_FROM_LIST");

			Click(
				key_itemName = "SKU1002",
				locator1 = "CommerceEntry#VIEW_ITEM_FROM_LIST");
		}

		task ("Then the user is redirected to the replacement's product details page") {
			FrontStore.assertProductDetails(
				productName = "Test Simple Product",
				productSKU = "SKU1001");
		}
	}

	@description = "COMMERCE-9347 | Replacement product's information is shown in product details"
	@priority = 5
	test ReplacementProductInformationIsDisplayedInProductDetails {
		property portal.acceptance = "true";

		task ("Given a simple product with a SKU") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				productName = "Test Simple Product Replacement",
				productType = "Simple",
				sku = "SKU1001");
		}

		task ("And given a simple product with a SKU marked as discontinued with a replacement product set") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				discontinued = "true",
				productName = "Test Simple Product",
				productType = "Simple",
				replacementSKU = "SKU1001",
				sku = "SKU1002");
		}

		task ("And given a Minium site with a buyer user") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When the replaced product's product details page is reached") {
			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Test Simple Product");
		}

		task ("Then all the warnings about the discontinued product are shown") {
			var productEndOfLifeDate = DateUtil.getFormattedCurrentDate("MM/dd/yy", "UTC");

			FrontStore.assertProductDetails(
				endOfLifeDate = ${productEndOfLifeDate},
				productAvailability = "Discontinued");
		}

		task ("And then the replacement product is not shown") {
			AssertElementNotPresent(
				key_text = "Replacements",
				locator1 = "Button#ANY");

			AssertElementNotPresent(
				key_itemName = "SKU1001",
				locator1 = "CommerceEntry#VIEW_ITEM_FROM_LIST");
		}
	}

}