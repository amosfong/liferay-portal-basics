@component-name = "portal-commerce"
definition {

	property custom.properties = "company.security.strangers.verify=false${line.separator}jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12429. As buyer, I can add to the cart a multi SKUs product with UOM using a Cart Fragment."
	@priority = 5
	test CanAddToCartFragmentHandleMultipleSkusUOM {
		property portal.acceptance = "true";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a new Commerce Product type Display Page Template is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And product fragments are deployed") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Product Display Page Template");

			for (var rowList : list "Option Selector:1:,Add to Cart:2:Option Selector,Price:2:Add to Cart,Availability:2:Price,Dynamic Field:2:Availability,Dynamic Field:2:Dynamic Field") {
				var fragment = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${fragment}:", "");

				var index = StringUtil.extractFirst(${rowList}, ":");
				var target = StringUtil.extractLast(${rowList}, ":");

				CommerceDisplayPageTemplates.addFragment(
					collectionName = "Product",
					fragmentName = ${fragment},
					index = ${index},
					targetFragmentName = ${target});
			}

			CommerceDisplayPageTemplates.editDynamicField(
				field = "Inventory",
				fragmentName = "Dynamic Field",
				index = 2,
				label = "Inventory");
		}

		task ("And the page is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And the page is marked as Default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("And an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And UOMs are created for Break Fluid product") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 80,
				incrementalOrderQuantity = "0.6",
				precision = 2,
				productSKU = "MIN93016A",
				uomKey = "uom1key",
				uomName = "UOM1");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.25",
				precision = 2,
				priority = 1,
				productSKU = "MIN93016C",
				uomKey = "uom2key",
				uomName = "UOM2");

			for (var activationAndUOMName : list "true:3,false:4") {
				var active = StringUtil.extractFirst(${activationAndUOMName}, ":");
				var uomName = StringUtil.extractLast(${activationAndUOMName}, ":");

				CommerceJSONSKUsAPI._addCommerceUOM(
					active = ${active},
					basePrice = 80,
					incrementalOrderQuantity = "0.125",
					precision = 3,
					priority = 2,
					productSKU = "MIN93016C",
					promoPrice = "72.00",
					uomKey = "uom${uomName}key",
					uomName = "UOM${uomName}");
			}
		}

		task ("And from the MIN55861 product configuration, multiple and minimum quantity is set as 0.0001") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = "0.0001",
				multipleOrderQuantity = "0.0001",
				productName = "Brake Fluid");
		}

		task ("When the buyer user logs in ") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And the buyer navigates to the Brake Fluid Product Detail page") {
			CommerceNavigator.searchEntry(entryName = "Brake Fluid");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Brake Fluid");
		}

		task ("Then asserts that MIN93016A(pre-selected sku) has only UOM1 (UOM field not clickable)") {
			AssertSelectedLabel(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM1");

			AssertElementPresent(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT_DISABLED",
				value1 = "UOM1");

			for (var uomName : list "UOM2,UOM3,UOM4") {
				AssertElementNotPresent(
					locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE",
					uomName = ${uomName});
			}
		}

		task ("And the UOM data (price, quantity, availability) is shown correctly") {
			FrontStore.assertProductDetails(
				productAvailability = "Available",
				productListPrice = "80.00");

			AssertTextEquals(
				key_element = "span",
				key_index = 2,
				key_node = "value",
				locator1 = "CommerceFrontStore#FS_DYNAMIC_FIELD",
				value1 = 240);
		}

		task ("When the buyer adds the SKU/UOM to the cart") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = "1.2");

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("And the buyer selects the option value 48(MIN93016B)") {
			Select(
				key_optionName = "Package Quantity",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTIONS_SELECT",
				value1 = 48);
		}

		task ("Then assert that MIN93016B does not have any UOM") {
			AssertElementNotPresent(locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT");
		}

		task ("When the buyer adds the SKU to the cart") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 1);

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("And the buyer selects the option value 112(MIN93016C)") {
			Select(
				key_optionName = "Package Quantity",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTIONS_SELECT",
				value1 = 112);
		}

		task ("Then assert that there are 2 UOMs (UOM2, UOM3)(UOM4 is inactive)") {
			for (var indexAndUOMName : list "1:uom2,2:uom3") {
				var index = StringUtil.extractFirst(${indexAndUOMName}, ":");
				var uomName = StringUtil.extractLast(${indexAndUOMName}, ":");

				AssertElementPresent(
					index = ${index},
					locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE_BY_INDEX",
					uomName = ${uomName});
			}

			for (var uomNotPresent : list "UOM1,UOM4") {
				AssertElementNotPresent(
					locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE",
					uomName = ${uomNotPresent});
			}
		}

		task ("And assert that the pre-selected UOMâ€™s(UOM2) data is shown correctly") {
			AssertSelectedLabel(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM2");

			FrontStore.assertProductDetails(
				productAvailability = "Available",
				productListPrice = "20.00");

			AssertTextEquals(
				key_element = "span",
				key_index = 2,
				key_node = "value",
				locator1 = "CommerceFrontStore#FS_DYNAMIC_FIELD",
				value1 = 240);
		}

		task ("When the buyer adds the SKU to the cart") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 1);

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("And the buyer selects the UOM3") {
			Select(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM3");
		}

		task ("Then the UOM data(price, quantity, availability) is shown correctly") {
			FrontStore.assertProductDetails(
				productAvailability = "Unavailable",
				productSalePrice = "72.00");

			AssertTextEquals(
				key_element = "span",
				key_index = 2,
				key_node = "value",
				locator1 = "CommerceFrontStore#FS_DYNAMIC_FIELD",
				value1 = 0);
		}

		task ("When the buyer adds the SKU/UOM to the cart") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 1);

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("Then can assert all the mini-cart entries(SKU, UOM, Pricing, Quantity)") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemName = "Brake Fluid",
				cartItemPriceValue = "20.00",
				cartItemQuantity = 1,
				cartItemSku = "MIN93016C",
				cartItemUOMKey = "uom2key",
				cartSummaryTotal = "888.00");

			FrontStore.viewMiniCartItem(
				cartItemName = "Brake Fluid",
				cartItemPromoPriceValue = "72.00",
				cartItemQuantity = 1,
				cartItemSku = "MIN93016B");

			FrontStore.viewMiniCartItem(
				cartItemName = "Brake Fluid",
				cartItemPromoPriceValue = "72.00",
				cartItemQuantity = 1,
				cartItemSku = "MIN93016C",
				cartItemUOMKey = "uom3key");

			FrontStore.viewMiniCartItem(
				cartItemName = "Brake Fluid",
				cartItemPriceValue = "80.00",
				cartItemQuantity = "1.2",
				cartItemSku = "MIN93016A",
				cartItemUOMKey = "uom1key");
		}
	}

	@description = "COMMERCE-12427. As a buyer user I can add to cart products SKU with multiple UOMs using the Add To Cart Fragment"
	@priority = 5
	test CanAddToCartFragmentHandleMultipleUOMs {
		property portal.acceptance = "true";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a new Commerce Product type Display Page Template is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And product fragments are deployed") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Product Display Page Template");

			for (var rowList : list "Add to Cart:1:,Price:2:Add to Cart,Availability:2:Price,Dynamic Field:2:Availability") {
				var fragment = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${fragment}:", "");

				var index = StringUtil.extractFirst(${rowList}, ":");
				var target = StringUtil.extractLast(${rowList}, ":");

				CommerceDisplayPageTemplates.addFragment(
					collectionName = "Product",
					fragmentName = ${fragment},
					index = ${index},
					targetFragmentName = ${target});
			}

			CommerceDisplayPageTemplates.editDynamicField(
				field = "Inventory",
				fragmentName = "Dynamic Field",
				index = 1,
				label = "Inventory");
		}

		task ("And the page is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And the page is marked as Default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("And an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And 2 UOMs are created to MIN55861 with 0.6 as incremental order quantity") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.6",
				productSKU = "MIN55861",
				uomKey = "UOM1KEY",
				uomName = "UOM1");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.6",
				productSKU = "MIN55861",
				promoPrice = 15,
				uomKey = "UOM2KEY",
				uomName = "UOM2");
		}

		task ("And from the MIN55861 product configuration, multiple quantity is set as 0.6") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				multipleOrderQuantity = "0.6",
				productName = "U-Joint");
		}

		task ("When the buyer user logs in ") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then assert U-Joint product card shows the 'View All Variants' button instead of the add to cart") {
			CommerceNavigator.searchEntry(entryName = "U-Joint");

			AssertElementPresent(
				key_text = "View all variants",
				locator1 = "Button#ANY");
		}

		task ("When the buyer navigates to Minium catalog â†’ MIN55861 product details") {
			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("And assert that the information shown on the page is related to the selected SKU/UOM(availability, stock quantity, list price, promo price)") {
			FrontStore.assertProductDetails(
				productAvailability = "Available",
				productListPrice = "20.00");

			AssertTextEquals(
				key_element = "span",
				key_index = 1,
				key_node = "value",
				locator1 = "CommerceFrontStore#FS_DYNAMIC_FIELD",
				value1 = 120);
		}

		task ("And adds to the cart the SKU/first UOM combination with quantity 3") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 3);

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("And selects the second UOM") {
			Select(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM2");
		}

		task ("And assert that the information shown on the page is related to the selected SKU/UOM(availability, stock quantity, list price, promo price)") {
			FrontStore.assertProductDetails(
				productAvailability = "Unavailable",
				productListPriceInactive = "20.00",
				productSalePrice = "15.00");

			AssertTextEquals(
				key_element = "span",
				key_index = 1,
				key_node = "value",
				locator1 = "CommerceFrontStore#FS_DYNAMIC_FIELD",
				value1 = 0);
		}

		task ("And adds to the cart the SKU/Second UOM combination with quantity 6") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 6);

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("And selects the first UOM again and adds it to the cart with quantity 3") {
			Select(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM1");

			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 3);

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("Then the SKUs/UOMs are correctly shown on the minicart showing the right UOM keys, quantities, unit price and total price") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemName = "U-Joint",
				cartItemPriceValue = "20.00",
				cartItemQuantity = 6,
				cartItemSku = "MIN55861",
				cartItemUOMKey = "UOM1KEY",
				cartSummaryTotal = "350.00");

			FrontStore.viewMiniCartItem(
				cartItemName = "U-Joint",
				cartItemPromoPriceValue = "15.00",
				cartItemQuantity = 6,
				cartItemSku = "MIN55861",
				cartItemUOMKey = "UOM2KEY");
		}
	}

	@description = "COMMERCE-12427. As a buyer I can add to cart a SKU with single UOM using the Add to Cart Fragment."
	@priority = 5
	test CanAddToCartFragmentHandleUOM {
		property portal.acceptance = "true";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a new Commerce Product type Display Page Template is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And product fragments are deployed") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Product Display Page Template");

			for (var rowList : list "Add to Cart:1:,Price:2:Add to Cart,Availability:2:Price") {
				var fragment = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${fragment}:", "");

				var index = StringUtil.extractFirst(${rowList}, ":");
				var target = StringUtil.extractLast(${rowList}, ":");

				CommerceDisplayPageTemplates.addFragment(
					collectionName = "Product",
					fragmentName = ${fragment},
					index = ${index},
					targetFragmentName = ${target});
			}
		}

		task ("And the page is published") {
			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And the page is marked as Default") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("And an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And 2 UOMs are created to MIN93015, the first non-purchasable, the second purchasable with 0.6 as incremental order quantity") {
			for (var uomList : list "1:false:1,2:true:0.6") {
				var index = StringUtil.extractFirst(${uomList}, ":");

				var uomList = StringUtil.replaceFirst(${uomList}, "${index}:", "");

				var active = StringUtil.extractFirst(${uomList}, ":");
				var incrementalOrderQuantity = StringUtil.extractLast(${uomList}, ":");

				CommerceJSONSKUsAPI._addCommerceUOM(
					active = ${active},
					basePrice = 25,
					incrementalOrderQuantity = ${incrementalOrderQuantity},
					priority = ${index},
					productSKU = "MIN93015",
					uomKey = "uom${index}",
					uomName = "UOM${index}");
			}
		}

		task ("When the buyer user logs in ") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And on the Minium catalog sorts by Name Ascending") {
			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");
		}

		task ("Then it's possible to add to cart MIN93015 directly from the add to cart catalog's button") {
			AssertElementPresent(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");

			AssertElementNotPresent(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_INVALID");
		}

		task ("When the buyer adds the SKU/UOM to cart with quantity 3") {
			Type(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = 3);
		}

		task ("And assert that the quantity selector pop-up does not show any error message") {
			for (var parameterList : list "min:1,max:10000,multiple:3") {
				var parameter = StringUtil.extractFirst(${parameterList}, ":");
				var quantity = StringUtil.extractLast(${parameterList}, ":");

				FrontStore.viewQuantitySelectorPopoverListItem(
					quantity = ${quantity},
					quantityConfiguration = ${parameter});
			}
		}

		task ("Then the SKU is correctly added to cart") {
			Click(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("And the minicart shows the right UOM key, quantity, unit price and total price") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemName = "ABS Sensor",
				cartItemPriceValue = "25.00",
				cartItemQuantity = 3,
				cartItemSku = "MIN93015",
				cartItemUOMKey = "uom2",
				cartSummaryTotal = "125.00");
		}

		task ("When the buyer navigates to the product's Detail page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");
		}

		task ("And assert that the UOM field is disabled") {
			AssertElementPresent(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT_DISABLED",
				value1 = "UOM2");
		}

		task ("And the buyer tries to add the SKU/UOM to cart with quantity 1.2") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = "1.2");

			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");
		}

		task ("Then an error message â€œQuantity must be a multiple of 3") {
			for (var parameterList : list "min:1,max:10000,multiple:3") {
				var parameter = StringUtil.extractFirst(${parameterList}, ":");
				var quantity = StringUtil.extractLast(${parameterList}, ":");

				if (${quantity} == 3) {
					FrontStore.viewQuantitySelectorPopoverListItem(
						conditionNotSatisfied = "true",
						quantity = ${quantity},
						quantityConfiguration = ${parameter});
				}
				else {
					FrontStore.viewQuantitySelectorPopoverListItem(
						quantity = ${quantity},
						quantityConfiguration = ${parameter});
				}
			}
		}

		task ("When the buyer adds the SKU/UOM to cart with quantity 3") {
			Type(
				locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED",
				value1 = 3);
		}

		task ("Then assert that the quantity selector pop-up does not show any error message") {
			for (var parameterList : list "min:1,max:10000,multiple:3") {
				var parameter = StringUtil.extractFirst(${parameterList}, ":");
				var quantity = StringUtil.extractLast(${parameterList}, ":");

				FrontStore.viewQuantitySelectorPopoverListItem(
					quantity = ${quantity},
					quantityConfiguration = ${parameter});
			}
		}

		task ("And the mini-cart shows the quantity updated (6)") {
			Click(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemName = "ABS Sensor",
				cartItemPriceValue = "25.00",
				cartItemQuantity = 6,
				cartItemSku = "MIN93015",
				cartItemUOMKey = "uom2",
				cartSummaryTotal = "250.00");
		}
	}

	@description = "COMMERCE-12396. As a buyer, I can add to the cart a multi SKUs product with UOM."
	@priority = 5
	test CanAddToCartMultipleSkusProductWithUOMs {
		property portal.acceptance = "true";

		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And UOMs are created for Break Fluid product") {
			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 80,
				incrementalOrderQuantity = "0.6",
				precision = 2,
				productSKU = "MIN93016A",
				uomKey = "uom1key",
				uomName = "UOM1");

			CommerceJSONSKUsAPI._addCommerceUOM(
				basePrice = 20,
				incrementalOrderQuantity = "0.25",
				precision = 2,
				priority = 1,
				productSKU = "MIN93016C",
				uomKey = "uom2key",
				uomName = "UOM2");

			for (var activationAndUOMName : list "true:3,false:4") {
				var active = StringUtil.extractFirst(${activationAndUOMName}, ":");
				var uomName = StringUtil.extractLast(${activationAndUOMName}, ":");

				CommerceJSONSKUsAPI._addCommerceUOM(
					active = ${active},
					basePrice = 80,
					incrementalOrderQuantity = "0.125",
					precision = 3,
					priority = 2,
					productSKU = "MIN93016C",
					promoPrice = "72.00",
					uomKey = "uom${uomName}key",
					uomName = "UOM${uomName}");
			}
		}

		task ("And from the MIN55861 product configuration, multiple and minimum quantity is set as 0.0001") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				minOrderQuantity = "0.0001",
				multipleOrderQuantity = "0.0001",
				productName = "Brake Fluid");
		}

		task ("When the buyer user logs in ") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = PropsUtil.get("default.admin.password"),
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When the buyer navigates to the Brake Fluid Product Detail page") {
			CommerceNavigator.searchEntry(entryName = "Brake Fluid");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Brake Fluid");
		}

		task ("Then assert that MIN93016A(pre-selected sku) has only UOM1(UOM field not clickable)") {
			AssertSelectedLabel(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM1");

			AssertElementPresent(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT_DISABLED",
				value1 = "UOM1");

			for (var uomName : list "UOM2,UOM3,UOM4") {
				AssertElementNotPresent(
					locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE",
					uomName = ${uomName});
			}
		}

		task ("And the UOM data(price, quantity, availability) is shown correctly") {
			FrontStore.assertProductDetails(
				productAvailability = "Available",
				productListPrice = "80.00",
				productName = "Brake Fluid",
				productSKU = "MIN93016A",
				productStockQuantity = 240);
		}

		task ("And the buyer adds the SKU/UOM to the cart") {
			FrontStore.addInitializerProductToCartFromProductDetails(
				productName = "Brake Fluid",
				productQuantity = "1.2");
		}

		task ("When the buyer selects the option value 48(MIN93016B)") {
			Select(
				key_optionName = "Package Quantity",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTIONS_SELECT",
				value1 = 48);
		}

		task ("Then assert that MIN93016B does not have any UOM") {
			AssertElementNotPresent(locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT");
		}

		task ("And the buyer adds the SKU to the cart") {
			Type(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = 1);

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("When the buyer selects the option value 112(MIN93016C)") {
			Select(
				key_optionName = "Package Quantity",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTIONS_SELECT",
				value1 = 112);
		}

		task ("Then assert that there are 2 UOMs (UOM2, UOM3)(UOM4 is inactive)") {
			for (var indexAndUOMName : list "1:uom2,2:uom3") {
				var index = StringUtil.extractFirst(${indexAndUOMName}, ":");
				var uomName = StringUtil.extractLast(${indexAndUOMName}, ":");

				AssertElementPresent(
					index = ${index},
					locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE_BY_INDEX",
					uomName = ${uomName});
			}

			for (var uomNotPresent : list "UOM1,UOM4") {
				AssertElementNotPresent(
					locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECTOR_VALUE",
					uomName = ${uomNotPresent});
			}
		}

		task ("And assert that the pre-selected UOMâ€™s(UOM2) data is shown correctly") {
			AssertSelectedLabel(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM2");

			FrontStore.assertProductDetails(
				productAvailability = "Available",
				productListPrice = "20.00",
				productName = "Brake Fluid",
				productSKU = "MIN93016C",
				productStockQuantity = 240);
		}

		task ("And the buyer adds the SKU to the cart") {
			Type(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = 1);

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("When the buyer selects the UOM3") {
			Select(
				locator1 = "CommerceFrontStore#FS_PRODUCT_UOM_SELECT",
				value1 = "UOM3");
		}

		task ("And the UOM data(price, quantity, availability) is shown correctly") {
			FrontStore.assertProductDetails(
				productAvailability = "Unavailable",
				productName = "Brake Fluid",
				productSalePrice = "72.00",
				productSKU = "MIN93016C",
				productStockQuantity = 0);
		}

		task ("And the buyer adds the SKU/UOM to the cart") {
			Type(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = 1);

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("Then can assert all the mini-cart entries(SKU, UOM, Pricing, Quantity)") {
			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemName = "Brake Fluid",
				cartItemPriceValue = "20.00",
				cartItemQuantity = 1,
				cartItemSku = "MIN93016C",
				cartItemUOMKey = "uom2key",
				cartSummaryTotal = "888.00");

			FrontStore.viewMiniCartItem(
				cartItemName = "Brake Fluid",
				cartItemPromoPriceValue = "72.00",
				cartItemQuantity = 1,
				cartItemSku = "MIN93016B");

			FrontStore.viewMiniCartItem(
				cartItemName = "Brake Fluid",
				cartItemPromoPriceValue = "72.00",
				cartItemQuantity = 1,
				cartItemSku = "MIN93016C",
				cartItemUOMKey = "uom3key");

			FrontStore.viewMiniCartItem(
				cartItemName = "Brake Fluid",
				cartItemPriceValue = "80.00",
				cartItemQuantity = "1.2",
				cartItemSku = "MIN93016A",
				cartItemUOMKey = "uom1key");
		}
	}

}