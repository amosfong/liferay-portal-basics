@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Given a user with Operations Manager role") {
			JSONUser.addUserWithRole(
				roleTitle = "Operations Manager",
				userEmailAddress = "om@liferay.com",
				userFirstName = "Operations",
				userLastName = "Manager",
				userScreenName = "operations.manager");
		}

		task ("And Operations Manager role has Warehouse Access in Control Panel permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_commerce_warehouse_web_internal_portlet_CommerceInventoryWarehousePortlet",
				roleTitle = "Operations Manager");
		}

		task ("And Operations Manager role does not have Manage Inventory and View Warehouses permissions") {
			Permissions.removePermissionViaAPI(
				resourceAction = "MANAGE_INVENTORY",
				resourceName = "com.liferay.commerce.inventory",
				roleTitle = "Operations Manager");

			Permissions.removePermissionViaAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
				roleTitle = "Operations Manager");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12639. As a user with Add Warehouse permission, I want to be able to add warehouses"
	@priority = 5
	test CanAddWarehousesWithAddWarehousePermission {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has 'Add Warehouse' permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_WAREHOUSE",
				resourceName = "com.liferay.commerce.inventory",
				roleTitle = "Operations Manager");
		}

		task ("When the Operations Manager navigate to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then is not able to see any existing warehouse") {
			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}

		task ("But is able to add warehouses") {
			for (var warehouseName : list "TestWH,WHTest") {
				CommerceNavigator.goToWarehousesAdmin();

				Click(locator1 = "Button#PLUS");

				CommerceEntry.addNewWarehousesEntry(warehouseName = ${warehouseName});

				CommerceWarehouses.editWarehouseDetails(
					active = "true",
					latitude = "10.0",
					longitude = "10.0");
			}
		}

		task ("When the Operations Manager navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then is not able to see any existing inventory entry") {
			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}

		task ("But is able to add inventory entries only for the warehouse created") {
			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Click(
				key_fieldLabel = "Warehouse",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_fieldLabel = "Warehouse",
					key_value = ${warehouse},
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}

			for (var warehouse : list "TestWH,WHTest") {
				AssertElementPresent(
					key_fieldLabel = "Warehouse",
					key_value = ${warehouse},
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();

			CommerceInventory.addInventoryEntry(
				quantity = 30,
				sku = "SIMPLE-SKU",
				warehouse = "TestWH");

			CommerceInventory.viewInventoryEntryQuantity(
				available = 30,
				onHand = 30,
				sku = "SIMPLE-SKU");
		}

		task ("And can add Inventory by Warehouse") {
			CommerceNavigator.gotoEntry(entryName = "SIMPLE-SKU");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 30,
				onHand = 30,
				warehouse = "TestWH");

			CommerceInventory.addInventoryByWarehouse(
				quantity = 40,
				warehouseName = "WHTest");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 40,
				onHand = 40,
				warehouse = "WHTest");
		}

		task ("And can edit Inventory by Warehouse") {
			CommerceInventory.editWarehouseInventory(
				quantityOnHand = 50,
				safetyStockQuantity = 20,
				warehouse = "TestWH");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 30,
				onHand = 50,
				safetyStock = 20,
				warehouse = "TestWH");
		}

		task ("And can tranfer inventory") {
			CommerceInventory.createTransfer(
				destination = "WHTest",
				quantity = 10,
				source = "TestWH");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 20,
				incoming = 0,
				onHand = 40,
				safetyStock = 20,
				warehouse = "TestWH");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 50,
				onHand = 50,
				warehouse = "WHTest");
		}

		task ("When the user navigates to Incoming tab") {
			CommerceEntry.gotoMenuTab(menuTab = "Incoming");
		}

		task ("Then is able to add Incoming quantity") {
			var deliveryDate = DateUtil.getFormattedCurrentDate("MM/dd/yyyy");

			CommerceInventory.addIncomingQuantity(
				destination = "TestWH",
				expectedDeliveryDate = ${deliveryDate},
				quantity = 20);

			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 20,
				warehouse = "TestWH");
		}
	}

	@description = "COMMERCE-12646. As a user with specific View and Delete Warehouse permissions, I want to be able to view and delete only the specific inventory entries and warehouses"
	@priority = 5
	test CanDeleteWarehouseAndInventoryEntriesWithViewAndDeleteSpecificWarehousePermissions {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has view specific warehouse permission for Italy") {
			CommerceNavigator.goToWarehousesAdmin();

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy",
				menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			for (var permissions : list "view,delete") {
				CommercePermissions.defineSingleRolePermissionsPG(
					permissions = ${permissions},
					roleTitle = "Operations Manager");
			}
		}

		task ("And the incoming inventory quantity is set to 20 for MIN93015") {
			CommerceJSONWarehousesAndInventoriesAPI._addIncomingQuantity(
				quantity = 20,
				sku = "MIN93015",
				warehouseName = "Italy");
		}

		task ("When the Operations Manager navigates to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can see the only warehouse for Italy with Edit and Delete operations") {
			for (var warehouseName : list "United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}

			AssertElementPresent(
				key_entryName = "Italy",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			Click(
				key_value = "Italy",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			for (var menuItem : list "Edit,Delete") {
				AssertElementPresent(
					key_menuItem = ${menuItem},
					locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
			}
		}

		task ("And can see warehouse details fields disabled and cannot see the Eligibility tab in Italy warehouse's details page") {
			CommerceNavigator.gotoEntry(entryName = "Italy");

			for (var menuTab : list "Details,Eligibility") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}

			CommerceWarehouses.assertWarehouseDetails(
				active = "true",
				city = "Borgorose",
				country = "Italy",
				description = "",
				latitude = "42.214601",
				longitude = "12.796434",
				name = "Italy",
				postalCode = 2021,
				region = "Rieti",
				street1 = "Via delle Coste 24",
				warehouseEditable = "false");
		}

		task ("When the Operations Manager navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then can see all existing inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			Pagination.viewResults(results = "Showing 1 to 51 of 51 entries.");

			AssertElementPresent(
				key_rowNumber = 51,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");
		}

		task ("When going to MIN93015's details") {
			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("Then cannot see On Order and Changelog tabs") {
			for (var menuTab : list "On Order,Changelog") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}
		}

		task ("And can only see the warehouse's delete action under Overview and Incoming tabs") {
			for (var page : list "Overview,Incoming") {
				CommerceEntry.gotoMenuTab(menuTab = ${page});

				AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

				for (var warehouseName : list "United States - Northeast,United States - Southwest") {
					AssertElementNotPresent(
						key_entryName = ${warehouseName},
						locator1 = "CommerceNavigation#ENTRY_NAME");
				}

				AssertElementPresent(
					key_entryName = "Italy",
					locator1 = "CommerceNavigation#ENTRY_NAME");

				AssertElementPresent(
					key_actionName = "Delete",
					key_entryName = "Italy",
					locator1 = "CommerceEntry#TABLE_ENTRY_ACTION");
			}
		}

		task ("And can delete warehouse entry under both Overview and Incoming tabs") {
			for (var page : list "Overview,Incoming") {
				CommerceEntry.gotoMenuTab(menuTab = ${page});

				Click.clickNoMouseOver(
					key_actionName = "Delete",
					key_entryName = "Italy",
					locator1 = "CommerceEntry#TABLE_ENTRY_ACTION");

				Alert.viewSuccessMessage();

				AssertTextEquals(
					locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
					value1 = "Sorry, no results were found.");
			}
		}

		task ("When the Operations Manager navigates to Warehouses page again") {
			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can delete the existing warehouses") {
			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy",
				menuItem = "Delete");

			Alert.viewSuccessMessage();

			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}
	}

	@description = "COMMERCE-12642. As a user with View and Delete Warehouse permissions, I want to be able to view and delete all existing inventory entries and warehouses"
	@priority = 5
	test CanDeleteWarehousesAndInventoryEntriesWithGeneralViewAndDeletePermissions {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has view warehouse permission") {
			for (var permissions : list "VIEW,DELETE") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${permissions},
					resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
					roleTitle = "Operations Manager");
			}
		}

		task ("And the incoming inventory quantity is set to 20 for MIN93015") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._addIncomingQuantity(
					quantity = 20,
					sku = "MIN93015",
					warehouseName = ${warehouseName});
			}
		}

		task ("When the Operations Manager navigates to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can see all existing warehouses with Edit and Delete operations") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");

				Click(
					key_value = ${warehouseName},
					locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

				for (var menuItem : list "Edit,Delete") {
					AssertElementPresent(
						key_menuItem = ${menuItem},
						locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
				}

				Click(
					key_value = ${warehouseName},
					locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");
			}
		}

		task ("And can see warehouse details fields disabled and cannot see the Eligibility tab in one warehouse's details page") {
			CommerceNavigator.gotoEntry(entryName = "Italy");

			for (var menuTab : list "Details,Eligibility") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}

			CommerceWarehouses.assertWarehouseDetails(
				active = "true",
				city = "Borgorose",
				country = "Italy",
				description = "",
				latitude = "42.214601",
				longitude = "12.796434",
				name = "Italy",
				postalCode = 2021,
				region = "Rieti",
				street1 = "Via delle Coste 24",
				warehouseEditable = "false");
		}

		task ("When the Operations Manager navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then can see all existing inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			Pagination.viewResults(results = "Showing 1 to 52 of 52 entries.");

			AssertElementPresent(
				key_rowNumber = 52,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");
		}

		task ("When going to MIN93015's details") {
			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("Then cannot see On Order and Changelog tabs") {
			for (var menuTab : list "On Order,Changelog") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}
		}

		task ("And can only see the warehouse's delete action under Overview and Incoming tabs") {
			for (var page : list "Overview,Incoming") {
				CommerceEntry.gotoMenuTab(menuTab = ${page});

				AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

				for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
					AssertElementPresent(
						key_entryName = ${warehouseName},
						locator1 = "CommerceNavigation#ENTRY_NAME");

					AssertElementPresent(
						key_actionName = "Delete",
						key_entryName = ${warehouseName},
						locator1 = "CommerceEntry#TABLE_ENTRY_ACTION");
				}
			}
		}

		task ("And can delete inventory entries by clicking the delete action or clicking on the warehouse name under Overview/Incoming tabs") {
			for (var page : list "Overview,Incoming") {
				CommerceEntry.gotoMenuTab(menuTab = ${page});

				Click.clickNoMouseOver(
					key_actionName = "Delete",
					key_entryName = "United States - Southwest",
					locator1 = "CommerceEntry#TABLE_ENTRY_ACTION");

				Alert.viewSuccessMessage();

				AssertElementNotPresent(
					key_entryName = "United States - Southwest",
					locator1 = "CommerceNavigation#ENTRY_NAME");

				Click(
					key_entryName = "Italy",
					locator1 = "CommerceNavigation#ENTRY_NAME");

				Alert.viewSuccessMessage();

				AssertElementNotPresent(
					key_entryName = "Italy",
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}

		task ("When the Operations Manager navigates to Warehouses page again") {
			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can delete the existing warehouses") {
			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy",
				menuItem = "Delete");

			Alert.viewSuccessMessage();

			AssertElementNotPresent(
				key_entryName = "Italy",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			for (var warehouseName : list "United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}
	}

	@description = "COMMERCE-12645. As a user with View and Update Warehouse permissions, I want to be able to view and update only the specific inventory entries and warehouses"
	@priority = 5
	test CanEditWarehouseAndInventoryEntriesWithViewAndUpdateSpecificWarehousePermissions {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has view and update specific warehouse permissions for Italy") {
			CommerceNavigator.goToWarehousesAdmin();

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy",
				menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			CommercePermissions.defineSingleRolePermissionsPG(
				permissions = "view,update",
				roleTitle = "Operations Manager");
		}

		task ("And the incoming inventory quantity is set to 20 for MIN93015") {
			CommerceJSONWarehousesAndInventoriesAPI._addIncomingQuantity(
				quantity = 20,
				sku = "MIN93015",
				warehouseName = "Italy");
		}

		task ("When the Operations Manager navigates to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can see the only warehouse for Italy") {
			for (var warehouseName : list "United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}

			AssertElementPresent(
				key_entryName = "Italy",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And can see and update the warehouse fields in Italy warehouse's details page") {
			CommerceNavigator.gotoEntry(entryName = "Italy");

			CommerceWarehouses.assertWarehouseDetails(
				active = "true",
				city = "Borgorose",
				country = "Italy",
				description = "",
				latitude = "42.214601",
				longitude = "12.796434",
				name = "Italy",
				postalCode = 2021,
				region = "Rieti",
				street1 = "Via delle Coste 24");

			CommerceWarehouses.editWarehouseDetails(
				active = "false",
				city = "Roma",
				description = "Description",
				latitude = "45.0",
				longitude = "34.0",
				name = "Italy 2",
				postalCode = 02022,
				region = "Roma",
				street1 = "Via delle Coste 25");

			CommerceWarehouses.assertWarehouseDetails(
				active = "false",
				city = "Roma",
				description = "Description",
				latitude = "45.0",
				longitude = "34.0",
				name = "Italy 2",
				postalCode = 02022,
				region = "Roma",
				street1 = "Via delle Coste 25");
		}

		// The assertion under Eligibility tab needs to be added in the future

		task ("When the Operations Manager navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then can see all existing inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			Pagination.viewResults(results = "Showing 1 to 51 of 51 entries.");

			AssertElementPresent(
				key_rowNumber = 51,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");
		}

		task ("When going to MIN93015's details") {
			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("Then cannot see On Order and Changelog tabs") {
			for (var menuTab : list "On Order,Changelog") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}
		}

		task ("And cannot see Add button/warehouse's ellipsis under Overview tab") {
			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			AssertElementNotPresent(
				key_index = 1,
				key_text = "",
				locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");

			for (var warehouseName : list "United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_text = ${warehouseName},
					locator1 = "Link#ANY");
			}
		}

		task ("But can edit the warehouse's inventory") {
			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 20,
				incoming = 20,
				onHand = 20,
				safetyStock = 0,
				warehouse = "Italy 2");

			CommerceInventory.editWarehouseInventory(
				quantityOnHand = 50,
				safetyStockQuantity = 20,
				warehouse = "Italy 2");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 30,
				incoming = 20,
				onHand = 50,
				safetyStock = 20,
				warehouse = "Italy 2");
		}

		task ("When the user navigates to Incoming tab") {
			CommerceEntry.gotoMenuTab(menuTab = "Incoming");
		}

		task ("Then cannot see Add button/warehouse's ellipsis") {
			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			AssertElementNotPresent(
				key_index = 1,
				key_text = "",
				locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");
		}

		task ("But can edit the incoming quantity entry") {
			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 20,
				warehouse = "Italy 2",
				warehouseWithLink = "false");

			CommerceInventory.editIncomingQuantity(
				quantity = 30,
				warehouse = "Italy 2");

			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 30,
				warehouse = "Italy 2");
		}
	}

	@description = "COMMERCE-12641. As a user with View and Update Warehouse permissions, I want to be able to view and update all existing inventory entries and warehouses"
	@priority = 5
	test CanEditWarehousesAndInventoryEntriesWithGeneralViewAndUpdatePermissions {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has view and update warehouse permissions") {
			for (var permissions : list "VIEW,UPDATE") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${permissions},
					resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
					roleTitle = "Operations Manager");
			}
		}

		task ("And the incoming inventory quantity is set to 20 for MIN93015") {
			CommerceJSONWarehousesAndInventoriesAPI._addIncomingQuantity(
				quantity = 20,
				sku = "MIN93015",
				warehouseName = "Italy");
		}

		task ("When the Operations Manager navigates to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can see all existing warehouses") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}

		task ("And can see and update the warehouse fields in one warehouse's details page") {
			CommerceNavigator.gotoEntry(entryName = "Italy");

			CommerceWarehouses.assertWarehouseDetails(
				active = "true",
				city = "Borgorose",
				country = "Italy",
				description = "",
				latitude = "42.214601",
				longitude = "12.796434",
				name = "Italy",
				postalCode = 2021,
				region = "Rieti",
				street1 = "Via delle Coste 24");

			CommerceWarehouses.editWarehouseDetails(
				active = "false",
				city = "Roma",
				description = "Description",
				latitude = "45.0",
				longitude = "34.0",
				name = "Italy 2",
				postalCode = 02022,
				region = "Roma",
				street1 = "Via delle Coste 25");

			CommerceWarehouses.assertWarehouseDetails(
				active = "false",
				city = "Roma",
				description = "Description",
				latitude = "45.0",
				longitude = "34.0",
				name = "Italy 2",
				postalCode = 02022,
				region = "Roma",
				street1 = "Via delle Coste 25");
		}

		// The assertion under Eligibility tab needs to be added in the future

		task ("When the Operations Manager navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then can see all existing inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			Pagination.viewResults(results = "Showing 1 to 52 of 52 entries.");

			AssertElementPresent(
				key_rowNumber = 52,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");
		}

		task ("When going to MIN93015's details") {
			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("Then cannot see On Order and Changelog tabs") {
			for (var menuTab : list "On Order,Changelog") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}
		}

		task ("And cannot see Add button/warehouse's ellipsis under Overview tab") {
			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			for (var index : list "1,2,3") {
				AssertElementNotPresent(
					key_index = ${index},
					key_text = "",
					locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");
			}
		}

		task ("But can edit the warehouse's inventory") {
			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 20,
				incoming = 20,
				onHand = 20,
				safetyStock = 0,
				warehouse = "Italy 2");

			CommerceInventory.editWarehouseInventory(
				quantityOnHand = 50,
				safetyStockQuantity = 20,
				warehouse = "Italy 2");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 30,
				incoming = 20,
				onHand = 50,
				safetyStock = 20,
				warehouse = "Italy 2");
		}

		task ("When the user navigates to Incoming tab") {
			CommerceEntry.gotoMenuTab(menuTab = "Incoming");
		}

		task ("Then cannot see Add button/warehouse's ellipsis") {
			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			AssertElementNotPresent(
				key_index = 1,
				key_text = "",
				locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");
		}

		task ("But can edit the incoming quantity entry") {
			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 20,
				warehouse = "Italy 2",
				warehouseWithLink = "false");

			CommerceInventory.editIncomingQuantity(
				quantity = 30,
				warehouse = "Italy 2");

			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 30,
				warehouse = "Italy 2");
		}
	}

	@description = "COMMERCE-12638. As a user with Manage Warehouse permission, I want to be able to fully manage all existing inventory entries"
	@priority = 5
	test CanFullyManageInventoryWithManageInventoryPermission {
		property portal.acceptance = "true";

		task ("When the Operations Manager navigates to Inventory page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceInventory.openInventoryAdmin();
		}

		task ("Then is not able to see any existing inventory entry") {
			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}

		task ("When the Operations Manager has Manage Inventory and View Warehouses permissions") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_INVENTORY",
				resourceName = "com.liferay.commerce.inventory",
				roleTitle = "Operations Manager");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
				roleTitle = "Operations Manager");
		}

		task ("And navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then can add new inventory entries") {
			CommerceInventory.addInventoryEntry(
				quantity = 30,
				sku = "SIMPLE-SKU",
				warehouse = "Italy");
		}

		task ("And can see all inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			CommerceInventory.viewInventoryEntryQuantity(
				available = 30,
				onHand = 30,
				sku = "SIMPLE-SKU");

			Pagination.viewResults(results = "Showing 1 to 53 of 53 entries.");

			AssertElementPresent(
				key_rowNumber = 53,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");
		}

		task ("And can add Inventory by Warehouse") {
			CommerceNavigator.gotoEntry(entryName = "SIMPLE-SKU");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 30,
				onHand = 30,
				warehouse = "Italy");

			CommerceInventory.addInventoryByWarehouse(
				quantity = 40,
				warehouseName = "United States - Northeast");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 40,
				onHand = 40,
				warehouse = "United States - Northeast");
		}

		task ("And can edit Inventory by Warehouse") {
			CommerceInventory.editWarehouseInventory(
				quantityOnHand = 50,
				safetyStockQuantity = 20,
				warehouse = "Italy");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 30,
				onHand = 50,
				safetyStock = 20,
				warehouse = "Italy");
		}

		task ("And can tranfer inventory") {
			CommerceInventory.createTransfer(
				destination = "United States - Northeast",
				quantity = 10,
				source = "Italy");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 20,
				incoming = 0,
				onHand = 40,
				safetyStock = 20,
				warehouse = "Italy");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 50,
				onHand = 50,
				warehouse = "United States - Northeast");
		}

		task ("And can delete Inventory by Warehouse") {
			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "United States - Northeast",
				menuItem = "Delete");

			AssertElementNotPresent(
				key_entryName = "United States - Northeast",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the user navigates to Incoming tab") {
			CommerceEntry.gotoMenuTab(menuTab = "Incoming");
		}

		task ("Then is able to add Incoming quantity") {
			var deliveryDate = DateUtil.getFormattedCurrentDate("MM/dd/yyyy");

			CommerceInventory.addIncomingQuantity(
				destination = "Italy",
				expectedDeliveryDate = ${deliveryDate},
				quantity = 20);

			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 20,
				warehouse = "Italy");
		}

		task ("Then is able to edit Incoming quantity") {
			CommerceInventory.editIncomingQuantity(
				quantity = 30,
				warehouse = "Italy");

			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 30,
				warehouse = "Italy");
		}

		task ("Then is able to delete Incoming quantity") {
			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy",
				menuItem = "Delete");

			AssertElementNotPresent(
				key_entryName = "Italy",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the user navigates to Inventory") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then is able to delete Inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "SIMPLE-SKU",
				menuItem = "Delete");

			Pagination.changePagination(itemsPerPage = "60 Items");

			AssertElementNotPresent(
				key_entryName = "SIMPLE-SKU",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "COMMERCE-12638. As a user with Manage Warehouse permission, I want to be able to fully manage all existing warehouses"
	@priority = 5
	test CanFullyManageWarehousesWithManageInventoryPermission {
		property portal.acceptance = "true";

		task ("When the Operations Manager navigate to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then is not able to see any existing warehouse") {
			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}

		task ("When the Operations Manager has Manage Inventory permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_INVENTORY",
				resourceName = "com.liferay.commerce.inventory",
				roleTitle = "Operations Manager");
		}

		task ("And navigates to Warehouses page") {
			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can see all existing warehouses") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}

		task ("And can edit the warehouses") {
			CommerceNavigator.gotoEntry(entryName = "Italy");

			CommerceWarehouses.editWarehouseDetails(
				city = "Roma",
				description = "Description",
				latitude = "45.0",
				longitude = "34.0",
				name = "Italy 2",
				postalCode = 02022,
				region = "Roma",
				street1 = "Via delle Coste 25");

			CommerceWarehouses.assertWarehouseDetails(
				city = "Roma",
				description = "Description",
				latitude = "45.0",
				longitude = "34.0",
				name = "Italy 2",
				postalCode = 02022,
				region = "Roma",
				street1 = "Via delle Coste 25");
		}

		task ("And can delete warehouses") {
			CommerceNavigator.goToWarehousesAdmin();

			AssertElementPresent(
				key_entryName = "Italy 2",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy 2",
				menuItem = "Delete");

			AssertElementNotPresent(
				key_entryName = "Italy 2",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "COMMERCE-12638. As a user with only Manage Inventory permission, I want to not be able to see warehouses without View permission"
	@priority = 5
	test CannotAddInventoryEntriesWithoutViewWarehousePermission {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has Manage Inventory permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_INVENTORY",
				resourceName = "com.liferay.commerce.inventory",
				roleTitle = "Operations Manager");
		}

		task ("And the Operations Manager navigates to Inventory page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceInventory.openInventoryAdmin();
		}

		task ("When the user tries to create an Inventory entry") {
			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then cannot see any existing warehouse") {
			Click(
				key_fieldLabel = "Warehouse",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_fieldLabel = "Warehouse",
					key_value = ${warehouse},
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("When the user tries to add Inventory by Warehouse") {
			CommerceNavigator.gotoEntry(entryName = "MIN00677");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 40,
				onHand = 40,
				warehouse = "Italy");

			Click(locator1 = "Button#PLUS");

			Click(
				key_fieldName = "Add Inventory",
				locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then cannot see any existing warehouse") {
			Click(
				key_fieldLabel = "Warehouse",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_fieldLabel = "Warehouse",
					key_value = ${warehouse},
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("When the user tries to create a transfer") {
			Click(locator1 = "Button#PLUS");

			Click(
				key_fieldName = "Create a Transfer",
				locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then cannot see any existing warehouse") {
			for (var fieldName : list "Source,Destination") {
				Click(
					key_fieldLabel = ${fieldName},
					locator1 = "Select#GENERIC_SELECT_FIELD");

				for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
					AssertElementNotPresent(
						key_fieldLabel = ${fieldName},
						key_value = ${warehouse},
						locator1 = "Select#GENERIC_SELECT_VALUE");
				}
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		task ("When the user tries to add incoming quantity") {
			CommerceEntry.gotoMenuTab(menuTab = "Incoming");

			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then cannot see any existing warehouse") {
			Click(
				key_fieldLabel = "Destination",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_fieldLabel = "Warehouse",
					key_value = ${warehouse},
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}
	}

	@description = "COMMERCE-12644. As a user with View specific warehouse permission, I want to be able to view only the specific inventory entries and warehouses"
	@priority = 5
	test CannotEditWarehouseAndInventoryEntriesWithViewSpecificWarehousePermission {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has view specific warehouse permission for Italy") {
			CommerceNavigator.goToWarehousesAdmin();

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy",
				menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			CommercePermissions.defineSingleRolePermissionsPG(
				permissions = "view",
				roleTitle = "Operations Manager");
		}

		task ("And the incoming inventory quantity is set to 20 for MIN93015") {
			CommerceJSONWarehousesAndInventoriesAPI._addIncomingQuantity(
				quantity = 20,
				sku = "MIN93015",
				warehouseName = "Italy");
		}

		task ("When the Operations Manager navigates to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can see the only warehouse for Italy") {
			for (var warehouseName : list "United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}

			AssertElementPresent(
				key_entryName = "Italy",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And can see warehouse details fields disabled and cannot see the Eligibility tab in Italy warehouse's details page") {
			CommerceNavigator.gotoEntry(entryName = "Italy");

			for (var menuTab : list "Details,Eligibility") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}

			CommerceWarehouses.assertWarehouseDetails(
				active = "true",
				city = "Borgorose",
				country = "Italy",
				description = "",
				latitude = "42.214601",
				longitude = "12.796434",
				name = "Italy",
				postalCode = 2021,
				region = "Rieti",
				street1 = "Via delle Coste 24",
				warehouseEditable = "false");
		}

		task ("When the Operations Manager navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then can see all existing inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			Pagination.viewResults(results = "Showing 1 to 51 of 51 entries.");

			AssertElementPresent(
				key_rowNumber = 51,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");
		}

		task ("When going to MIN93015's details") {
			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("Then cannot see On Order and Changelog tabs") {
			for (var menuTab : list "On Order,Changelog") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}
		}

		task ("And cannot see Add button/Italy's warehouse with link/warehouse's ellipsis under Overview tab") {
			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			for (var warehouseName : list "United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceEntry#TABLE_ELIGIBILITY_ACCOUNT_GROUPS");
			}

			AssertElementNotPresent(
				key_text = "Italy",
				locator1 = "Link#ANY");

			AssertElementNotPresent(
				key_index = 1,
				key_text = "",
				locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 20,
				incoming = 20,
				onHand = 20,
				warehouse = "Italy",
				warehouseWithLink = "false");
		}

		task ("And cannot see Add button/Italy's warehouse with link/warehouse's ellipsis under Incoming tab") {
			Navigator.gotoNavTab(navTab = "Incoming");

			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			AssertElementNotPresent(
				key_text = "Italy",
				locator1 = "Link#ANY");

			AssertElementNotPresent(
				key_index = 1,
				key_text = "",
				locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");

			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 20,
				warehouse = "Italy",
				warehouseWithLink = "false");
		}
	}

	@description = "COMMERCE-12640. As a user with View Warehouse permission, I want to be able to view only all existing inventory entries and warehouses"
	@priority = 5
	test CannotEditWarehousesAndInventoryEntriesWithGeneralViewWarehousePermission {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has view warehouse permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
				roleTitle = "Operations Manager");
		}

		task ("And the incoming inventory quantity is set to 20 for MIN93015") {
			CommerceJSONWarehousesAndInventoriesAPI._addIncomingQuantity(
				quantity = 20,
				sku = "MIN93015",
				warehouseName = "Italy");
		}

		task ("When the Operations Manager navigates to Warehouses page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceNavigator.goToWarehousesAdmin();
		}

		task ("Then can see all existing warehouses") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_entryName = ${warehouseName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}

		task ("And can see warehouse details fields disabled and cannot see the Eligibility tab in one warehouse's details page") {
			CommerceNavigator.gotoEntry(entryName = "Italy");

			for (var menuTab : list "Details,Eligibility") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}

			CommerceWarehouses.assertWarehouseDetails(
				active = "true",
				city = "Borgorose",
				country = "Italy",
				description = "",
				latitude = "42.214601",
				longitude = "12.796434",
				name = "Italy",
				postalCode = 2021,
				region = "Rieti",
				street1 = "Via delle Coste 24",
				warehouseEditable = "false");
		}

		task ("When the Operations Manager navigates to Inventory page") {
			CommerceInventory.openInventoryAdmin();
		}

		task ("Then can see all existing inventory entries") {
			Pagination.changePagination(itemsPerPage = "60 Items");

			Pagination.viewResults(results = "Showing 1 to 52 of 52 entries.");

			AssertElementPresent(
				key_rowNumber = 52,
				locator1 = "CommerceNavigation#ENTRY_NAME_N");
		}

		task ("When going to MIN93015's details") {
			CommerceNavigator.gotoTableListEntry(entryName = "MIN93015");
		}

		task ("Then cannot see On Order and Changelog tabs") {
			for (var menuTab : list "On Order,Changelog") {
				AssertElementNotPresent(
					key_menuTab = ${menuTab},
					locator1 = "CommerceEntry#MENU_TAB");
			}
		}

		task ("And cannot see Add button/warehouses with link/warehouse's ellipsis under Overview tab") {
			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_text = ${warehouseName},
					locator1 = "Link#ANY");
			}

			for (var index : list "1,2,3") {
				AssertElementNotPresent(
					key_index = ${index},
					key_text = "",
					locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");
			}

			CommerceInventory.viewInventoryByWarehouseEntry(
				available = 20,
				incoming = 20,
				onHand = 20,
				warehouse = "Italy",
				warehouseWithLink = "false");
		}

		task ("And cannot see Add button/warehouses with link/warehouse's ellipsis under Incoming tab") {
			Navigator.gotoNavTab(navTab = "Incoming");

			AssertElementNotPresent(locator1 = "CommerceEntry#ADD_BUTTON");

			AssertElementNotPresent(
				key_text = "Italy",
				locator1 = "Link#ANY");

			AssertElementNotPresent(
				key_index = 1,
				key_text = "",
				locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");

			CommerceInventory.viewIncomingQuantityByWarehouseWithCurrentDate(
				quantity = 20,
				warehouse = "Italy",
				warehouseWithLink = "false");
		}
	}

	@description = "COMMERCE-12643. As a user with Update or Delete permissions for a specific Warehouse, I want to not be able to see warehouses and inventory entries"
	@priority = 5
	test CannotViewWarehouseAndInventoryEntriesWithUpdateOrDeleteSpecificWarehousesPermission {
		property portal.acceptance = "true";

		task ("Given the Operations Manager has Update and Delete permissions for Italy") {
			CommerceNavigator.goToWarehousesAdmin();

			CommerceEntry.clickEntryDropdownMenuItem(
				entryName = "Italy",
				menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			for (var permissions : list "update,delete") {
				CommercePermissions.defineSingleRolePermissionsPG(
					permissions = ${permissions},
					roleTitle = "Operations Manager");
			}
		}

		task ("When Operations Manager user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");
		}

		task ("Then is not able to see any existing inventory entry") {
			CommerceInventory.openInventoryAdmin();

			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}

		task ("And is not able to see any existing warehouse") {
			CommerceNavigator.goToWarehousesAdmin();

			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}
	}

	@description = "COMMERCE-12643. As a user with Update or Delete Warehouse permissions, I want to not be able to see warehouses and inventory entries"
	@priority = 5
	test CannotViewWarehousesAndInventoryEntriesWithGeneralUpdateOrDeleteWarehousesPermission {
		property portal.acceptance = "true";

		task ("Given Operations Manager user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");
		}

		task ("When the Operations Manager role has Update/Delete Warehouse or both permissions") {
			for (var permission : list "UPDATE,DELETE,Both") {
				if (${permission} != "Both") {
					Permissions.definePermissionViaJSONAPI(
						resourceAction = ${permission},
						resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
						roleTitle = "Operations Manager");
				}
				else {
					for (var resourceAction : list "UPDATE,DELETE") {
						Permissions.definePermissionViaJSONAPI(
							resourceAction = ${resourceAction},
							resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
							roleTitle = "Operations Manager");
					}
				}

				task ("Then is not able to see any existing inventory entry") {
					CommerceInventory.openInventoryAdmin();

					AssertTextEquals(
						locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
						value1 = "Sorry, no results were found.");
				}

				task ("And is not able to see any existing warehouse") {
					CommerceNavigator.goToWarehousesAdmin();

					AssertTextEquals(
						locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
						value1 = "Sorry, no results were found.");

					if (${permission} != "Both") {
						Permissions.removePermissionViaAPI(
							resourceAction = ${permission},
							resourceName = "com.liferay.commerce.inventory.model.CommerceInventoryWarehouse",
							roleTitle = "Operations Manager");
					}
				}
			}
		}
	}

}