definition {

	@summary = "Default summary"
	macro addDiagramProductWithImage(catalogName = null, shortDescription = null, sku = null, imageTitle = null, productName = null) {
		CommerceJSONProductsAPI._addCommerceProduct(
			catalogName = ${catalogName},
			productName = ${productName},
			productType = "Diagram",
			shortDescription = ${shortDescription},
			sku = ${sku});

		CommerceProducts.openProductsAdmin();

		CommerceNavigator.searchEntry(entryName = "Diagram");

		CommerceNavigator.gotoEntry(entryName = ${productName});

		CommerceEntry.gotoMenuTab(menuTab = "Diagram");

		CommerceProductImages.addDiagramImages(
			imageTitles = ${imageTitle},
			productType = "Diagram");

		SelectFrame(value1 = "relative=top");

		Button.clickPublish();
	}

	@summary = "Default summary"
	macro addEntry(productShortDescription = null, publishProduct = null, key_menuItem = null, compileDescription = null, productFullDescription = null, productType = null, productName = null) {
		Click(locator1 = "Button#PLUS");

		Click(
			key_menuItem = ${productType},
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM",
			value1 = ${key_menuItem});

		if (!(isSet(productCatalog))) {
			var productCatalog = "Master";
		}

		CommerceEntry.addProductsEntry(
			compileDescription = ${compileDescription},
			productCatalog = ${productCatalog},
			productFullDescription = ${productFullDescription},
			productName = ${productName},
			productShortDescription = ${productShortDescription},
			publishProduct = ${publishProduct});
	}

	@summary = "Default summary"
	macro addGroupedProductEntries(productNames = null) {
		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		for (var productName : list ${productNames}) {
			Check.checkToggleSwitch(
				locator1 = "CommerceAccelerators#SELECT_PRODUCT_RELATIONS",
				productName = ${productName});
		}

		SelectFrame(value1 = "relative=top");

		Button.clickAdd();

		SelectFrameTop();
	}

	@summary = "Default summary"
	macro addProductWithStatusViaAPI(catalogName = null, productStatusCode = null, productType = null) {
		if (${productStatusCode} == 0) {
			var productName = "Approved Product";
		}
		else if (${productStatusCode} == 1) {
			var productName = "Pending Product";
		}
		else if (${productStatusCode} == 2) {
			var productName = "Draft Product";
		}
		else if (${productStatusCode} == 3) {
			var productName = "Expired Product";
		}
		else if (${productStatusCode} == 4) {
			var productName = "Denied Product";
		}
		else if (${productStatusCode} == 5) {
			var productName = "Inactive Product";
		}
		else if (${productStatusCode} == 6) {
			var productName = "Incomplete Product";
		}
		else if (${productStatusCode} == 7) {
			var productName = "Scheduled Product";
		}
		else if (${productStatusCode} == 8) {
			var productName = "In Recycle Bin Product";
		}
		else {
			var productName = "Any Product";
		}

		CommerceJSONProductsAPI._addCommerceProduct(
			catalogName = ${catalogName},
			productName = ${productName},
			productStatus = ${productStatusCode},
			productType = ${productType});
	}

	@summary = "Default summary"
	macro approvePendingProduct(userLastName = null, userFirstName = null, approveRequest = null) {
		UserBar.gotoDropdownItem(dropdownItem = "Notifications");

		Click(
			key_text = "${userFirstName} ${userLastName} sent you a Product for review in the workflow.",
			locator1 = "Link#ANY");

		Click(
			key_itemName = "",
			locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

		MenuItem.click(menuItem = "Assign to Me");

		WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Button.click(button = "Done");

		SelectFrameTop();

		if (isSet(approveRequest) && (${approveRequest} == "true")) {
			Click(
				key_itemName = "",
				locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

			MenuItem.click(menuItem = "Approve");

			Button.click(button = "Done");
		}
	}

	@summary = "Default summary"
	macro checkProductDescription(list = null) {
		for (var value : list ${list}) {
			var productName = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${productName}:", "");

			var status = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${status}:", "");

			var productShortDescription = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${productShortDescription}:", "");

			var productFullDescription = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${productFullDescription}:", "");

			var row = ${value};

			AppBuilderAdmin.searchByItem(itemName = ${productName});

			if (${row} == "") {
				Click(
					key_productName = ${productName},
					key_status = ${status},
					locator1 = "CommerceEntry#PRODUCT_ENTRY_BASED_ON_STATUS");
			}
			else {
				Click(
					key_productName = ${productName},
					key_row = ${row},
					key_status = ${status},
					locator1 = "CommerceEntry#PRODUCT_ENTRY_BASED_ON_STATUS_WITH_ROW");
			}

			echo("--------------------------");

			echo("productName: ${productName}");

			echo("status: ${status}");

			echo("productShortDescription: ${productShortDescription}");

			echo("productFullDescription: ${productFullDescription}");

			echo("row: ${row}");

			echo("--------------------------");

			AssertElementPresent(
				locator1 = "CommerceEntry#SHORT_DESCRIPTION_FIELD",
				value = ${productShortDescription});

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			AssertElementPresent(
				locator1 = "RaylifeMobile#MESSAGE_MORE_INFO_INFORMATION",
				value = ${productFullDescription});

			SelectFrameTop();

			Navigator.gotoBack();
		}
	}

	@summary = "Default summary"
	macro checkProductId(list = null) {
		for (var value : list ${list}) {
			var productName = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${productName}:", "");

			var status = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${status}:", "");

			var productId = ${value};

			echo("--------------------------");

			echo("productName: ${productName}");

			echo("status: ${status}");

			echo("productId: ${productId}");

			echo("--------------------------");

			Click(
				key_productName = ${productName},
				key_status = ${status},
				locator1 = "CommerceEntry#PRODUCT_ENTRY_BASED_ON_STATUS");

			CommerceProducts.checkProductIdsEqual(
				firstProductId = ${productId},
				secondProductId = selenium.getText("CommerceEntry#PRODUCT_ID"),
				status = ${status});

			Navigator.gotoBack();
		}
	}

	@summary = "Default summary"
	macro checkProductIdsEqual(firstProductId = null, secondProductId = null, status = null) {
		var equals = CommerceProducts.isProductIdsEqual(
			firstProductId = ${firstProductId},
			secondProductId = ${secondProductId});

		echo("equals = ${equals}");

		if (${equals} == "false") {
			fail("The product ID for the ${status} status with the ID ${secondProductId} is not correct, the expected ID is ${firstProductId}");
		}

		echo("The product ID for the ${status} status is the one with the ID ${secondProductId}");
	}

	@summary = "Default summary"
	macro checkProductIdsNotEqual(firstProductId = null, secondProductId = null) {
		var equals = CommerceProducts.isProductIdsEqual(
			firstProductId = ${firstProductId},
			secondProductId = ${secondProductId});

		if (${equals} == "true") {
			fail("A new version of the product has not been created because the first ID ${firstProductId} is the same of the second ID ${secondProductId}");
		}

		echo("The first version of the product ID is ${firstProductId}, the second version of the product ID is ${secondProductId}");
	}

	@summary = "Default summary"
	macro checkProductsNotPresent(list = null) {
		for (var value : list ${list}) {
			var productName = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${productName}:", "");

			var status = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${status}:", "");

			if (${status} == "") {
				var status = ${value};
				var row = "";
			}
			else {
				var row = ${value};
			}

			echo("--------------------------");

			echo("productName: ${productName}");

			echo("status: ${status}");

			echo("row: ${row}");

			echo("--------------------------");

			if (${row} == "") {
				AssertElementNotPresent(
					key_productName = ${productName},
					key_status = ${status},
					locator1 = "CommerceEntry#PRODUCT_STATUS_BASED_ON_PRODUCT_NAME");
			}
			else {
				AssertElementNotPresent(
					key_productName = ${productName},
					key_row = ${row},
					key_status = ${status},
					locator1 = "CommerceEntry#PRODUCT_STATUS_BASED_ON_PRODUCT_NAME_WITH_ROW");
			}
		}
	}

	@summary = "Default summary"
	macro checkProductsPresent(list = null) {
		for (var value : list ${list}) {
			var productName = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${productName}:", "");

			var status = StringUtil.extractFirst(${value}, ":");

			var value = StringUtil.replaceFirst(${value}, "${status}:", "");

			if (${status} == "") {
				var status = ${value};
				var row = "";
			}
			else {
				var row = ${value};
			}

			echo("--------------------------");

			echo("productName: ${productName}");

			echo("status: ${status}");

			echo("row: ${row}");

			echo("--------------------------");

			if (${row} == "") {
				AssertElementPresent(
					key_productName = ${productName},
					key_status = ${status},
					locator1 = "CommerceEntry#PRODUCT_STATUS_BASED_ON_PRODUCT_NAME");
			}
			else {
				AssertElementPresent(
					key_productName = ${productName},
					key_row = ${row},
					key_status = ${status},
					locator1 = "CommerceEntry#PRODUCT_STATUS_BASED_ON_PRODUCT_NAME_WITH_ROW");
			}
		}
	}

	@summary = "Default summary"
	macro checkProductStatusAfterDuplicationAndConvertionToDraft(entryName = null, productName = null, productCatalog = null, status = null) {
		AppBuilderAdmin.searchByItem(itemName = ${entryName});

		CommerceNavigator.gotoEntry(entryName = ${entryName});

		CommerceProducts.duplicateProduct(
			checkProductFields = ${productName},
			compileDescription = ${productName},
			productCatalog = ${productCatalog},
			productName = ${productName},
			publishProduct = "false",
			status = ${status});

		Click(locator1 = "Icon#BACK");

		AppBuilderAdmin.searchByItem(itemName = ${entryName});

		CommerceNavigator.gotoEntry(entryName = ${entryName});

		CommerceProducts.convertProductToDraft(status = ${status});
	}

	@summary = "Default summary"
	macro configureSubscription(subscriptionExactDay = null, subscriptionMonth = null, subscriptionLength = null, subscriptionCycleValue = null, subscriptionType = null, subscriptionName = null, subscriptionMode = null) {
		if (${subscriptionName} == "Payment Subscription") {
			var indexNumber = 1;
		}
		else {
			var indexNumber = 2;
		}

		Check.checkToggleSwitch(
			key_subscriptionName = ${subscriptionName},
			locator1 = "CommerceEntry#SUBSCRIPTION_TOGGLE");

		if (isSet(subscriptionType)) {
			Select(
				key_subscriptionFieldLabel = "Subscription Type",
				key_subscriptionName = ${subscriptionName},
				locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
				value1 = ${subscriptionType});

			if (isSet(subscriptionMode)) {
				if (${subscriptionType} == "Month") {
					Select(
						key_subscriptionFieldLabel = "Mode",
						key_subscriptionName = ${subscriptionName},
						locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
						value1 = ${subscriptionMode});
				}
				else {
					Select(
						key_indexNumber = 2,
						key_subscriptionFieldLabel = "Mode",
						key_subscriptionName = ${subscriptionName},
						locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL_N",
						value1 = ${subscriptionMode});
				}

				if (${subscriptionMode} == "Exact Day of Month") {
					Type(
						key_indexNumber = ${indexNumber},
						key_text = "On",
						locator1 = "TextInput#ANY_N",
						value1 = ${subscriptionExactDay});
				}

				if (${subscriptionMode} == "Exact Day of Year") {
					Select(
						key_subscriptionFieldLabel = "Month",
						key_subscriptionName = ${subscriptionName},
						locator1 = "CommerceEntry#SUBSCRIPTION_FIELD_LABEL",
						value1 = ${subscriptionMonth});

					Type(
						key_indexNumber = ${indexNumber},
						key_text = "Day",
						locator1 = "TextInput#ANY_N",
						value1 = ${subscriptionExactDay});
				}
			}
		}

		if (isSet(subscriptionLength)) {
			Type(
				key_fieldLabel = "Subscription Length",
				key_indexNumber = ${indexNumber},
				locator1 = "TextInput#GENERIC_TEXT_INPUT_N",
				value1 = ${subscriptionLength});
		}

		if (isSet(neverEnds)) {
			Click(
				key_buttonName = "Never Ends",
				key_indexNumber = ${indexNumber},
				locator1 = "CommerceEntry#TOGGLE_SWITCH_BUTTON");

			Type(
				key_text = "Ends After",
				locator1 = "TextInput#ANY",
				value1 = ${subscriptionCycleValue});
		}

		Button.clickPublish();
	}

	@summary = "Default summary"
	macro configureVirtualProduct(assertUploaded = null, attachment = null, activationStatus = null, maxDownloads = null) {
		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(locator1 = "FormFields#SELECT_UPLOAD_FIELD");

		SelectFrame(
			key_frameTitle = "Select File",
			locator1 = "CommerceEntry#ANY_IFRAME");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = ${attachment});

		Click(
			key_filterOption = "Add",
			locator1 = "AppBuilder#CHOOSE_SEARCH_FILTER_BY_OPTION");

		SelectFrameTop();

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		SelectFrameTop();

		if (isSet(assertUploaded) && (${assertUploaded} == "true")) {
			Refresh();

			AssertElementPresent(
				columnName = ${attachment},
				locator1 = "FrontendDataSet#COLUMN_NAME");
		}

		if (isSet(activationStatus) || isSet(maxDownloads)) {
			if (IsElementPresent(key_contentType = "Base Information", locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED")) {
				Click(
					key_contentType = "Base Information",
					locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED");
			}

			if (isSet(activationStatus)) {
				Select(
					key_fieldLabel = "Activation Status",
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT",
					value1 = ${activationStatus});
			}

			if (isSet(maxDownloads)) {
				Type(
					key_fieldLabel = "Max Number of Downloads",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = ${maxDownloads});
			}

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro convertProductToDraft(status = null) {
		if (${status} == "Draft") {
			AssertElementPresent(
				key_text = "Save as Draft",
				locator1 = "Button#ANY");

			Click(
				key_itemName = "",
				locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

			AssertElementNotPresent(
				key_optionValue = "Convert to Draft",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");
		}
		else {
			AssertElementNotPresent(
				key_text = "Save as Draft",
				locator1 = "Button#ANY");

			Click(
				key_itemName = "",
				locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

			ClickNoError(
				key_optionValue = "Convert to Draft",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

			Confirm.dismissAlert();

			Click(
				key_itemName = "",
				locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

			ClickNoError(
				key_optionValue = "Convert to Draft",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

			AssertConfirm(value1 = "Converting the product status to draft will remove the product from the product catalog. Do you wish to proceed?");

			AssertElementPresent(
				key_text = "Save as Draft",
				locator1 = "Button#ANY");

			AssertElementPresent(
				key_status = "Draft",
				locator1 = "CommerceEntry#WORKFLOW_STATUS");
		}
	}

	@summary = "Default summary"
	macro deleteEntries(deleteMessage = null) {
		if (IsElementPresent(locator1 = "CommerceNavigation#SELECT_ALL_CHECKBOX")) {
			Click.clickNoMouseOverNoWaitForVisible(locator1 = "CommerceNavigation#SELECT_ALL_CHECKBOX");
		}
		else {
			Click.clickNoMouseOverNoWaitForVisible(locator1 = "AppBuilder#CHECKBOX");
		}

		if (IsElementPresent(key_text = "trash", locator1 = "ManagementBar#ANY_ICON")) {
			ClickNoError(
				key_text = "trash",
				locator1 = "ManagementBar#ANY_ICON");
		}
		else {
			ClickNoError(locator1 = "Button#TRASH_ENABLED");
		}

		if (isSet(deleteMessage)) {
			AssertConfirm(value1 = ${deleteMessage});
		}

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@summary = "Default summary"
	macro deleteProductsEntry() {
		ClickNoError(locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		AssertElementPresent(locator1 = "Message#SUCCESS");

		AssertElementNotPresent(locator1 = "Message#ERROR");
	}

	@summary = "Default summary"
	macro disableProductSingleApproverWorkflow() {
		Workflow.openWorkflowListView();

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		CommerceConfiguration.configureWorkflow(
			workflowDefinition = "No Workflow",
			workflowResourceValue = "Product");
	}

	@summary = "Default summary"
	macro discontinueSKU() {
		CommerceEntry.gotoMenuTab(menuTab = "Details");

		Check.checkToggleSwitch(locator1 = "CommerceEntry#SKU_DISCONTINUED_TOGGLE");
	}

	@summary = "Default summary"
	macro duplicateProduct(productShortDescription = null, publishProduct = null, checkProductFields = null, compileDescription = null, productFullDescription = null, status = null, productCatalog = null) {
		var productName = ${productName};

		if (isSet(status)) {
			AssertElementPresent(
				key_status = ${status},
				locator1 = "CommerceEntry#WORKFLOW_STATUS");

			if (${status} != "Draft") {
				AssertElementNotPresent(
					key_text = "Save as Draft",
					locator1 = "Button#ANY");
			}
			else {
				AssertElementPresent(
					key_text = "Save as Draft",
					locator1 = "Button#ANY");
			}
		}

		Click(
			key_itemName = "",
			locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

		Click(
			key_optionValue = "Duplicate",
			locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

		WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		CommerceEntry.selectAutoCompleteField(
			entryName = ${productCatalog},
			label = "Catalog");

		Button.clickSubmitButton();

		if (!(isSet(checkProductFields)) || (${checkProductFields} == "true")) {
			CommerceEntry.checkProductsEntryFields(
				productCatalog = ${productCatalog},
				productName = "Copy of ${productName}");
		}

		if (!(isSet(compileDescription)) || (${compileDescription} == "true")) {
			CommerceEntry.addProductDescription(
				productFullDescription = ${productFullDescription},
				productShortDescription = ${productShortDescription});
		}

		if (!(isSet(publishProduct)) || (${publishProduct} == "true")) {
			CommerceEntry.publishEntry(status = "Approved");
		}
		else {
			AssertElementPresent(
				key_status = "Draft",
				locator1 = "CommerceEntry#WORKFLOW_STATUS");
		}
	}

	@summary = "Default summary"
	macro enableProductSingleApproverWorkflow() {
		Workflow.openWorkflowListView();

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		CommerceConfiguration.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Product");
	}

	@summary = "Default summary"
	macro isProductIdsEqual(firstProductId = null, secondProductId = null) {
		if (${firstProductId} == ${secondProductId}) {
			return "true";
		}
		else {
			return "false";
		}
	}

	@summary = "Default summary"
	macro moveCatalogEntriesToRecycleBin() {
		Click(locator1 = "CommerceNavigation#SELECT_ALL_CHECKBOX");

		Click(locator1 = "Button#MOVE_TO_RECYCLE_BIN");
	}

	@summary = "Default summary"
	macro openProductsAdmin(baseURL = null) {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/guest/~/control_panel/manage?p_p_id=com_liferay_commerce_product_definitions_web_internal_portlet_CPDefinitionsPortlet");

		WaitForVisible(locator1 = "Button#PLUS");
	}

	@summary = "Default summary"
	macro searchAndGoToProductEntry(entryProductName = null) {
		CommerceNavigator.searchEntry(entryName = ${entryProductName});

		CommerceNavigator.gotoEntry(entryName = ${entryProductName});
	}

	@summary = "Default summary"
	macro searchProduct(search = null) {
		Type(
			locator1 = "CommerceNavigation#SEARCH_FIELD",
			value1 = ${search});

		KeyPress(
			locator1 = "CommerceNavigation#SEARCH_FIELD",
			value1 = "\RETURN");
	}

	@summary = "Default summary"
	macro setReplacementSKU(replacementSKU = null) {
		Type(
			locator1 = "TextInput#REPLACEMENT",
			value1 = ${replacementSKU});

		Button.clickPublish();
	}

	@summary = "Default summary"
	macro updateProductInventoryConfiguration(displayStockQuantity = null, allowBackOrders = null, displayAvailability = null, minOrderQuantity = null) {
		if (isSet(displayAvailability)) {
			if (${displayAvailability} == "true") {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = "Display Availability",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
			else {
				Uncheck.uncheckToggleSwitch(
					key_toggleSwitchLabel = "Display Availability",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		if (isSet(allowBackOrders)) {
			if (${allowBackOrders} == "true") {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = "Allow Back Order",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
			else {
				Uncheck.uncheckToggleSwitch(
					key_toggleSwitchLabel = "Allow Back Orders",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		if (isSet(displayStockQuantity)) {
			if (${displayStockQuantity} == "true") {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = "Display Stock Quantity",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
			else {
				Uncheck.uncheckToggleSwitch(
					key_toggleSwitchLabel = "Display Stock Quantity",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		if (isSet(minOrderQuantity)) {
			Type(
				key_labelName = "Minimum Order Quantity",
				locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
				value1 = ${minOrderQuantity});
		}

		Button.clickPublish();
	}

	@summary = "Default summary"
	macro updateProductVirtualActivationStatus(activationStatus = null, key_contentType = null, key_fieldLabel = null) {
		SelectFrameTop();

		WaitForElementNotPresent(locator1 = "CommerceEntry#ANY_IFRAME");

		if (IsElementPresent(key_contentType = ${key_contentType}, locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED")) {
			Click(
				key_contentType = ${key_contentType},
				locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED");
		}

		Select(
			key_fieldLabel = ${key_fieldLabel},
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${activationStatus});

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro updateProductVirtualConfiguration(sampleFileName = null, activationStatus = null, virtualProductFile = null, key_contentType = null, key_fieldLabel = null, enableSample = null) {
		if (IsElementPresent(key_accordionTitle = "details", locator1 = "CommerceEntry#ACCORDION_COLLAPSED")) {
			Click(
				key_accordionTitle = "details",
				locator1 = "CommerceEntry#ACCORDION_COLLAPSED");
		}

		if (isSet(virtualProductFile)) {
			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();

			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceUtilities.uploadSingleFileWithoutFrameTop(uploadFileName = ${virtualProductFile});

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();
		}

		if (isSet(enableSample) && isSet(sampleFileName)) {
			CommerceProducts.uploadVirtualProductSample(
				enableSample = ${enableSample},
				sampleFileName = ${sampleFileName});
		}

		if (isSet(activationStatus)) {
			CommerceProducts.updateProductVirtualActivationStatus(
				activationStatus = ${activationStatus},
				key_contentType = ${key_contentType},
				key_fieldLabel = ${key_fieldLabel});
		}

		Button.clickSave();
	}

	@summary = "Default summary"
	macro updateProductVirtualSettingOverride(sampleFileName = null, activationStatus = null, virtualProductFile = null, key_contentType = null, key_fieldLabel = null, enableSample = null, maxDownloads = null) {
		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#IFRAME");

		CommerceEntry.gotoMenuTab(menuTab = "Virtual Settings Override");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Override",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		CommerceProducts.updateVirtualSkuConfiguration(
			activationStatus = ${activationStatus},
			enableSample = ${enableSample},
			key_contentType = ${key_contentType},
			key_fieldLabel = ${key_fieldLabel},
			maxDownloads = ${maxDownloads},
			sampleFileName = ${sampleFileName},
			virtualProductFile = ${virtualProductFile});

		Click(locator1 = "Icon#CLOSE");

		SelectFrame.selectFrameTop();
	}

	@summary = "Default summary"
	macro updateVirtualSkuActivationStatus(activationStatus = null, key_contentType = null, key_fieldLabel = null) {
		if (IsElementPresent(key_contentType = ${key_contentType}, locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED")) {
			Click(
				key_contentType = ${key_contentType},
				locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED");
		}

		Select(
			key_fieldLabel = ${key_fieldLabel},
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${activationStatus});

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro updateVirtualSkuConfiguration(duration = null, maxDownload = null, sampleFileName = null, activationStatus = null, virtualProductFile = null, key_contentType = null, key_fieldLabel = null, maxDownloads = null, enableSample = null) {
		if (IsElementPresent(key_toggleSwitchLabel = "Override", locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH")) {
			var override = "true";
		}
		else {
			var override = "false";
		}

		if (IsElementPresent(key_accordionTitle = "details", locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS")) {
			Click(
				key_accordionTitle = "details",
				locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS");
		}

		Click(locator1 = "Button#SAVE");

		Alert.viewSuccessMessage();

		Click(locator1 = "Button#PLUS");

		if (${override} == "true") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");
		}

		if (isSet(virtualProductFile)) {
			CommerceUtilities.uploadSingleFileWithoutFrameTop(
				parent = ${override},
				uploadFileName = ${virtualProductFile});
		}

		if (${override} == "true") {
			Button.clickSave();

			SelectFrameParent();

			Click(locator1 = "Icon#BACK");
		}

		if ((${activationStatus} != "") || (${duration} != "") || (${maxDownload} != "")) {
			if (IsElementPresent(key_accordionTitle = "base-information", locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS")) {
				Click(
					key_accordionTitle = "base-information",
					locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS");
			}
		}

		if (isSet(activationStatus)) {
			CommerceProducts.updateVirtualSkuActivationStatus(
				activationStatus = ${activationStatus},
				key_contentType = ${key_contentType},
				key_fieldLabel = ${key_fieldLabel});
		}

		if (isSet(duration)) {
			Type(
				key_text = "Duration",
				locator1 = "TextInput#ANY",
				value1 = ${duration});
		}

		if (isSet(maxDownloads)) {
			Type(
				key_fieldLabel = "Max Number of Downloads",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${maxDownloads});
		}

		if (isSet(enableSample) && isSet(sampleFileName)) {
			if (IsElementPresent(key_accordionTitle = "sample", locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS")) {
				Click(
					key_accordionTitle = "sample",
					locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS");
			}

			CommerceProducts.uploadVirtualSkuSample(
				enableSample = ${enableSample},
				sampleFileName = ${sampleFileName});
		}

		SelectFrameTop();

		WaitForElementPresent(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Button.clickSave();
	}

	@summary = "Default summary"
	macro uploadVirtualProductSample(sampleFileName = null, publish = null, enableSample = null) {
		Variables.assertDefined(parameterList = "${enableSample},${sampleFileName}");

		if (IsElementPresent(key_accordionTitle = "sample", locator1 = "CommerceEntry#ACCORDION_COLLAPSED")) {
			Click(
				key_accordionTitle = "sample",
				locator1 = "CommerceEntry#ACCORDION_COLLAPSED");
		}

		if (${enableSample} == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Enable Sample",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			CommerceUtilities.uploadSingleFile(
				selectButtonName = "selectSampleFile",
				uploadFileName = ${sampleFileName});
		}
		else {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Enable Sample",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		if (isSet(publish) && (${publish} == "true")) {
			Button.clickSave();
		}
	}

	@summary = "Default summary"
	macro uploadVirtualSkuSample(sampleFileName = null, enableSample = null) {
		Variables.assertDefined(parameterList = "${enableSample},${sampleFileName}");

		if (!(isSet(publish))) {
			var publish = "false";
		}

		if (IsElementPresent(key_accordionTitle = "sample", locator1 = "CommerceEntry#ACCORDION_COLLAPSED")) {
			Click(
				key_accordionTitle = "sample",
				locator1 = "CommerceEntry#ACCORDION_COLLAPSED");
		}

		if (${enableSample} == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Enable Sample",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			CommerceUtilities.uploadSingleFileWithoutFrameTop(
				selectButtonName = "selectSampleFile",
				uploadFileName = ${sampleFileName});
		}
		else {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Enable Sample",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		if (${publish} == "true") {
			Button.clickSave();
		}
	}

	@summary = "Default summary"
	macro viewVirtualSkuConfiguration(virtualURL = null, duration = null, simpleFileURL = null, sampleFileName = null, activationStatus = null, virtualProductFile = null, maxDownloads = null, enableSample = null) {
		if (isSet(virtualURL) || isSet(virtualProductFile)) {
			if (IsElementPresent(key_accordionTitle = "details", locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS")) {
				Click(
					key_accordionTitle = "details",
					locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS");
			}

			if (isSet(virtualURL)) {
				AssertTextEquals(
					key_labelName = "URL",
					locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
					value1 = ${virtualURL});
			}

			if (isSet(virtualProductFile)) {
				AssertElementPresent(
					key_text = ${virtualProductFile},
					locator1 = "Link#ANY");
			}
			else {
				AssertElementPresent(
					labelOption = "None",
					locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");
			}
		}

		if (isSet(activationStatus) || isSet(duration) || isSet(maxDownloads)) {
			if (IsElementPresent(key_accordionTitle = "base-information", locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS")) {
				Click(
					key_accordionTitle = "base-information",
					locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS");
			}

			if (isSet(activationStatus)) {
				AssertSelectedLabel(
					key_fieldLabel = "Activation Status",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${activationStatus});
			}

			if (isSet(duration)) {
				AssertTextEquals(
					key_text = "Duration",
					locator1 = "TextInput#ANY",
					value1 = ${duration});
			}

			if (isSet(maxDownloads)) {
				AssertTextEquals(
					key_fieldLabel = "Max Number of Downloads",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = ${maxDownloads});
			}
		}

		if (isSet(enableSample)) {
			if (IsElementPresent(key_accordionTitle = "sample", locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS")) {
				Click(
					key_accordionTitle = "sample",
					locator1 = "CommerceEntry#ACCORDION_COLLAPSED_CONTAINS");
			}

			if (${enableSample} == "true") {
				AssertChecked.assertCheckedNotVisible(
					key_toggleSwitchLabel = "Enable Sample",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

				if (isSet(sampleFileName)) {
					AssertElementPresent(
						key_indexNumber = 1,
						key_text = ${sampleFileName},
						locator1 = "Link#ANY_N");
				}

				if (isSet(virtualURL)) {
					AssertTextEquals(
						key_labelName = "Sample File URL",
						locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
						value1 = ${simpleFileURL});
				}
			}
			else if (${enableSample} == "false") {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_toggleSwitchLabel = "Enable Sample",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

				AssertElementPresent(
					key_indexNumber = 1,
					labelOption = "None",
					locator1 = "FormViewBuilder#FIELD_LABEL_OPTION_N");

				AssertElementPresent(
					key_fieldLabel = "Sample File URL",
					locator1 = "FormFields#FIELD_DISABLED_TEXT");
			}
		}
	}

}