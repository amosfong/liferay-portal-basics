definition {

	@summary = "Default summary"
	macro addAccountGroups(accountGroupNames = null, productName = null) {
		Click(
			key_name = "Account Groups",
			locator1 = "ToggleSwitch#ENABLE_SPECIFIC_TOGGLE_SWITCH");

		ClickNoError.clickNoMouseOver(
			key_webContentTitle = "Add Account Group Relation to ${productName}",
			locator1 = "Button#BUTTON_PLUS_PRODUCT_VISIBILITY");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		if (isSet(selectAll)) {
			Click(locator1 = "Checkbox#SELECT_ALL");
		}
		else {
			for (var accountGroupName : list ${accountGroupNames}) {
				Check(
					key_checkboxName = ${accountGroupName},
					locator1 = "Checkbox#ENABLE_CHECKBOX");
			}
		}

		SelectFrameTop();

		Button.click(button = "Add");

		SelectFrameTop();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro addPin(diagram = null, quantity = null, pinNumber = null, selectType = null, label = null, position = null, sku = null) {
		var key_pinNumber = ${pinNumber};

		Click(locator1 = "CommerceDiagrams#DIAGRAM_IMAGE");

		Type(
			key_inputField = "Position",
			locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
			value1 = ${pinNumber});

		Select(
			locator1 = "CommerceDiagrams#DIAGRAM_PIN_TYPE_SELECT",
			value1 = ${selectType});

		if (${selectType} == "Not Linked to a Catalog") {
			Type(
				key_inputField = "Label",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${label});

			Type(
				key_inputField = "Quantity",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${quantity});
		}
		else if (${selectType} == "Linked to a SKU") {
			Type(
				key_inputField = "SKU",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${sku});

			Click(
				key_menuItem = ${sku},
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

			Type(
				key_inputField = "Quantity",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${quantity});
		}
		else if (${selectType} == "Linked to a Diagram") {
			Type(
				key_inputField = "Diagram",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${diagram});

			Click(
				key_menuItem = ${diagram},
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
		}

		Button.clickSave();

		if (isSet(position)) {
			DragAndDrop.dragAndDropReorganizeObjects(
				key_pinNumber = ${pinNumber},
				locator1 = "CommerceDiagrams#DIAGRAM_PIN",
				locator2 = "CommerceDiagrams#DIAGRAM_IMAGE",
				position = ${position});
		}

		Refresh();

		WaitForElementPresent(
			key_pinNumber = ${pinNumber},
			locator1 = "CommerceDiagrams#DIAGRAM_PIN");
	}

	@summary = "Default summary"
	macro assertDiagramSettingsType(settingsType = null) {
		AssertElementPresent(
			key_selectedType = ${settingsType},
			locator1 = "CommerceDiagrams#DIAGRAM_SETTINGS_SELECTED_TYPE");
	}

	@summary = "Default summary"
	macro assertPinSize(pinSize = null, value = null) {
		AssertElementPresent(
			key_text = ${pinSize},
			locator1 = "CommerceDiagrams#DIAGRAM_PIN_SIZE_BUTTON_TEXT");

		if (${pinSize} == "Small") {
			AssertElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_PIN_SIZE_SMALL");
		}
		else if (${pinSize} == "Medium") {
			AssertElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_PIN_SIZE_MEDIUM");
		}
		else if (${pinSize} == "Large") {
			AssertElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_PIN_SIZE_LARGE");
		}
		else if (${pinSize} == "Custom") {
			Variables.assertDefined(parameterList = ${value});

			AssertElementPresent(
				key_value = ${value},
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_SIZE_CUSTOM");
		}
	}

	@summary = "Default summary"
	macro assertPinToolTipInfo(diagram = null, pinType = null, quantity = null, pinNumber = null, label = null, sku = null) {
		AssertElementPresent(
			key_positionValue = ${pinNumber},
			locator1 = "CommerceDiagrams#DIAGRAM_ADMIN_TOOLTIP_POSITION");

		AssertElementPresent(
			key_linkedType = ${pinType},
			locator1 = "CommerceDiagrams#DIAGRAM_ADMIN_TOOLTIP_LINKED_TYPE");

		if (${pinType} != "Diagram") {
			AssertElementPresent(
				key_quantity = ${quantity},
				locator1 = "CommerceDiagrams#DIAGRAM_ADMIN_TOOLTIP_QUANTITY");
		}

		if (isSet(sku)) {
			var key_inputItem = ${sku};
		}
		else if (isSet(diagram)) {
			var key_inputItem = ${diagram};
		}
		else if (isSet(label)) {
			var key_inputItem = ${label};
		}

		if (isSet(key_inputItem)) {
			AssertElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_ADMIN_TOOLTIP_INPUT_GROUP_ITEM");
		}
	}

	@summary = "Default summary"
	macro assertPinToolTipInfoInProduct(replaceText = null, selectedType = null, sku = null, productName = null) {
		if (${selectedType} == "Linked to a SKU") {
			AssertElementPresent(
				key_sku = ${sku},
				locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_LINKED_SKU");

			AssertElementPresent(
				key_productName = ${productName},
				locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_LINKED_PRODUCT_NAME");

			AssertElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_QUANTITY");

			if (isSet(replaceSku)) {
				AssertElementPresent(
					key_text = ${replaceText},
					locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_REPLACEMENT_ALERT");
			}
		}
		else if (${selectedType} == "Linked to a Diagram") {
			AssertElementPresent(
				key_sku = ${productName},
				locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_LINKED_SKU");
		}
		else if (${selectedType} == "Not Linked to a Catalog") {
			AssertElementPresent(
				key_productName = ${productName},
				locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_UNLINKED_PRODUCT_NAME");

			AssertElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP_QUANTITY");
		}
	}

	@summary = "Default summary"
	macro assertPinToolTipNotOpen() {
		AssertElementNotPresent(locator1 = "CommerceDiagrams#DIAGRAM_ADMIN_TOOLTIP");
	}

	@summary = "Default summary"
	macro assertPinToolTipOpens() {
		Click(locator1 = "CommerceDiagrams#DIAGRAM_IMAGE");

		WaitForElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_ADMIN_TOOLTIP");

		Click(
			key_text = "Cancel",
			locator1 = "Button#ANY_SECONDARY");
	}

	@summary = "Default summary"
	macro changePinInfo(diagram = null, newPinNumber = null, quantity = null, pinNumber = null, selectType = null, label = null, sku = null) {
		CommerceDiagram.viewPin(pinNumber = ${pinNumber});

		Type(
			key_inputField = "Position",
			locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
			value1 = ${newPinNumber});

		Select(
			locator1 = "CommerceDiagrams#DIAGRAM_PIN_TYPE_SELECT",
			value1 = ${selectType});

		if (${selectType} == "Not Linked to a Catalog") {
			Type(
				key_inputField = "Label",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${label});

			Type(
				key_inputField = "Quantity",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${quantity});
		}
		else if (${selectType} == "Linked to a SKU") {
			Type(
				key_inputField = "SKU",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${sku});

			Type(
				key_inputField = "Quantity",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${quantity});
		}
		else if (${selectType} == "Linked to a Diagram") {
			Type(
				key_inputField = "Diagram",
				locator1 = "CommerceDiagrams#DIAGRAM_PIN_INPUT_FIELD",
				value1 = ${diagram});

			Click(
				key_menuItem = ${diagram},
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
		}

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			Button.clickUpdate();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			Button.clickSave();
		}

		Refresh();

		WaitForElementPresent(
			key_pinNumber = ${newPinNumber},
			locator1 = "CommerceDiagrams#DIAGRAM_PIN");
	}

	@summary = "Default summary"
	macro changeSettingsType(settingsType = null) {
		SelectField.select(
			selectFieldLabel = "Type",
			selectFieldValue = ${settingsType});

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro clickExpand() {
		Click(locator1 = "CommerceDiagrams#DIAGRAM_EXPAND");
	}

	@summary = "Default summary"
	macro selectPinSize(pinSize = null) {
		Click(locator1 = "CommerceDiagrams#DIAGRAM_PIN_SIZE_BUTTON");

		AssertClick(
			key_pinSize = ${pinSize},
			locator1 = "CommerceDiagrams#DIAGRAM_PIN_SIZE_DROPDOWN",
			value1 = ${pinSize});
	}

	@summary = "Default summary"
	macro setVisibility(webContentTitle = null, name = null, checkboxName = null) {
		CommerceEntry.gotoMenuTab(menuTab = "Visibility");

		Click(
			key_name = ${name},
			locator1 = "ToggleSwitch#ENABLE_SPECIFIC_TOGGLE_SWITCH");

		if (${name} == "Account Groups") {
			ClickNoError.clickNoMouseOver(
				key_webContentTitle = ${webContentTitle},
				locator1 = "Button#BUTTON_PLUS_PRODUCT_VISIBILITY");
		}
		else {
			Click(locator1 = "Button#PLUS");
		}

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Check(
			key_checkboxName = ${checkboxName},
			locator1 = "Checkbox#ENABLE_CHECKBOX");

		SelectFrameTop();

		Button.click(button = "Add");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro useDragOnBackground(image_name = null, position = null) {

		// Verify the postion after mouse drag

		WaitForElementPresent(locator1 = "CommerceDiagrams#CHECK_DIAGRAM_IMAGE_FOR_DRAG");

		var first_position = selenium.getAttribute("//div[contains(@class,'shop-by-diagram')]//*[name()='svg']//*[name()='g' and @class='zoom-handler']@transform");

		DragAndDrop.dragAndDropReorganizeObjects(
			key_image = ${image_name},
			locator1 = "CommerceDiagrams#DIAGRAM_IMAGE_SPECIFIC",
			locator2 = "CommerceDiagrams#DIAGRAM_IMAGE_SPECIFIC",
			position = ${position});

		var second_position = selenium.getAttribute("//div[contains(@class,'shop-by-diagram')]//*[name()='svg']//*[name()='g' and @class='zoom-handler']@transform");

		if (${first_position} != ${second_position}) {
			echo("The position after the drag is correct");
		}
		else {
			fail("The position after the drag is not correct: ${second_position}, the expected position it must be different from ${first_position}");
		}
	}

	@summary = "Default summary"
	macro viewMappedProducts(pinNumber = null, productName = null) {
		AssertElementPresent(
			key_pinNumber = ${pinNumber},
			key_productName = ${productName},
			locator1 = "CommerceDiagrams#DIAGRAM_MAPPED_PRODUCTS_CONTENT_SPECIFIC");
	}

	@summary = "Default summary"
	macro viewPin(pinNumber = null) {
		Click(
			key_pinNumber = ${pinNumber},
			locator1 = "CommerceDiagrams#DIAGRAM_PIN");

		WaitForElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_ADMIN_TOOLTIP");
	}

	@summary = "Default summary"
	macro viewPinInProduct(pinNumber = null) {
		Click(
			key_pinNumber = ${pinNumber},
			locator1 = "CommerceDiagrams#DIAGRAM_PIN");

		WaitForElementPresent(locator1 = "CommerceDiagrams#DIAGRAM_PRODUCT_TOOLTIP");
	}

}