definition {

	@summary = "Default summary"
	macro addFullDescriptionUsingSource(sourceFullDescription = null) {
		FormFields.toggleCKEditorContentStyle(optionTool = "Source");

		SelectFrameTop();

		CommerceEntry.addFullDescriptionViaCKEditor(entryFullDescription = ${sourceFullDescription});

		Click(
			key_titleName = "Source",
			locator1 = "FormFields#TOOLBAR_ANY_ITEM_BUTTON");
	}

	@summary = "Default summary"
	macro assertDownloadedFile(downloadedFileName = null) {
		var tempDir = PropsUtil.get("output.dir.name");

		var downloadedFilePath = "${tempDir}/${downloadedFileName}";

		var fileExists = FileUtil.exists(${downloadedFilePath});

		if (${fileExists} == "true") {
			echo("File named ${downloadedFileName} was downloaded.");
		}
		else {
			echo("Files named ${downloadedFileName}  NOT FOUND in folder ${tempDir}!");
		}

		return ${fileExists};
	}

	@summary = "Default summary"
	macro checkSuccessAlertAppearsAndDisappears() {
		WaitForElementPresent(locator1 = "Message#SUCCESS");

		Alert.closeMessage(messageType = "SUCCESS");

		WaitForElementNotPresent(locator1 = "Message#SUCCESS");
	}

	@description = "Compare two dates, if the first is greater than the second it returns the string"
	@summary = "Default summary"
	macro compareDates(date2 = null, date1 = null) {
		var javaScript = '''
			CompareDates = {
				compareDates: function (dateString1, dateString2) {
					date1 = new Date(dateString1);
					date2 = new Date(dateString2);

					if (date1.getTime() > date2.getTime()) {
						return "True";
					}
					else if (date1.getTime() < date2.getTime()) {
						return "False";
					}
					else {
						return "Equal";
					}
				}
			};

			compare = CompareDates.compareDates(arguments[0], arguments[1]);

			return compare;
		''';

		var compareDatesResult = selenium.getJavaScriptResult(${javaScript}, ${date1}, ${date2});

		return ${compareDatesResult};
	}

	@summary = "Default summary"
	macro convertStringToKey() {
		var string = StringUtil.lowerCase(${string});

		var string = StringUtil.replace(${string}, " ", "-");

		return ${string};
	}

	@summary = "Default summary"
	macro convertWholeNumberToDecimal(number = null) {
		Variables.assertDefined(parameterList = ${number});

		var isDecimal = StringUtil.contains(${number}, ".");

		if (${isDecimal} == "true") {
			return ${number};
		}
		else {
			var decimalNumber = StringUtil.concat(${number}, ".00");

			return ${decimalNumber};
		}
	}

	@summary = "Default summary"
	macro expandField(accordionTitle = null) {
		if (IsElementPresent(key_accordionTitle = ${accordionTitle}, locator1 = "CommerceEntry#ACCORDION_COLLAPSED")) {
			Click(
				key_accordionTitle = ${accordionTitle},
				locator1 = "CommerceEntry#ACCORDION_COLLAPSED");
		}
	}

	@summary = "Default summary"
	macro getConvertedBase64File(file = null) {
		Variables.assertDefined(parameterList = ${file});

		var projectDir = PropsUtil.get("project.dir");
		var fileDir = "modules/apps/commerce/commerce-product-test/src/testFunctional/tests/dependencies";

		if (${file} == "Commerce_Black.jpg") {
			var fileBase64 = FileUtil.read("${projectDir}/${fileDir}/commerce_black_t_shirt_encoded_base64.txt");
		}

		return ${fileBase64};
	}

	@summary = "Default summary"
	macro getFutureDate(increaseYears = null, monthFormat = null, dayFormat = null, yearFormat = null, increaseDays = null, increaseMonths = null) {
		if (isSet(monthFormat)) {
			var dateMonth = DateUtil.getFormattedCurrentDate(${monthFormat});
		}
		else {
			var dateMonth = DateUtil.getCurrentMonth();
		}

		if (isSet(dayFormat)) {
			var dateDay = DateUtil.getFormattedCurrentDate(${dayFormat});
		}
		else {
			var dateDay = DateUtil.getCurrentDate();
		}

		if (isSet(yearFormat)) {
			var dateYear = DateUtil.getFormattedCurrentDate(${yearFormat});
		}
		else {
			var dateYear = DateUtil.getCurrentYear();
		}

		if (isSet(increaseMonths)) {
			var dateMonth = ${dateMonth} + ${increaseMonths};
		}

		if (isSet(increaseDays)) {
			var dateDay = ${dateDay} + ${increaseDays};
		}

		if (isSet(increaseYears)) {
			var dateYear = ${dateYear} + ${increaseYears};
		}

		var futureDate = "${dateMonth}/${dateDay}/${dateYear}";

		return ${futureDate};
	}

	@summary = "Default summary"
	macro getLocaleDate(date = null) {
		Variables.assertDefined(parameterList = ${date});

		var javaScript = '''
			date = new Date(arguments[0]);

			localeDate = date.toLocaleString();

			return localeDate;
		''';

		var localeDate = selenium.getJavaScriptResult(${javaScript}, ${date}, "");

		return ${localeDate};
	}

	@summary = "Default summary"
	macro getLocaleDateLocalized(date = null, options = null, lang = null) {
		Variables.assertDefined(parameterList = ${date});

		var javaScript = '''
			date = new Date(arguments[0]);

			options = '${options}';

			optionsJSON = JSON.parse(options);

			lang = '${lang}';

  			localizedDate = new Intl.DateTimeFormat(lang, optionsJSON).format(date);

			return localizedDate;
		''';

		var localizedDate = selenium.getJavaScriptResult(${javaScript}, ${date}, "");

		return ${localizedDate};
	}

	@description = "Create ${payload} from a list of fields passed for an API call and returns it"
	@summary = "Default summary"
	macro getPayloadFromFieldsList(fieldsList = null) {
		Variables.assertDefined(parameterList = ${fieldsList});

		var count = 0;
		var list = ListUtil.newListFromString(${fieldsList});

		var listSize = ListUtil.size(${list});
		var payload = "";
		var isLessThanSize = MathUtil.isLessThan(${count}, ${listSize});

		while ((${isLessThanSize} == "true")) {
			var field = ListUtil.get(${list}, ${count});

			var isAllowedOrderQuantities = StringUtil.matches(${field}, "(.*)allowedOrderQuantities(.*)");

			if (${isAllowedOrderQuantities} == "true") {
				var field = StringUtil.replace(${field}, "-", ",");
			}

			if (${count} == 0) {
				var comma = "";
			}
			else {
				var comma = ",";
			}

			var payload = '''${payload}${comma}
				${field}''';
			var count = ${count} + 1;

			var count = StringUtil.valueOf(${count});

			var isLessThanSize = MathUtil.isLessThan(${count}, ${listSize});
		}

		return ${payload};
	}

	@summary = "Default summary"
	macro uploadSingleFile(uploadFileName = null, selectButtonName = null) {
		Variables.assertDefined(parameterList = ${uploadFileName});

		if (isSet(selectButtonName)) {
			CommerceEntry.clickButtonWithName(
				buttonName = ${selectButtonName},
				text = "Select");
		}
		else {
			Button.clickSelect();
		}

		SelectFrameTop();

		CommerceItemSelector.uploadSingleFile(uploadFileName = ${uploadFileName});

		SelectFrameTop();
	}

	@summary = "Default summary"
	macro uploadSingleFileWithoutFrameTop(uploadFileName = null, selectButtonName = null) {
		Variables.assertDefined(parameterList = ${uploadFileName});

		if (isSet(selectButtonName)) {
			CommerceEntry.clickButtonWithName(
				buttonName = ${selectButtonName},
				text = "Select");
		}
		else {
			Button.clickSelect();
		}

		CommerceItemSelector.uploadSingleFile(
			parent = ${parent},
			uploadFileName = ${uploadFileName});
	}

}