definition {

	@summary = "Default summary"
	macro addField(fieldName = null, fieldLabel = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fields");

		if (!(isSet(fieldLocation))) {
			var fieldLocation = "last()";
		}

		DragAndDrop.javaScriptDragAndDropToObject(
			key_fieldLocation = ${fieldLocation},
			key_fieldName = ${fieldName},
			locator1 = "Sidebar#ADD_FIELD_NAME",
			locator2 = "Sidebar#ADD_FIELD_POSITION",
			value1 = ${fieldName});

		WaitForVisible(locator1 = "Sidebar#BACK");

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldLabel});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addFieldNested(fieldName = null, targetFieldsGroupLabel = null, targetFieldLabel = null, fieldLabel = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fields");

		if (isSet(targetFieldsGroupLabel)) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldGroupLabel = ${targetFieldsGroupLabel},
				key_fieldName = ${fieldName},
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "DDMEditStructure#FORM_FIELD_GROUP_TARGET",
				value1 = ${fieldName});
		}
		else {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldLabel = ${targetFieldLabel},
				key_fieldName = ${fieldName},
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldName});
		}

		WaitForVisible(locator1 = "Sidebar#BACK");

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldLabel});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addFieldOptions(optionValueList = null, fieldLabel = null, optionFieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		DEBuilder.openField(
			fieldLabel = ${fieldLabel},
			index = ${index});

		var optionIndex = 1;
		var javaScriptGetOptionValueListLength = '''
	
		const optionValueList = "${optionValueList}";

		return optionValueList.split(",").length.toString();

		''';

		var optionValueListLength = selenium.getEval(${javaScriptGetOptionValueListLength});

		for (var optionValue : list ${optionValueList}) {
			if (isSet(optionFieldLabel)) {
				Type(
					index = ${optionIndex},
					key_optionFieldLabel = ${optionFieldLabel},
					locator1 = "Sidebar#OPTION_INPUT",
					value1 = ${optionValue});
			}
			else {
				Type(
					index = ${optionIndex},
					locator1 = "Sidebar#OPTION_INPUT_WITHOUT_LABEL",
					value1 = ${optionValue});
			}

			if (${optionIndex} != ${optionValueListLength}) {
				FormFields.clickAddOptionButton(gridOptionType = ${optionFieldLabel});
			}

			var optionIndex = ${optionIndex} + 1;
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addFieldsetNestedToBuilder(fieldsetName = null, targetFieldsGroupLabel = null, targetFieldLabel = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		if (isSet(targetFieldsGroupLabel)) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldGroupLabel = ${targetFieldsGroupLabel},
				key_fieldName = ${fieldsetName},
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "DDMEditStructure#FORM_FIELD_GROUP_TARGET",
				value1 = ${fieldsetName});
		}
		else {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldLabel = ${targetFieldLabel},
				key_fieldName = ${fieldsetName},
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldsetName});
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertBooleanFieldReference(fieldReference = null) {
		Click(locator1 = "DataEngineBuilder#FIELD_BODY");

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertTextEquals.assertValue(
			locator1 = "Sidebar#DDM_FIELD_REFERENCE",
			value1 = ${fieldReference});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertDeleteIsDisabled() {
		AssertElementPresent(
			key_text = "Delete",
			locator1 = "Button#ANY_DISABLED");
	}

	@summary = "Default summary"
	macro assertFieldActionsIsNotPresent(fieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		AssertElementNotPresent(
			index = ${index},
			key_fieldLabel = ${fieldLabel},
			locator1 = "DataEngineBuilder#FIELD_ACTIONS_CONTAINER_INDEXED");
	}

	@summary = "Default summary"
	macro assertFieldNotPresent(fieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertElementNotPresent(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED");
		}
		else {
			AssertElementNotPresent(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED");
		}
	}

	@summary = "Default summary"
	macro assertFieldOptionLabels(fieldFieldLabel = null, optionLabelList = null, optionFieldLabel = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
			value1 = ${fieldFieldLabel});

		if (IsTextEqual(locator1 = "Sidebar#TITLE", value1 = "Grid")) {
			var index = 1;

			for (var optionLabel : list ${optionLabelList}) {
				AssertTextEquals(
					index = ${index},
					key_optionFieldLabel = ${optionFieldLabel},
					locator1 = "Sidebar#OPTION_INPUT",
					value1 = ${optionLabel});

				var index = ${index} + 1;
			}
		}
		else if (IsTextEqual(locator1 = "Sidebar#TITLE", value1 = "Select from List")) {
			var index = 1;

			for (var optionLabel : list ${optionLabelList}) {
				AssertTextEquals(
					index = ${index},
					locator1 = "Sidebar#OPTION_INPUT_WITHOUT_LABEL",
					value1 = ${optionLabel});

				var index = ${index} + 1;
			}
		}
		else {
			var index = 1;

			for (var optionLabel : list ${optionLabelList}) {
				AssertTextEquals(
					index = ${index},
					key_optionFieldLabel = "Options",
					locator1 = "Sidebar#OPTION_INPUT",
					value1 = ${optionLabel});

				var index = ${index} + 1;
			}
		}
	}

	@summary = "Default summary"
	macro assertFieldOptionLabelsNotPresent(fieldFieldLabel = null, optionLabelList = null, optionFieldLabel = null) {
		if (isSet(fieldFieldLabel)) {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldFieldLabel});
		}

		if (isSet(optionFieldLabel)) {
			for (var optionLabel : list ${optionLabelList}) {
				AssertElementNotPresent(
					key_optionFieldLabel = ${optionFieldLabel},
					key_optionValue = ${optionLabel},
					locator1 = "DataEngineBuilder#OPTION_VALUE_INPUT_WITH_LABEL");
			}
		}
		else {
			for (var optionLabel : list ${optionLabelList}) {
				AssertElementNotPresent(
					key_optionValue = ${optionLabel},
					locator1 = "DataEngineBuilder#OPTION_VALUE_INPUT");
			}
		}

		if (isSet(fieldFieldLabel)) {
			Click(locator1 = "Sidebar#BACK");
		}
	}

	@summary = "Default summary"
	macro assertFieldReference(fieldLabel = null, fieldReference = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		DEBuilder.openField(
			fieldLabel = ${fieldLabel},
			index = ${index});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertTextEquals.assertValue(
			locator1 = "Sidebar#DDM_FIELD_REFERENCE",
			value1 = ${fieldReference});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertFieldsetNotPresentInSidebar(fieldsetName = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		AssertElementNotPresent(
			key_fieldName = ${fieldsetName},
			locator1 = "Sidebar#ADD_FIELD_NAME");
	}

	@summary = "Default summary"
	macro assertFieldsGroup(fieldGroupDepth = null, fieldGroupLabel = null, fieldsLabelList = null) {
		for (var fieldFieldLabel : list ${fieldsLabelList}) {
			AssertElementPresent(
				key_fieldFieldLabel = ${fieldFieldLabel},
				key_fieldGroupDepth = ${fieldGroupDepth},
				key_fieldGroupLabel = ${fieldGroupLabel},
				locator1 = "DataEngineBuilder#FIELDS_GROUP_FIELD_WITH_DEPTH");
		}
	}

	@summary = "Default summary"
	macro assertFieldType(fieldType = null) {
		AssertTextEquals(
			locator1 = "Sidebar#TITLE",
			value1 = ${fieldType});
	}

	@summary = "Default summary"
	macro assertOptionReferences(optionReferenceList = null, fieldLabel = null, optionFieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		DEBuilder.openField(
			fieldLabel = ${fieldLabel},
			index = ${index});

		var optionIndex = 1;

		for (var optionReference : list ${optionReferenceList}) {
			if (isSet(optionFieldLabel)) {
				AssertTextEquals.assertValue(
					index = ${optionIndex},
					key_optionFieldLabel = ${optionFieldLabel},
					locator1 = "Sidebar#OPTION_FIELD_REFERENCE_INPUT",
					value1 = ${optionReference});
			}
			else {
				AssertTextEquals.assertValue(
					index = ${optionIndex},
					locator1 = "Sidebar#OPTION_WITHOUT_LABEL_FIELD_REFERENCE_INPUT",
					value1 = ${optionReference});
			}

			var optionIndex = ${optionIndex} + 1;
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertPropagateChangesModalIsOpened() {
		AssertTextEquals(
			locator1 = "DataEngineModal#MODAL_TITLE",
			value1 = "Propagate Changes");
	}

	@summary = "Default summary"
	macro collapsibleFieldsGroup(fieldsGroup = null) {
		Click(
			key_fieldLabel = ${fieldsGroup},
			locator1 = "FormFields#LABEL");

		FormFields.enableSwitch(fieldName = "Collapsible");
	}

	@summary = "Default summary"
	macro deleteFieldsetFromSideBar(fieldsetName = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		DataEngine.gotoFieldsetItemEllipsis(fieldsetName = ${fieldsetName});

		MenuItem.click(menuItem = "Delete");

		Button.clickDelete();
	}

	@summary = "Default summary"
	macro editBooleanFieldReference(fieldReference = null) {
		Click(locator1 = "DataEngineBuilder#FIELD_BODY");

		Navigator.gotoNavTab(navTab = "Advanced");

		Type(
			key_fieldLabel = "Field Reference",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldReference});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldReference(fieldLabel = null, assertErrorMessage = null, fieldReference = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		DEBuilder.openField(
			fieldLabel = ${fieldLabel},
			index = ${index});

		Navigator.gotoNavTab(navTab = "Advanced");

		Type(
			key_fieldLabel = "Field Reference",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldReference});

		if (isSet(assertErrorMessage)) {
			AssertTextEquals(
				locator1 = "DataEngineBuilder#FIELD_REFERENCE_ERROR",
				value1 = ${assertErrorMessage});
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editHelpTextField(fieldHelpText = null, fieldLabel = null) {
		Click(locator1 = "DataEngineBuilder#FIELD_BODY");

		Type(
			key_fieldLabel = ${fieldLabel},
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldHelpText});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editOptionReferences(optionReferenceList = null, fieldLabel = null, assertOptionIndex = null, assertErrorMessage = null, optionFieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		DEBuilder.openField(
			fieldLabel = ${fieldLabel},
			index = ${index});

		var optionIndex = 1;

		for (var optionReference : list ${optionReferenceList}) {
			if (isSet(optionFieldLabel)) {
				Type(
					index = ${optionIndex},
					key_optionFieldLabel = ${optionFieldLabel},
					locator1 = "Sidebar#OPTION_FIELD_REFERENCE_INPUT",
					value1 = ${optionReference});

				if (isSet(assertErrorMessage) && (${optionIndex} == ${assertOptionIndex})) {
					AssertTextEquals(
						index = ${assertOptionIndex},
						key_optionFieldLabel = ${optionFieldLabel},
						locator1 = "DataEngineBuilder#OPTION_REFERENCE_ERROR_WITH_LABEL",
						value1 = ${assertErrorMessage});
				}
			}
			else {
				Type(
					index = ${optionIndex},
					locator1 = "Sidebar#OPTION_WITHOUT_LABEL_FIELD_REFERENCE_INPUT",
					value1 = ${optionReference});

				if (isSet(assertErrorMessage) && (${optionIndex} == ${assertOptionIndex})) {
					AssertTextEquals(
						index = ${assertOptionIndex},
						locator1 = "DataEngineBuilder#OPTION_REFERENCE_ERROR",
						value1 = ${assertErrorMessage});
				}
			}

			var optionIndex = ${optionIndex} + 1;
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro getFieldReference(fieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		DEBuilder.openField(
			fieldLabel = ${fieldLabel},
			index = ${index});

		Navigator.gotoNavTab(navTab = "Advanced");

		var fieldReference = selenium.getElementValue("Sidebar#DDM_FIELD_REFERENCE");

		Click(locator1 = "Sidebar#BACK");

		return ${fieldReference};
	}

	@summary = "Default summary"
	macro getOptionReference(optionIndex = null, fieldLabel = null, optionFieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		DEBuilder.openField(
			fieldLabel = ${fieldLabel},
			index = ${index});

		if (isSet(optionFieldLabel)) {
			var index = ${optionIndex};
			var key_optionFieldLabel = ${optionFieldLabel};
			var optionReference = selenium.getElementValue("Sidebar#OPTION_FIELD_REFERENCE_INPUT");
		}
		else {
			var index = ${optionIndex};
			var optionReference = selenium.getElementValue("Sidebar#OPTION_WITHOUT_LABEL_FIELD_REFERENCE_INPUT");
		}

		Click(locator1 = "Sidebar#BACK");

		return ${optionReference};
	}

	@summary = "Default summary"
	macro nestCreatedFields(targetFieldGroupLabel = null, targetFieldLabel = null, fieldLabel = null) {
		if (isSet(targetFieldGroupLabel)) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldGroupLabel = ${targetFieldGroupLabel},
				key_fieldFieldLabel = ${fieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				locator2 = "DDMEditStructure#FORM_FIELD_GROUP_TARGET");
		}
		else {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldLabel = ${fieldLabel},
				key_targetFieldLabel = ${targetFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_TARGET",
				locator2 = "DDMEditStructure#FORM_FIELD_CONTAINER");
		}
	}

	@summary = "Default summary"
	macro openField(fieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}
	}

	@summary = "Default summary"
	macro viewToggleSwitchNotChecked(portalSetting = null) {
		AssertNotChecked.assertNotCheckedNotVisible(
			key_toggleSwitchLabel = ${portalSetting},
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
	}

}