definition {

	@summary = "Default summary"
	macro addLanguageManageTranslations(key_language = null) {
		Click.clickNoMouseOver(locator1 = "Button#LOCALIZATION_GENERIC");

		Click(locator1 = "Translation#TRANSLATION_MANAGE_BUTTON");

		Click(locator1 = "Button#PLUS");

		Click(
			key_language = ${key_language},
			locator1 = "Translation#TRANSLATION_MANAGE_OPTION");

		Click(locator1 = "Button#DONE");
	}

	@summary = "Default summary"
	macro assertFileNameFromTempFolder(webContentTitle = null, pageName = null) {
		if (isSet(pageName)) {
			var translationZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "${pageName}*.zip");
		}
		else {
			var translationZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "${webContentTitle}*.zip");
		}

		echo("## translationZipFileName: ${translationZipFileName}");

		if (contains(${translationZipFileName}, "en_US")) {
			echo("This is a exported translation file.");
		}
		else {
			fail("FAIL!");
		}
	}

	@summary = "Default summary"
	macro autoTranslate() {
		Click(
			key_text = "Auto Translate",
			locator1 = "Button#ANY");
	}

	@summary = "Default summary"
	macro changeBaseLocale(currentBaseLocale = null, newBaseLocale = null) {
		Portlet.waitForForm();

		Click.clickNoMouseOver(
			key_currentLocale = StringUtil.lowerCase(${currentBaseLocale}),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");

		Click(
			key_locale = ${newBaseLocale},
			locator1 = "Translation#DROPDOWN_MENU_ITEM");

		AssertElementPresent(
			key_locale = ${newBaseLocale},
			locator1 = "Translation#CONTENT_TITLE");
	}

	@summary = "Default summary"
	macro changeTargetLocale(newTargetLocale = null, currentTargetLocale = null) {
		Portlet.waitForForm();

		Click.clickNoMouseOver(
			key_currentLocale = StringUtil.lowerCase(${currentTargetLocale}),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");

		Click(
			key_locale = ${newTargetLocale},
			locator1 = "Translation#DROPDOWN_MENU_ITEM");

		AssertElementPresent(
			key_locale = ${newTargetLocale},
			locator1 = "Translation#CONTENT_TITLE");
	}

	@summary = "Default summary"
	macro copyTranslateFile(translationFileName = null, dependencyFile = null) {
		if (contains(${translationZipFileName}, " ")) {
			var translationZipFileName = StringUtil.replace(${translationZipFileName}, " ", "*");
		}

		if (isSet(dependencyFile)) {
			AntCommands.runCommand("build-test-translation.xml", "copy-translation-file -DdependencyFile=${dependencyFile} -Dtranslation.file.name=${translationFileName} -Dtranslation.zip.file.name=${translationZipFileName}");
		}
		else {
			AntCommands.runCommand("build-test-translation.xml", "copy-translation-file -Dtranslation.file.name=${translationFileName} -Dtranslation.zip.file.name=${translationZipFileName}");
		}
	}

	@summary = "Default summary"
	macro deleteTranslationEntry(translationEntry = null, confirmationText = null) {
		LexiconEntry.delete(
			confirmationText = ${confirmationText},
			rowEntry = ${translationEntry});
	}

	@summary = "Default summary"
	macro editTranslationEntry(translationEntry = null) {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = ${translationEntry});
	}

	@summary = "Default summary"
	macro enableAwsTranslation() {
		var accessKey = PropsUtil.get("aws.translation.access.key.id");
		var secretKey = PropsUtil.get("aws.translation.secret.access.key");

		Type(
			key_text = "accessKey",
			locator1 = "TextArea#ANY",
			value1 = ${accessKey});

		Type(
			key_text = "secretKey",
			locator1 = "TextArea#ANY",
			value1 = ${secretKey});

		FormFields.enableCheckbox(fieldName = "enabled");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro enableAzureTranslation() {
		var subscriptionKey = PropsUtil.get("azure.translation.subscription.key");
		var resourceLocation = PropsUtil.get("azure.translation.resource.location");

		Type(
			key_text = "subscriptionKey",
			locator1 = "TextArea#ANY",
			value1 = ${subscriptionKey});

		Type(
			key_text = "resourceLocation",
			locator1 = "TextArea#ANY",
			value1 = ${resourceLocation});

		FormFields.enableCheckbox(fieldName = "enabled");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro exportTranslation(defaultLanguage = null, experienceList = null, multiplePageExperiencesSelector = null, exportFileFormat = null) {
		AssertElementPresent(
			key_defaultLanguage = "English (United States)",
			locator1 = "Language#EXPORT_TRANSLATION_DEFAULT_ORIGINAL_LANGUAGE");

		AssertElementPresent(
			key_checkboxName = ${defaultLanguage},
			locator1 = "Checkbox#DISABLED_EXPORT_TRANSLATION");

		AssertElementPresent(locator1 = "Button#EXPORT_MODAL_DISABLED");

		if (isSet(viewNoExperiencesSelector)) {
			AssertElementNotPresent(
				key_fieldLabel = "Select Experiences",
				locator1 = "FormFields#LABEL");

			AssertElementNotPresent(
				key_fieldLabel = "Default",
				locator1 = "FormFields#CHECKBOX");
		}

		if (isSet(multiplePageExperiencesSelector)) {
			AssertElementPresent(
				key_fieldLabel = "Export Experiences",
				locator1 = "FormFields#LABEL");

			AssertChecked.assertCheckedNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "Default Experience");

			AssertNotChecked.assertNotCheckedNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "All Experiences");
		}

		if (isSet(noMultiplePageExperiencesSelector)) {
			AssertElementNotPresent(
				key_fieldLabel = "Export Experiences",
				locator1 = "FormFields#LABEL");

			AssertElementNotPresent(
				key_fieldName = "exportExperience",
				key_radioOption = "Default Experience",
				locator1 = "FormFields#RADIO_OPTION_LABEL");
		}

		if (isSet(exportFileFormat)) {
			Select(
				locator1 = "Select#EXPORT_FILE_FORMAT",
				value1 = ${exportFileFormat});
		}

		for (var languageList : list ${languageList}) {
			Check.checkNotVisible(
				checkboxName = ${languageList},
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		if (${multiplePageExperiencesSelector} == "All Experiences") {
			Check.checkNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "All Experiences");

			AssertChecked.assertCheckedNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "All Experiences");
		}

		if (isSet(experienceList)) {
			var position = 1;

			while (IsElementNotPresent(locator1 = "Button#EXPORT_MODAL_DISABLED")) {
				Click.clickNoWaitForVisible(
					key_position = ${position},
					locator1 = "Translation#EXPERIENCE_CHECKBOX_POSITION");

				var position = ${position} + 1;
			}

			for (var experienceName : list ${experienceList}) {
				Click.clickNoWaitForVisible(
					key_experienceName = ${experienceName},
					locator1 = "Translation#EXPERIENCE_CHECKBOX");
			}
		}

		Click(locator1 = "Button#EXPORT_MODAL");

		DownloadTempFile();

		Button.clickCancel();
	}

	@summary = "Default summary"
	macro gotoBulkExportTranslation() {
		if (contains(${exportTranslationEntry}, "Page")) {
			for (var exportTranslationEntry : list ${exportTranslationEntry}) {
				PagesAdmin.selectPageItem(pageName = ${exportTranslationEntry});
			}
		}
		else {
			for (var exportTranslationEntry : list ${exportTranslationEntry}) {
				LexiconEntry.selectEntry(rowEntry = ${exportTranslationEntry});
			}
		}

		if (isSet(options)) {
			Click(locator1 = "ManagementBar#ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Export for Translations");
		}
		else {
			Click(
				key_text = "upload",
				locator1 = "ManagementBar#ANY_ICON");
		}
	}

	@summary = "Default summary"
	macro gotoBulkImportTranslation() {
		MouseOver.mouseOverNotVisible(locator1 = "Portlet#OPTIONS_ICON");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		MenuItem.click(menuItem = "Import Translations");
	}

	@summary = "Default summary"
	macro gotoExportTranslation(webContentTitle = null, pageName = null) {
		if (isSet(pageName)) {
			WaitForPageLoad();

			Click(
				key_pageName = ${pageName},
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ELLIPSIS_ICON");
		}
		else {
			LexiconEntry.changeDisplayStyle(displayStyle = "list");

			Click.waitForMenuToggleJSClick(
				key_webContentTitle = ${webContentTitle},
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");
		}

		MenuItem.click(menuItem = "Export for Translation");
	}

	@summary = "Default summary"
	macro gotoImportTranslation(webContentTitle = null, pageName = null) {
		if (isSet(pageName)) {
			WaitForPageLoad();

			Click(
				key_pageName = ${pageName},
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ELLIPSIS_ICON");
		}
		else {
			Click.waitForMenuToggleJSClick(
				key_webContentTitle = ${webContentTitle},
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");
		}

		MenuItem.click(menuItem = "Import Translation");
	}

	@summary = "Default summary"
	macro gotoTranslate(webContentTitle = null) {
		Click.waitForMenuToggleJSClick(
			key_webContentTitle = ${webContentTitle},
			locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

		MenuItem.click(menuItem = "Translate");
	}

	@summary = "Default summary"
	macro importTranslation(successFileNumber = null, workflow = null, zipFileName = null, filePath = null, save = null, replace = null, errorMessage = null, successFileName = null, validateInvalidFile = null, failFileName = null, pageName = null, successMessage = null, remove = null, webContentTitle = null, errorMessageItem = null, successFileName2 = null, successFileName3 = null, workflowResubmit = null, workflowSave = null, failFileName2 = null) {
		if (isSet(pageName)) {
			Translations.gotoImportTranslation(pageName = ${pageName});
		}
		else if (isSet(webContentTitle)) {
			Translations.gotoImportTranslation(webContentTitle = ${webContentTitle});
		}

		if (isSet(dependencyfile)) {
			if (isSet(archive)) {
				UploadDependencyFile.uploadArchiveFile(fileName = ${fileName});
			}
			else {
				for (var fileName : list ${fileName}) {
					UploadDependencyFile.uploadFile(
						fileName = ${fileName},
						filePath = ${filePath});
				}
			}
		}
		else {
			for (var fileName : list ${fileName}) {
				Translations.uploadTranslationsFile(
					fileName = ${fileName},
					filePath = ${filePath});
			}
		}

		if (${workflow} == "true") {
			PortletEntry.submitForWorkflow();
		}
		else if (${workflowResubmit} == "true") {
			PortletEntry.saveAsDraft();
		}
		else if (${validateInvalidFile} == "true") {
			Button.clickPublish();
		}
		else if ((${workflowSave} == "true") || (${save} == "true")) {
			if (${workflowSave} == "true") {
				Button.clickSaveAsDraft();
			}
			else if (${save} == "true") {
				Button.clickSave();
			}

			AssertTextEquals(
				locator1 = "Message#SUCCESS_IMPORT_TRANSLATIONS",
				value1 = ${successMessage});

			Click(locator1 = "Button#TRANSLATIONS_DONE");
		}
		else if (${remove} == "true") {
			Button.click(button = "Remove Files");

			for (var fileName : list ${fileName}) {
				AssertTextNotPresent(
					locator1 = "Translation#IMPORT_FILE_NAME",
					value1 = ${fileName});
			}
		}
		else if (${replace} == "true") {
			Button.click(button = "Replace Files");
		}
		else {
			Button.clickPublish();

			WaitForVisible(locator1 = "Button#TRANSLATIONS_DONE");

			if (isSet(successFileName)) {
				Translations.viewImportResult(
					errorMessage = ${errorMessage},
					errorMessageItem = ${errorMessageItem},
					failFileName = ${failFileName},
					failFileName2 = ${failFileName2},
					successFileName = ${successFileName},
					successFileName2 = ${successFileName2},
					successFileName3 = ${successFileName3},
					successFileNumber = ${successFileNumber},
					zipFileName = ${zipFileName});
			}

			if (isSet(downloadCSVErrorReport)) {
				Button.click(button = "Download CSV Error Report");

				var errorReportName = selenium.getAttribute("//a[normalize-space()='Download CSV Error Report']@download");

				DownloadTempFile();

				return ${errorReportName};
			}

			if (isSet(uploadAnotherFile)) {
				Button.click(button = "Upload Another File");
			}
			else {
				Click(locator1 = "Button#TRANSLATIONS_DONE");
			}
		}
	}

	@summary = "Default summary"
	macro openToTranslateEntry(groupName = null, baseURL = null, webContentTitle = null, sourceLanguageId = null, siteURLKey = null, targetLanguageId = null) {
		var classNameId = JSONClassname._getClassNameId(value = "com.liferay.journal.model.JournalArticle");
		var urlTitle = StringUtil.replace(${webContentTitle}, " ", "-");

		var urlTitle = StringUtil.lowerCase(${urlTitle});

		var resourcePrimKey = JSONWebcontentAPI._getResourcePrimKeyByURLTitle(
			groupName = ${groupName},
			urlTitle = ${urlTitle});

		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_translation_web_internal_portlet_TranslationPortlet&_com_liferay_translation_web_internal_portlet_TranslationPortlet_mvcRenderCommandName=%2Ftranslation%2Ftranslate&_com_liferay_translation_web_internal_portlet_TranslationPortlet_classNameId=${classNameId}&_com_liferay_translation_web_internal_portlet_TranslationPortlet_classPK=${resourcePrimKey}&_com_liferay_translation_web_internal_portlet_TranslationPortlet_sourceLanguageId=${sourceLanguageId}&_com_liferay_translation_web_internal_portlet_TranslationPortlet_targetLanguageId=${targetLanguageId}");
	}

	@summary = "Default summary"
	macro openTranslationAdmin(baseURL = null, siteURLKey = null) {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_translation_web_internal_portlet_TranslationPortlet");
	}

	@summary = "Default summary"
	macro saveInvalidConfiguration(settingValue = null) {
		Check.toggleSwitch(
			key_settingFieldName = "Enabled",
			locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

		SystemSettings.editTextAreaSetting(
			settingName = "Service Account Private Key",
			settingValue = ${settingValue});

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = " The service account private key must be in JSON format.");
	}

	@summary = "Default summary"
	macro setGoogleCloudTranslationServiceKey() {
		var lineSeparater = "\n";
		var value1 = PropsUtil.get("google.cloud.translation.service.key.type");
		var value2 = PropsUtil.get("google.cloud.translation.service.key.project.id");
		var value3 = PropsUtil.get("google.cloud.translation.service.key.private.key.id");
		var value5 = PropsUtil.get("google.cloud.translation.service.key.client.email");
		var value6 = PropsUtil.get("google.cloud.translation.service.key.client.id");
		var value7 = PropsUtil.get("google.cloud.translation.service.key.auth.uri");
		var value8 = PropsUtil.get("google.cloud.translation.service.key.token.uri");
		var value9 = PropsUtil.get("google.cloud.translation.service.key.auth.provider.x509.cert.url");
		var value10 = PropsUtil.get("google.cloud.translation.service.key.client.x509.cert.url");
		var keys = PropsUtil.get("google.cloud.translation.service.key.private.key");
		var list = ListUtil.newList();

		for (var key : list ${keys}) {
			var value = '''${lineSeparater}${key}''';

			ListUtil.add(${list}, ${value});
		}

		var value4 = ListUtil.toString(${list}, "");

		var value4 = '''-----BEGIN PRIVATE KEY-----${value4}=${lineSeparater}-----END PRIVATE KEY-----${lineSeparater}''';
		var attribute1 = '''"type" : "${value1}"''';
		var attribute2 = '''"project_id" : "${value2}"''';
		var attribute3 = '''"private_key_id" : "${value3}"''';
		var attribute4 = '''"private_key" : "${value4}"''';
		var attribute5 = '''"client_email" : "${value5}"''';
		var attribute6 = '''"client_id" : "${value6}"''';
		var attribute7 = '''"auth_uri" : "${value7}"''';
		var attribute8 = '''"token_uri" : "${value8}"''';
		var attribute9 = '''"auth_provider_x509_cert_url" : "${value9}"''';
		var attribute10 = '''"client_x509_cert_url" : "${value10}"''';
		var list = ListUtil.newList();

		ListUtil.add(${list}, ${attribute1});

		ListUtil.add(${list}, ${attribute2});

		ListUtil.add(${list}, ${attribute3});

		ListUtil.add(${list}, ${attribute4});

		ListUtil.add(${list}, ${attribute5});

		ListUtil.add(${list}, ${attribute6});

		ListUtil.add(${list}, ${attribute7});

		ListUtil.add(${list}, ${attribute8});

		ListUtil.add(${list}, ${attribute9});

		ListUtil.add(${list}, ${attribute10});

		var attributes = ListUtil.toString(${list});

		var attributes = '''{${attributes}}''';

		return ${attributes};
	}

	@summary = "Default summary"
	macro translateContentPageFile(contentPageTranslation = null, fragmentContent = null, fragmentContentTranslation = null, encoding = null, operation = null) {
		if (contains(${translationFileName}, " ") && contains(${translationFileName}, "(") && contains(${translationFileName}, ")")) {
			var translationFileName = StringUtil.extractLast(${translationFileName}, " ");

			var translationFileName = StringUtil.replace(${translationFileName}, "(", "?");

			var translationFileName = StringUtil.replace(${translationFileName}, ")", "?");
		}

		if (contains(${translationZipFileName}, " ")) {
			var translationZipFileName = StringUtil.replace(${translationZipFileName}, " ", "*");
		}

		if (!(isSet(pageName)) || !(isSet(pageNameTranslation))) {
			var pageName = "false";
			var pageNameTranslation = "false";
		}

		AntCommands.runCommand("build-test-translation.xml", "update-translation-file -Dcontentpage.translation.file=${contentPageTranslation} -Dcontentpage.translation.fragment.target=${fragmentContentTranslation} -Dcontentpage.translation.fragment.target.original=${fragmentContent} -Dcontentpage.translation.title.target=<![CDATA[${pageNameTranslation}]]></target> -Dcontentpage.translation.title.target.original=<![CDATA[${pageName}]]></target> -Doperation=${operation} -Dtranslation.file.encoding=${encoding} -Dtranslation.file.name=${translationFileName} -Dtranslation.zip.file.name=${translationZipFileName}");
	}

	@summary = "Default summary"
	macro translateFields(webContentDescription = null, webContentSourceHtml = null, webContentText = null, webContentInteger = null, webContentTitle = null, webContentContent = null, webContentTextBox = null, webContentNumber = null, webContentDecimal = null) {
		if (isSet(webContentTitle)) {
			PortletEntry.inputTitle(title = ${webContentTitle});
		}

		if (isSet(webContentContent)) {
			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME_2");

			Type(
				locator1 = "CKEditor#BODY",
				value1 = ${webContentContent});

			SelectFrame(value1 = "relative=top");
		}

		if (isSet(webContentDescription)) {
			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			Type(
				locator1 = "CKEditor#BODY",
				value1 = ${webContentDescription});

			SelectFrame(value1 = "relative=top");
		}

		if (isSet(webContentSourceHtml)) {
			Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON_2");

			Type.typeCodeMirrorEditorNoError(
				locator1 = "CKEditor#BODY_FIELD_SOURCE_ON",
				value1 = ${webContentSourceHtml});

			Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON_2");
		}

		if (isSet(webContentText)) {
			Type(
				key_fieldName = "Text",
				locator1 = "TextInput#TRANSLATIONS_TARGET_FIELD",
				value1 = ${webContentText});
		}

		if (isSet(webContentTextBox)) {
			Type(
				key_fieldName = "Text Box",
				locator1 = "TextArea#TRANSLATIONS_TARGET_TEXT_BOX_FIELD",
				value1 = ${webContentTextBox});
		}

		if (isSet(webContentInteger)) {
			Type(
				key_fieldName = "Integer",
				locator1 = "TextInput#TRANSLATIONS_TARGET_FIELD",
				value1 = ${webContentInteger});
		}

		if (isSet(webContentNumber)) {
			Type(
				key_fieldName = "Numeric",
				locator1 = "TextInput#TRANSLATIONS_TARGET_FIELD",
				value1 = ${webContentNumber});
		}

		if (isSet(webContentDecimal)) {
			Type(
				key_fieldName = "Decimal",
				locator1 = "TextInput#TRANSLATIONS_TARGET_FIELD",
				value1 = ${webContentDecimal});
		}
	}

	@summary = "Default summary"
	macro translateFile(webContentDescription = null, translationZipFileName = null, contentTranslation = null, webContentTitle = null, webContentContent = null, descriptionTranslation = null, encoding = null, operation = null, titleTranslation = null) {
		var os = OSDetector.isWindows();

		if (contains(${translationFileName}, " ")) {
			var translationFileName = StringUtil.replace(${translationFileName}, " ", "*");
		}

		if (!(isSet(translationFileRename))) {
			var translationFileRename = "false";
		}

		if (${os} == "true") {
			AntCommands.runCommand("build-test-translation.xml", "update-translation-file -Doperation=${operation} -Dtranslation.content.target=60![CDATA[60p62${contentTranslation}60/p62]]6260/target62 -Dtranslation.content.target.original=60![CDATA[60p62${webContentContent}60/p62]]6260/target62 -Dtranslation.description.target=60![CDATA[60p62${descriptionTranslation}60/p62]]6260/target62 -Dtranslation.description.target.original=60![CDATA[60p62${webContentDescription}60/p62]]6260/target62 -Dtranslation.file.encoding=${encoding} -Dtranslation.file.name=${translationFileName} -Dtranslation.file.rename=${translationFileRename} -Dtranslation.title.target=60![CDATA[${titleTranslation}]]6260/target62 -Dtranslation.title.target.original=60![CDATA[${webContentTitle}]]6260/target62 -Dtranslation.zip.file.name=${translationZipFileName}");
		}
		else {
			AntCommands.runCommand("build-test-translation.xml", "update-translation-file -Doperation=${operation} -Dtranslation.content.target=<![CDATA[<p>${contentTranslation}</p>]]></target> -Dtranslation.content.target.original=<![CDATA[<p>${webContentContent}</p>]]></target> -Dtranslation.description.target=<![CDATA[<p>${descriptionTranslation}</p>]]></target> -Dtranslation.description.target.original=<![CDATA[<p>${webContentDescription}</p>]]></target> -Dtranslation.file.encoding=${encoding} -Dtranslation.file.name=${translationFileName} -Dtranslation.file.rename=${translationFileRename} -Dtranslation.title.target=<![CDATA[${titleTranslation}]]></target> -Dtranslation.title.target.original=<![CDATA[${webContentTitle}]]></target> -Dtranslation.zip.file.name=${translationZipFileName}");
		}
	}

	@summary = "Default summary"
	macro translateFragmentField(fieldName = null, experienceName = null, fragmentText = null) {
		if (isSet(experienceName)) {
			Select(
				locator1 = "Translation#EXPERIENCE_SELECTOR",
				value1 = ${experienceName});

			AssertSelectedLabel(
				locator1 = "Select#SELECT_ID",
				selectFieldId = "experience-selector",
				value1 = ${experienceName});

			AssertElementNotPresent(locator1 = "Translation#BASIC_INFORMATION");
		}

		if (${fieldName} == "HTML") {
			Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON");

			Type.typeCodeMirrorEditorNoError(
				locator1 = "CKEditor#BODY_FIELD_SOURCE_ON",
				value1 = ${fragmentText});

			Click(locator1 = "CKEditor#TOOLBAR_SOURCE_BUTTON");
		}
		else {
			Type(
				key_fieldName = ${fieldName},
				locator1 = "TextInput#TRANSLATIONS_TARGET_FIELD",
				value1 = ${fragmentText});
		}
	}

	@summary = "Default summary"
	macro translateSpecificField(fieldName = null) {
		Click.clickNoMouseOver(
			key_title = "Auto Translate ${fieldName} Field",
			locator1 = "Button#ANY_TITLE");
	}

	@summary = "Default summary"
	macro unzipTranslationFile() {
		if (contains(${fileName}, " ")) {
			var fileName = StringUtil.replace(${fileName}, " ", "*");
		}

		AntCommands.runCommand("build-test-translation.xml", "unzip-translation-file -DfileName=${fileName}");
	}

	@summary = "Default summary"
	macro updateTranslateFileID(structuredContentId = null, translationFileName = null, translationEntryType = null, dependencyFile = null) {
		if (contains(${translationZipFileName}, " ")) {
			var translationZipFileName = StringUtil.replace(${translationZipFileName}, " ", "*");
		}

		if (isSet(dependencyFile)) {
			AntCommands.runCommand("build-test-translation.xml", "update-translation-file-id -DdependencyFile=${dependencyFile} -DstructuredContentId=${structuredContentId} -Dtranslation.entry.type=${translationEntryType} -Dtranslation.file.name=${translationFileName} -Dtranslation.zip.file.name=${translationZipFileName}");
		}
		else {
			AntCommands.runCommand("build-test-translation.xml", "update-translation-file-id -Dtranslation.entry.type=${translationEntryType} -Dtranslation.file.name=${translationFileName} -Dtranslation.zip.file.name=${translationZipFileName}");
		}
	}

	@summary = "Default summary"
	macro uploadTranslationsFile(fileName = null) {
		var tempFileDirectory = selenium.getOutputDirName();

		var filePath = "${tempFileDirectory}/${filePath}/${fileName}";

		UploadFile(
			locator1 = "TextInput#FILE",
			value1 = ${filePath});
	}

	@summary = "Default summary"
	macro viewBaseFields(webContentDescription = null, webContentText = null, webContentNumeric = null, webContentTitle = null, webContentRichText = null, webContentContent = null, numericType = null, fieldType = null) {
		if (isSet(webContentTitle)) {
			AssertElementPresent(
				key_fieldName = "Title",
				key_fieldValue = ${webContentTitle},
				locator1 = "Translation#BASE_LANGUAGE_FIELD");
		}

		if (isSet(webContentContent)) {
			AssertTextEquals.assertPartialText(
				key_content = ${webContentContent},
				key_fieldName = "Content",
				locator1 = "Translation#BASE_LANGUAGE_CONTENT_FIELD",
				value1 = ${webContentContent});
		}

		if (isSet(webContentDescription)) {
			AssertTextEquals.assertPartialText(
				key_content = ${webContentDescription},
				key_fieldName = "Description",
				locator1 = "Translation#BASE_LANGUAGE_CONTENT_FIELD",
				value1 = ${webContentDescription});
		}

		if (isSet(webContentRichText)) {
			AssertTextEquals.assertPartialText(
				key_content = ${webContentRichText},
				key_fieldName = "HTML",
				locator1 = "Translation#BASE_LANGUAGE_CONTENT_FIELD",
				value1 = ${webContentRichText});
		}

		if (isSet(webContentText)) {
			if (!(isSet(webContentTextFieldLabel))) {
				var webContentTextFieldLabel = "Text";
			}

			if (${fieldType} == "Multiple Lines") {
				AssertElementPresent(
					key_fieldName = ${webContentTextFieldLabel},
					key_fieldValue = ${webContentText},
					locator1 = "Translation#BASE_LANGUAGE_TEXT_BOX_FIELD");
			}
			else {
				AssertElementPresent(
					key_fieldName = ${webContentTextFieldLabel},
					key_fieldValue = ${webContentText},
					locator1 = "Translation#BASE_LANGUAGE_FIELD");
			}
		}

		if (isSet(webContentNumeric)) {
			if (!(isSet(webContentNumericFieldLabel))) {
				var webContentNumericFieldLabel = "Numeric";
			}

			if (${numericType} == "Decimal") {
				AssertElementPresent(
					key_fieldName = ${webContentNumericFieldLabel},
					key_fieldValue = ${webContentNumeric},
					locator1 = "Translation#BASE_LANGUAGE_FIELD");
			}
			else {
				AssertElementPresent(
					key_fieldName = ${webContentNumericFieldLabel},
					key_fieldValue = ${webContentNumeric},
					locator1 = "Translation#BASE_LANGUAGE_FIELD");
			}
		}
	}

	@summary = "Default summary"
	macro viewCSVErrorReport(viewNoSuccessfullyImportedTranslation = null, reportContent = null, errorReportName = null) {
		var fileContent = TestCase.getTempFileContent(fileName = ${errorReportName});

		if (contains(${fileContent}, ${reportContent})) {
			echo("The import translation error can be viewed in the report.");
		}
		else {
			fail("The import translation error can not be viewed in the report");
		}

		if (isSet(viewNoSuccessfullyImportedTranslation)) {
			if (!(contains(${fileContent}, ${viewNoSuccessfullyImportedTranslation}))) {
				echo("No imported translation info in the report");
			}
			else {
				fail("The error report is incorrect.");
			}
		}
	}

	@summary = "Default summary"
	macro viewDisabledFieldTranslationButtons(fieldNameList = null) {
		for (var fieldName : list ${fieldNameList}) {
			AssertVisible(
				key_title = "Auto Translate ${fieldName} Field",
				locator1 = "Button#ANY_TITLE_DISABLED");
		}
	}

	@summary = "Default summary"
	macro viewEmptyState() {
		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No entries were found.");
	}

	@summary = "Default summary"
	macro viewEnabledFieldTranslationButtons(fieldNameList = null) {
		for (var fieldName : list ${fieldNameList}) {
			AssertVisible(
				key_title = "Auto Translate ${fieldName} Field",
				locator1 = "Button#ANY_TITLE");
		}
	}

	@summary = "Default summary"
	macro viewErrorMessages(errorMessage = null, errorMessageItem = null) {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_IMPORT_TRANSLATIONS",
			value1 = ${errorMessage});

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_IMPORT_TRANSLATIONS_ITEM_MESSAGE",
			value1 = ${errorMessageItem});
	}

	@summary = "Default summary"
	macro viewImportResult(successFileNumber = null, zipFileName = null, successFileName = null, errorMessage = null, errorMessageItem = null, failFileName = null, successFileName2 = null, successFileName3 = null, failFileName2 = null) {
		if (isSet(successFileName)) {
			Panel.expandPanel(panel = ${successFileNumber});

			AssertTextEquals(
				locator1 = "Message#SUCCESS_IMPORT_TRANSLATIONS",
				value1 = ${successFileNumber});

			AssertTextEquals(
				locator1 = "Message#SUCCESS_IMPORT_TRANSLATIONS_ITEM",
				value1 = ${successFileName});

			if (isSet(successFileName2)) {
				AssertTextEquals(
					key_indexNumber = 2,
					locator1 = "Message#SUCCESS_IMPORT_TRANSLATIONS_ITEM_N",
					value1 = ${successFileName2});
			}

			if (isSet(successFileName3)) {
				AssertTextEquals(
					key_indexNumber = 3,
					locator1 = "Message#SUCCESS_IMPORT_TRANSLATIONS_ITEM_N",
					value1 = ${successFileName3});
			}
		}

		if (isSet(failFileName)) {
			Translations.viewErrorMessages(
				errorMessage = ${errorMessage},
				errorMessageItem = ${errorMessageItem});

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_IMPORT_TRANSLATIONS_ITEM",
				value1 = ${failFileName});

			if (isSet(zipFileName)) {
				AssertTextEquals(
					locator1 = "Message#ERROR_IMPORT_TRANSLATIONS_ITEM_ZIP",
					value1 = ${zipFileName});
			}
		}

		if (isSet(failFileName2)) {
			AssertTextEquals.assertPartialText(
				key_indexNumber = 2,
				locator1 = "Message#ERROR_IMPORT_TRANSLATIONS_ITEM_MESSAGE_N",
				value1 = ${errorMessageItem});

			AssertTextEquals.assertPartialText(
				key_indexNumber = 2,
				locator1 = "Message#ERROR_IMPORT_TRANSLATIONS_ITEM_N",
				value1 = ${failFileName2});
		}
	}

	@summary = "Default summary"
	macro viewNoTranslationEntry(title = null) {
		AssertElementNotPresent(
			ey_rowEntry = ${title},
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
	}

	@summary = "Default summary"
	macro viewTargetFields(webContentDescription = null, webContentText = null, elementText = null, webContentInteger = null, webContentTitle = null, link = null, webContentContent = null, webContentTextBox = null, webContentNumber = null, contentPageName = null, webContentHtml = null, webContentDecimal = null) {
		if (isSet(contentPageName)) {
			AssertElementPresent(
				key_fieldName = "Name",
				key_fieldValue = ${contentPageName},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}

		if (isSet(elementText)) {
			AssertElementPresent(
				key_fieldName = "element-text",
				key_fieldValue = ${elementText},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}

		if (isSet(link)) {
			AssertElementPresent(
				key_fieldName = "link",
				key_fieldValue = ${link},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}

		if (isSet(webContentTitle)) {
			AssertElementPresent(
				key_fieldName = "Title",
				key_fieldValue = ${webContentTitle},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}

		if (isSet(webContentContent)) {
			AssertElementPresent.assertVisible(locator1 = "CKEditor#BODY_FIELD_IFRAME_2");

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME_2");

			AssertTextEquals(
				locator1 = "CKEditor#BODY",
				value1 = ${webContentContent});

			SelectFrame(value1 = "relative=top");
		}

		if (isSet(webContentDescription)) {
			AssertElementPresent.assertVisible(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			AssertTextEquals(
				locator1 = "CKEditor#BODY",
				value1 = ${webContentDescription});

			SelectFrame(value1 = "relative=top");
		}

		if (isSet(webContentHtml)) {
			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME_2");

			AssertTextEquals.assertPartialText(
				locator1 = "CKEditor#BODY",
				value1 = ${webContentHtml});

			SelectFrame(value1 = "relative=top");
		}

		if (isSet(webContentText)) {
			AssertElementPresent(
				key_fieldName = "Text",
				key_fieldValue = ${webContentText},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}

		if (isSet(webContentTextBox)) {
			AssertElementPresent(
				key_fieldName = "Text Box",
				key_fieldValue = ${webContentTextBox},
				locator1 = "Translation#TARGET_LANGUAGE_TEXT_BOX_FIELD");
		}

		if (isSet(webContentInteger)) {
			AssertElementPresent(
				key_fieldName = "Integer",
				key_fieldValue = ${webContentInteger},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}

		if (isSet(webContentNumber)) {
			AssertElementPresent(
				key_fieldName = "Numeric",
				key_fieldValue = ${webContentNumber},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}

		if (isSet(webContentDecimal)) {
			AssertElementPresent(
				key_fieldName = "Decimal",
				key_fieldValue = ${webContentDecimal},
				locator1 = "Translation#TARGET_LANGUAGE_FIELD");
		}
	}

	@summary = "Default summary"
	macro viewTargetLocales(currentTargetLocale = null) {
		Portlet.waitForForm();

		Click.clickNoMouseOver(
			key_currentLocale = StringUtil.lowerCase(${currentTargetLocale}),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");

		for (var targetLocale : list ${targetLocale}) {
			AssertElementPresent(
				key_locale = ${targetLocale},
				locator1 = "Translation#DROPDOWN_MENU_ITEM");
		}

		if (isSet(noTargetLocale)) {
			for (var noTargetLocale : list ${noTargetLocale}) {
				AssertElementNotPresent(
					key_locale = ${noTargetLocale},
					locator1 = "Translation#DROPDOWN_MENU_ITEM");
			}
		}
	}

	@summary = "Default summary"
	macro viewTranslationDetails(webContentDescription = null, webContentText = null, webContentTitle = null, webContentContent = null, webContentNumber = null, currentTargetLocale = null) {
		AssertElementPresent(
			key_currentLocale = StringUtil.lowerCase(${currentTargetLocale}),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");

		Translations.viewTargetFields(
			webContentContent = ${webContentContent},
			webContentDescription = ${webContentDescription},
			webContentNumber = ${webContentNumber},
			webContentText = ${webContentText},
			webContentTitle = ${webContentTitle});
	}

	@summary = "Default summary"
	macro viewTranslationEntry(modifiedDate = null, language = null, title = null, status = null) {
		AssertTextEquals(
			key_rowEntry = ${title},
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
			value1 = ${title});

		AssertTextEquals.assertPartialText(
			key_rowEntry = ${language},
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_DESCRIPTION_TD3",
			value1 = ${language});

		if (isSet(status)) {
			LexiconEntry.viewEntryStatus(
				rowEntry = ${title},
				rowStatus = ${status});
		}

		if (isSet(modifiedDate)) {
			var toolTipModifiedDate = selenium.getAttribute("//td//span[contains(@class,'lfr-portal-tooltip')]@title");

			LexiconEntry.viewEntryContent(
				key_rowAny = ${modifiedDate},
				rowEntry = ${title});

			MouseOver(
				key_rowAny = ${modifiedDate},
				key_rowEntry = ${title},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_ANY");

			AssertVisible(
				key_content = ${toolTipModifiedDate},
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@summary = "Default summary"
	macro viewTranslationOptions(webContentTitle = null) {
		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Click.waitForMenuToggleJSClick(
			key_webContentTitle = ${webContentTitle},
			locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

		if (isSet(noOptions)) {
			MenuItem.viewNotPresent(menuItem = "Translate");

			MenuItem.viewNotPresent(menuItem = "Export for Translation");

			MenuItem.viewNotPresent(menuItem = "Import Translation");
		}
		else {
			AssertTextEquals(
				index = 3,
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM_SPECIFIC",
				value1 = "Translate");

			AssertTextEquals(
				index = 6,
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM_SPECIFIC",
				value1 = "View History");

			AssertTextEquals(
				index = 9,
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM_SPECIFIC",
				value1 = "Export for Translation");

			AssertTextEquals(
				index = 10,
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM_SPECIFIC",
				value1 = "Import Translation");
		}
	}

	@summary = "Default summary"
	macro viewUntranslatedStatus(locale = null, translated = null) {
		Click.clickNoMouseOver(
			key_currentLocale = StringUtil.lowerCase("en-US"),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");

		if (!(isSet(portletName))) {
			var portletName = "JournalPortlet";
		}

		if (isSet(page)) {
			AssertTextEquals(
				key_localizedLanguage = ${locale},
				locator1 = "Translation#TRANSLATION_STATUS_TITLE_PAGE",
				value1 = "Not Translated");
		}
		else {
			if (isSet(translated)) {
				var key_localizedLanguage = StringUtil.replace(${locale}, "-", "_");

				AssertTextEquals(
					key_localizedLanguage = ${key_localizedLanguage},
					locator1 = "Translation#TRANSLATION_STATUS_LABEL_TRANSLATED",
					value1 = "Not Translated");
			}
			else {
				AssertTextEquals(
					key_localizedLanguage = ${locale},
					key_portlet = ${portletName},
					locator1 = "Translation#TRANSLATION_STATUS_TITLE",
					value1 = "Not Translated");
			}
		}
	}

}