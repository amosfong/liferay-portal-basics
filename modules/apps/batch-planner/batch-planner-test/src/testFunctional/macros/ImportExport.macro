definition {

	@summary = "Default summary"
	macro assertDownloadedFileName() {
		var downloadedFileName = TestCase.getDownloadedTempFileName(fileNamePattern = ${downloadedFile});

		echo("## downloadedFileName: ${downloadedFileName}");

		var downloadedFile = StringUtil.replaceFirst(${downloadedFile}, "*", "");

		if (contains(${downloadedFileName}, ${downloadedFile})) {
			echo("This is a correct file.");
		}
		else {
			fail("FAIL!");
		}
	}

	@summary = "Default summary"
	macro assertExecutionEntry(executionAction = null, executionName = null, successfulRows = null, entityType = null, executionStatus = null, failedRows = null, totalRows = null) {
		AssertElementPresent(
			key_entityType = ${entityType},
			key_executionAction = ${executionAction},
			key_executionName = ${executionName},
			key_executionStatus = ${executionStatus},
			locator1 = "ImportExport#EXECUTION_ENTRY");

		if (isSet(successfulRows) && isSet(failedRows) && isSet(totalRows)) {
			AssertTextEquals(
				key_column = "successful-rows",
				key_executionName = ${executionName},
				locator1 = "ImportExport#EXECUTION_COLUMN",
				value1 = ${successfulRows});

			AssertTextEquals(
				key_column = "failed-rows",
				key_executionName = ${executionName},
				locator1 = "ImportExport#EXECUTION_COLUMN",
				value1 = ${failedRows});

			AssertTextEquals(
				key_column = "total",
				key_executionName = ${executionName},
				locator1 = "ImportExport#EXECUTION_COLUMN",
				value1 = ${totalRows});
		}
	}

	@summary = "Default summary"
	macro assertExportTemplate(templateName = null, entityType = null, exportFields = null, exportFileFormat = null) {
		WaitForElementPresent(
			key_title = "Fields",
			locator1 = "Header#H4_TITLE");

		AssertSelectedLabel(
			key_selectFieldLabel = "Template",
			locator1 = "ImportExport#SELECT",
			value1 = ${templateName});

		AssertSelectedLabel(
			locator1 = "ImportExport#ENTITY_TYPE",
			value1 = ${entityType});

		AssertSelectedLabel(
			key_selectFieldLabel = "Export File Format",
			locator1 = "ImportExport#SELECT",
			value1 = ${exportFileFormat});

		AssertNotChecked.assertNotCheckedNotVisible(
			key_checkboxOption = "Attribute Code",
			locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");

		for (var exportField : list ${exportFields}) {
			AssertChecked.assertCheckedNotVisible(
				key_checkboxOption = ${exportField},
				locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");
		}
	}

	@summary = "Default summary"
	macro assertFileContent(fileName = null, comparisonFileName = null) {
		var fileContent = TestCase.getTempFileContent(fileName = ${fileName});
		var expectedFileContent = TestCase.getFileContent(fileName = ${comparisonFileName});

		if (${fileContent} != ${expectedFileContent}) {
			echo("expected file content");

			echo(${expectedFileContent});

			echo("actual file content");

			echo(${fileContent});

			fail("The file content does not match the expected file content.");
		}
	}

	@summary = "Default summary"
	macro assertImportMappings(fieldMappings = null) {
		WaitForElementPresent(
			key_title = "Import Mappings",
			locator1 = "Header#H4_TITLE");

		for (var fieldMapping : list ${fieldMappings}) {
			var destinationField = StringUtil.extractFirst(${fieldMapping}, ":");
			var sourceField = StringUtil.extractLast(${fieldMapping}, ":");

			AssertSelectedLabel(
				key_destinationField = ${destinationField},
				locator1 = "ImportExport#IMPORT_MAPPING_SELECT",
				value1 = ${sourceField});
		}
	}

	@summary = "Default summary"
	macro assertImportPreviews(importPreviews = null) {
		WaitForElementPresent(
			key_title = "Import Mappings",
			locator1 = "Header#H4_TITLE");

		for (var importPreview : list ${importPreviews}) {
			var destinationField = StringUtil.extractFirst(${importPreview}, ":");
			var previewField = StringUtil.extractLast(${importPreview}, ":");

			AssertElementPresent(
				key_destinationField = ${destinationField},
				key_previewField = ${previewField},
				locator1 = "ImportExport#IMPORT_PREVIEW");
		}
	}

	@summary = "Default summary"
	macro assertImportTemplate(templateName = null, entityType = null) {
		AssertSelectedLabel(
			key_selectFieldLabel = "Template",
			locator1 = "ImportExport#SELECT",
			value1 = ${templateName});

		AssertSelectedLabel(
			locator1 = "ImportExport#ENTITY_TYPE",
			value1 = ${entityType});
	}

	@summary = "Default summary"
	macro assertNoExecutionEntry(executionAction = null, entityType = null, executionStatus = null) {
		AssertElementNotPresent(
			key_entityType = ${entityType},
			key_executionAction = ${executionAction},
			key_executionStatus = ${executionStatus},
			locator1 = "ImportExport#EXECUTION_ENTRY");
	}

	@summary = "Default summary"
	macro assertOptionalImportFields(optionalFields = null) {
		for (var optionalField : list ${optionalFields}) {
			AssertElementPresent(
				key_destinationField = ${optionalField},
				locator1 = "ImportExport#OPTIONAL_IMPORT_FIELD");
		}
	}

	@summary = "Default summary"
	macro assertPreviewEntry(entryName = null, previewFields = null) {
		AssertElementPresent(
			key_entryName = ${entryName},
			locator1 = "ImportExport#PREVIEW_ENTRY");

		for (var previewField : list ${previewFields}) {
			AssertElementPresent(
				key_entryName = ${entryName},
				key_previewField = ${previewField},
				locator1 = "ImportExport#PREVIEW_ENTRY_FIELD");
		}
	}

	@summary = "Default summary"
	macro assertPreviewLabels(previewLabels = null) {
		for (var previewLabel : list ${previewLabels}) {
			AssertElementPresent(
				key_previewLabel = ${previewLabel},
				locator1 = "ImportExport#PREVIEW_LABEL");
		}
	}

	@summary = "Default summary"
	macro assertRequiredImportFields(requiredFields = null) {
		for (var requiredField : list ${requiredFields}) {
			AssertElementPresent(
				key_destinationField = ${requiredField},
				locator1 = "ImportExport#REQUIRED_IMPORT_FIELD");
		}
	}

	@summary = "Default summary"
	macro assertStrategiesForEntityTypes(updateStrategy = null, entityTypes = null, importStrategy = null) {
		Variables.assertDefined(parameterList = ${entityTypes});

		for (var entityType : list ${entityTypes}) {
			ImportExport.selectEntity(entityType = ${entityType});

			if (isSet(importStrategy)) {
				AssertTextEquals(
					locator1 = "ImportExport#IMPORT_STRATEGY",
					value1 = ${importStrategy});
			}
			else {
				AssertTextEquals(
					locator1 = "ImportExport#UPDATE_STRATEGY",
					value1 = ${updateStrategy});
			}
		}
	}

	@summary = "Default summary"
	macro configureExport(containsHeaders = null, templateName = null, entityType = null, scope = null, exportFields = null, exportFileFormat = null) {
		Select(
			key_selectFieldLabel = "Export File Format",
			locator1 = "ImportExport#SELECT",
			value1 = ${exportFileFormat});

		if (isSet(entityType)) {
			ImportExport.selectEntity(entityType = ${entityType});
		}

		if (isSet(scope)) {
			Select(
				locator1 = "Select#SCOPE_CONFIGURATION",
				value1 = ${scope});
		}

		if (${containsHeaders} == "false") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		if (isSet(exportFields)) {
			ImportExport.mapExport(exportFields = ${exportFields});
		}

		if (isSet(templateName)) {
			ImportExport.saveAsTemplate(templateName = ${templateName});
		}
	}

	@summary = "Default summary"
	macro configureImport(containsHeaders = null, fileName = null, templateName = null, entityType = null, scope = null, importName = null, csvSeparator = null, fieldMappings = null, importStrategy = null, stopImportOnError = null) {
		if (isSet(tempFile)) {
			UploadTempFile.uploadTempFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = ${tempFile});
		}
		else {
			UploadDependencyFile.uploadFile(fileName = ${fileName});
		}

		if (isSet(importName)) {
			Type(
				locator1 = "TextInput#NAME",
				value1 = ${importName});
		}

		if (isSet(csvSeparator)) {
			Type(
				key_text = "CSV Separator",
				locator1 = "TextInput#ANY",
				value1 = ${csvSeparator});
		}

		if (${containsHeaders} == "false") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Headers",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		ImportExport.selectEntity(entityType = ${entityType});

		if (isSet(scope)) {
			var scope = TestCase.getSiteName();

			Select(
				locator1 = "Select#SCOPE_CONFIGURATION",
				value1 = ${scope});
		}

		if (isSet(importStrategy)) {
			Select(
				locator1 = "ImportExport#IMPORT_STRATEGY",
				value1 = ${importStrategy});
		}

		if (isSet(updateStrategy)) {
			Select(
				locator1 = "ImportExport#UPDATE_STRATEGY",
				value1 = ${updateStrategy});
		}

		if (${stopImportOnError} == "false") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Stop the Import on Error",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		WaitForElementPresent(locator1 = "ImportExport#IMPORT_MAPPING_HEADER");

		if (isSet(fieldMappings)) {
			ImportExport.mapImport(fieldMappings = ${fieldMappings});
		}

		if (isSet(templateName)) {
			ImportExport.saveAsTemplate(templateName = ${templateName});
		}
	}

	@summary = "Default summary"
	macro exportAndUnzipFile(containsHeaders = null, entityType = null, exportFields = null, exportFileFormat = null) {
		ImportExport.openImportExportAdmin();

		ImportExport.gotoExport();

		ImportExport.configureExport(
			containsHeaders = ${containsHeaders},
			entityType = ${entityType},
			exportFields = ${exportFields},
			exportFileFormat = ${exportFileFormat},
			templateName = ${templateName});

		Button.click(button = "Export");

		WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");

		ImportExport.unzipDownloadedExportFile();
	}

	@summary = "Default summary"
	macro exportEntityWithAllFieldsInJsontFormat(entityType = null) {
		Variables.assertDefined(parameterList = ${entityType});

		ImportExport.openImportExportAdmin();

		ImportExport.gotoExport();

		ImportExport.configureExport(
			entityType = ${entityType},
			exportFileFormat = "JSONT");

		Button.click(button = "Export");

		WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");
	}

	@summary = "Default summary"
	macro gotoExport() {
		Click(locator1 = "Button#PLUS");

		MenuItem.click(menuItem = "Export File");
	}

	@summary = "Default summary"
	macro gotoImport() {
		Click(locator1 = "Button#PLUS");

		MenuItem.click(menuItem = "Import File");
	}

	@summary = "Default summary"
	macro importFile(containsHeaders = null, fileName = null, templateName = null, entityType = null, scope = null, importName = null, csvSeparator = null, fieldMappings = null, importStrategy = null, stopImportOnError = null) {
		ImportExport.openImportExportAdmin();

		ImportExport.gotoImport();

		ImportExport.configureImport(
			containsHeaders = ${containsHeaders},
			csvSeparator = ${csvSeparator},
			entityType = ${entityType},
			fieldMappings = ${fieldMappings},
			fileName = ${fileName},
			importName = ${importName},
			importStrategy = ${importStrategy},
			scope = ${scope},
			stopImportOnError = ${stopImportOnError},
			tempFile = ${tempFile},
			templateName = ${templateName});

		if (!(isSet(noImport))) {
			ImportExport.startImportAndWaitForSuccess();

			Click(locator1 = "Button#CLOSE");
		}
	}

	@summary = "Default summary"
	macro mapExport(exportFields = null) {
		Check.checkNotVisible(
			key_checkboxOption = "Attribute Code",
			locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");

		Uncheck.uncheckNotVisible(
			key_checkboxOption = "Attribute Code",
			locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");

		for (var exportField : list ${exportFields}) {
			Click.clickAtNotVisible(
				key_checkboxOption = ${exportField},
				locator1 = "Checkbox#SPECIFIC_CHECKBOX_IN_TABLE");
		}
	}

	@summary = "Default summary"
	macro mapImport(fieldMappings = null) {
		for (var fieldMapping : list ${fieldMappings}) {
			var destinationField = StringUtil.extractFirst(${fieldMapping}, ":");
			var sourceField = StringUtil.extractLast(${fieldMapping}, ":");

			echo("Mapping ${destinationField} to ${sourceField} source field");

			Select(
				key_destinationField = ${destinationField},
				locator1 = "ImportExport#IMPORT_MAPPING_SELECT",
				value1 = ${sourceField});
		}
	}

	@summary = "Default summary"
	macro openImportExportAdmin(baseURL = null) {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/guest/~/control_panel/manage?p_p_id=com_liferay_batch_planner_web_internal_portlet_BatchPlannerPortlet");

		WaitForVisible(locator1 = "Button#PLUS");
	}

	@summary = "Default summary"
	macro replaceAttachmentIdAndHrefInFile(fileName = null, en_US_plural_label = null) {
		Variables.assertDefined(parameterList = "${en_US_plural_label}, ${fileName}");

		var filePath = TestCase.getDependenciesDirPath(fileName = ${fileName});
		var response = ObjectDefinitionAPI.getObjectEntries(
			en_US_plural_label = ${en_US_plural_label},
			scopeKey = ${scopeKey});

		var attachmenId = JSONPathUtil.getProperty(
			property = "$.items..diploma.id",
			response = ${response});
		var attachmenHref = JSONPathUtil.getProperty(
			property = "$.items..diploma.link.href",
			response = ${response});

		FileUtil.replaceStringInFile(${filePath}, 38589, ${attachmenId});

		FileUtil.replaceStringInFile(${filePath}, "/documents/38586/38588/Document_1.jpg/b3a2213c-225f-fc83-fa10-4ea862e5005f?version=1.0&t=1701061267059", ${attachmenHref});
	}

	@summary = "Default summary"
	macro resetDefaultValues() {
		if (IsElementPresent(locator1 = "Icon#HISTORY_VERTICAL_ELLIPSIS")) {
			Click(locator1 = "Icon#HISTORY_VERTICAL_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Reset Default Values");

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro saveAsTemplate(templateName = null) {
		WaitForElementPresent(
			key_text = "Save as Template",
			locator1 = "Button#ANY");

		Button.click(button = "Save as Template");

		Type(
			key_placeHolder = "Template Name",
			locator1 = "TextInput#ANY_PLACEHOLDER",
			value1 = ${templateName});

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro selectEntity(entityType = null) {
		WaitForElementPresent(locator1 = "ImportExport#ENTITY_TYPE");

		Select(
			locator1 = "ImportExport#ENTITY_TYPE",
			value1 = ${entityType});

		WaitForElementPresent(
			key_contentName = "Fields",
			locator1 = "ImportExport#PREVIEW_ENTRY_CONTENT_FIELDS");
	}

	@summary = "Default summary"
	macro selectImportStrategy(strategyType = null) {
		WaitForElementPresent(locator1 = "ImportExport#IMPORT_STRATEGY");

		Select(
			locator1 = "ImportExport#IMPORT_STRATEGY",
			value1 = ${strategyType});
	}

	@summary = "Default summary"
	macro startImportAndWaitForSuccess() {
		Button.click(button = "Next");

		Button.click(button = "Start Import");

		WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");
	}

	@summary = "Default summary"
	macro tearDownSettingsConfigurations() {
		StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");

		ImportExport.resetDefaultValues();

		StagingNavigator.openToConfigInSystemSettings(portlet = "Export/Import, Staging");

		ImportExport.resetDefaultValues();
	}

	@summary = "Default summary"
	macro unzipDownloadedExportFile() {
		Button.click(button = "Download");

		DownloadTempFile();

		DMDocument.assertFileNameFromTempFolder(fileName = "Export.zip");

		AntCommands.runCommand("build-test.xml", "unzip-temp-file -DfileName=Export.zip");
	}

}