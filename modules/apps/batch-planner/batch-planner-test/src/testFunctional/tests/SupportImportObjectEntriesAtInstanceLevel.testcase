@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.COMMERCE-8087=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Migration Center";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given Custom object Student with fields: required text field 'name', optional Attachment field 'diploma' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				objectDefinitionExternalReferenceCode = "student",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "studentName");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "diploma",
				fieldName = "diploma",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "Student");
		}

		task ("And Given object Subject with text field 'name' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				objectDefinitionExternalReferenceCode = "subject",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "subjectName");
		}

		task ("And Given a one-to-many relationship subjectStudents created with Subject as parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "subjectStudents",
				parentObjectName = "Subject",
				type = "oneToMany");
		}

		task ("And Given 'Math' Subject created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				externalReferenceCode = "Math",
				name = "Math");
		}

		task ("And Given creating a Student entry with: name 'Jane', an uploaded file 'diploma', subjectStudents 'Math'") {
			var studentEntryId = CustomObjectAPI.createObjectRelatedToAnotherObject(
				en_US_plural_label = "students",
				externalReferenceCode = "studentErc",
				name = "Jane",
				relatedObjectErc = "Math",
				relatedObjectName = "subject",
				relationshipName = "subjectStudents");

			ObjectAdmin.selectAttachmentFileInObjectEntryViaUI(
				fileName = "Document_1.jpg",
				key_entry = ${studentEntryId},
				objectName = "Student");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		BatchPlanner.batchPlannerTearDown();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 4
	test CanCreateAndUpdateExistingObjectEntriesWithSameFile {
		task ("When importing .jsonl file as 'Student' Entity Type with default settings") {
			ImportExport.replaceAttachmentIdAndHrefInFile(
				en_US_plural_label = "students",
				fileName = "multiple_objectEntries_import_create_update.jsonl");

			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "multiple_objectEntries_import_create_update.jsonl");
		}

		task ("Then one new Student item is created") {
			var response = ObjectDefinitionAPI.getObjectEntries(en_US_plural_label = "students");

			var actualValue = JSONUtil.getWithJSONPath(${response}, "$..items[?(@.externalReferenceCode=='testErc')].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Jack");
		}

		task ("And Then existing Student item's name is updated") {
			var actualValue = JSONUtil.getWithJSONPath(${response}, "$..items[?(@.externalReferenceCode=='studentErc')].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "John");
		}

		task ("And Then existing Student's relationship field is unchanged") {
			var actualValue = JSONUtil.getWithJSONPath(${response}, "$..items[?(@.externalReferenceCode=='studentErc')].subjectStudentsERC");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Math");
		}
	}

	@priority = 5
	test CanCreateObjectEntry {
		task ("When importing .json file as 'Student' Entity Type with default setting") {
			ImportExport.replaceAttachmentIdAndHrefInFile(
				en_US_plural_label = "students",
				fileName = "objectEntry_import_create.json");

			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "objectEntry_import_create.json");
		}

		task ("Then new Student item with name 'John', subjectStudents 'Math', diploma 'Example.jpg' is created") {
			var response = ObjectDefinitionAPI.getObjectEntries(en_US_plural_label = "students");
			var actualValueList = ListUtil.newList();

			for (var fieldNameList : list "name,r_subjectStudents_c_subjectERC,diploma.name") {
				var actualValue = JSONUtil.getWithJSONPath(${response}, "$.items[*].${fieldNameList}");

				ListUtil.add(${actualValueList}, ${actualValue});
			}

			var actualValueList = ListUtil.toString(${actualValueList});

			TestUtils.assertEquals(
				actual = ${actualValueList},
				expected = "Jane,John,Math,Math,Document_1.jpg,Document_1.jpg");
		}
	}

	@priority = 4
	test CanCreateObjectEntryFromFileContainingExistingAndNewWithUncheckedStopImportOnError {
		task ("When importing .jsonl file as 'Student' Entity Type with 'Only Add New Records Import Strategy', 'Stop the Import on Error' unchecked") {
			ImportExport.replaceAttachmentIdAndHrefInFile(
				en_US_plural_label = "students",
				fileName = "multiple_objectEntries_import_create.jsonl");

			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "multiple_objectEntries_import_create.jsonl",
				importStrategy = "Only Add New Records",
				stopImportOnError = "false");
		}

		task ("Then one new Student item is created") {
			var response = ObjectDefinitionAPI.getObjectEntries(en_US_plural_label = "students");

			var actualValue = JSONUtil.getWithJSONPath(${response}, "$.items[*].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Jane,Jack");
		}
	}

	@priority = 4
	test CannotCreateObjectEntryWithoutRequiredFields {
		task ("When importing .json file as 'Student' Entity Type with default setting") {
			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "objectEntry_import_without_required_fields.json",
				noImport = "true");

			Button.click(button = "Next");
		}

		task ("Then importing the item is prevented") {
			AssertElementNotPresent(
				key_text = "Start Import",
				locator1 = "Button#ANY");
		}
	}

	@priority = 4
	test CanUpdateObjectEntry {
		task ("When importing .jsonl file as 'Student' Entity Type with default setting") {
			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "objectEntry_import_update.jsonl");
		}

		task ("Then Student item's name is updated") {
			var response = ObjectDefinitionAPI.getObjectEntries(en_US_plural_label = "students");

			var actualValue = JSONUtil.getWithJSONPath(${response}, "$.items[0].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Johny");
		}
	}

}