@component-name = "portal-headless"
definition {

	property custom.properties = "feature.flag.COMMERCE-8087=true";
	property portal.acceptance = "quarantine";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Migration Center";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given site scoped Custom object Student with fields: required text field 'name', optional Attachment field 'diploma' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				objectDefinitionExternalReferenceCode = "student",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "studentName",
				scope = "site");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "diploma",
				fieldName = "diploma",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "Student");
		}

		task ("And Given site scoped object Subject with text field 'name' created") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				objectDefinitionExternalReferenceCode = "subject",
				requiredStringFieldName = "name",
				requiredStringFieldNameExternalReferenceCode = "subjectName",
				scope = "site");
		}

		task ("And Given a one-to-many relationship subjectStudents created with Subject as parent") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "subjectStudents",
				parentObjectName = "Subject",
				type = "oneToMany");
		}

		task ("And Given 'Math' Subject created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				externalReferenceCode = "Math",
				name = "Math",
				scopeKey = "true");
		}

		task ("And Given creating a Student entry with: name 'Jane', an uploaded file 'diploma', subjectStudents 'Math'") {
			var studentEntryId = CustomObjectAPI.createObjectRelatedToAnotherObject(
				en_US_plural_label = "students",
				externalReferenceCode = "studentErc",
				name = "Jane",
				relatedObjectErc = "Math",
				relatedObjectName = "subject",
				relationshipName = "subjectStudents",
				scopeKey = "true");

			ObjectAdmin.selectAttachmentFileInObjectEntryViaUI(
				fileName = "Document_1.jpg",
				key_entry = ${studentEntryId},
				objectName = "Student");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		BatchPlanner.batchPlannerTearDown();

		AccountAPI.tearDownAllAccounts();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 4
	test CanCreateAndUpdateExistingSiteScopedObjectEntriesWithSameFile {
		task ("When importing .jsonl file as 'Student' Entity Type with default settings") {
			ImportExport.replaceAttachmentIdAndHrefInFile(
				en_US_plural_label = "students",
				fileName = "multiple_site_scope_objectEntries_import_create_update.jsonl",
				scopeKey = "true");

			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "multiple_site_scope_objectEntries_import_create_update.jsonl",
				scope = "true");
		}

		task ("Then one new Student item is created") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				scopeKey = "true");

			var actualValue = JSONUtil.getWithJSONPath(${response}, "$..items[?(@.externalReferenceCode=='testErc')].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Jack");
		}

		task ("And Then existing Student item's name is updated") {
			var actualValue = JSONUtil.getWithJSONPath(${response}, "$..items[?(@.externalReferenceCode=='studentErc')].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "John");
		}

		task ("And Then existing Student's relationship field is unchanged") {
			var actualValue = JSONUtil.getWithJSONPath(${response}, "$..items[?(@.externalReferenceCode=='studentErc')].subjectStudentsERC");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Math");
		}
	}

	@priority = 4
	test CanCreateSiteScopedObjectEntryFromFileContainingExistingAndNewWithUncheckedStopImportOnError {
		task ("When importing .json file as 'Student' Entity Type with 'Only Add New Records Import Strategy', 'Stop the Import on Error' unchecked") {
			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "multiple_site_scope_objectEntries_import_create.jsonl",
				importStrategy = "Only Add New Records",
				scope = "true",
				stopImportOnError = "false");
		}

		task ("Then one new Student item is created") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				scopeKey = "true");

			var actualValue = JSONUtil.getWithJSONPath(${response}, "$.items[1].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Jack");
		}
	}

	@priority = 4
	test CannotCreateSiteScopedObjectEntryWithoutRequiredFields {
		task ("When importing .json file as 'Student' Entity Type with default setting") {
			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "site_scope_objectEntry_import_without_required_fields.json",
				noImport = "true",
				scope = "true");

			Button.click(button = "Next");
		}

		task ("Then importing the item is prevented") {
			AssertElementNotPresent(
				key_text = "Start Import",
				locator1 = "Button#ANY");
		}
	}

	@priority = 4
	test CanSeeScopeSelecterInImportFile {
		task ("When 'Student' as Entity Type in Data Migration Center -> Import File") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			ImportExport.selectEntity(entityType = "Student (v1.0 - Liferay Object REST)");
		}

		task ("Then 'Scope' is present with default and Global sites in dropdown list") {
			var scope = TestCase.getSiteName();

			AssertElementPresent(locator1 = "Select#SCOPE_CONFIGURATION");

			AssertTextEquals(
				locator1 = "Select#SCOPE_CONFIGURATION",
				value1 = "Global ${scope}");
		}
	}

	@priority = 4
	test CanUpdateSiteScopedObjectEntry {
		task ("When importing .jsonl file as 'Student' Entity Type with default setting") {
			ImportExport.importFile(
				entityType = "Student (v1.0 - Liferay Object REST)",
				fileName = "site_scope_objectEntry_import_update.jsonl",
				scope = "true");
		}

		task ("Then the name of Student is updated") {
			var response = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "students",
				scopeKey = "true");

			var actualValue = JSONUtil.getWithJSONPath(${response}, "$.items[0].name");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Johny");
		}
	}

}