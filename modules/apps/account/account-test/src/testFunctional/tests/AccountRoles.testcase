@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-173628. Account Manager cannot view or assign specific Account Roles without permissions."
	@priority = 4
	test AccountManagerCannotViewOrAssignSpecificAccountRolesWithoutPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given the admin creates 2 organizations called Org1 and Org2, also 2 business accounts") {
			for (var index : list "1,2") {
				JSONOrganization.addOrganization(
					organizationName = "Organization${index}",
					organizationSite = "true");

				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Account${index}",
					accountEntryType = "Business");
			}
		}

		task ("And associates each account to the corresponding organization") {
			for (var index : list "1,2") {
				Account.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account${index}");

				Account.assignOrganizations(
					accountName = "Account${index}",
					assigneeName = "Organization${index}");

				Account.viewAssignee(assigneeName = "Organization${index}");
			}
		}

		task ("And creates 2 users into the accounts assigning them the Account Manager role on Org1 and Org2 respectively") {
			for (var index : list "1,2") {
				JSONUser.addUser(
					userEmailAddress = "accountmgr${index}@liferay.com",
					userFirstName = "Account${index}",
					userLastName = "Mgr${index}",
					userScreenName = "accountmgr${index}");

				JSONAccountEntryUser.addExistUsertoAccount(
					accountEntryName = "Account${index}",
					userEmailAddress = "accountmgr${index}@liferay.com");

				JSONOrganization.assignUserToOrganization(
					organizationName = "Organization${index}",
					userEmailAddress = "accountmgr${index}@liferay.com");

				User.openUsersAdmin();

				User.assignOrgRoleCP(
					roleTitle = "Account Manager",
					userScreenName = "accountmgr${index}");
			}
		}

		task ("And creates a new Regular role, assigning AccountMgr1 to the role") {
			JSONRole.addRegularRole(roleKey = "AccountRole1 Role Manager");

			JSONRole.assignRoleToUser(
				roleTitle = "AccountRole1 Role Manager",
				userEmailAddress = "accountmgr1@liferay.com");
		}

		task ("And creates a new Account Role, updating the permissions on that role so the AccountRole1 Role Manager role can View and Assign Members") {
			Role.openRolesAdmin();

			Navigator.gotoNavTab(navTab = "Account Roles");

			Role.add(roleTitle = "AccountRole1");

			Click(locator1 = "Icon#BACK");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Permissions",
				rowEntry = "AccountRole1");

			for (var resourceActionIndex : list "INLINE_PERMISSIONS_ASSIGN_MEMBERS_CHECKBOX,INLINE_PERMISSIONS_VIEW_CHECKBOX") {
				PermissionsInline.addOrRemoveAnyPermissionsFromSpecificRole(
					addOrRemoveViewPermission = "Add",
					permissionsKeyList = ${resourceActionIndex},
					roleTitle = "AccountRole1 Role Manager");
			}
		}

		task ("And removes the view permissions of account roles for Account Managers") {
			Permissions.removePermissionViaAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Manager",
				roleType = "organization");
		}

		task ("When the first account manager logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "accountmgr1@liferay.com",
				userLoginFullName = "Account1 Mgr1");
		}

		task ("And navigates to Account -> Users -> Assign Roles modal") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account1");

			Navigator.gotoNavTab(navTab = "Users");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Assign Roles",
				rowEntry = "Account1 Mgr1");

			SelectFrame(
				key_title = "Assign Roles",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("Then the role is visible and assignable") {
			AssertElementPresent(
				key_tableEntry = "AccountRole1",
				locator1 = "LexiconTable#TABLE_ENTRY_CHECKBOX");

			AssertElementNotPresent(
				key_tableEntry = "AccountRole1",
				locator1 = "LexiconTable#TABLE_ENTRY_CHECKBOX_DISABLED");
		}

		task ("When the second account manager logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "accountmgr2@liferay.com",
				userLoginFullName = "Account2 Mgr2");
		}

		task ("And navigates to Account -> Users -> Assign Roles modal") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "accountmgr2@liferay.com",
				userLoginFullName = "Account2 Mgr2");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account2");

			Navigator.gotoNavTab(navTab = "Users");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Assign Roles",
				rowEntry = "Account2 Mgr2");

			SelectFrame(
				key_title = "Assign Roles",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("Then the role is not visible and not assignable") {
			AssertElementNotPresent(
				key_tableEntry = "AccountRole1",
				locator1 = "LexiconTable#TABLE_ENTRY_CHECKBOX");
		}
	}

	@description = "This test assert the account manager can view account users by default."
	@priority = 4
	test AccountManagersCanViewUsersbyDefault {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given an account with an account user assigned") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "AM Account",
				accountEntryType = "Business");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "AM Account",
				userEmailAddress = "userfn1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");
		}

		task ("And a company user is added") {
			JSONUser.addUser(
				userEmailAddress = "usereano@liferay.com",
				userFirstName = "userfnno",
				userLastName = "userlnno",
				userScreenName = "usersnno");
		}

		task ("And add user useramsn as Account Manager") {
			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");
		}

		task ("When the account manager navigates into the User tab of AM Account") {
			User.logoutPG();

			User.loginUserPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "useramea@liferay.com");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Manage Users",
				rowEntry = "AM Account");
		}

		task ("Then the account manager should be able to see the user listed in that account") {
			Navigator.viewActivatedNavTab(navTab = "Users");

			LexiconEntry.viewNoEntry(rowEntry = "userfn userln");

			AssertTextNotPresent(value1 = "There are no users associated with this account.");

			LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

			LexiconEntry.viewEntryMenu(rowEntry = "userfn1 userln1");

			AssertElementPresent(locator1 = "Icon#PLUS");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Add Account Role permissions for an account can add account roles."
	@priority = 4
	test CanAddAccountRolesWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Account.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And he is a member of a business account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");
		}

		task ("When this user is granted permissions to Update account entry View account role tab and Add account role for Account Name") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			for (var resourceActionIndex : list "UPDATE,ADD_ACCOUNT_ROLE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Account Specific Role",
					roleType = "account");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Specific Role",
				roleType = "account");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can add account roles in Account Name") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Roles");

			Account.addOwnedAccountRole(accountRoleTitle = "Account Role");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewEntryName(rowEntry = "Account Role");
		}
	}

	@description = "Use case for LPS-142654. This test asserts that a user with the correct permissions is able to assign a user to an account role."
	@priority = 4
	test CanAssignUsersToAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given one account and two account users are created and one user is granted permissions to access the Account Admin portlet") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			for (var userNumber : list "1,2") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Account Name",
					userEmailAddress = "userea${userNumber}@liferay.com",
					userFirstName = "userfn${userNumber}",
					userLastName = "userln${userNumber}",
					userScreenName = "usersn${userNumber}");
			}

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Account.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("When the user with access permissions is given an account role wih permissions to update an account, view existing users and account roles, and assign account roles in an Account") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addOwnedAccountRole(accountRoleTitle = "Assign Account Roles");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES,VIEW_USERS") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Assign Account Roles",
					roleType = "account");
			}

			for (var resourceActionIndex : list "ASSIGN_USERS,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountRole",
					roleTitle = "Assign Account Roles",
					roleType = "account");
			}

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addAssigneeToRoleViaRolesTab(
				accountRoleTitle = "Assign Account Roles",
				assigneeName = "userfn1 userln1");
		}

		task ("Then the user can assign an account role to another user and the role will be shown in the Users table") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addAssigneeToRoleViaRolesTab(
				accountRoleTitle = "Assign Account Roles",
				assigneeName = "userfn2 userln2");

			Navigator.gotoBack();

			Navigator.gotoNavTab(navTab = "Users");

			LexiconTable.viewTableEntryInfo(
				columnName = "lfr-account-roles",
				tableEntry = "userfn2",
				tableEntryInfo = "Assign Account Roles");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Define Permission can define owned account role permissions."
	@priority = 4
	test CanDefinePermissionsforAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Account.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And user is assigned a business account and prepare an Owned account role for testing") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");

			Account.addOwnedAccountRole(accountRoleTitle = "New Account Role");
		}

		task ("When this user is granted permissions to Define Account Role Permission") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Roles");

			Account.addOwnedAccountRole(accountRoleTitle = "Define Permissions Role");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Define Permissions Role",
					roleType = "account");
			}

			for (var resourceActionIndex : list "DEFINE_PERMISSIONS,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountRole",
					roleTitle = "Define Permissions Role",
					roleType = "account");
			}

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Define Permissions Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then user can define permissions and group scope permissions in owned Account Roles") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Define Permissions",
				rowEntry = "New Account Role");

			Role.editPermissionCP(
				accountsPermission = "true",
				define = "true",
				permissionNavHeader = "Accounts",
				permissionNavItem = "Accounts",
				permissionSheetSubtitle = "Account Entry",
				permissionValues = "View");

			Role.viewPermissionCP(
				permissionDefinitionValue = "View",
				permissionNavigationValue = "Accounts");

			Role.editPermissionCP(
				define = "true",
				navItem = "Define Group Scope Permissions",
				permissionNavHeader = "Applications",
				permissionNavItem = "Account Management",
				permissionSheetSubtitle = "Application Permissions",
				permissionValues = "View");

			Role.viewPermissionCP(
				permissionDefinitionValue = "View",
				permissionNavigationValue = "Account Management");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Delete Account Role permissions for an account can Delete account roles."
	@priority = 4
	test CanDeleteAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a user is granted permissions to access Account Admin portlet Update account entry, View account role tab") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Account.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Access Account Permission");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Access Account Permission");
		}

		task ("And he is a member of a business account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");
		}

		task ("When this user is granted permissions to Delete account role for Account Name") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "DELETE",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Specific Role",
				roleType = "account");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can delete account roles in Account Name") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.deleteOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewNoEntry(rowEntry = "Account Specific Role");
		}
	}

	@description = "COMMERCE-13000. As an admin verify that is possible to import the roles from a JSON file"
	@priority = 5
	test CanImportRolesViaAPI {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given the admin already has the JSON file with the role") {
			var projectDir = PropsUtil.get("project.dir");
			var fileDir = "modules/apps/commerce/commerce-product-test/src/testFunctional/tests/dependencies";

			var contentJSON = FileUtil.read("${projectDir}/${fileDir}/commerce_test_role.txt");
		}

		task ("And the admin calls the API for the import") {
			CommerceJSONAccountsAPI._postImportRoles(contentJSON = ${contentJSON});
		}

		task ("Then the role is imported") {
			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType();

			LexiconEntry.gotoEntry(rowEntry = "New Regular Test Role");

			Navigator.gotoNavItem(navItem = "Define Permissions");

			for (var permissionDefinitionValueList : list "Add Account Entry,Add Account Group,Add General Announcements,Add License") {
				Role.viewPermissionCP(
					permissionDefinitionValue = ${permissionDefinitionValueList},
					permissionNavigationValue = "Portal");
			}
		}

		task ("But if the admin removes one permission from the role") {
			Role.editPermissionCP(
				permissionNavHeader = "Control Panel",
				permissionNavItem = "General Permissions",
				permissionSheetSubtitle = "",
				permissionValues = "Add License",
				remove = "true");

			Navigator.gotoNavItem(navItem = "Details");

			Navigator.gotoNavItem(navItem = "Define Permissions");

			for (var permissionDefinitionValueList : list "Add Account Entry,Add Account Group,Add General Announcements") {
				Role.viewPermissionCP(
					permissionDefinitionValue = ${permissionDefinitionValueList},
					permissionNavigationValue = "Portal");
			}

			Role.viewNoPermissionCP(
				permissionDefinitionValue = "Add License",
				permissionNavigationValue = "Portal");
		}

		task ("And import the same role again") {
			CommerceJSONAccountsAPI._postImportRoles(contentJSON = ${contentJSON});
		}

		task ("Then the old role is updated with the missing permission") {
			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType();

			task ("And there are not present other roles with the same name") {
				AssertElementPresent(
					key_index = 1,
					key_rowEntry = "New Regular Test Role",
					locator1 = "CommerceEntry#ENTRY_CONTENT_ENTRY_NAME_INDEX");

				AssertElementNotPresent(
					key_index = 2,
					key_rowEntry = "New Regular Test Role",
					locator1 = "CommerceEntry#ENTRY_CONTENT_ENTRY_NAME_INDEX");
			}

			LexiconEntry.gotoEntry(rowEntry = "New Regular Test Role");

			Navigator.gotoNavItem(navItem = "Define Permissions");

			for (var permissionDefinitionValueList : list "Add Account Entry,Add Account Group,Add General Announcements,Add License") {
				Role.viewPermissionCP(
					permissionDefinitionValue = ${permissionDefinitionValueList},
					permissionNavigationValue = "Portal");
			}
		}

		task ("Remove the new created account") {
			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType();

			Click(
				key_name = "New Regular Test Role",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS_ACCOUNT");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this role? It will be deleted immediately. If it is a reviewer role, its task assignments will be deleted along with it.");

			AssertElementNotPresent(
				key_index = 1,
				key_rowEntry = "New Regular Test Role",
				locator1 = "CommerceEntry#ENTRY_CONTENT_ENTRY_NAME_INDEX");
		}
	}

	@description = "This is a use case for LPS-158344. This test assert the account manager can only view account organizations by default and can not change organization associations."
	@priority = 4
	test CanOnlyViewOrganizationsByDefault {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given add 2 organizations and assign one to an account") {
			JSONOrganization.addOrganization(organizationName = "Account Org1");

			JSONOrganization.addOrganization(organizationName = "Company Org");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "AM Account",
				accountEntryType = "Business");

			JSONAccountEntry.addAccountEntryOrganization(
				accountEntryName = "AM Account",
				organizationName = "Account Org1");
		}

		task ("And add user useramsn as Account Manager") {
			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");
		}

		task ("When the account manager navigates into the Organizations tab of AM Account") {
			User.logoutPG();

			User.loginUserPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "useramea@liferay.com");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Account.gotoAssigneeTab(assigneeTab = "Organizations");
		}

		task ("Then the account manager should only be able to see not be able to change the organizations listed in that account") {
			Navigator.viewActivatedNavTab(navTab = "Organizations");

			LexiconEntry.viewNoEntry(rowEntry = "Company Org");

			AssertTextNotPresent(value1 = "There are no organizations associated with this account.");

			AssertElementNotPresent(locator1 = "Icon#PLUS");

			AssertElementNotPresent(
				checkboxName = "",
				locator1 = "Checkbox#ANY_CHECKBOX");

			for (var orgName : list "AM Organization,Account Org1") {
				LexiconEntry.viewEntryName(rowEntry = ${orgName});

				AssertElementNotPresent(
					key_entryName = ${orgName},
					locator1 = "LexiconTable#TABLE_ENTRY_DELETE");

				AssertElementNotPresent(
					key_rowEntry = ${orgName},
					locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");
			}
		}
	}

	@description = "This is a use case for LPS-151552. This asserts saving edits in one permissions tab in Account Roles does not clear related permissions from the other tab."
	@priority = 4
	test CanSavePermissionsWithoutDeletingOthers {
		task ("Given an account role is created") {
			Role.openRolesAdmin();

			Navigator.gotoNavTab(navTab = "Account Roles");

			Role.add(roleTitle = "New Account Role");
		}

		task ("When a permission is saved in 'Define Permissions' tab and another related permission is saved in 'Define Group Scope Permissions' tab") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_ENTRY",
				resourceName = "com.liferay.blogs",
				roleTitle = "New Account Role",
				roleType = "account");

			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType(roleType = "Account");

			LexiconEntry.gotoEntry(rowEntry = "New Account Role");

			Role.editPermissionCP(
				define = "true",
				navItem = "Define Group Scope Permissions",
				permissionNavHeader = "Content & Data",
				permissionNavItem = "Blogs",
				permissionSheetSubtitle = "Blog Entries",
				permissionValues = "Subscribe");
		}

		task ("Then both tabs should assert the correct permissions") {
			Navigator.gotoNavTab(navTab = "Define Permissions");

			Role.viewPermissionCP(
				permissionDefinitionValue = "Add Entry",
				permissionNavigationValue = "Blogs > Blog Entries:");

			Navigator.gotoNavTab(navTab = "Define Group Scope Permissions");

			Role.viewPermissionCP(
				permissionDefinitionValue = "Subscribe",
				permissionNavigationValue = "Blogs > Blog Entries:");
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with Update Account Role permissions for an account can update account roles."
	@priority = 4
	test CanUpdateAccountRoleWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Account.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And he is a member of a business account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.assignUsers(
				accountName = "Account Name",
				assigneeName = "userfn1");
		}

		task ("And add owned account role with Update account entry, View account role tab permissions ") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Account Specific Role",
					roleType = "account");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Specific Role",
				roleType = "account");
		}

		task ("When this user is granted permissions to Update account role for Account Name") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Specific Role",
				roleType = "account");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can update account roles in Account Name") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.updateOwnedAccountRole(
				accountRoleTitle = "Account Specific Role",
				accountRoleTitleEdit = "Account Specific Role Edit");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewEntryName(rowEntry = "Account Specific Role Edit");
		}
	}

	@description = "COMMERCE-12695. As a user with an Account Administrator role, I can view and manage the Channel Defaults of the account"
	@priority = 5
	test CanUserWithAccountAdministratorRoleViewAndManageChannelDefaults {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And the admin creates two business types of accounts") {
			for (var index : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Commerce Account ${index}",
					accountEntryType = "Business");
			}
		}

		task ("And a user without any role assigned to account 1 is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 1",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "testuser@liferay.com",
				userFirstName = "Test",
				userLastName = "User",
				userScreenName = "testuser",
				userSiteMembership = "Minium");
		}

		task ("When the user navigates to the Account Management page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "testuser@liferay.com",
				userLoginFullName = "Test User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/account-management");
		}

		task ("Then can view only account 1 is listed and cannot click on it") {
			for (var index : list "1,2") {
				AssertElementNotPresent(
					key_entryName = "Commerce Account ${index}",
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}

			AssertElementPresent(
				key_tableEntry = "Commerce Account 1",
				locator1 = "LexiconTable#TABLE_ENTRY");

			AssertElementNotPresent(
				key_tableEntry = "Commerce Account 2",
				locator1 = "LexiconTable#TABLE_ENTRY");
		}

		task ("And also cannot see the account entry's ellipsis") {
			AssertElementNotPresent(locator1 = "Icon#SVG_ELLIPSIS");
		}

		task ("When the Account Administrator role is given to the user") {
			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Account 1",
				accountRole = "Account Administrator",
				userEmailAddress = "testuser@liferay.com");
		}

		task ("Then can view the linked account 1 listed") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/account-management");

			AssertElementPresent(
				key_entryName = "Commerce Account 1",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And can view and manage the Channel Defaults of account 1") {
			LexiconEntry.gotoEntry(rowEntry = "Commerce Account 1");

			CommerceEntry.gotoMenuTab(menuTab = "Channel Defaults");

			for (var entryNames : list "Billing,Shipping,Delivery,Payment,Price,Discounts,Currencies,Users") {
				AssertElementPresent(
					key_termType = ${entryNames},
					locator1 = "Account#DEFAULT_ACCOUNT_TERMS_AND_CONDITION_PLUS");
			}
		}
	}

	@description = "This is a use case for LPS-142654. This asserts user with View Account Roles permissions for an account can only view and cannot do other actions to those roles. It also asserts that a user only has this permissions to the account he has the role in."
	@priority = 4
	test CanViewAccountRolesWithPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a user is granted permissions to access Account Admin portlet") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			Account.grantUserAccessToAccountAdmin(userEmailAddress = "userea1@liferay.com");
		}

		task ("And he is a member of two business accounts") {
			for (var accountNum : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Account Name ${accountNum}",
					accountEntryType = "Business");

				Account.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account Name ${accountNum}");

				Account.assignUsers(
					accountName = "Account Name ${accountNum}",
					assigneeName = "userfn1");
			}
		}

		task ("When this user is granted permissions to Update account entry and View account roles for Account Name 1") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Account.addOwnedAccountRole(accountRoleTitle = "Account Specific Role1");

			for (var resourceActionIndex : list "UPDATE,VIEW_ACCOUNT_ROLES") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com.liferay.account.model.AccountEntry",
					roleTitle = "Account Specific Role1",
					roleType = "account");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.account.model.AccountRole",
				roleTitle = "Account Specific Role1",
				roleType = "account");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role1",
				accountUserName = "userfn1 userln1");
		}

		task ("And user is granted permissions to only Update an account entry for Account Name 2") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

			Account.addOwnedAccountRole(accountRoleTitle = "Account Specific Role2");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.account.model.AccountEntry",
				roleTitle = "Account Specific Role2",
				roleType = "account");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role2",
				accountUserName = "userfn1 userln1");
		}

		task ("Then he can view account roles in Account Name 1") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 1");

			Account.gotoAssigneeTab(assigneeTab = "Roles");

			LexiconEntry.viewEntryName(rowEntry = "Account Specific Role1");
		}

		task ("and this user cannot do any other actions to these account roles") {
			AssertElementNotPresent(locator1 = "Button#PLUS");

			LexiconEntry.viewNoEntryMenu(rowEntry = "Account Specific Role1");
		}

		task ("and this user cannot view account roles in Account Name 2") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name 2");

			AssertElementNotPresent(
				key_tab = "Roles",
				locator1 = "NavTab#ACTIVE_TAB_LINK");
		}
	}

	@description = "This is a use case for LPS-159272. If a certain Role gets assigned to an Organization, it should be logged in the console"
	@priority = 4
	test RoleAssignmentToAndUnassignmentFromOrganizationGetsLoggedInConsole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: An Organization is created Logging Message Audit Message Processor and Output to Console is enabled") {
			User.openUsersAdmin();

			Organization.openOrganizationsAdmin();

			Organization.addCP(orgName = "Test Org");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Audit",
				configurationName = "Logging Message Audit Message Processor",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			FormFields.enableCheckbox(fieldName = "Output to Console");

			if (IsElementPresent(key_text = "Save", locator1 = "Button#SAVE")) {
				Button.clickSave();

				Button.clickCancel();
			}
			else {
				Button.clickUpdate();

				Button.clickCancel();
			}
		}

		task ("When: A Role is assigned to the previously created Organization, then unassign the Organization from the Role") {
			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType(roleType = "Regular");

			Role.addAssignee(
				assigneeName = "Test Org",
				assigneeType = "Organizations",
				roleTitle = "Power User");

			Role.removeAssignee(
				assigneeName = "Test Org",
				assigneeType = "Organizations",
				roleTitle = "Power User");
		}

		task ("The Role assigning/unassigning gets logged in the console along with the Role title and the Organization title") {
			Log.viewLogFileContentPresent(logContent = "Power User");

			Log.viewLogFileContentPresent(logContent = "Test Org");

			Log.viewLogFileContentPresent(logContent = "ASSIGN");

			Log.viewLogFileContentPresent(logContent = "UNASSIGN");
		}
	}

	@description = "This is a use case for LPS-159272. If a certain Role gets assigned to a Site, it should be logged in the console"
	@priority = 4
	test RoleAssignmentToAndUnassignmentFromSiteGetsLoggedInConsole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: A Site is created Logging Message Audit Message Processor and Output to Console is enabled") {
			Site.openSitesAdmin();

			Site.addCP(
				siteName = "POWER SITE",
				siteType = "Blank");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Audit",
				configurationName = "Logging Message Audit Message Processor",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			FormFields.enableCheckbox(fieldName = "Output to Console");

			if (IsElementPresent(key_text = "Save", locator1 = "Button#SAVE")) {
				Button.clickSave();

				Button.clickCancel();
			}
			else {
				Button.clickUpdate();

				Button.clickCancel();
			}
		}

		task ("When: A Role is assigned to the previously created Site, then unassign the Site from the Role") {
			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType(roleType = "Regular");

			Role.addAssignee(
				assigneeName = "POWER SITE",
				assigneeType = "Sites",
				roleTitle = "Power User");

			Role.removeAssignee(
				assigneeName = "POWER SITE",
				assigneeType = "Sites",
				roleTitle = "Power User");
		}

		task ("The Role assigning/unassigning gets logged in the console along with the Role title and the Site title") {
			Log.viewLogFileContentPresent(logContent = "Power User");

			Log.viewLogFileContentPresent(logContent = "POWER SITE");

			Log.viewLogFileContentPresent(logContent = "ASSIGN");

			Log.viewLogFileContentPresent(logContent = "UNASSIGN");
		}
	}

	@description = "This is a use case for LPS-159272. If a certain Role gets assigned to a User, it should be logged in the console"
	@priority = 4
	test RoleAssignmentToAndUnassignmentFromUserGetsLoggedInConsole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: A User is created Logging Message Audit Message Processor and Output to Console is enabled") {
			User.openUsersAdmin();

			User.createUser(
				userEmailAddress = "joebloggs@liferay.com",
				userFirstName = "Joe",
				userLastName = "Bloggs",
				userScreenName = "joebloggs");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Audit",
				configurationName = "Logging Message Audit Message Processor",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			FormFields.enableCheckbox(fieldName = "Output to Console");

			if (IsElementPresent(key_text = "Save", locator1 = "Button#SAVE")) {
				Button.clickSave();

				Button.clickCancel();
			}
			else {
				Button.clickUpdate();

				Button.clickCancel();
			}
		}

		task ("When: A Role is assigned to the previously created User, then unassign the User from the Role") {
			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType(roleType = "Regular");

			Role.addAssignee(
				assigneeName = "Joe Bloggs",
				assigneeType = "Users",
				roleTitle = "Power User");

			Role.removeAssignee(
				assigneeName = "Joe Bloggs",
				assigneeType = "Users",
				roleTitle = "Power User");
		}

		task ("Then: The Role assigning/unassigning gets logged in the console along with the Role title and the User's email address") {
			Log.viewLogFileContentPresent(logContent = "Power User");

			Log.viewLogFileContentPresent(logContent = "joebloggs@liferay.com");

			Log.viewLogFileContentPresent(logContent = "ASSIGN");

			Log.viewLogFileContentPresent(logContent = "UNASSIGN");
		}
	}

	@description = "This is a use case for LPS-159272. If a certain Role gets assigned to a User Group, it should be logged in the console"
	@priority = 4
	test RoleAssignmentToAndUnassignmentFromUserGroupGetsLoggedInConsole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: A User Group is created Logging Message Audit Message Processor and Output to Console is enabled") {
			UserGroup.openUserGroupsAdmin();

			UserGroup.addCP(userGroupName = "User Group Name");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Audit",
				configurationName = "Logging Message Audit Message Processor",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			FormFields.enableCheckbox(fieldName = "Output to Console");

			if (IsElementPresent(key_text = "Save", locator1 = "Button#SAVE")) {
				Button.clickSave();

				Button.clickCancel();
			}
			else {
				Button.clickUpdate();

				Button.clickCancel();
			}
		}

		task ("When: A Role is assigned to the previously created User Group, then unassign the User Group from the Role") {
			Role.openRolesAdmin();

			RoleNavigator.gotoRoleType(roleType = "Regular");

			Role.addAssignee(
				assigneeName = "User Group Name",
				assigneeType = "User Groups",
				roleTitle = "Power User");

			Role.removeAssignee(
				assigneeName = "User Group Name",
				assigneeType = "User Groups",
				roleTitle = "Power User");
		}

		task ("Then: The Role assigning/unassigning gets logged in the console along with the Role title and the User Group title") {
			Log.viewLogFileContentPresent(logContent = "Power User");

			Log.viewLogFileContentPresent(logContent = "User Group Name");

			Log.viewLogFileContentPresent(logContent = "ASSIGN");

			Log.viewLogFileContentPresent(logContent = "UNASSIGN");
		}
	}

	@description = "This is a use case for LPS-159272. If a certain Role gets assigned to a User FROM THE USER SETTINGS MENU, it should be logged in the console"
	@priority = 4
	test RoleAssignmentToAndUnassignmentFromUserInUserSettingsMenuGetsLoggedInConsole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: A User is created Logging Message Audit Message Processor and Output to Console is enabled") {
			User.openUsersAdmin();

			User.createUser(
				userEmailAddress = "joebloggs@liferay.com",
				userFirstName = "Joe",
				userLastName = "Bloggs",
				userScreenName = "joebloggs");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Audit",
				configurationName = "Logging Message Audit Message Processor",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			FormFields.enableCheckbox(fieldName = "Output to Console");

			if (IsElementPresent(key_text = "Save", locator1 = "Button#SAVE")) {
				Button.clickSave();

				Button.clickCancel();
			}
			else {
				Button.clickUpdate();

				Button.clickCancel();
			}
		}

		task ("When: A Role is assigned to the previously created User, then unassign the User from the Role and all of this happens in the User Settings Menu") {
			User.openUsersAdmin();

			User.assignRegularRoleCP(
				roleTitle = "Power User",
				userScreenName = "joebloggs");

			Navigator.gotoBack();

			User.unassignRegularRoleCP(
				regularRoleName = "Power User",
				userScreenName = "joebloggs");
		}

		task ("Then: The Role assigning/unassigning gets logged in the console along with the Role title and the User's email address") {
			Log.viewLogFileContentPresent(logContent = "Power User");

			Log.viewLogFileContentPresent(logContent = "joebloggs@liferay.com");

			Log.viewLogFileContentPresent(logContent = "ASSIGN");

			Log.viewLogFileContentPresent(logContent = "UNASSIGN");
		}
	}

}