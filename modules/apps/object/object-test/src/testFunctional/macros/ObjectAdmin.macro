definition {

	@summary = "Default summary"
	macro activateOrDeactivateAction(viewEntry = null, active = null) {
		ObjectAdmin.goToActionDetails(viewEntry = ${viewEntry});

		SelectFrame.selectFrameNoLoading(locator1 = "ObjectAction#IFRAME_SIDE_PANEL");

		if (${active} == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Active",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if (${active} == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Active",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addAOBJFieldWithTranslation(newLanguage = null, fieldLabel = null, fieldType = null, key_placeHolder = null, key_newLabel = null,) {
		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = ${fieldLabel},
			fieldType = ${fieldType});

		ObjectAdmin.goToFieldsDetails(label = ${fieldLabel});

		ObjectAdmin.chooseAnyLanguage(
			newLanguage = ${newLanguage},
			symbolName = "");

		Type(
			key_placeHolder = ${key_placeHolder},
			locator1 = "TextInput#ANY_PLACEHOLDER",
			value1 = ${key_newLabel});

		Button.clickSave();
	}

	@summary = "Default summary"
	macro addAttachmentFileFromDMInObjectEntryViaUI(fileName = null, objectName = null) {
		ObjectAdmin.goToCustomObject(objectName = ${objectName});

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.clickSelectFile();

		ItemSelector.uploadFile(uploadFileName = ${fileName});

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addCategorizationOnLayoutTab() {
		Click(locator1 = "ObjectAdmin#LABEL_DROPDOWN");

		DropdownMenuItem.click(menuItem = "Add Categorization");
	}

	@summary = "Default summary"
	macro addLanguageForOBJ(key_type = null, key_text2 = null, key_text1 = null, key_menuItem = null, key_label = null) {
		Click(locator1 = "Button#PLUS");

		Type(
			key_label = ${key_label},
			locator1 = "DataSet#SPECIFIC_INPUT",
			value1 = ${key_text1});

		PortletEntry.save();

		Refresh();

		Click(locator1 = "DataSet#SELECT_LOCALIZATION_BUTTON");

		SelectFrame(locator1 = "DataSet#SELECT_FRAME_LOCAL");

		Click.javaScriptClick(
			key_menuItem = ${key_menuItem},
			locator1 = "MenuItem#MENU_ITEM_SPECIFIC");

		Type(
			key_label = ${key_type},
			locator1 = "DataSet#SPECIFIC_INPUT",
			value1 = ${key_text2});

		Click(locator1 = "DataSet#SELECT_FRAME_DEFOCUS");

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addLayoutBlockViaUI(blockName = null) {
		Click(locator1 = "ObjectAdmin#ADD_BLOCK_BUTTON");

		Type(
			locator1 = "ObjectAdmin#TAB_LABEL_NAME",
			value1 = ${blockName});

		Click(
			key_tab = "Save",
			locator1 = "Button#TAB_SUBMIT_BTN");
	}

	@summary = "Default summary"
	macro addNewObject(fieldName = null, fieldLabelName = null, pluralLabelName = null) {
		Click(locator1 = "ObjectAdmin#ADD_CUSTOM_OBJECT");

		Type(
			locator1 = "ObjectAdmin#LABEL_CUSTOM_OBJECT",
			value1 = ${fieldLabelName});

		Type(
			locator1 = "ObjectAdmin#PLURAL_LABEL_CUSTOM_OBJECT",
			value1 = ${pluralLabelName});

		if (isSet(fieldName)) {
			Type(
				locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
				value1 = ${fieldName});
		}
	}

	@summary = "Default summary"
	macro addObjectActionViaUI(fieldName = null, secretAction = null, urlAction = null, errorMessage = null, active = null, actionDescription = null, actionLabel = null, scriptValidation = null, inputMethod = null, inputValue = null, whenAction = null, notificationName = null, inputExpressionValue = null, objectLabel = null, actionName = null, inputExpression = null, thenAction = null) {
		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionDescription = ${actionDescription},
			actionLabel = ${actionLabel},
			actionName = ${actionName},
			active = ${active},
			click = "save",
			errorMessage = ${errorMessage},
			fieldName = ${fieldName},
			inputExpression = ${inputExpression},
			inputExpressionValue = ${inputExpressionValue},
			inputMethod = ${inputMethod},
			inputValue = ${inputValue},
			notificationName = ${notificationName},
			notRefreshAttribute = "true",
			objectLabel = ${objectLabel},
			scriptValidation = ${scriptValidation},
			secretAction = ${secretAction},
			thenAction = ${thenAction},
			urlAction = ${urlAction},
			whenAction = ${whenAction});
	}

	@summary = "Default summary"
	macro addObjectBooleanFieldEntryViaUI(objectName = null, value = null) {
		ObjectAdmin.goToCustomObject(objectName = ${objectName});

		LexiconEntry.gotoAdd();

		WaitForPageLoad();

		if (${value} == "true") {
			Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");
		}

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addObjectDoubleFieldEntryViaUI(entryValue = null) {
		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#ENTRY_DOUBLE_VALUE_FIELD",
			value1 = ${entryValue});

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addObjectEntryViaAPI(userPassword = null, valueList = null, objectName = null, userEmailAddress = null, fieldNameList = null) {
		var objectEntryId = JSONObject.addObjectEntry(
			entryLanguageList = ${entryLanguageList},
			fieldNameList = ${fieldNameList},
			objectName = ${objectName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword},
			valueList = ${valueList});

		return ${objectEntryId};

		echo(${objectEntryId});
	}

	@summary = "Default summary"
	macro addObjectFieldViaAPI(externalReferenceCode = null, fieldName = null, fieldBusinessType = null, fieldLabelName = null, fieldType = null, fileSource = null, formulaScript = null, indexed = null, indexedAsKeyword = null, indexedLanguageId = null, isReadOnly = null, isRequired = null, objectName = null, outputOption = null, picklistName = null, readOnlyExpression = null, showFilesInDocumentsAndMedia = null, timeStorageOption = null, userEmailAddress = null, userPassword = null) {
		if ((${fieldBusinessType} == "Formula") || (${fieldBusinessType} == "Aggregation")) {
			var indexed = "false";
		}

		JSONObject.addObjectField(
			externalReferenceCode = ${externalReferenceCode},
			fieldBusinessType = ${fieldBusinessType},
			fieldLabelName = ${fieldLabelName},
			fieldName = ${fieldName},
			fieldType = ${fieldType},
			fileSource = ${fileSource},
			formulaScript = ${formulaScript},
			indexed = ${indexed},
			indexedAsKeyword = ${indexedAsKeyword},
			indexedLanguageId = ${indexedLanguageId},
			initialValue = ${initialValue},
			isReadOnly = ${isReadOnly},
			isRequired = ${isRequired},
			objectName = ${objectName},
			outputOption = ${outputOption},
			picklistName = ${picklistName},
			prefix = ${prefix},
			readOnlyExpression = ${readOnlyExpression},
			showFilesInDocumentsAndMedia = ${showFilesInDocumentsAndMedia},
			suffix = ${suffix},
			timeStorageOption = ${timeStorageOption},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	@summary = "Default summary"
	macro addObjectFieldViaUI(prefixValue = null, initialValue = null, suffixValue = null, fieldTimeStorage = null, fieldName = null, acceptUniqueValuesOnly = null, formulaFieldOption = null, fieldPicklist = null, itemName = null, field = null, fieldLabel = null, sorting = null, markAsState = null, fieldAttachment = null, functionType = null, relationship = null, fieldType = null, isMandatory = null) {
		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectField#LABEL_INPUT",
			value1 = ${fieldLabel});

		if (isSet(fieldName)) {
			Type(
				locator1 = "ObjectField#NAME_FIELD",
				value1 = ${fieldName});
		}

		if (isSet(fieldType)) {
			ObjectField.selectType(fieldType = ${fieldType});

			if (${fieldType} == "Date and Time") {
				ObjectAdmin.selectDropdownItem(
					currentOption = ${sorting},
					labelName = "Time Storage",
					optionName = ${fieldTimeStorage});
			}

			if (${fieldType} == "Attachment") {
				ObjectAdmin.selectDropdownItem(
					labelName = "Request Files",
					optionName = ${fieldAttachment});

				var enableShowFiles = ${enableShowFiles};

				if (isSet(enableShowFiles)) {
					Check.checkNotVisible(
						key_toggleSwitchLabel = "Show Files in Documents and Media",
						locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
				}
			}

			if (${fieldType} == "Aggregation") {
				ObjectAdmin.selectDropdownItem(
					labelName = "Relationship",
					optionName = ${relationship});

				ObjectAdmin.selectDropdownItem(
					labelName = "Function",
					optionName = ${functionType});

				if (isSet(field)) {
					ObjectAdmin.selectDropdownItem(
						labelName = "Field",
						optionName = ${field});
				}
			}

			if (${fieldType} == "Auto Increment") {
				if (isSet(prefixValue)) {
					Type(
						key_labelName = "Prefix",
						locator1 = "ObjectField#INPUT_GENERIC_LABEL",
						value1 = ${prefixValue});
				}

				if (isSet(initialValue)) {
					Type(
						key_labelName = "Initial Value",
						locator1 = "ObjectField#INPUT_GENERIC_LABEL",
						value1 = ${initialValue});
				}

				if (isSet(suffixValue)) {
					Type(
						key_labelName = "Suffix",
						locator1 = "ObjectField#INPUT_GENERIC_LABEL",
						value1 = ${suffixValue});
				}
			}
		}

		if (${isMandatory} == "true") {
			ObjectField.checkToggleMandatory();
		}

		if (${acceptUniqueValuesOnly} == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Accept Unique Values Only",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}

		if (isSet(fieldPicklist)) {
			ObjectAdmin.selectDropdownItem(
				labelName = "Picklist",
				optionName = ${fieldPicklist});

			if (${markAsState} == "true") {
				Check.checkToggleSwitch(locator1 = "ObjectField#MARK_AS_STATE_TOGGLE");

				ObjectAdmin.selectDropdownItem(
					labelName = "Default Value",
					optionName = ${itemName});
			}
		}

		if (isSet(formulaFieldOption)) {
			ObjectAdmin.selectDropdownItem(
				labelName = "Output",
				optionName = ${formulaFieldOption});
		}

		Button.clickSave();

		WaitForVisible(
			key_fieldLabel = ${fieldLabel},
			locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");
	}

	@summary = "Default summary"
	macro addObjectLayoutViaAPI(userPassword = null, objectName = null, userEmailAddress = null, layoutName = null) {
		JSONObject.addObjectLayout(
			layoutName = ${layoutName},
			objectName = ${objectName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	@summary = "Default summary"
	macro addObjectLayoutViaUI(layoutName = null) {
		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#ADD_LAYOUT_NAME_FIELD",
			value1 = ${layoutName});

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addObjectLongFieldEntryViaUI(entryValue = null, objectFieldName = null) {
		LexiconEntry.gotoAdd();

		Type(
			key_objectFieldName = ${objectFieldName},
			locator1 = "ObjectAdmin#ENTRY_LONG_VALUE_FIELD",
			value1 = ${entryValue});

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addObjectMultiPicklistFieldEntryViaUI(picklistOptionList = null) {
		LexiconEntry.gotoAdd();

		Click(locator1 = "ObjectAdmin#ENTRY_CHOOSE_OPTIONS_MULTIPICKLIST");

		for (var picklistOption : list ${picklistOptionList}) {
			MenuItem.clickNoError(menuItem = ${picklistOption});
		}
	}

	@summary = "Default summary"
	macro addObjectPicklistFieldEntryViaUI(picklistOption = null, saveName = null) {
		LexiconEntry.gotoAdd();

		ObjectAdmin.selectDropdownItem(
			labelName = ${labelName},
			optionName = ${picklistOption});

		if (IsElementPresent(key_text = ${saveName}, locator1 = "Button#ANY")) {
			Click(
				key_text = ${saveName},
				locator1 = "Button#ANY");
		}
		else {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro addObjectRelationshipViaAPI(relationshipName = null, userPassword = null, relationshipType = null, deletionType = null, userEmailAddress = null, objectName_1 = null, objectName_2 = null, relationshipLabel = null) {
		JSONObject.addObjectRelationship(
			deletionType = ${deletionType},
			objectName_1 = ${objectName_1},
			objectName_2 = ${objectName_2},
			relationshipLabel = ${relationshipLabel},
			relationshipName = ${relationshipName},
			relationshipType = ${relationshipType},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	@summary = "Default summary"
	macro addObjectRelationshipViaUI(invalidEntry = null, parameterOption = null, name = null, label = null, type = null, object = null) {
		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#LABEL_OBJECT_RELATIONSHIP",
			value1 = ${label});

		if (isSet(type)) {
			ObjectAdmin.selectDropdownItem(
				labelName = "Type",
				optionName = ${type});
		}

		if (isSet(object)) {
			ObjectAdmin.selectDropdownItem(
				labelName = "Many Records Of",
				optionName = ${object});
		}

		if (isSet(name)) {
			Type(
				locator1 = "ObjectAdmin#NAME_OBJECT_RELATIONSHIP",
				value1 = ${name});
		}

		if (isSet(parameterOption)) {
			ObjectAdmin.selectDropdownItem(
				labelName = "Parameter",
				optionName = ${parameterOption});
		}

		if (${invalidEntry} == "true") {
			Button.clickSave();
		}
		else {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro addObjectSingleFieldEntryViaAPI(userPassword = null, fieldName = null, objectName = null, userEmailAddress = null, value = null) {
		var objectEntryId = JSONObject.addObjectSingleFieldEntry(
			ercName = ${ercName},
			fieldName = ${fieldName},
			fieldType = ${fieldType},
			objectName = ${objectName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword},
			value = ${value},
			valueList = ${valueList});

		return ${objectEntryId};

		echo(${objectEntryId});
	}

	@summary = "Default summary"
	macro addObjectStringFieldEntryViaUI(invalidEntry = null, entryOption = null, entryValue = null) {
		LexiconEntry.gotoAdd();

		WaitForSPARefresh();

		Type(
			locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
			value1 = ${entryValue});

		if (isSet(entryOption)) {
			Click(locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY");

			Click(
				key_picklistOption = ${entryOption},
				locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");
		}

		if (isSet(fieldEntryLanguage)) {
			Click(
				key_buttonFieldEntryLanguage = ${buttonFieldEntryLanguage},
				locator1 = "ObjectField#BUTTON_FIELD_ENTRY_LANGUAGE");

			Click(
				key_locale = ${locale},
				locator1 = "Translation#DROPDOWN_MENU_ITEM");

			Type(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = ${entryValueTranslated});
		}

		if (${invalidEntry} == "true") {
			Button.clickSave();
		}
		else {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro addObjectViaAPI(userPassword = null, scope = null, objectName = null, userEmailAddress = null, panelCategoryKey = null, labelName = null, pluralLabelName = null, externalReferenceCode = null) {
		JSONObject.addObject(
			externalReferenceCode = ${externalReferenceCode},
			labelName = ${labelName},
			objectName = ${objectName},
			panelCategoryKey = ${panelCategoryKey},
			pluralLabelName = ${pluralLabelName},
			scope = ${scope},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	@summary = "Default summary"
	macro addObjectWithStorageType(fieldLabelName = null, storageType = null, pluralLabelName = null) {
		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		ObjectAdmin.addNewObject(
			fieldLabelName = ${fieldLabelName},
			pluralLabelName = ${pluralLabelName});

		ObjectAdmin.selectDropdownItem(
			labelName = "Storage Type",
			optionName = ${storageType});

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro addTabFieldsOnLayout(tabName = null, blockName = null, columnsNumber = null, isCollapsible = null, fieldList = null) {
		LexiconEntry.gotoAddNoSelectFrame();

		Click(
			key_type = "Fields",
			locator1 = "ObjectAdmin#TAB_TYPE");

		Type(
			locator1 = "ObjectAdmin#TAB_LABEL_NAME",
			value1 = ${tabName});

		Click(
			key_tab = "Save",
			locator1 = "Button#TAB_SUBMIT_BTN");

		if (isSet(blockName)) {
			Click(locator1 = "ObjectAdmin#ADD_BLOCK_BUTTON");

			Type(
				locator1 = "ObjectAdmin#TAB_LABEL_NAME",
				value1 = ${blockName});

			Click(
				key_tab = "Save",
				locator1 = "Button#TAB_SUBMIT_BTN");

			if (${isCollapsible} == "Yes") {
				Check.checkToggleSwitch(locator1 = "ObjectCustomValidation#ACTIVE_VALIDATION_TOGGLE");
			}

			if (isSet(fieldList)) {
				for (var fieldLabelName : list ${fieldList}) {
					Click(locator1 = "ObjectAdmin#ADD_FIELD_ON_BLOCK");

					ObjectAdmin.selectDropdownItem(
						labelName = "Field",
						optionName = ${fieldLabelName});

					Click(
						key_columnsNumber = ${columnsNumber},
						locator1 = "ObjectAdmin#LAYOUT_ADD_FIELD_COLUMN_NUMBER");

					Click(
						key_tab = "Save",
						locator1 = "Button#TAB_SUBMIT_BTN");
				}
			}
			else {
				Click(locator1 = "ObjectAdmin#ADD_FIELD_ON_BLOCK");

				ObjectAdmin.selectDropdownItem(
					labelName = "Field",
					optionName = ${fieldLabelName});

				Click(
					key_columnsNumber = ${columnsNumber},
					locator1 = "ObjectAdmin#LAYOUT_ADD_FIELD_COLUMN_NUMBER");

				Click(
					key_tab = "Save",
					locator1 = "Button#TAB_SUBMIT_BTN");
			}
		}
	}

	@summary = "Default summary"
	macro addTabRelationshipsOnLayout(tabName = null, relationshipsLabelName = null) {
		LexiconEntry.gotoAddNoSelectFrame();

		Click(
			key_type = "Relationships",
			locator1 = "ObjectAdmin#TAB_TYPE");

		Type(
			locator1 = "ObjectAdmin#TAB_LABEL_NAME",
			value1 = ${tabName});

		Click(
			key_labelName = "Relationship",
			locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON");

		if (isSet(relationshipsLabelName)) {
			Click(
				key_optionName = ${relationshipsLabelName},
				locator1 = "ObjectAdmin#CLAY_GENERIC_DROPDOWN_ITEM");
		}

		Click(
			key_tab = "Save",
			locator1 = "Button#TAB_SUBMIT_BTN");
	}

	@summary = "Default summary"
	macro assertAddEntryModalIsNotPresent() {
		AssertElementNotPresent(locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD");

		AssertElementNotPresent(locator1 = "ObjectAdmin#ADD_ENTRY_SAVE_BUTTON");

		AssertElementNotPresent(locator1 = "ObjectAdmin#ADD_ENTRY_CANCEL_BUTTON");
	}

	@summary = "Default summary"
	macro assertBlockIsPresent(fieldBlockName = null) {
		AssertElementPresent(
			key_fieldBlockName = ${fieldBlockName},
			locator1 = "ObjectAdmin#FIELD_BLOCK_NAME");

		AssertElementPresent(locator1 = "ObjectAdmin#FIELD_BLOCK_ADD_FIELD_BUTTON");
	}

	@summary = "Default summary"
	macro assertCannotDeleteObjectWithRelationshipErrorMessage() {
		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Deletion Not Allowed");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "has active relationships and cannot be deleted.");
	}

	@summary = "Default summary"
	macro assertCannotDeleteRelationshipFromChildSideErrorMessage() {
		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Deletion Not Allowed");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "You do not have permission to delete this relationship.");
	}

	@summary = "Default summary"
	macro assertFieldDescription(description = null, type = null) {
		AssertElementPresent(
			key_descriptionLabel = ${description},
			key_fieldLabel = ${type},
			locator1 = "ObjectAdmin#FIELD_DESCRIPTION");
	}

	@summary = "Default summary"
	macro assertKeywordAndText() {
		AssertElementPresent(locator1 = "ObjectAdmin#SEARCHABLE_SECTION_TITLE");

		AssertElementNotPresent(locator1 = "ObjectAdmin#VIEW_SEARCHABLE_SECTION_DISABLED");

		AssertElementPresent(
			key_radioOption = "Keyword",
			locator1 = "ObjectAdmin#FIELDS_RADIO_OPTION");

		AssertElementPresent(
			key_radioOption = "Text",
			locator1 = "ObjectAdmin#FIELDS_RADIO_OPTION");
	}

	@summary = "Default summary"
	macro assertKeywordAndTextNotPresent() {
		AssertElementNotPresent(
			key_radioOption = "Keyword",
			locator1 = "ObjectAdmin#FIELDS_RADIO_OPTION");

		AssertElementNotPresent(
			key_radioOption = "Text",
			locator1 = "ObjectAdmin#FIELDS_RADIO_OPTION");
	}

	@summary = "Default summary"
	macro assertObjectActions(actionLabel = null, status = null) {
		AssertElementPresent(
			key_actionLabel = ${actionLabel},
			locator1 = "ObjectAdmin#VIEW_ACTIONS_LABEL");

		if (isSet(status)) {
			AssertElementPresent(
				key_statusInfo = ${status},
				locator1 = "ObjectAction#ACTIONS_STATUS_INFO");
		}
	}

	@summary = "Default summary"
	macro assertObjectColumnsAreDisplayed() {
		AssertElementPresent(locator1 = "ObjectAdmin#GENERIC_LABEL_COLUMN");

		AssertElementPresent(locator1 = "ObjectAdmin#OBJECT_SYSTEM_COLUMN");

		AssertElementPresent(locator1 = "ObjectAdmin#OBJECT_STATUS_COLUMN");
	}

	@summary = "Default summary"
	macro assertObjectColumnValue(system = null, scope = null, label = null, status = null) {
		var key_label = ${label};
		var key_scope = ${scope};
		var key_system = ${system};
		var key_status = ${status};

		AssertTextEquals(
			locator1 = "ObjectAdmin#OBJECT_LABEL",
			value1 = ${label});

		AssertTextEquals(
			locator1 = "ObjectAdmin#OBJECT_SCOPE",
			value1 = ${scope});

		AssertTextEquals(
			locator1 = "ObjectAdmin#OBJECT_SYSTEM",
			value1 = ${system});

		AssertTextEquals(
			locator1 = "ObjectAdmin#OBJECT_STATUS",
			value1 = ${status});
	}

	@summary = "Default summary"
	macro assertObjectEntryFieldValueViaAPI(fieldName = null, attributeValue = null, expectedValue = null, objectName = null, attribute = null, type = null) {
		var actualValue = JSONObject.getObjectEntryFieldValue(
			attribute = ${attribute},
			attributeValue = ${attributeValue},
			fieldName = ${fieldName},
			objectName = ${objectName},
			type = ${type});

		TestUtils.assertEquals(
			actual = ${actualValue},
			expected = ${expectedValue});
	}

	@summary = "Default summary"
	macro assertObjectField(fieldLabel = null, fieldType = null) {
		var key_fieldLabel = ${fieldLabel};
		var key_fieldType = ${fieldType};

		AssertElementPresent(locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");

		AssertElementPresent(locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_TYPE");
	}

	@summary = "Default summary"
	macro assertObjectFieldNotPresent(fieldLabel = null) {
		var key_fielLabel = ${fieldLabel};

		ObjectAdmin.goToFieldsTab();

		AssertElementNotPresent(locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");
	}

	@summary = "Default summary"
	macro assertObjectLayout(layoutLabel = null) {
		var key_layoutLabel = ${layoutLabel};

		AssertElementPresent(locator1 = "ObjectAdmin#VIEW_OBJECT_LAYOUT_LABEL");
	}

	@summary = "Default summary"
	macro assertObjectLayoutNotPresent(layoutLabel = null) {
		var key_layoutLabel = ${layoutLabel};

		AssertElementNotPresent(locator1 = "ObjectAdmin#VIEW_OBJECT_LAYOUT_LABEL");
	}

	@summary = "Default summary"
	macro assertUpdateEntryModalIsNotPresent(value = null) {
		AssertElementNotPresent(
			locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
			value1 = ${value});

		AssertElementNotPresent(locator1 = "ObjectAdmin#ADD_ENTRY_SAVE_BUTTON");

		AssertElementNotPresent(locator1 = "ObjectAdmin#ADD_ENTRY_CANCEL_BUTTON");
	}

	@summary = "Default summary"
	macro cancelAddingObjectStringFieldEntryViaUI(entryValue = null) {
		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
			value1 = ${entryValue});

		Button.clickCancel();
	}

	@summary = "Default summary"
	macro cancelUpdatingObjectStringFieldEntryViaUI(entryValue = null) {
		Type(
			locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
			value1 = ${entryValue});

		Button.clickCancel();
	}

	@summary = "Default summary"
	macro changeLabelLanguage(newLanguage = null) {
		Click.clickNoMouseOver(locator1 = "ObjectAdmin#DROPDOWN_LANGUAGEM");

		Click(
			key_menuItem = ${newLanguage},
			locator1 = "MenuItem#ANY_MENU_ITEM");
	}

	@summary = "Default summary"
	macro changePicklistFieldEntry(newPicklistOption = null, entrySelected = null) {
		Click(
			key_entrySelected = ${entrySelected},
			locator1 = "ObjectPortlet#OBJECT_FIELD_SELECTED");

		Click(
			key_picklistOption = ${newPicklistOption},
			locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");
	}

	@summary = "Default summary"
	macro changePluralLabelLanguage(newLanguage = null) {
		Click(locator1 = "ObjectAdmin#DROPDOWN_LANGUAGEM_PLURAL_LABEL");

		Click(
			key_menuItem = ${newLanguage},
			locator1 = "MenuItem#ANY_MENU_ITEM");
	}

	@summary = "Default summary"
	macro changeScopeOnDefinePermissions(siteCard = null, scopeActionName = null) {
		ObjectAdmin.searchInDefinePermissions(search = "Custom Objects");

		Click(
			key_scopeActionName = ${scopeActionName},
			locator1 = "ObjectAdmin#CHANGE_SCOPE_ACTION_ON_REGULAR_ROLES",
			value1 = ${scopeActionName});

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertClick(
			locator1 = "NavBar#MY_SITES",
			value1 = "My Sites");

		Click(
			key_siteCard = ${siteCard},
			locator1 = "ObjectAdmin#VIEW_SITE_CARD");

		SelectFrame(locator1 = "ObjectAdmin#VIEW_SHEET_ON_DEFINE_PERMISSIONS");

		Click(locator1 = "Button#SAVE");
	}

	@summary = "Default summary"
	macro chooseAnyLanguage(newLanguage = null) {
		Click(
			key_symbolName = "",
			locator1 = "FormViewBuilder#BUTTON_LOCALIZATION");

		Click(
			key_newLanguage = ${newLanguage},
			locator1 = "ObjectAdmin#CHOOSE_ANY_LANGUAGE");
	}

	@summary = "Default summary"
	macro clickFieldsSearchableSectionRadioOption(radioOption = null) {
		Click.javaScriptClick(
			key_radioOption = ${radioOption},
			locator1 = "ObjectAdmin#FIELDS_RADIO_OPTION");
	}

	@summary = "Default summary"
	macro createCustomObject(name = null) {
		Click(locator1 = "ObjectAdmin#ADD_CUSTOM_OBJECT");

		Type(
			locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
			value1 = ${name});

		Click(locator1 = "ObjectAdmin#SAVE_CUSTOM_OBJECT");
	}

	@summary = "Default summary"
	macro deleteActionViaUI(actionLabel = null) {
		Click(
			key_objectLabel = ${actionLabel},
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = "Delete");
	}

	@summary = "Default summary"
	macro deleteAllCommerceOrdersAndSitesViaAPI() {
		var ordersCount = CommerceJSONOrdersAPI._getCommerceOrdersCount();

		if (${ordersCount} != 0) {
			CommerceJSONOrdersAPI._deleteAllCommerceOrdersAndCheck();
		}

		CommerceJSONSitesAPI._deleteCommerceSites();
	}

	@summary = "Default summary"
	macro deleteAllCustomObjectRelationships() {
		var objectDefinitionIds = JSONObject.getAllObjectDefinitionsId();

		for (var objectDefinitionId : list ${objectDefinitionIds}) {
			var customObjectRelationshipIds = JSONObject.getCustomObjectRelationshipIds(objectDefinitionId = ${objectDefinitionId});

			if (${customObjectRelationshipIds} != "") {
				for (var customObjectRelationshipId : list ${customObjectRelationshipIds}) {
					JSONObject.deleteObjectRelationship(objectRelationshipId = ${customObjectRelationshipId});
				}
			}
		}
	}

	@summary = "Default summary"
	macro deleteAllCustomObjectsViaAPI(userPassword = null, userEmailAddress = null) {
		ObjectAdmin.deleteAllCustomObjectRelationships();

		JSONObject.deleteAllCustomObjects(
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	@summary = "Default summary"
	macro deleteCategorizationViaUI() {
		Click(locator1 = "ObjectAdmin#CATEGORIZATION_DROPDOWN");

		MenuItem.clickNoError(menuItem = "Delete");
	}

	@summary = "Default summary"
	macro deleteCustomObjectViaUI(objectName = null, labelName = null) {
		Click(
			key_objectLabel = ${labelName},
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = "Delete");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		Type(
			locator1 = "ObjectAdmin#PLACEHOLDER_DELETE_OBJECT",
			value1 = ${objectName});

		Click(locator1 = "Form#SIDEBAR_DELETE_FIELD_MODAL_DELETE_BUTTON");

		Refresh();
	}

	@summary = "Default summary"
	macro deleteObjectEntryViaAPI(userPassword = null, fieldName = null, objectName = null, userEmailAddress = null, value = null) {
		JSONObject.deleteObjectEntry(
			fieldName = ${fieldName},
			objectName = ${objectName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword},
			value = ${value});
	}

	@summary = "Default summary"
	macro deleteObjectEntryViaUI(objectName = null, labelName = null) {
		Click(
			key_objectLabel = ${labelName},
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		MenuItem.clickNoError(menuItem = "Delete");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		Type(
			locator1 = "ObjectAdmin#PLACEHOLDER_DELETE_OBJECT",
			value1 = ${objectName});

		Click(locator1 = "Form#SIDEBAR_DELETE_FIELD_MODAL_DELETE_BUTTON");

		Refresh();
	}

	@summary = "Default summary"
	macro deleteObjectField(fieldName = null) {
		Click(
			key_value = ${fieldName},
			locator1 = "ObjectAdmin#BODY_VERTICAL_ELLIPSIS");

		ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
	}

	@summary = "Default summary"
	macro deleteObjectViaAPI(userPassword = null, objectName = null, userEmailAddress = null, virtualHost = null, token = null) {
		JSONObject.deleteObject(
			objectName = ${objectName},
			token = ${token},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword},
			virtualHost = ${virtualHost});
	}

	@summary = "Default summary"
	macro deleteRelationshipViaUI(relationshipName = null, relationshipLabel = null) {
		Click(
			key_objectLabel = ${relationshipLabel},
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		ClickNoError(
			key_kebabOption = "Delete",
			locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");

		SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

		Type(
			locator1 = "ObjectAdmin#PLACEHOLDER_DELETE_RELATIONSHIP",
			value1 = ${relationshipName});

		Click(locator1 = "Form#SIDEBAR_DELETE_FIELD_MODAL_DELETE_BUTTON");

		Refresh();
	}

	@summary = "Default summary"
	macro disableCondition() {
		SelectFrame.selectFrameNoLoading(locator1 = "ObjectAction#IFRAME_SIDE_PANEL");

		Click(
			key_tabName = "Action Builder",
			locator1 = "ObjectAction#TAB_GENERIC");

		Uncheck.uncheckToggleSwitch(locator1 = "ObjectAction#ENABLE_DISABLE_CONDITION");

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro editClobEntryName(clobEntry = null) {
		Type(
			key_clobType = "",
			locator1 = "ObjectAdmin#VIEW_CLOB_TYPE_TEXT_ENTRY",
			value1 = ${clobEntry});

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro editCustomObject(fieldName = null, fieldLabelName = null, pluralLabelName = null) {
		if (isSet(fieldName)) {
			Type(
				locator1 = "ObjectAdmin#DETAILS_NAME_CUSTOM_OBJECT",
				value1 = ${fieldName});
		}

		if (isSet(fieldLabelName)) {
			Type(
				locator1 = "ObjectAdmin#DETAILS_LABEL_CUSTOM_OBJECT",
				value1 = ${fieldLabelName});
		}

		if (isSet(pluralLabelName)) {
			Type(
				locator1 = "ObjectAdmin#DETAILS_PLURAL_LABEL_CUSTOM_OBJECT",
				value1 = ${pluralLabelName});
		}

		CreateObject.saveObject();
	}

	@summary = "Default summary"
	macro editEntryName(invalidEntry = null, newEntryValue = null) {
		Type(
			locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
			value1 = ${newEntryValue});

		if (${invalidEntry} == "true") {
			Button.clickSave();
		}
		else {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro editExternalReferenceCode(externalReferenceCode = null) {
		Click(locator1 = "Icon#EDIT_PENCIL");

		Type(
			key_text = "External Reference Code",
			locator1 = "TextInput#ANY",
			value1 = ${externalReferenceCode});

		Click(
			key_tab = "Save",
			locator1 = "Button#TAB_SUBMIT_BTN");
	}

	@summary = "Default summary"
	macro editObjectAction(viewEntry = null, fieldName = null, secretAction = null, urlAction = null, active = null, actionLabel = null, inputMethod = null, inputValue = null, whenAction = null, inputExpressionValue = null, objectLabel = null, actionName = null, inputExpression = null, thenAction = null) {
		ObjectAdmin.goToActionDetails(viewEntry = ${viewEntry});

		ObjectAdmin.viewDetails();

		SelectFrame.selectFrameNoLoading(locator1 = "ObjectAction#IFRAME_SIDE_PANEL");

		ObjectAdmin.fillObjectAction(
			actionLabel = ${actionLabel},
			actionName = ${actionName},
			active = ${active},
			click = "save",
			fieldName = ${fieldName},
			inputExpression = ${inputExpression},
			inputExpressionValue = ${inputExpressionValue},
			inputMethod = ${inputMethod},
			inputValue = ${inputValue},
			objectLabel = ${objectLabel},
			secretAction = ${secretAction},
			thenAction = ${thenAction},
			urlAction = ${urlAction},
			whenAction = ${whenAction});
	}

	@summary = "Default summary"
	macro editObjectDeletionType(field = null, deletionType = null, label = null, labelName = null) {
		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = ${label});

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.goToRelationshipsDetails(labelName = ${labelName});

		WaitForSPARefresh();

		Click(
			field = ${field},
			locator1 = "ObjectRelationships#RELATIONSHIPS_FIELD");

		ClickNoError.clickNoMouseOver(
			key_type = ${deletionType},
			locator1 = "ObjectAdmin#SELECT_RELATIONSHIPS_TYPE_OPTION");

		Button.clickSave();
	}

	@summary = "Default summary"
	macro editObjectField(field = null, deletionType = null, label = null, labelName = null) {
		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = ${label});

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = ${labelName});

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Accept Unique Values Only",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = ${objectName});
	}

	@summary = "Default summary"
	macro enableCondition() {
		Check.checkToggleSwitch(locator1 = "ObjectAction#ENABLE_DISABLE_CONDITION");
	}

	@summary = "Default summary"
	macro fillObjectAction(fieldName = null, secretAction = null, urlAction = null, notRefreshAttribute = null, errorMessage = null, active = null, actionDescription = null, click = null, actionLabel = null, scriptValidation = null, inputMethod = null, inputValue = null, whenAction = null, notificationName = null, objectLabel = null, inputExpressionValue = null, actionName = null, thenAction = null, inputExpression = null) {
		if (isSet(actionLabel)) {
			Type(
				locator1 = "ObjectAdmin#ACTION_LABEL_FIELD",
				value1 = ${actionLabel});
		}

		if (isSet(actionName)) {
			Type(
				locator1 = "ObjectAdmin#ACTION_NAME_FIELD",
				value1 = ${actionName});
		}

		if (isSet(actionDescription)) {
			Type(
				locator1 = "ObjectAdmin#ACTION_DESCRIPTION_FIELD",
				value1 = ${actionDescription});
		}

		if (isSet(active)) {
			if (${active} == "true") {
				CreateObject.checkToggleActive();
			}
			else if (${active} == "false") {
				CreateObject.checkToggleInactive();
			}
		}

		Click(
			key_tabName = "Action Builder",
			locator1 = "ObjectAction#TAB_GENERIC");

		if (isSet(whenAction)) {
			Click(
				key_currentOption = "Choose a Trigger",
				locator1 = "ObjectAdmin#CLAY_GENERIC_SELECT_OPTION");

			Click(
				key_optionName = ${whenAction},
				locator1 = "ObjectAdmin#CLAY_GENERIC_DROPDOWN_ITEM");
		}

		if (isSet(thenAction)) {
			Click(
				key_currentOption = "Choose an Action",
				locator1 = "ObjectAdmin#CLAY_GENERIC_SELECT_OPTION");

			Click(
				key_optionName = ${thenAction},
				locator1 = "ObjectAdmin#CLAY_GENERIC_DROPDOWN_ITEM");

			if (${thenAction} == "Add an Object Entry") {
				Click(
					key_currentOption = "Choose an Object",
					locator1 = "ObjectAdmin#CLAY_GENERIC_SELECT_OPTION");

				Click(
					key_optionName = ${objectLabel},
					locator1 = "ObjectAdmin#CLAY_GENERIC_DROPDOWN_ITEM");

				if (isSet(fieldName)) {
					Click(locator1 = "Button#PLUS");

					SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

					Check.checkToggleSwitch(
						checkboxName = ${fieldName},
						locator1 = "Checkbox#ANY_CHECKBOX");

					Button.clickSave();

					SelectFrameTop();

					SelectFrame(locator1 = "ObjectAction#IFRAME_SIDE_PANEL");

					WaitForVisible(
						key_fieldLabel = ${fieldName},
						locator1 = "ObjectAdmin#VIEW_OBJECT_FIELD_LABEL");
				}

				if (${inputMethod} == "true") {
					ObjectAdmin.inputMethodValue(inputValues = ${inputValue});
				}
				else if (${inputMethod} == "false") {
					Type(
						locator1 = "ObjectAction#INPUT_NEW_VALUE",
						value1 = ${inputExpressionValue});
				}

				if (IsElementPresent(locator1 = "TextInput#ANY")) {
					Type(
						key_text = "Message",
						locator1 = "TextInput#ANY",
						value1 = ${errorMessage});
				}
			}

			if (${thenAction} == "Update an Object Entry") {
				Click(locator1 = "Button#PLUS");

				SelectFrame(locator1 = "ObjectCustomViews#VIEW_MODAL_CONTENT");

				Check.checkToggleSwitch(
					checkboxName = ${fieldName},
					locator1 = "Checkbox#ANY_CHECKBOX");

				PortletEntry.save();

				SelectFrame(locator1 = "ObjectAction#IFRAME_SIDE_PANEL");

				if (${inputMethod} == "true") {
					ObjectAdmin.inputMethodValue(inputValues = ${inputValue});
				}
				else if (${inputMethod} == "false") {
					Type(
						locator1 = "ObjectAction#INPUT_NEW_VALUE",
						value1 = ${inputExpressionValue});
				}
			}

			if (${thenAction} == "Notification") {
				Click(
					key_currentOption = "Select an Option",
					locator1 = "ObjectAdmin#CLAY_GENERIC_SELECT_OPTION");

				Click(
					key_optionName = ${notificationName},
					locator1 = "ObjectAdmin#CLAY_GENERIC_DROPDOWN_ITEM");
			}
		}

		if (isSet(inputExpression)) {
			ObjectAdmin.enableCondition();

			Type(
				locator1 = "ObjectAction#INPUT_EXPRESSION",
				value1 = ${inputExpression});
		}

		if (${thenAction} == "Groovy Script") {
			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = ${scriptValidation});
		}

		if (isSet(urlAction)) {
			Type(
				locator1 = "ObjectAdmin#ACTION_URL_FIELD",
				value1 = ${urlAction});
		}

		if (isSet(secretAction)) {
			Type(
				locator1 = "ObjectAdmin#ACTION_SECRET_FIELD",
				value1 = ${secretAction});
		}

		if (IsElementPresent(locator1 = "ObjectAction#ADD_ERROR_MESSAGE_VALIDATION")) {
			Type(
				locator1 = "ObjectAction#ADD_ERROR_MESSAGE_VALIDATION",
				value1 = ${errorMessage});
		}

		if (isSet(click)) {
			if ((${click} == "save") && (${notRefreshAttribute} == "true")) {
				Button.clickSave();

				WaitForElementNotPresent(locator1 = "ObjectAdmin#SIDE_PANEL");
			}
			else if (${click} == "cancel") {
				Button.clickCancel();

				Refresh();
			}
			else if (${click} == "save") {
				PortletEntry.save();

				Refresh();
			}
		}
	}

	@summary = "Default summary"
	macro filterObjectEntryViaAPI(userPassword = null, fieldName = null, objectName = null, userEmailAddress = null, value = null) {
		JSONObject.filterObjectEntry(
			fieldName = ${fieldName},
			objectName = ${objectName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword},
			value = ${value});
	}

	@summary = "Default summary"
	macro getObjectSortedEntry(sortString = null, objectName = null) {
		var entrySort = JSONObject.getObjectSortedEntry(
			objectName = ${objectName},
			sortString = ${sortString});

		var entrySortValue = JSONUtil.getWithJSONPath(${entrySort}, "$..items..${sortString}");

		return ${entrySortValue};
	}

	@summary = "Default summary"
	macro goToActionDetails(viewEntry = null) {
		Click(
			key_objectLabel = ${viewEntry},
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		ClickNoError(
			key_kebabOption = "Edit",
			locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");
	}

	@summary = "Default summary"
	macro goToActionsTab() {
		Click(locator1 = "ObjectAdmin#OBJECT_ACTIONS_TAB");
	}

	@summary = "Default summary"
	macro gotoAddObjectAction() {
		LexiconEntry.gotoAdd();

		SelectFrame(locator1 = "IFrame#IFRAME");
	}

	@summary = "Default summary"
	macro goToCustomObject(userPassword = null, objectName = null, userEmailAddress = null) {
		var objectId = JSONObject.getObjectId(
			objectName = ${objectName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});

		var objectDefinitionPortletId = ObjectDefinitionAPI._getObjectDefinitionPortletId(objectDefinitionId = ${objectId});

		Navigator.openSpecificURL(url = "/group/guest/~/control_panel/manage?p_p_id=${objectDefinitionPortletId}");
	}

	@summary = "Default summary"
	macro goToDetailsTab() {
		Click(locator1 = "ObjectAdmin#OBJECT_DETAILS_TAB");
	}

	@summary = "Default summary"
	macro goToFieldsDetails(label = null) {
		Click(
			key_label = ${label},
			locator1 = "ObjectAdmin#SELECT_OBJECT_FIELD");

		SelectFrame(locator1 = "IFrame#IFRAME");
	}

	@summary = "Default summary"
	macro goToFieldsTab() {
		Click(locator1 = "ObjectAdmin#OBJECT_FIELDS_TAB");
	}

	@summary = "Default summary"
	macro goToLayoutsTab() {
		Click(locator1 = "ObjectAdmin#OBJECT_LAYOUTS_TAB");
	}

	@summary = "Default summary"
	macro goToLayoutTabOnLayouts() {
		if (!(IsElementPresent(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB"))) {
			SelectFrame(locator1 = "IFrame#IFRAME");
		}

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");
	}

	@summary = "Default summary"
	macro goToRelationshipsDetails(fieldName = null, labelName = null) {
		if (isSet(labelName)) {
			Click(
				key_name = ${labelName},
				locator1 = "CreateObject#SELECT_ANY_OBJECT_FIELD_IN_TABLE");

			MenuItem.clickNoError(menuItem = "Edit");
		}
		else {
			Click(
				key_name = ${fieldName},
				locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");
		}

		SelectFrame(locator1 = "IFrame#IFRAME");
	}

	@summary = "Default summary"
	macro gotoRelationshipsTab() {
		Click(locator1 = "ObjectAdmin#OBJECT_RELATIONSHIPS_TAB");
	}

	@summary = "Default summary"
	macro gotoRolesAndSelectCustomObject(roleName = null, key_itemName = null) {
		Role.openRolesAdmin();

		Search.searchCP(searchTerm = ${roleName});

		AssertClick(
			key_itemName = ${roleName},
			locator1 = "ListGroupItem#ITEM_NAME_LINK",
			value1 = ${key_itemName});

		Navigator.gotoNavItem(navItem = "Define Permissions");

		ObjectAdmin.searchInDefinePermissions(search = "Custom Objects");
	}

	@summary = "Default summary"
	macro goToStateManagerTab() {
		Click(locator1 = "ObjectAdmin#OBJECT_STATE_MANAGER_TAB");
	}

	@summary = "Default summary"
	macro gotoTab(tabName = null) {
		Click(
			key_tabName = ${tabName},
			locator1 = "ObjectAdmin#OBJECT_ANY_TAB");
	}

	@summary = "Default summary"
	macro goToValidationsTab() {
		Click(locator1 = "ObjectAdmin#OBJECT_VALIDATIONS_TAB");
	}

	@summary = "Default summary"
	macro inputMethodValue(inputValues = null) {
		var rowNumber = 0;

		for (var value : list ${inputValues}) {
			var rowNumber = ${rowNumber} + 1;

			Click(
				key_rowNumber = ${rowNumber},
				locator1 = "ObjectAction#INPUT_METHOD");

			Type(
				key_rowNumber = ${rowNumber},
				locator1 = "ObjectAction#INPUT_VALUE",
				value1 = ${value});
		}
	}

	@summary = "Default summary"
	macro markLayoutAsDefault() {
		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");
	}

	@summary = "Default summary"
	macro openMySubmissions() {
		Navigator.openURL();

		Navigator.openSpecificURL(url = "/group/control_panel/manage?p_p_id=com_liferay_portal_workflow_web_internal_portlet_UserWorkflowPortlet&p_p_lifecycle=0");
	}

	@summary = "Default summary"
	macro openMyWorkflowTasks() {
		Navigator.openURL();

		Navigator.openSpecificURL(url = "/web/guest/manage?p_p_id=com_liferay_portal_workflow_task_web_portlet_MyWorkflowTaskPortlet&p_p_lifecycle=0");
	}

	@summary = "Default summary"
	macro openObjectAdmin(baseURL = null) {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/guest/~/control_panel/manage?p_p_id=com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet");
	}

	@summary = "Default summary"
	macro openSubmissions() {
		Navigator.openSpecificURL(url = "/group/control_panel/manage?p_p_id=com_liferay_portal_workflow_web_internal_portlet_ControlPanelWorkflowInstancePortlet&p_p_lifecycle=0&p_p_state=maximized");
	}

	@summary = "Default summary"
	macro openWorkflowProcessBuilderConfiguration() {
		Navigator.openSpecificURL(url = "/group/control_panel/manage?p_p_id=com_liferay_portal_workflow_web_portlet_ControlPanelWorkflowPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_com_liferay_portal_workflow_web_portlet_ControlPanelWorkflowPortlet_tab=configuration");
	}

	@summary = "Default summary"
	macro publishObjectViaAPI(userPassword = null, objectName = null, userEmailAddress = null) {
		JSONObject.publishObject(
			objectName = ${objectName},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	@summary = "Default summary"
	macro publishObjectViaUI() {
		PortletEntry.publish();

		Alert.viewSuccessMessage();

		WaitForElementNotPresent(locator1 = "Message#SUCCESS");

		WaitForPageLoad();
	}

	@summary = "Default summary"
	macro saveCustomObject() {
		Click(locator1 = "ObjectAdmin#SAVE_CUSTOM_OBJECT");
	}

	@summary = "Default summary"
	macro searchInDefinePermissions(search = null) {
		Type(
			locator1 = "RolesPermissionsNavigation#SEARCH_FIELD",
			value1 = ${search});

		AssertClick(
			key_navItem = ${search},
			locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM",
			value1 = ${search});
	}

	@summary = "Default summary"
	macro selectActionsOnRoles(actionsList = null) {
		for (var actions : list ${actionsList}) {
			Click(
				key_actionName = ${actions},
				locator1 = "ObjectAdmin#SELECT_ACTION_ON_REGULAR_ROLES");
		}

		Click(locator1 = "Button#SAVE");
	}

	@summary = "Default summary"
	macro selectAttachmentFileInObjectEntryViaUI(fileName = null, objectName = null, objectEntryId = null) {
		ObjectAdmin.goToCustomObject(objectName = ${objectName});

		Click(
			key_entry = ${objectEntryId},
			locator1 = "ObjectPortlet#ENTRY_VALUE");

		var filePath = TestCase.getDependenciesDirPath(fileName = ${fileName});

		UploadDependencyFile.uploadArchiveFile(fileName = ${fileName});

		WaitForSPARefresh();

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro selectCategoryInObjectEntry(vocabularyName = null, categoryNameList = null) {
		SelectFrameTop();

		Click(
			key_fieldLabel = ${vocabularyName},
			key_text = "Select",
			locator1 = "Button#ANY_WITH_LABEL");

		AssetCategorization.selectCategories(categoryNameList = ${categoryNameList});
	}

	@summary = "Default summary"
	macro selectDropdownItem(optionName = null,labelName = null) {
		Click(
			key_labelName = ${labelName},
			locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON");

		Click.javaScriptClick(
			key_optionName = ${optionName},
			locator1 = "ObjectAdmin#CLAY_GENERIC_DROPDOWN_ITEM");
	}

	@summary = "Default summary"
	macro selectKebabMenuOption(kebabOption = null) {
		WaitForElementPresent(locator1 = "ObjectAdmin#KEBAB_MENU");

		Click(locator1 = "ObjectAdmin#KEBAB_MENU");

		ClickNoError(
			key_kebabOption = ${kebabOption},
			locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");
	}

	@summary = "Default summary"
	macro selectMySite(site = null) {
		if (IsElementNotPresent(locator1 = "ProductMenu#TOGGLE")) {
			ApplicationsMenu.gotoSite(site = ${site});
		}

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.openWorkspace();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Navigator.gotoNavItem(navItem = "My Sites");

		SiteSelector.selectSite(site = ${site});
	}

	@summary = "Default summary"
	macro selectObjectScope(optionName = null) {
		Click(
			key_labelName = "Scope",
			locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON");

		if (${optionName} == "Company") {
			Click(
				index = 1,
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM_SPECIFIC",
				value1 = "Company");
		}

		if (${optionName} == "Site") {
			Click(
				index = 2,
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM_SPECIFIC",
				value1 = "Company");
		}
	}

	@summary = "Default summary"
	macro selectSpecificKebabMenuOption(kebabOption = null, objectLabel = null) {
		Click(
			key_objectLabel = ${objectLabel},
			locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

		ClickNoError(
			key_kebabOption = ${kebabOption},
			locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");
	}

	@summary = "Default summary"
	macro setAccountRestrictionViaAPI(objectName = null) {
		JSONObject.setAccountRestriction(objectName = ${objectName});
	}

	@summary = "Default summary"
	macro viewCategorizationInObjectEntry() {
		AssertVisible(locator1 = "ObjectAdmin#CATEGORIZATION_TITLE_INTO_OBJECT");

		AssertVisible(locator1 = "AssetCategorization#TAGS_FIELD");

		AssertVisible(
			key_vocabularyName = "Topic",
			locator1 = "AssetCategorization#CATEGORIES_FIELD");
	}

	@summary = "Default summary"
	macro viewDescriptionForEachFieldType() {
		ObjectAdmin.assertFieldDescription(
			description = "Add a long integer up to 16 digits.",
			type = "Long Integer");

		ObjectAdmin.assertFieldDescription(
			description = "Add text up to 280 characters.",
			type = "Text");

		ObjectAdmin.assertFieldDescription(
			description = "Choose from a picklist.",
			type = "Picklist");

		ObjectAdmin.assertFieldDescription(
			description = "Add a date.",
			type = "Date");

		ObjectAdmin.assertFieldDescription(
			description = "Add an integer up to nine digits.",
			type = "Integer");

		ObjectAdmin.assertFieldDescription(
			description = "Add a high precision decimal number without rounding.",
			type = "Precision Decimal");

		ObjectAdmin.assertFieldDescription(
			description = "Add a decimal number that supports fractional portions.",
			type = "Decimal");

		ObjectAdmin.assertFieldDescription(
			description = "Select between true or false.",
			type = "Boolean");

		ObjectAdmin.assertFieldDescription(
			description = "Add text up to 65,000 characters.",
			type = "Long Text");
	}

	@summary = "Default summary"
	macro viewDetails() {
		if (IsElementPresent(locator1 = "IFrame#IFRAME")) {
			SelectFrame(locator1 = "IFrame#IFRAME");

			AssertElementPresent(locator1 = "ObjectAdmin#SIDE_PANEL");

			AssertElementPresent(locator1 = "ObjectAdmin#SIDE_PANEL_TITLE");
		}
	}

	@summary = "Default summary"
	macro viewObjectAction(viewEntry = null, active = null, whenAction = null, actionDescription = null, notificationName = null, actionLabel = null, actionName = null, inputExpression = null, thenAction = null) {
		ObjectAdmin.goToActionDetails(viewEntry = ${viewEntry});

		ObjectAdmin.viewDetails();

		SelectFrame.selectFrameNoLoading(locator1 = "ObjectAction#IFRAME_SIDE_PANEL");

		if (isSet(actionLabel)) {
			AssertElementPresent(
				locator1 = "ObjectAdmin#ACTION_LABEL_FIELD",
				value1 = ${actionLabel});
		}

		if (isSet(actionName)) {
			AssertElementPresent(
				locator1 = "ObjectAdmin#ACTION_NAME_FIELD",
				value1 = ${actionName});
		}

		if (isSet(actionDescription)) {
			AssertElementPresent(
				locator1 = "ObjectAdmin#ACTION_DESCRIPTION_FIELD",
				value1 = ${actionDescription});
		}

		if (isSet(active)) {
			if (${active} == "true") {
				CreateObject.checkToggleActive();
			}
			else if (${active} == "false") {
				CreateObject.checkToggleInactive();
			}
		}

		Click(
			key_tabName = "Action Builder",
			locator1 = "ObjectAction#TAB_GENERIC");

		if (isSet(whenAction)) {
			WaitForElementPresent(
				locator1 = "ObjectAction#SELECT_TRIGGER_VALUE",
				value1 = ${whenAction});
		}

		if (isSet(inputExpression)) {
			WaitForElementPresent(
				locator1 = "ObjectAction#INPUT_EXPRESSION_VALUE",
				value1 = ${inputExpression});
		}

		if (isSet(thenAction)) {
			WaitForElementPresent(
				locator1 = "ObjectAction#SELECT_ACTION_TYPE_VALUE",
				value1 = ${thenAction});
		}

		if (${thenAction} == "Notification") {
			WaitForElementPresent(
				locator1 = "ObjectAction#SELECT_OPTION_TYPE_VALUE",
				value1 = ${notificationName});
		}

		Button.clickSave();
	}

	@summary = "Default summary"
	macro viewObjectPresentOnSite(portlet = null, category = null) {
		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = ${category});

		AssertElementPresent(
			key_portlet = ${portlet},
			locator1 = "ProductMenu#PORTLET");
	}

	@summary = "Default summary"
	macro viewOptionTitleField(optionNamePresent = null, optionNameNotPresent = null) {
		if (isSet(optionNamePresent)) {
			AssertElementPresent(
				key_optionName = ${optionNamePresent},
				locator1 = "ObjectAdmin#VIEW_OPTION_TITLE_FIELD");
		}

		if (isSet(optionNameNotPresent)) {
			AssertElementNotPresent(
				key_optionName = ${optionNameNotPresent},
				locator1 = "ObjectAdmin#VIEW_OPTION_TITLE_FIELD");
		}
	}

	@summary = "Default summary"
	macro viewSelectedTabOnObject(selectedTab = null) {
		Refresh();

		AssertElementPresent(
			key_selectedTab = ${selectedTab},
			locator1 = "ObjectAdmin#VIEW_SELECTED_TAB_ON_OBJECT");
	}

}