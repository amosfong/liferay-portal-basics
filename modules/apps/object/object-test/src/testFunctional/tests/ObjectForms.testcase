@component-name = "portal-bpm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Forms";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-139472 - Verify that 'Allow Multiple Selections' option is not available for Select From List field when a form is mapped to an object"
	@priority = 4
	test AllowMultipleSelectionsNotAvailable {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 207",
			objectName = "CustomObject207",
			pluralLabelName = "Custom Objects 207");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 207");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Picklist Test",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject207");

		FormsAdmin.addForm();

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		ObjectAdmin.selectDropdownItem(
			labelName = "Select Object",
			optionName = "Custom Object 207");

		Click(locator1 = "PopulateObjectFormsConfiguration#BUTTON_SETTINGS_FORM");

		Form.gotoAddField(fieldType = "Select from List");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Field Picklist");

		Form.gotoAdvancedTab();

		AssertNotVisible(
			key_toggleSwitch = "Allow Multiple Selections",
			locator1 = "ToggleSwitch#ENABLE_TOGGLE_SWITCH_VIA_SPAN");
	}

	@description = "LPS-139464 - Verify that it is possible to delete a form mapped to an object after adding entries on it"
	@priority = 4
	test CanDeleteFormMappedToObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 208",
			objectName = "CustomObject208",
			pluralLabelName = "Custom Objects 208");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject208");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject208");

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		ObjectAdmin.selectDropdownItem(
			labelName = "Select Object",
			optionName = "Custom Object 208");

		Click(locator1 = "PopulateObjectFormsConfiguration#BUTTON_SETTINGS_FORM");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Text",
			fieldValue = "Entry Test");

		PortletEntry.save();

		Navigator.openURL();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdmin.deleteForm(formName = "Form 1");

		AssertElementNotPresent(
			key_formName = "Form 1",
			locator1 = "FormsAdmin#FORMS_TABLE_NAME");
	}

	@description = "LPS-143064 - Verify that, when using objects as storage type, the user must be able to map to this field type to Rich Text Field and view its entries"
	@priority = 4
	test CanMapAndViewEntriesForRichTextField {
		property test.liferay.virtual.instance = "false";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151597",
			objectName = "CustomObject151597",
			pluralLabelName = "Custom Objects 151597");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "RichText",
			fieldLabelName = "Rich Text Field",
			fieldName = "richTextField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject151597");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151597");

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		ObjectAdmin.selectDropdownItem(
			labelName = "Select Object",
			optionName = "Custom Object 151597");

		Click(locator1 = "PopulateObjectFormsConfiguration#BUTTON_SETTINGS_FORM");

		Form.gotoAddField(fieldType = "Rich Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Rich Text Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.addRichTextContent(
			content = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.",
			fieldLabel = "Rich Text");

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151597");

		ObjectPortlet.viewEntry(entry = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");
	}

	@description = "LPS-142659 - Verify if it's possible to map an Object field of Clob type and view its entries (Multiple Lines)"
	@priority = 4
	test CanMapClobTypeAndViewEntriesMultipleLines {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 209",
			objectName = "CustomObject209",
			pluralLabelName = "Custom Objects 209");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject209");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject209");

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		ObjectAdmin.selectDropdownItem(
			labelName = "Select Object",
			optionName = "Custom Object 209");

		Click(locator1 = "PopulateObjectFormsConfiguration#BUTTON_SETTINGS_FORM");

		Form.gotoAddField(fieldType = "Text");

		FormFields.selectTextFieldLineOption(textFieldLineOption = "Multiple Lines");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editClobText(fieldLong = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject209");

		ObjectPortlet.viewEntry(entry = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");
	}

	@description = "LPS-142659 - Verify if it's possible to map an Object field of Clob type and view its entries (Single Line)"
	@priority = 4
	test CanMapClobTypeAndViewEntriesSingleLine {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 210",
			objectName = "CustomObject210",
			pluralLabelName = "Custom Objects 210");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject210");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject210");

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		ObjectAdmin.selectDropdownItem(
			labelName = "Select Object",
			optionName = "Custom Object 210");

		Click(locator1 = "PopulateObjectFormsConfiguration#BUTTON_SETTINGS_FORM");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Text",
			fieldValue = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");

		PortletEntry.save();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject210");

		ObjectPortlet.viewEntry(entry = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");
	}

	@description = "LPS-138495 - Verify that Picklist entries cannot be edited in the Forms Sidebar"
	@priority = 4
	test CannotEditPicklistEntries {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 211",
			objectName = "CustomObject211",
			pluralLabelName = "Custom Objects 211");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 211");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Picklist Test",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject211");

		FormsAdmin.addForm();

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		ObjectAdmin.selectDropdownItem(
			labelName = "Select Object",
			optionName = "Custom Object 211");

		Click(locator1 = "PopulateObjectFormsConfiguration#BUTTON_SETTINGS_FORM");

		Form.gotoAddField(fieldType = "Select from List");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Field Picklist");

		Form.gotoBasicTab();

		AssertNotVisible(
			key_entryLabel = "Create List",
			locator1 = "ObjectPortlet#VIEW_ENTRY_DETAILS_LABEL");
	}

	@description = "LPS-137316 - Verify it is not possible to select an unpublished Object"
	@priority = 4
	test CannotSelectUnpublishedObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 212",
			objectName = "CustomObject212",
			pluralLabelName = "Custom Objects 212");

		FormsAdmin.addForm();

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		Click(
			key_labelName = "Select Object",
			locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON");

		AssertElementNotPresent(
			key_optionName = "Custom Object 212",
			locator1 = "ObjectAdmin#CLAY_GENERIC_DROPDOWN_ITEM");
	}

	@description = "LPS-135429 - It is possible to retrieve objects data from Data Providers and use in a Select from List field in Forms"
	@priority = 4
	test CanRetrieveDataProvidersOnSelectFromListField {
		property test.liferay.virtual.instance = "false";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 213",
			objectName = "CustomObject213",
			pluralLabelName = "Custom Objects 213");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject213");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject213");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customField",
			objectName = "CustomObject213",
			value = "Entry Test");

		FormsAdmin.enableLocalNetworkDataProvider();

		FormsAdminNavigator.gotoRESTDataProvider();

		FormsAdmin.editDataProvider(
			name = "Object Entries",
			outputParameterLabel = "Entry",
			outputParameterName = "Object Name",
			outputParameterPath = "$.items..customField",
			outputParameterType = "List",
			password = PropsUtil.get("default.admin.password"),
			url = "http://localhost:8080/o/c/customobject213s",
			username = "test@liferay.com");

		PortletEntry.save();

		WaitForSPARefresh();

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(fieldType = "Select from List");

		var fieldNameDataProvider = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Data Provider Select Field");

		Form.editFieldDataProvider(
			dataProvider = "Object Entries",
			dataProviderOutput = "Entry");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		ObjectAdmin.selectDropdownItem(
			labelName = "Data Provider Select Field",
			optionName = "Entry Test");

		AssertTextEquals(
			key_labelName = "Data Provider Select Field",
			locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON",
			value1 = "Entry Test");
	}

	@description = "LPS-135429 - It is possible to retrieve objects data from Data Providers and use in a Text field in Form"
	@priority = 4
	test CanRetrieveDataProvidersOnTextField {
		property test.liferay.virtual.instance = "false";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 214",
			objectName = "CustomObject214",
			pluralLabelName = "Custom Objects 214");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject214");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject214");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject214",
			value = "Entry Test");

		FormsAdmin.enableLocalNetworkDataProvider();

		FormsAdminNavigator.gotoRESTDataProvider();

		FormsAdmin.editDataProvider(
			name = "Object Entries",
			outputParameterLabel = "Entry",
			outputParameterName = "Object Name",
			outputParameterPath = "$.items..customField",
			outputParameterType = "List",
			password = PropsUtil.get("default.admin.password"),
			url = "http://localhost:8080/o/c/customobject214s",
			username = "test@liferay.com");

		PortletEntry.save();

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(fieldType = "Text");

		Form.gotoAutocompleteTab();

		Form.enableAutocompleteConfiguration();

		Form.editTextFieldDataProvider(
			dataProvider = "Object Entries",
			dataProviderOutput = "Entry");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Text",
			fieldValue = "Entry");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormsAdminNavigator.gotoEntries();

		FormViewBuilder.viewEntriesTitle(key_entriesTitle = "Entry");
	}

	@description = "Verify that an email is sent when an object entry is added to a form using the object's storage type"
	@priority = 5
	test CanSendFormEmailWhenItIsRelatedWithObject {
		property test.smtp.server.enabled = "true";

		task ("Given a custom object definition with a text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text Field",
				fieldName = "text",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("And given that a form is configured to use the object's storage type") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form name");

			PopulateObjectFormsConfiguration.openFormSettings();

			ObjectAdmin.selectDropdownItem(
				currentOption = "Default",
				labelName = "Select a Storage Type",
				optionName = "Object");

			ObjectAdmin.selectDropdownItem(
				currentOption = "Choose an Option",
				labelName = "Select Object",
				optionName = "Custom Object");

			Click(locator1 = "PopulateObjectFormsConfiguration#BUTTON_SETTINGS_FORM");

			Form.gotoAddField(fieldType = "Text");

			PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Text Field");

			PopulateObjectFormsConfiguration.openFormSettings();
		}

		task ("and Given a form notification") {
			Form.configureEmailNotifications(
				fromAddress = "test@liferay.com",
				fromName = "Sender Name",
				subject = "Form Subject",
				toAddress = "formreviewer@liferay.com");

			Form.publishForm();
		}

		task ("and Given the form on a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Form Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Form Page",
				widgetName = "Form");

			FormPortletConfiguration.selectFormOnAPage(
				formName = "Form name",
				pageName = "Form Page");

			FormPortlet.waitFormRenderer(text = "Submit");
		}

		task ("When the user adds an object entry") {
			Navigator.gotoPage(pageName = "Form Page");

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Entry test");

			AssertClick(
				locator1 = "Button#SAVE",
				value1 = "Save");

			Alert.viewSuccessMessage();
		}

		task ("Then an form email is sent") {
			MockMock.viewMail(
				asset = "Form Subject",
				content = "Entry test",
				recipient = "formreviewer@liferay.com",
				sender = "Sender Name",
				subject = "Form Subject");
		}
	}

	@description = "LPS-139692 - Verify that 'Select Object' field is required"
	@priority = 4
	test SelectObjectFieldRequired {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.openFormSettings();

		ObjectAdmin.selectDropdownItem(
			labelName = "Select a Storage Type",
			optionName = "Object");

		Button.clickDone();

		PopulateObjectFormsConfiguration.publishFormObject();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "You must define an object for the selected storage type.");
	}

}