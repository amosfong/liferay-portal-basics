@component-name = "portal-bpm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	static var deleteEntry = "";
	static var tearDownFieldName = "";
	static var tearDownObjectName = "";
	static var tearDownEntryValue = "";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		PortalSettings.gotoConfiguration(
			configurationCategory = "Feature Flags",
			configurationName = "Beta",
			configurationScope = "Virtual Instance Scope");

		Check.checkToggleSwitch(
			key_featureFlag = "LPS-135430",
			locator1 = "ToggleSwitch#ENABLE_BETA_TOGGLE_SWITCH");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Third Party",
			configurationName = "Salesforce Integration",
			configurationScope = "Site Scope");

		ObjectSalesforce.configureSalesforce();
	}

	tearDown {
		if (${deleteEntry} == "true") {
			JSONObject.deleteObjectEntryByERC(
				fieldName = ${tearDownFieldName},
				objectName = ${tearDownObjectName},
				value = ${tearDownEntryValue});
		}

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-162131 Verify CRUD functionality with a created custom object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithCreatedCustomObject {
		property portal.acceptance = "true";

		task ("Given a created custom object with the storage type set to Salesforce") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.addObjectWithStorageType(
				fieldLabelName = "Poshi Test",
				pluralLabelName = "Poshi Tests",
				storageType = "Salesforce");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Title",
				fieldName = "title",
				fieldType = "String",
				isRequired = "false",
				objectName = "PoshiTest");

			ObjectAdmin.publishObjectViaAPI(objectName = "PoshiTest");
		}

		task ("And given the object's external reference code matches a Salesforce custom object") {
			ObjectPortlet.selectCustomObject(label = "Poshi Test");

			ObjectAdmin.selectDropdownItem(
				labelName = "Panel Link",
				optionName = "Object");

			CreateObject.saveObject();

			ObjectAdmin.editExternalReferenceCode(externalReferenceCode = "Poshi_Test__c");
		}

		task ("And given a text field whose external reference code matches a custom field from the Salesforce custom object") {
			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Title");

			PortletEntry.inputText(
				fieldLabel = "External Reference Code",
				text = "Title__c");

			CreateObject.saveObject();
		}

		task ("When user navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");
		}

		task ("Then the user is able to read entries") {
			AssertElementPresent(
				key_entry = "CanCreateObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanViewEntryFromSalesforceEdited",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanDeleteObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			ObjectPortlet.addSingleFieldEntryViaUI(entry = "New Entry LPS-162131");

			var deleteEntry = "true";
			var tearDownFieldName = "title";
			var tearDownObjectName = "PoshiTest";
			var tearDownEntryValue = "New Entry LPS-162131";

			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");

			AssertElementPresent(
				key_entry = "New Entry LPS-162131",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "New Entry LPS-162131");

			Type(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = "Entry Updated LPS-162131");

			PortletEntry.save();

			var tearDownEntryValue = "Entry Updated LPS-162131";

			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");

			AssertElementPresent(
				key_entry = "Entry Updated LPS-162131",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Entry Updated LPS-162131");

			var deleteEntry = "";

			AssertElementNotPresent(
				key_entry = "Entry Updated LPS-162131",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-185429 Verify CRUD functionality with a created standard object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithCreatedStandardObject {
		task ("Given a created custom object with the storage type set to Salesforce") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.addObjectWithStorageType(
				fieldLabelName = "Contact",
				pluralLabelName = "Contacts",
				storageType = "Salesforce");

			ObjectPortlet.selectCustomObject(label = "Contact");

			ObjectAdmin.selectDropdownItem(
				labelName = "Panel Link",
				optionName = "Object");

			CreateObject.saveObject();

			ObjectAdmin.addObjectFieldViaAPI(
				externalReferenceCode = "Email",
				fieldBusinessType = "Text",
				fieldLabelName = "Email",
				fieldName = "email",
				fieldType = "String",
				isRequired = "false",
				objectName = "Contact");

			ObjectAdmin.addObjectFieldViaAPI(
				externalReferenceCode = "FirstName",
				fieldBusinessType = "Text",
				fieldLabelName = "First Name",
				fieldName = "firstName",
				fieldType = "String",
				isRequired = "false",
				objectName = "Contact");

			ObjectAdmin.addObjectFieldViaAPI(
				externalReferenceCode = "LastName",
				fieldBusinessType = "Text",
				fieldLabelName = "Last Name",
				fieldName = "lastName",
				fieldType = "String",
				isRequired = "true",
				objectName = "Contact");

			ObjectAdmin.addObjectFieldViaAPI(
				externalReferenceCode = "Phone",
				fieldBusinessType = "Text",
				fieldLabelName = "Phone",
				fieldName = "phone",
				fieldType = "String",
				isRequired = "false",
				objectName = "Contact");

			ObjectAdmin.publishObjectViaAPI(objectName = "Contact");
		}

		task ("And given the object's external reference code matches a Salesforce standard object") {
			ObjectAdmin.editExternalReferenceCode(externalReferenceCode = "Contact");
		}

		task ("When the user navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "Contact");
		}

		task ("Then the user is able to read entries") {
			AssertElementPresent(
				key_entry = "test.user@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "hello.world.edit@gmail.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "upgraded.contact@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "a@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			LexiconEntry.gotoAdd();

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "Last Name LPS-185429");

			CreateObject.saveObject();

			var deleteEntry = "true";
			var tearDownFieldName = "lastName";
			var tearDownObjectName = "contact";
			var tearDownEntryValue = "Last Name LPS-185429";

			Navigator.gotoBack();

			WaitForElementPresent(
				key_entry = "Last Name LPS-185429",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "Last Name LPS-185429");

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "Last Name Updated LPS-185429");

			CreateObject.saveObject();

			var tearDownEntryValue = "Last Name Updated LPS-185429";

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "Last Name Updated LPS-185429",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Last Name Updated LPS-185429");

			var deleteEntry = "";

			AssertElementNotPresent(
				key_entry = "Last Name Updated LPS-185429",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-165252 - Verify CRUD functionality with an imported custom object that is mapped to a form container"
	@priority = 5
	test AssertCRUDWithFormContainer {
		property portal.acceptance = "true";

		task ("Given an imported custom object with the storage type as Salesforce") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedCustomObjectWithSalesforceStorageType",
				objectName = "PoshiTest");

			ObjectAdmin.publishObjectViaAPI(objectName = "PoshiTest");
		}

		task ("And given a page with a form container fragment mapped with the custom object") {
			HeadlessSite.addSite(siteName = "Test Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.editFormContainer(contentType = "Poshi Test");

			PageEditor.publish();
		}

		task ("When the user navigates to the page and creates an entry via the form container") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			InputField.editText(
				fieldLabel = "Title",
				text = "Entry added on form container");

			Button.clickSubmitButton();

			var deleteEntry = "true";
			var tearDownFieldName = "title";
			var tearDownObjectName = "PoshiTest";
			var tearDownEntryValue = "Entry added on form container";
		}

		task ("Then the entry is created") {
			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");

			ObjectPortlet.viewEntry(entry = "Entry added on form container");
		}

		task ("and When the user deletes the entry") {
			ObjectPortlet.deleteEntry(entry = "Entry added on form container");

			var deleteEntry = "";
		}

		task ("Then the entry is deleted") {
			AssertElementNotPresent(
				key_entry = "Entry added on form container",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-185427 Verify CRUD functionality with an imported custom object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithImportedCustomObject {
		property portal.acceptance = "true";

		task ("Given an imported custom object whose external reference code matches a Salesforce custom object") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedCustomObjectWithSalesforceStorageType",
				objectName = "PoshiTest");

			ObjectAdmin.publishObjectViaAPI(objectName = "PoshiTest");
		}

		task ("When the user navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");
		}

		task ("Then the user is able to read entries") {
			AssertElementPresent(
				key_entry = "CanCreateObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanViewEntryFromSalesforceEdited",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanDeleteObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			ObjectPortlet.addSingleFieldEntryViaUI(entry = "New Entry LPS-185427");

			var deleteEntry = "true";
			var tearDownFieldName = "title";
			var tearDownObjectName = "PoshiTest";
			var tearDownEntryValue = "New Entry LPS-185427";

			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");

			AssertElementPresent(
				key_entry = "New Entry LPS-185427",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "New Entry LPS-185427");

			Type(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = "Entry Updated LPS-185427");

			PortletEntry.save();

			var tearDownEntryValue = "Entry Updated LPS-185427";

			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");

			AssertElementPresent(
				key_entry = "Entry Updated LPS-185427",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Entry Updated LPS-185427");

			var deleteEntry = "";

			AssertElementNotPresent(
				key_entry = "Entry Updated LPS-185427",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-185428 Verify CRUD functionality with an imported standard object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithImportedStandardObject {
		property portal.acceptance = "quarantine";
		property portal.upstream = "quarantine";

		task ("Given an imported standard object with storage type as Salesforce") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedStandardObjectWithSalesforceStorageType",
				objectName = "Contact");

			ObjectAdmin.publishObjectViaAPI(objectName = "Contact");
		}

		task ("When navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "Contact");
		}

		task ("Then is possible to read entries") {
			AssertElementPresent(
				key_entry = "a@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "123-456-7890",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "World",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "Guest",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			LexiconEntry.gotoAdd();

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "Last Name LPS-185428");

			CreateObject.saveObject();

			var deleteEntry = "true";
			var tearDownFieldName = "lastName";
			var tearDownObjectName = "contact";
			var tearDownEntryValue = "Last Name LPS-185428";

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "Last Name LPS-185428",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "Last Name LPS-185428");

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "Last Name Updated LPS-185428");

			CreateObject.saveObject();

			var tearDownEntryValue = "Last Name Updated LPS-185428";

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "Last Name Updated LPS-185428",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Last Name Updated LPS-185428");

			var deleteEntry = "";

			AssertElementNotPresent(
				key_entry = "Last Name Updated LPS-185428",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

}