@component-name = "portal-bpm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		Picklist.deleteAllPicklistsViaAPI();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-136595 - Verify it is possible to cancel the creation of a Picklist"
	@priority = 4
	test CanCancelCreatePicklist {
		Picklist.gotoPicklists();

		Picklist.cancelPicklist(picklistName = "Picklist Test");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-136595 - Verify it is possible to cancel the creation of a Picklist item"
	@priority = 4
	test CanCancelCreatePicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(
			picklistItemKey = "PicklistItemKeyTest",
			picklistItemName = "Picklist Item Name Test");

		Picklist.cancelPicklistButton();

		Picklist.assertPicklistItemNotPresent(
			picklistItemKey = "PicklistItemKeyTest",
			picklistItemName = "Picklist Item Name Test");
	}

	@description = "LPS-136595 - Verify it is possible to cancel the update of a Picklist"
	@priority = 4
	test CanCancelUpdatePicklist {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.updatePicklistName(picklistName = "Update Picklist Test");

		Button.clickCancel();

		Picklist.assertPicklistNotPresent(picklistName = "Update Picklist Test");
	}

	@description = "LPS-193364 - Verify the user can create a custom picklist and an object entry with an item from the picklist"
	@priority = 4
	test CanCreateObjectEntryWithPicklist {
		task ("Given a custom picklist with several items") {
			Picklist.addPicklistViaAPI(picklistName = "Picklist 193364");

			for (var itemName : list "1,2,3,4,5") {
				Picklist.addPicklistItemViaAPI(
					itemKey = "item${itemName}",
					itemName = "Item ${itemName}",
					picklistName = "Picklist 193364");
			}
		}

		task ("and Given the picklist has the custom label") {
			Picklist.gotoPicklists();

			AssertTextEquals(
				key_label = "Custom",
				locator1 = "Picklist#PICKLIST_SOURCE",
				value1 = "Custom");
		}

		task ("and Given a custom object definition with a picklist field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 193364",
				objectName = "CustomObject193364",
				pluralLabelName = "Custom Objects 193364");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 193364");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "List Field",
				fieldPicklist = "Picklist 193364",
				fieldType = "Picklist",
				itemName = "Item 3",
				markAsState = "true");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject193364");
		}

		task ("When the user creates an object entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject193364");

			LexiconEntry.gotoAdd();
		}

		task ("Then the user is able to choose from the items in the picklist") {
			ObjectAdmin.selectDropdownItem(
				labelName = "List Field",
				optionName = "Item 2");

			PortletEntry.save();
		}

		task ("and Then the object entry value on the table is the picklist item") {
			Navigator.gotoBack();

			ObjectPortlet.viewEntryDetails(entry = "Item 2");
		}
	}

	@description = "LPS-152677 - Verify that it's possible to create an object with a state added to the picklist"
	@priority = 4
	test CanCreateObjectWithState {
		task ("Add a Custom Picklist and Item (via API)") {
			Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

			Picklist.addPicklistItemViaAPI(
				itemKey = "PicklistItemTest",
				itemName = "Picklist Item Test",
				picklistName = "Picklist Test");
		}

		task ("Add a Custom Object and Custom Picklist (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161898",
				objectName = "CustomObject161898",
				pluralLabelName = "Custom Objects 161898");
		}

		task ("Go to Custom Object and create a Custom Picklist Field (check mask as state)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161898");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Field Picklist",
				fieldPicklist = "Picklist Test",
				fieldType = "Picklist",
				itemName = "Picklist Item Test",
				markAsState = "true");

			Refresh();
		}

		task ("Assert that Custom Picklist Field is present and publish") {
			ObjectAdmin.assertObjectField(
				fieldLabel = "Field Picklist",
				fieldType = "Picklist");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161898");
		}

		task ("Go to State Manager tab and assert Picklist") {
			ObjectAdmin.goToStateManagerTab();

			ObjectAdmin.goToFieldsDetails(label = "Field Picklist");

			AssertElementPresent(
				key_stateName = "Picklist Item Test",
				locator1 = "ObjectAdmin#VIEW_STATE_NAME");
		}

		task ("Verify it's possible to add an entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161898");

			LexiconEntry.gotoAdd();

			FormFields.viewRequiredAsterisk();

			AssertTextEquals(
				key_labelName = "Field Picklist",
				locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON",
				value1 = "Picklist Item Test");

			PortletEntry.save();
		}

		task ("Assert that entry was added") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161898");

			ObjectPortlet.viewEntry(entry = "Picklist Item Test");
		}
	}

	@description = "LPS-136595 - Verify it is possible to create an item for a Picklist"
	@priority = 5
	test CanCreatePicklistItem {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(picklistItemName = "Picklist Item Name Test");

		Picklist.clickSaveButton();

		Picklist.assertPicklistItem(
			picklistItemKey = "PicklistItemNameTest",
			picklistItemName = "Picklist Item Name Test");
	}

	@description = "LPS-136595 - Verify it is possible to delete a Picklist"
	@priority = 5
	test CanDeletePicklist {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "Delete",
			picklistName = "Picklist Test");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-152677 - Verify that it's possible to edit an object with a state added to the picklist"
	@priority = 4
	test CanEditObjectWithState {
		task ("Add a Custom Picklist and Items (via API)") {
			Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

			for (var number : list "1,2") {
				Picklist.addPicklistItemViaAPI(
					itemKey = "PicklistItemTest${number}",
					itemName = "Picklist Item Test ${number}",
					picklistName = "Picklist Test");
			}
		}

		task ("Add a Custom Object and Custom Picklist (via API)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161902",
				objectName = "CustomObject161902",
				pluralLabelName = "Custom Objects 161902");
		}

		task ("Go to Custom Object and create a Custom Picklist Field (check mask as state)") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161902");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Field Picklist",
				fieldPicklist = "Picklist Test",
				fieldType = "Picklist",
				itemName = "Picklist Item Test 1",
				markAsState = "true");
		}

		task ("Publish the Custom Object and assert that is possible to edit state") {
			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161902");

			ObjectAdmin.goToFieldsDetails(label = "Field Picklist");

			Form.gotoAdvancedTab();

			ObjectAdmin.selectDropdownItem(
				labelName = "Input as Value",
				optionName = "Picklist Item Test 2");

			PortletEntry.save();
		}

		task ("Go to State Manager tab and assert Picklist") {
			ObjectAdmin.goToStateManagerTab();

			ObjectAdmin.goToFieldsDetails(label = "Field Picklist");

			for (var number : list "1,2") {
				AssertElementPresent(
					key_stateName = "Picklist Item Test ${number}",
					locator1 = "ObjectAdmin#VIEW_STATE_NAME");
			}
		}

		task ("Verify it's possible to add an entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161902");

			LexiconEntry.gotoAdd();

			FormFields.viewRequiredAsterisk();

			AssertTextEquals(
				key_labelName = "Field Picklist",
				locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON",
				value1 = "Picklist Item Test 2");

			PortletEntry.save();
		}

		task ("Assert that entry was added") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161902");

			ObjectPortlet.viewEntry(entry = "Picklist Item Test 2");
		}
	}

	@description = "LPS-136595 - Verify it is not possible to add special characters for the Key field for a Picklist item"
	@priority = 3
	test CannotAddSpecialCharacterForPicklistItemKeyField {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(
			picklistItemKey = "key@",
			picklistItemName = "Picklist Item Name Test");

		Picklist.clickSaveButton();

		Picklist.assertPicklistMessage(picklistMessage = "Key must only contain letters and digits");
	}

	@description = "LPS-136595 - Verify it is not possible to leave Key field empty for a Picklist item"
	@priority = 4
	test CannotLeavePicklistItemKeyFieldEmpty {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(
			picklistItemKey = "",
			picklistItemName = "Picklist Item Name Test");

		Picklist.clickSaveButton();

		AssertElementPresent(
			key_fieldLabel = "Key",
			locator1 = "FieldBase#ERROR_MESSAGE_REQUIRED_FIELD");
	}

	@description = "LPS-136595 - Verify it is not possible to leave Name field empty for a Picklist item"
	@priority = 4
	test CannotLeavePicklistItemNameFieldEmpty {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(picklistItemKey = "PicklistItemKeyTest");

		Picklist.clickSaveButton();

		AssertElementPresent(
			key_fieldLabel = "Name",
			locator1 = "FieldBase#ERROR_MESSAGE_REQUIRED_FIELD");
	}

	@description = "LPS-136595 - Verify it is not possible to leave Name field empty for Picklist"
	@priority = 4
	test CannotLeavePicklistNameFieldEmpty {
		Picklist.gotoPicklists();

		Click.javaScriptClick(locator1 = "Picklist#ADD_PICKLIST_BUTTON");

		Type(
			locator1 = "Picklist#ADD_PICKLIST_NAME",
			value1 = "");

		Button.clickSave();

		AssertElementPresent(
			key_fieldLabel = "Name",
			locator1 = "FieldBase#ERROR_MESSAGE_REQUIRED_FIELD");
	}

	@description = "LPS-136595 - Verify it is not possible to update a Picklist item's key"
	@priority = 4
	test CannotUpdatePicklistItemKey {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "itemKeyName",
			itemName = "Picklist Item Name Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.optionsPicklistItem(
			itemKey = "itemKeyName",
			menuItem = "View");

		Picklist.assertDisableKey(keyName = "itemKeyName");
	}

	@description = "LPS-136595 - Verify it is possible to search for a Picklist"
	@priority = 4
	test CanSearchPicklist {
		Picklist.addPicklistViaAPI(picklistName = "Picklist 1");

		Picklist.addPicklistViaAPI(picklistName = "Test 2");

		Picklist.gotoPicklists();

		Picklist.searchPicklist(picklistName = "Test 2");

		Picklist.assertPicklist(picklistName = "Test 2");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist 1");
	}

	@description = "LPS-136595 - Verify it is possible to search for a Picklist item"
	@priority = 4
	test CanSearchPicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "ItemTest1",
			itemName = "Picklist Item 1",
			picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "ItemTest2",
			itemName = "Test 2",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.searchPicklistItem(picklistItemName = "Test 2");

		Picklist.assertPicklistItem(
			picklistItemKey = "ItemTest2",
			picklistItemName = "Test 2");

		Picklist.assertPicklistItemNotPresent(
			picklistItemKey = "ItemTest1",
			picklistItemName = "Picklist Item 1");
	}

	@description = "LPS-136595 - Verify it is possible to set a different language for Picklists item's name"
	@priority = 3
	test CanSetDifferentPicklistItemNameLanguage {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "itemTest",
			itemName = "Picklist Item",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.optionsPicklistItem(
			itemKey = "itemTest",
			menuItem = "View");

		Picklist.addLanguageOnPicklistItem(
			itemName = "Teste de entrada",
			newLanguage = "pt_BR");

		PortletEntry.save();

		Refresh();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.optionsPicklistItem(
			itemKey = "itemTest",
			menuItem = "View");

		Picklist.assertPicklistItemByLanguage(
			nameItem = "Teste de entrada",
			newLanguage = "pt_BR");
	}

	@description = "LPS-136595 - Verify it is possible to set a different language for Picklists item's name when updating it"
	@priority = 4
	test CanSetDifferentPicklistItemNameLanguageWhenUpdating {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.addPicklistItemWithTranslationViaUI(
			defaultLanguage = "en_US",
			newItemName = "Teste na lista",
			newLanguage = "pt_BR",
			picklistItemName = "Item Test");

		Picklist.clickSaveButton();

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.optionsPicklistItem(
			itemKey = "ItemTest",
			menuItem = "View");

		Picklist.assertItemNameAndItemKeyOnModal(
			itemKey = "ItemTest",
			itemName = "Item Test");

		Picklist.assertPicklistItemByLanguage(
			nameItem = "Teste na lista",
			newLanguage = "pt_BR");
	}

	@description = "LPS-136595 - Verify it is possible to set a different language for a Picklist name"
	@priority = 3
	test CanSetDifferentPicklistNameLanguage {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.addLanguageOnPicklist(
			itemName = "Teste na lista",
			newLanguage = "pt_BR");

		PortletEntry.save();

		Refresh();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.assertPicklistNameByLanguage(
			nameItem = "Teste na lista",
			newLanguage = "pt_BR");
	}

	@description = "LPS-136595 - Verify it is possible to update a Picklist item's name"
	@priority = 5
	test CanUpdatePicklistItemName {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "entryTest",
			itemName = "Entry Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.assertPicklistItemInTable(
			picklistItemKey = "entryTest",
			picklistItemName = "Entry Test");

		Picklist.updatePicklistItemName(
			itemkey = "entryTest",
			newItemName = "Update Entry");

		PortletEntry.save();

		Refresh();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.assertPicklistItemInTable(
			picklistItemKey = "entryTest",
			picklistItemName = "Update Entry");
	}

	@description = "LPS-136595 - Verify it is possible to update a Picklist name"
	@priority = 5
	test CanUpdatePicklistName {
		property portal.acceptance = "true";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.assertPicklist(picklistName = "Picklist Test");

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.updatePicklistName(picklistName = "Update Picklist");

		PortletEntry.save();

		Refresh();

		Picklist.assertPicklist(picklistName = "Update Picklist");
	}

	@description = "LPS-136595 - Verify it is possible to view a Picklist"
	@priority = 4
	test CanViewPicklist {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.assertPicklistDetails(title = "Basic Info");
	}

	@description = "LPS-136595 - Verify it is possible to view a Picklist item"
	@priority = 4
	test CanViewPicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "PicklistItemKeyTest",
			itemName = "Picklist Item Name Test",
			picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			menuItem = "View",
			picklistName = "Picklist Test");

		Picklist.optionsPicklistItem(
			itemKey = "PicklistItemKeyTest",
			menuItem = "View");

		IFrame.selectTopFrame();

		SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_ITEM_MODAL");

		AssertValue(
			key_selectField = "Name",
			locator1 = "Picklist#ADD_PICKLIST_ITEM_NAME_AND_KEY",
			value1 = "Picklist Item Name Test");
	}

	@description = "LPS-136595 - Verify the empty state message when there is no Picklist"
	@priority = 3
	test EmptyStateMessageDisplayedWhenNoPicklist {
		Picklist.gotoPicklists();

		AssertTextEquals(
			locator1 = "Message#EMPTY_STATE_INFO",
			value1 = "No Results Found");
	}

	@description = "LPS-136595 - Verify the empty state message when where is no items for a Picklist"
	@priority = 3
	test EmptyStateMessageDisplayedWhenNoPicklistItem {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.selectPickilistModalFrame();

		AssertTextEquals(
			locator1 = "Message#EMPTY_STATE_INFO",
			value1 = "No Results Found");
	}

	@description = "LPS-140407 - Verify that the Key field is autofilled when the Name field is filled"
	@priority = 4
	test KeyFieldIsAutofilled {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test");

		Picklist.assertItemNameAndItemKeyOnModal(
			itemKey = "itemTest",
			itemName = "Item Test");
	}

	@description = "LPS-136595 - Verify that the translated Picklist item's name will be displayed on the Object view"
	@priority = 3
	test ViewTranslatedPicklistItemNameOnObjectView {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "PicklistItemKeyTest",
			itemName = "Picklist Item Name Test",
			picklistName = "Picklist Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147729",
			objectName = "CustomObject147729",
			pluralLabelName = "Custom Objects 147729");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addLanguageOnPicklist(
			itemName = "Teste na lista",
			newLanguage = "pt_BR");

		Picklist.optionsPicklistItem(
			itemKey = "PicklistItemKeyTest",
			menuItem = "View");

		Picklist.addLanguageOnPicklistItem(
			itemName = "Teste de entrada",
			newLanguage = "pt_BR");

		PortletEntry.save();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 147729");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Picklist Test",
			fieldType = "Picklist");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject147729");

		User.openUsersAdmin();

		User.editDisplaySettingsCP(
			languageName = "português (Brasil)",
			userScreenName = "test");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject147729");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(
			labelName = "Field Picklist",
			picklistOption = "Teste de entrada",
			saveName = "Salvar");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject147729");

		ObjectPortlet.viewEntry(entry = "Teste de entrada");
	}

	@description = "LPS-136595 - Verify that the updated Picklist item's name will be displayed on the object's portlet"
	@priority = 4
	test ViewUpdatedPicklistItemNameOnObjectPortlet {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "PicklistItemKeyTest",
			itemName = "Picklist Item Name Test",
			picklistName = "Picklist Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147729",
			objectName = "CustomObject147729",
			pluralLabelName = "Custom Objects 147729");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.addLanguageOnPicklist(
			itemName = "Teste na lista",
			newLanguage = "pt_BR");

		Picklist.optionsPicklistItem(
			itemKey = "PicklistItemKeyTest",
			menuItem = "View");

		Picklist.addLanguageOnPicklistItem(
			itemName = "Teste de entrada",
			newLanguage = "pt_BR");

		PortletEntry.save();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 147729");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Picklist Test",
			fieldType = "Picklist");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject147729");

		User.openUsersAdmin();

		User.editDisplaySettingsCP(
			languageName = "português (Brasil)",
			userScreenName = "test");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject147729");

		LexiconEntry.gotoAdd();

		Click(locator1 = "ObjectAdmin#ENTRY_CHOOSE_OPTION");

		AssertVisible(
			key_picklistOption = "Teste de entrada",
			locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");
	}

	@description = "LPS-136595 - Verify that the updating or deleting a picklist item warn message is displayed"
	@priority = 3
	test WarnMessageDisplayedOnPickListItemScreen {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.selectPickilistModalFrame();

		Picklist.assertPicklistMessage(picklistMessage = "Updating or deleting a picklist item will automatically update every entry that is using the specific item value. This may affect multiple objects.");
	}

}