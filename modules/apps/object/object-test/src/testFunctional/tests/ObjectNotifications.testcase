@component-name = "portal-bpm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-161924 - Verify that it's possible to add attachments to the notification template"
	@priority = 3
	test CanAddAttachment {
		task ("Given an object with an attachment field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161924",
				objectName = "CustomObject161924",
				pluralLabelName = "Custom Objects 161924");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "From Computer And Show Files In DM",
				fieldName = "fromComputerAndShowFilesInDM",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "CustomObject161924");
		}

		task ("And given a notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				fromAddress = "test@liferay",
				fromName = "Test Test",
				name = "Notification Template");
		}

		task ("When an attachment is added to the notification template") {
			ObjectNotifications.addNotificationTemplateAttachment(
				fieldLabel = "From Computer And Show Files In DM",
				objectLabel = "Custom Object 161924");

			PortletEntry.save();
		}

		task ("Then the attachment should be present in the notification template") {
			Click(
				key_objectLabel = "Notification Template",
				locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

			MenuItem.clickNoError(menuItem = "View");

			AssertTextEquals(
				key_labelName = "Data Source",
				locator1 = "ObjectAdmin#CLAY_GENERIC_BUTTON",
				value1 = "Custom Object 161924");

			AssertElementPresent(locator1 = "ObjectNotifications#FIELD_ATTACHMENTS_OBJECT");
		}
	}

	@description = "LPS-178816 - Verify an email notification can be added to the queue using the endpoint"
	@priority = 5
	test CanAddEmailNotificationToQueueViaAPI {
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a new user with permission to view notifications and add notifications to the queue via API") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.addRegularRole(roleKey = "Regular Role");

			JSONRole.assignRoleToUser(
				roleTitle = "Regular Role",
				userEmailAddress = "userea@liferay.com");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_notification_web_internal_portlet_NotificationQueueEntriesPortlet",
				roleTitle = "Regular Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.notification.model.NotificationQueueEntry",
				roleTitle = "Regular Role");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_NOTIFICATION_QUEUE_ENTRY",
				resourceName = "com.liferay.notification.queue",
				roleTitle = "Regular Role");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("When the user adds an email notification to the queue using the endpoint") {
			ObjectNotifications.addNotificationViaAPI(
				body = "The quick brown fox jumps over the lazy dog",
				subject = "Pangram Test",
				type = "email");
		}

		task ("Then the email notification appears in the queue and an email is sent") {
			Notifications.goToNotificationQueueAdmin();

			AssertElementPresent(
				key_entryLabel = "Added via API",
				key_entryStatus = "Sent",
				locator1 = "ObjectNotifications#VIEW_NOTIFICATION_ENTRIES");

			MockMock.viewMail(
				asset = "Pangram Test",
				content = "The quick brown fox jumps over the lazy dog",
				recipient = "test@liferay",
				sender = "Liferay",
				subject = "Pangram Test");
		}
	}

	@description = "LPS-183441 - Verify the data source can be updated to use an attachment field from a different object"
	@priority = 3
	test CanChangeDataSource {
		task ("Given two custom objects, Object A and Object B, with attachment fields") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "Custom Object ${letters} 183441",
					objectName = "CustomObject${letters}183441",
					pluralLabelName = "Custom Objects ${letters} 183441");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Attachment",
					fieldLabelName = "Custom Attachment Field ${letters}",
					fieldName = "customAttachmentField${letters}",
					fieldType = "Long",
					fileSource = "userComputer",
					isRequired = "false",
					objectName = "CustomObject${letters}183441");

				ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject${letters}183441");
			}
		}

		task ("And given an email notification template using the attachment field from Object A") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				fromAddress = "[%USER_AUTHOR_FIRST_NAME%]",
				fromName = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				name = "Notification Template",
				subject = "[%USER_AUTHOR_LAST_NAME%]");

			ObjectNotifications.addNotificationTemplateAttachment(
				fieldLabel = "Custom Attachment Field A",
				objectLabel = "Custom Object A 183441");

			PortletEntry.save();
		}

		task ("When the user changes the data source of the email notification template to Object B") {
			Notifications.goToNotificationTemplateAdmin();

			LexiconEntry.gotoAdd();

			MenuItem.click(menuItem = "Email");

			ObjectAdmin.selectDropdownItem(
				labelName = "Data Source",
				optionName = "Custom Object B 183441");

			Click(locator1 = "ObjectNotifications#FIELD_ATTACHMENTS_OBJECT");
		}

		task ("Then the attachment field from Object B can be selected") {
			AssertElementPresent(
				key_fieldLabel = "Custom Attachment Field B",
				locator1 = "ObjectNotifications#FIELD_ATTACHMENTS_OBJECT_SELECT_FIELD");
		}
	}

	@description = "LPS-161917 - Verify that it's possible to create an e-mail notification template"
	@priority = 5
	test CanCreateEmailNotificationTemplate {
		property portal.acceptance = "true";

		task ("Given the user navigates to notification templates in the Control Panel") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");
		}

		task ("When the user creates a new Email Notification Template") {
			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				bcc = "test3@liferay.com",
				cc = "test2@liferay.com",
				description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
				emailBody = "Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.",
				entryTo = "test@liferay.com, test4@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("Then the email notification template is saved with the correct valuess") {
			AssertElementPresent(
				key_name = "Notification Template",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			ObjectNotifications.viewEmailNotificationTemplateDetails(
				bcc = "test3@liferay.com",
				cc = "test2@liferay.com",
				description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.",
				emailBody = "Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.",
				entryTo = "test@liferay.com, test4@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject");

			ObjectAdmin.selectDropdownItem(
				labelName = "Entity",
				optionName = "User");

			var listOfTerms = "Middle Name,Screen Name,Create Date,First Name,Last Login Date,UUID";

			for (var entityTerms : list ${listOfTerms}) {
				AssertElementPresent(
					key_termName = ${entityTerms},
					locator1 = "ObjectNotifications#ENTITY_TERMS");
			}
		}
	}

	@description = "LPS-162133 - Verify that it's possible to create a user notification template"
	@priority = 5
	test CanCreateUserNotificationTemplate {
		property portal.acceptance = "true";

		task ("Given the user navigates to Notifications Templates in the Control Panel") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");
		}

		task ("When the user adds a new user notification template") {
			ObjectNotifications.addNewNotificationTemplate(notificationType = "User Notification");

			ObjectNotifications.configureUserNotificationTemplate(
				description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
				indexRecipient = 2,
				name = "User Notification Template",
				recipientType = "User",
				subject = "Subject content",
				userName = "Test");

			PortletEntry.save();
		}

		task ("Then the user notification template is created") {
			AssertElementPresent(
				key_name = "Notification Template",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			ObjectNotifications.viewUserNotificationTemplateDetails(
				description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
				name = "User Notification Template",
				notificationType = "User Notification",
				recipientType = "User",
				subject = "Subject content");

			ObjectAdmin.selectDropdownItem(
				labelName = "Entity",
				optionName = "User");

			var listOfTerms = "Middle Name,Screen Name,Create Date,First Name,Last Login Date,UUID";

			for (var entityTerms : list ${listOfTerms}) {
				AssertElementPresent(
					key_termName = ${entityTerms},
					locator1 = "ObjectNotifications#ENTITY_TERMS");
			}
		}
	}

	@description = "LPS-161928 - Verify that it's possible to delete attachments to the notification template"
	@priority = 3
	test CanDeleteAttachment {
		task ("Given an object with an attachment field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161928",
				objectName = "CustomObject161928",
				pluralLabelName = "Custom Objects 161928");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "From Computer And Show Files In DM",
				fieldName = "fromComputerAndShowFilesInDM",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "CustomObject161928");
		}

		task ("And given a notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				fromAddress = "test@liferay",
				fromName = "Test Test",
				name = "Notification Template");
		}

		task ("And given an attachment is added to the notification template") {
			ObjectNotifications.addNotificationTemplateAttachment(
				fieldLabel = "From Computer And Show Files In DM",
				objectLabel = "Custom Object 161928");

			PortletEntry.save();
		}

		task ("When the attachment is deleted from the notification template") {
			Click(
				key_objectLabel = "Notification Template",
				locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

			MenuItem.clickNoError(menuItem = "View");

			Click(locator1 = "ObjectNotifications#DELETE_ATTACHMENT_BUTTON");
		}

		task ("Then the attachment shouldn't be present in the notification template") {
			AssertElementPresent(
				key_placeHolder = "Select a Field",
				locator1 = "TextInput#ANY_PLACEHOLDER");
		}
	}

	@description = "LPS-161919 - Verify that it's possible to delete an e-mail notification template"
	@priority = 3
	test CanDeleteEmailTemplate {
		task ("Go to Templates and add a new Notification Template") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				bcc = "test3@liferay.com",
				cc = "test2@liferay.com",
				description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
				emailBody = "Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.",
				entryTo = "test@liferay.com, test4@liferay.com",
				fromAddress = "Liferay",
				fromName = "Test Test",
				name = "Notification Template",
				subject = "Subject");

			PortletEntry.save();
		}

		task ("Delete the Notification Template") {
			ObjectNotifications.deleteNotificationTemplate(templateName = "Notification Template");
		}

		task ("Assert the Notification Template is not present") {
			Refresh();

			AssertElementNotPresent(
				key_name = "Notification Template",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@description = "LPS-161922 - Verify that it's possible to delete a notification"
	@priority = 4
	test CanDeleteNotification {
		task ("Given a notification template is created") {
			JSONObject.addEmailNotificationTemplateViaAPI(
				bcc = "bccAddress",
				bodyContent = "Email Body",
				cc = "ccAddress ",
				fromAddress = "Liferay",
				fromName = "Test Test",
				subject = "Subject",
				templateName = "Notification Template",
				toAddress = "test@liferay.com");
		}

		task ("And given an object with an attachment field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161922",
				objectName = "CustomObject161922",
				pluralLabelName = "Custom Objects 161922");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = "CustomObject161922",
				showFilesInDocumentsAndMedia = "true");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161922");
		}

		task ("And given an Action is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161922");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 161922",
				thenAction = "Notification",
				whenAction = "On After Add");
		}

		task ("When an entry is created") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject161922");

			ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

			PortletEntry.save();
		}

		task ("When the notification is generated and then deleted") {
			Notifications.goToNotificationQueueAdmin();

			ObjectNotifications.deleteNotificationEntry(
				status = "Unsent",
				triggerBy = "CustomObject161922");
		}

		task ("Then the notification is no longer present on the page") {
			AssertElementNotPresent(
				key_entryLabel = "CustomObject161922",
				key_entryStatus = "Sent",
				locator1 = "ObjectNotifications#VIEW_NOTIFICATION_ENTRIES");
		}
	}

	@description = "LPS-162133 - Verify that it's possible to delete a user notification template"
	@priority = 3
	test CanDeleteUserTemplate {
		task ("Given a user notification template") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(notificationType = "User Notification");

			ObjectNotifications.configureUserNotificationTemplate(
				description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
				indexRecipient = 2,
				name = "User Notification Template",
				recipientType = "User",
				subject = "Subject content",
				userName = "Test");

			PortletEntry.save();
		}

		task ("When delete the User Notification Template") {
			ObjectNotifications.deleteNotificationTemplate(templateName = "Notification Template");
		}

		task ("Then the User Notification Template is not present") {
			Refresh();

			AssertElementNotPresent(
				key_name = "Notification Template",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@description = "LPS-161918 - Verify that it's possible to edit an e-mail notification template"
	@priority = 3
	test CanEditEmailTemplate {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property test.smtp.server.enabled = "true";

		task ("Given a user creates an email notification template") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				emailBody = "Email Body Content",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Notification Template",
				subject = "Subject Field");

			PortletEntry.save();
		}

		task ("and Given a custom object definition") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161918",
				objectName = "CustomObject161918",
				pluralLabelName = "Custom Objects 161918");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject161918");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161918");
		}

		task ("and Given an action to send the email notification after adding an object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161918");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 161918",
				thenAction = "Notification",
				whenAction = "On After Add");
		}

		task ("When the user edits the email notification template") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.editNotificationTemplate(
				emailBody = "Email Body Content Edited",
				entryTo = "test2@liferay.com",
				externalReferenceCode = "ERC Edited",
				fromAddress = "test2@liferay.com",
				fromName = "Test Test Edited",
				name = "Notification Template Edited",
				notificationTemplateName = "Notification Template",
				subject = "Subject Field Edited");

			PortletEntry.save();
		}

		task ("Then the email notification template is updated") {
			ObjectNotifications.viewEmailNotificationTemplateDetails(
				emailBody = "Email Body Content Edited",
				entryTo = "test2@liferay.com",
				externalReferenceCode = "ERC Edited",
				fromAddress = "test2@liferay.com",
				fromName = "Test Test Edited",
				name = "Notification Template Edited",
				subject = "Subject Field Edited");
		}

		task ("and When an object entry is added") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject161918",
				value = "Trigger");
		}

		task ("Then the action is triggered and an email is sent using the updated notification template") {
			MockMock.viewMail(
				asset = "Subject Field Edited",
				content = "Email Body Content Edited",
				recipient = "test2@liferay",
				sender = "test2@liferay.com",
				subject = "Subject Field Edited");
		}
	}

	@description = "LPS-161923 - Verify that it's possible to search for notifications"
	@priority = 3
	test CanSearchForNotifications {
		task ("Given a Notification Templates") {
			Notifications.goToNotificationTemplateAdmin();

			for (var templateName : list "Test,Liferay,Site") {
				JSONObject.addEmailNotificationTemplateViaAPI(
					bcc = "bccAddress",
					bodyContent = "Email Body",
					cc = "ccAddress ",
					fromAddress = "Liferay",
					fromName = "Test Test",
					subject = "Subject",
					templateName = "Notification ${templateName}",
					toAddress = "test@liferay.com");
			}
		}

		task ("When search for Liferay") {
			Refresh();

			Type(
				locator1 = "ObjectPortlet#SEARCH_FIELD",
				value1 = "Liferay");

			KeyPress(
				locator1 = "ObjectPortlet#SEARCH_FIELD",
				value1 = "\RETURN");
		}

		task ("Then assert only Notification Liferay is present") {
			AssertElementPresent(
				key_name = "Notification Liferay",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			AssertElementNotPresent(
				key_name = "Notification Site",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			AssertElementNotPresent(
				key_name = "Notification Test",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");
		}
	}

	@description = "LPS-161920 - Verify that it's possible to send an e-mail notification via an Action"
	@priority = 5
	test CanSendEmailViaActionAdd {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a new Notification Template") {
			JSONObject.addEmailNotificationTemplateViaAPI(
				bcc = "bccAddress",
				bodyContent = "Email Body",
				cc = "ccAddress ",
				fromAddress = "Liferay",
				fromName = "CanSendEmailViaActionAdd",
				subject = "Subject",
				templateName = "Notification Template",
				toAddress = "test@liferay.com");
		}

		task ("Create a Custom Object and add a field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161920",
				objectName = "CustomObject161920",
				pluralLabelName = "Custom Objects 161920");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject161920");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161920");
		}

		task ("Add a new action") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161920");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.gotoAddObjectAction();

			ObjectAdmin.fillObjectAction(
				actionLabel = "Action Label",
				actionName = "ActionName",
				notificationName = "Notification Template",
				thenAction = "Notification",
				whenAction = "On After Add");

			PortletEntry.save();
		}

		task ("On the created Object add a Entry") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject161920",
				value = "Trigger");
		}

		task ("Then the email is received correctly on the email server") {
			MockMock.viewMail(
				asset = "Subject",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Liferay",
				subject = "Subject");
		}
	}

	@description = "LPS-173894 - Verify that it's possible to send an e-mail notification via an Action (Delete)"
	@priority = 5
	test CanSendEmailViaActionDelete {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property test.smtp.server.enabled = "true";

		task ("Given an Email Notification Template") {
			JSONObject.addEmailNotificationTemplateViaAPI(
				bcc = "bccAddress",
				bodyContent = "Email Body",
				cc = "ccAddress ",
				fromAddress = "Liferay",
				fromName = "Test Test",
				subject = "Subject",
				templateName = "Notification Template",
				toAddress = "test@liferay.com");
		}

		task ("And given a custom object with a text field and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 178781",
				objectName = "CustomObject178781",
				pluralLabelName = "Custom Objects 178781");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject178781");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject178781");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject178781",
				value = "Entry Test");
		}

		task ("And given an Action to send an email notification after deleting an object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 178781");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 178781",
				thenAction = "Notification",
				whenAction = "On After Delete");
		}

		task ("And given the Notification Queue Entry Delete Interval is set to 1 in System Settings > Notifications > Notification Queue") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Notifications",
				configurationName = "Notification Queue",
				configurationScope = "System Scope");

			SystemSettings.editTextSetting(
				settingName = "Notification Queue Entry Delete Interval",
				settingValue = 1);

			SystemSettings.saveConfiguration();
		}

		task ("When the object entry is deleted") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject178781");

			ObjectPortlet.deleteEntry(entry = "Entry Test");

			Alert.viewSuccessMessage();
		}

		task ("Then the email is received correctly on the email server") {
			MockMock.viewMail(
				asset = "Subject",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Liferay",
				subject = "Subject");
		}
	}

	@description = "LPS-178783 - Verify a standalone action can be triggered manually to send an email"
	@priority = 5
	test CanSendEmailViaActionStandalone {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property test.smtp.server.enabled = "true";

		task ("Given an Email Notification Template") {
			JSONObject.addEmailNotificationTemplateViaAPI(
				bcc = "bccAddress",
				bodyContent = "Email Body",
				cc = "ccAddress ",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				subject = "Subject",
				templateName = "Notification Template",
				toAddress = "test@liferay.com");
		}

		task ("And create a Custom Object entryCustom Object with an Action (Standalone)") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 178783",
				objectName = "CustomObject178783",
				pluralLabelName = "Custom Objects 178783");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject178783");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject178783");
		}

		task ("And add a Standalone Action") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 178783");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action name",
				active = "true",
				errorMessage = "Error",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 178783",
				thenAction = "Notification",
				whenAction = "Standalone");
		}

		task ("When the standalone action is triggered manually") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject178783");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject178783");

			Click(locator1 = "Icon#SVG_ELLIPSIS");

			Click(
				key_columnOption = "Action name",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then the email is sent") {
			Refresh();

			MockMock.viewMail(
				asset = "Subject",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject");
		}
	}

	@description = "LPS-173894 -Verify that it's possible to send an e-mail notification with Action (Update)"
	@priority = 5
	test CanSendEmailViaActionUpdate {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property test.smtp.server.enabled = "true";

		task ("Given an Email Notification Template") {
			JSONObject.addEmailNotificationTemplateViaAPI(
				bcc = "bccAddress",
				bodyContent = "Email Body",
				cc = "ccAddress ",
				fromAddress = "Liferay",
				fromName = "Test Test",
				subject = "Subject",
				templateName = "Notification Template",
				toAddress = "test@liferay.com");
		}

		task ("And given a custom object with a text field and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 178782",
				objectName = "CustomObject178782",
				pluralLabelName = "Custom Objects 178782");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject178782");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject178782");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject178782",
				value = "Entry Test");
		}

		task ("And given an Action to send an email notification after updating an object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 178782");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 178782",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("When the object entry is updated") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject178782");

			ObjectPortlet.updateEntry(
				entry = "Entry Test",
				updateEntry = "Trigger");
		}

		task ("Then the email is received correctly on the email server") {
			MockMock.viewMail(
				asset = "Subject",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Liferay",
				subject = "Subject");
		}
	}

	@description = "LPS-165849 - Verify terms from 1:M related custom objects are replaced with the correct values in an email notification"
	@priority = 5
	test CanSendEmailWithTermsFromRelatedCustomObjects {
		property custom.properties = "feature.flag.LPS-165849=true";
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given Custom Object A and Custom Object B with text fields") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "Custom Object ${letters} ",
					objectName = "CustomObject${letters}",
					pluralLabelName = "Custom Objects ${letters}");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Text Field ${letters}",
					fieldName = "customField",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject${letters}");

				ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject${letters}");
			}
		}

		task ("And given a 1:M relationship between Custom Object A and Custom Object B") {
			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObjectA",
				objectName_2 = "CustomObjectB",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");
		}

		task ("And given an email notification template using terms from both object definitions") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				emailBody = "[%RELATIONSHIP_CUSTOMOBJECTA_CUSTOMFIELD%] | [%CUSTOMOBJECTB_CUSTOMFIELD%]",
				entryTo = "[%CUSTOMOBJECTB_AUTHOR_EMAIL_ADDRESS%]",
				fromAddress = "[%RELATIONSHIP_CUSTOMOBJECTA_AUTHOR_EMAIL_ADDRESS%]",
				fromName = "[%CUSTOMOBJECTB_AUTHOR_FIRST_NAME%]",
				name = "Notification Template",
				subject = "[%RELATIONSHIP_CUSTOMOBJECTA_AUTHOR_EMAIL_ADDRESS%] | [%RELATIONSHIP_CUSTOMOBJECTA_AUTHOR_FIRST_NAME%] [%RELATIONSHIP_CUSTOMOBJECTA_AUTHOR_LAST_NAME%]");

			PortletEntry.save();
		}

		task ("And given the title field of Custom Object A is set to the text field") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object A");

			CreateObject.selectTitleField(fieldLabel = "Text Field A");

			CreateObject.saveObject();
		}

		task ("And given an action in Custom Object B to send an email notification after an entry is updated") {
			Navigator.gotoBack();

			ObjectPortlet.selectCustomObject(label = "Custom Object B");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Send email after updating entry",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "Custom Object B",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given an object entry for both object definitions") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customField",
					objectName = "CustomObject${letters}",
					value = "Entry Test ${letters}");
			}
		}

		task ("When an entry in Custom Object B is updated") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObjectB");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test B");

			ObjectPortlet.searchEntryRelationshipField(entryValue = "Entry Test A");

			PortletEntry.save();
		}

		task ("Then the action is triggered and an email is received with the terms replaced with the correct values") {
			MockMock.viewMail(
				asset = "test@liferay.com | Test Test",
				content = "Entry Test A | Entry Test B",
				recipient = "test@liferay",
				sender = "Test",
				subject = "test@liferay.com | Test Test");
		}
	}

	@description = "LPS-165849 - Verify terms from a 1:M related system object (parent) are replaced with the correct values in an email notification"
	@priority = 5
	test CanSendEmailWithTermsFromRelatedSystemObject {
		property custom.properties = "feature.flag.LPS-165849=true";
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a custom object with a text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 182606",
				objectName = "CustomObject182606",
				pluralLabelName = "Custom Objects 182606");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Text Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject182606");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject182606");
		}

		task ("And given a 1:M relationship between User and the custom object") {
			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "User",
				objectName_2 = "CustomObject182606",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");
		}

		task ("And given an email notification template using terms from both object definitions") {
			ApplicationsMenu.gotoPortlet(
				category = "Notifications",
				panel = "Control Panel",
				portlet = "Templates");

			ObjectNotifications.addNewNotificationTemplate(notificationType = "Email");

			ObjectNotifications.configureEmailNotificationTemplate(
				emailBody = "[%CUSTOMOBJECT182606_CUSTOMFIELD%]",
				entryTo = "[%CUSTOMOBJECT182606_AUTHOR_EMAIL_ADDRESS%]",
				fromAddress = "[%CUSTOMOBJECT182606_AUTHOR_EMAIL_ADDRESS%]",
				fromName = "[%RELATIONSHIP_USER_AUTHOR_FIRST_NAME%]",
				name = "Notification Template",
				subject = "[%RELATIONSHIP_USER_AUTHOR_FIRST_NAME%] [%RELATIONSHIP_USER_AUTHOR_LAST_NAME%]");

			PortletEntry.save();
		}

		task ("And given an action in the custom object to send an email notification after an entry is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 182606");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Send email after entry is created",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "Custom Object 182606",
				thenAction = "Notification",
				whenAction = "On After Add");
		}

		task ("When an entry is created") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject182606");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Text Field",
				entry = "Entry Test");

			ObjectPortlet.selectRelationshipFieldEntry(
				entry = "",
				newEntry = "Test");
		}

		task ("Then the action is triggered and an email is sent with the terms replaced with the correct values") {
			MockMock.viewMail(
				asset = "Test Test",
				content = "Entry Test",
				recipient = "test@liferay",
				sender = "Test",
				subject = "Test Test");
		}
	}

	@description = "LPS-165849 - Verify terms from a 1:M related custom object (child) are replaced with the correct values in a user notification"
	@priority = 5
	test CanSendUserNotificationWithTermsFromRelatedCustomObject {
		property custom.properties = "feature.flag.LPS-165849=true";
		property portal.acceptance = "true";

		task ("Given Custom Object A and Custom Object B with text fields") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "Custom Object ${letters}",
					objectName = "CustomObject${letters}",
					pluralLabelName = "Custom Objects ${letters} ");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Text Field ${letters}",
					fieldName = "customField",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject${letters}");

				ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject${letters}");
			}
		}

		task ("And given a 1:M relationship between Custom Object A and Custom Object B") {
			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObjectA",
				objectName_2 = "CustomObjectB",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");
		}

		task ("And given a user with an admin role") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("And given a user notification template using terms from both object definitions") {
			UserNotificationAPI.postNotificationTemplate(
				en_US = "[%RELATIONSHIP_CUSTOMOBJECTA_CUSTOMFIELD%] | [%CUSTOMOBJECTB_CUSTOMFIELD%]",
				externalReferenceCode = "ercTest",
				name = "User Notification Template",
				recipientType = "user",
				type = "userNotification",
				userScreenName = "usersn");
		}

		task ("And given the title field of Custom Object A is set to the text field") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object A");

			CreateObject.selectTitleField(fieldLabel = "Text Field A");

			CreateObject.saveObject();
		}

		task ("And given an action in Custom Object B to send an email notification after an entry is created") {
			Navigator.gotoBack();

			ObjectPortlet.selectCustomObject(label = "Custom Object B");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Send email after entry is created",
				active = "true",
				notificationName = "User Notification Template",
				objectLabel = "Custom Object B",
				thenAction = "Notification",
				whenAction = "On After Add");
		}

		task ("When the created admin user creates an entry in Custom Object B") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObjectA",
				value = "Entry Test A");

			ObjectAdmin.goToCustomObject(objectName = "CustomObjectB");

			LexiconEntry.gotoAdd();

			Type(
				key_fieldLabel = "Text Field B",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Entry Test B");

			ObjectPortlet.searchEntryRelationshipField(entryValue = "Entry Test A");

			PortletEntry.save();
		}

		task ("Then a user notification is received with the terms replaced with the correct values") {
			Navigator.gotoNotifications();

			AssertTextEquals(
				key_notificationsTitle = "Entry Test A | Entry Test B",
				locator1 = "Notifications#NOTIFICATIONS_TITLE_TEXT",
				value1 = ${key_notificationsTitle});
		}
	}

	@description = "LPS-171625 - Verify that after updating a custom object entry, triggered email notifications using Object Author and Current User terms are filled correctly for the To, From Address and From Name and Subject fields"
	@priority = 5
	test CanUseObjectAuthorAndCurrentUserTermsInEmailNotificationOnCustomObject {
		property custom.properties = "feature.flag.LPS-165849=true";
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a custom object a text field and an entry are created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 180337",
				objectName = "CustomObject180337",
				pluralLabelName = "Custom Objects 180337");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject180337");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180337");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject180337",
				value = "Before");
		}

		task ("And given an email notification template with the applicable fields filled with the Author and Current User terms") {
			JSONObject.addEmailNotificationTemplateViaAPI(
				bcc = "bccAddress",
				bodyContent = "Email Body",
				cc = "ccAddress ",
				fromAddress = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				fromName = "[%CURRENT_USER_FIRST_NAME%]",
				subject = "[%CUSTOMOBJECT180337_CUSTOMOBJECTFIELD%]",
				templateName = "Notification Template",
				toAddress = "[%CURRENT_USER_EMAIL_ADDRESS%]");
		}

		task ("And given an action to send an email notification after updating a custom object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 180337");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				notificationName = "Notification Template",
				objectLabel = "Custom Objects 180337",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given a second admin user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When the second admin user updates the custom object entry") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject180337");

			ObjectPortlet.viewEntryDetails(entry = "Before");

			ObjectAdmin.editEntryName(newEntryValue = "After");
		}

		task ("Then the email is received on the server email with the terms replaced with the correct values") {
			MockMock.viewMail(
				asset = "After",
				content = "Email Body",
				recipient = "userea@liferay",
				sender = "userea@liferay.com",
				subject = "After");
		}
	}

	@description = "LPS-171625 - Verify that after updating a system object entry, triggered email notifications using Object Author and Current User terms are filled correctly for the To, From Address, From Name and Template Body fields"
	@priority = 5
	test CanUseObjectAuthorAndCurrentUserTermsInEmailNotificationOnSystemObject {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given an email notification template with the applicable fields filled with the Author and Current User terms") {
			JSONObject.addEmailNotificationTemplateViaAPI(
				bcc = "bccAddress",
				bodyContent = "Email Body",
				cc = "ccAddress ",
				fromAddress = "[%USER_AUTHOR_FIRST_NAME%]",
				fromName = "[%CURRENT_USER_EMAIL_ADDRESS%]",
				subject = "[%USER_AUTHOR_LAST_NAME%]",
				templateName = "Notification Template",
				toAddress = "[%CURRENT_USER_EMAIL_ADDRESS%]");
		}

		task ("And given an action to send an email notification after updating a system object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				notificationName = "Notification Template",
				objectLabel = "User",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given a second admin user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When the second admin user updates the System Object entry") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			User.editUserInformation(userLastNameEdit = "edituserln");
		}

		task ("Then the email is received with the terms replaced with the correct values") {
			MockMock.viewMail(
				asset = "userln",
				content = "Email Body",
				recipient = "userea@liferay",
				sender = "userfn",
				subject = "userln");
		}
	}

	@description = "LPS-171625 - Verify that after updating a custom object entry, triggered user notifications using Object Author and Current User terms are filled correctly for the To and Subject fields"
	@priority = 5
	test CanUseObjectAuthorAndCurrentUserTermsInUserNotificationOnCustomObject {
		property portal.acceptance = "true";

		task ("Given a custom object and a entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 180339",
				objectName = "CustomObject180339",
				pluralLabelName = "Custom Objects 180339");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject180339");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180339");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject180339",
				value = "Entry Test");
		}

		task ("And given a user notification template with the applicable fields filled with the Author and Current User terms") {
			UserNotificationAPI.postNotificationTemplate(
				en_US = "[%CURRENT_USER_EMAIL_ADDRESS%] [%CURRENT_USER_FIRST_NAME%] [%CURRENT_USER_LAST_NAME%] [%CUSTOMOBJECT180339_CUSTOMFIELD%]",
				externalReferenceCode = "test",
				name = "User Notification Template",
				recipientType = "user",
				type = "userNotification",
				userScreenName = "usersn");
		}

		task ("And given an action to send a user notification after updating a custom object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 180339");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action name",
				active = "true",
				notificationName = "User Notification Template",
				objectLabel = "Custom Object 180339",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("And given a second admin user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When the second admin user updates the custom object entry") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject180339");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.editEntryName(newEntryValue = "Entry Test Edited");
		}

		task ("Then a user notification is sent with the terms replaced with the correct values") {
			Notifications.goToNotificationQueueAdmin();

			AssertTextPresent(value1 = "userea@liferay.com userfn userln Entry Test Edited");
		}
	}

}