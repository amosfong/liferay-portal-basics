@component-name = "portal-bpm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-169223 - Verify the user can add and view object entries that contain auto increment fields in page builder"
	@priority = 4
	test CanAddObjectEntryViaPageBuilder {
		task ("Given an object definition called Shirts with an auto increment field and a text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Shirt",
				objectName = "Shirt",
				pluralLabelName = "Shirts");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Size",
				fieldName = "size",
				fieldType = "String",
				isRequired = "false",
				objectName = "Shirt");

			ObjectAdmin.publishObjectViaAPI(objectName = "Shirt");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Shirt");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Identification",
				fieldType = "Auto Increment",
				initialValue = 24680,
				prefixValue = "T-Shirt-",
				suffixValue = "-Brazil");
		}

		task ("and Given two object entries") {
			for (var size : list "Small,Large") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "size",
					objectName = "Shirt",
					value = ${size});
			}
		}

		task ("and Given Shirts is mapped to a page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "guest");

			PagesAdmin.addPage(
				pageName = "Shirts Page",
				sitePageType = "Widget Page");

			PagesAdmin.configurePage(
				columnName = "1 Column",
				pageName = "Shirts Page",
				sitePageType = "Widget Page");

			Navigator.gotoPage(pageName = "Shirts Page");

			Portlet.addPG(
				pageName = "Shirts Page",
				portletName = "Shirts");
		}

		task ("When the user navigates to the page and adds an object entry") {
			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Size",
				entry = "Medium");

			PortletEntry.save();
		}

		task ("Then all three object entries are present and the auto increment values are correct") {
			Navigator.gotoPage(pageName = "Shirts Page");

			for (var identificationName : list "24680,24681,24682") {
				ObjectPortlet.viewEntry(entry = "T-Shirt-${identificationName}-Brazil");
			}
		}
	}

	@description = "LPS-169223 - Verify after importing an object entry with a modified auto increment field value, new object entries increment based off of the modified value"
	@priority = 4
	test CanIncrementAfterImportingObjectEntry {
		task ("Given an object definition called Shoes that contains an auto-increment field and a text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Shoe",
				objectName = "Shoe",
				pluralLabelName = "Shoes");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Color",
				fieldName = "color",
				fieldType = "String",
				isRequired = "true",
				objectName = "Shoe");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "AutoIncrement",
				fieldLabelName = "Identification",
				fieldName = "identification",
				fieldType = "String",
				initialValue = 001,
				isRequired = "false",
				objectName = "Shoe",
				prefix = "",
				suffix = "-Sneakers");

			ObjectAdmin.publishObjectViaAPI(objectName = "Shoe");
		}

		task ("and Given an object entry") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				ercName = "shoe001",
				fieldName = "color",
				objectName = "Shoe",
				value = "Blue");
		}

		task ("and Given the object entry is exported") {
			ImportExport.exportAndUnzipFile(
				entityType = "Shoe (v1.0 - Liferay Object REST)",
				exportFileFormat = "JSON");
		}

		task ("and Given the auto increment field value and the ERC are modified in the JSON file") {
			var tempFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "export.json");
			var tempFileDirectory = selenium.getOutputDirName();

			var filePath = "${tempFileDirectory}/${tempFileName}";

			FileUtil.replaceStringInFile(${filePath}, "shoe001", "shoe020");

			FileUtil.replaceStringInFile(${filePath}, "001-Sneakers", "020-Sneakers");

			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			UploadFile(
				locator1 = "TextInput#FILE",
				value1 = ${filePath});

			ImportExport.selectEntity(entityType = "Shoe (v1.0 - Liferay Object REST)");

			WaitForElementPresent(locator1 = "ImportExport#IMPORT_MAPPING_HEADER");
		}

		task ("and Given the object entry is imported") {
			ImportExport.startImportAndWaitForSuccess();
		}

		task ("When the user creates a new object entry") {
			ObjectAdmin.goToCustomObject(objectName = "Shoe");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Color",
				entry = "Black");

			PortletEntry.save();
		}

		task ("Then the auto increment field value for the new entry is based off of the imported object entry") {
			ObjectAdmin.goToCustomObject(objectName = "Shoe");

			for (var identificationName : list "001,020,021") {
				ObjectPortlet.viewEntry(entry = "${identificationName}-Sneakers");
			}
		}
	}

	@description = "LPS-169223 - Verify the auto increment fields in object entries are read only"
	@priority = 4
	test VerifyFieldIsReadOnly {
		task ("Given an object definition called Hats with an auto increment field and a text field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Hat",
				objectName = "Hat",
				pluralLabelName = "Hats");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Type",
				fieldName = "type",
				fieldType = "String",
				isRequired = "true",
				objectName = "Hat");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "AutoIncrement",
				fieldLabelName = "Identification",
				fieldName = "identification",
				fieldType = "String",
				initialValue = 1,
				isRequired = "false",
				objectName = "Hat",
				prefix = "HAT-",
				suffix = "");

			ObjectAdmin.publishObjectViaAPI(objectName = "Hat");
		}

		task ("When the user adds an object entry") {
			ObjectAdmin.goToCustomObject(objectName = "Hat");

			LexiconEntry.gotoAdd();
		}

		task ("Then the auto increment field isnâ€™t present") {
			AssertElementNotPresent(
				key_customField = "Identification",
				locator1 = "ObjectPortlet#ENTRY_FIELD_GENERIC");
		}

		task ("and When the use views the object entry") {
			ObjectPortlet.typeCustomField(
				customField = "Type",
				entry = "Cap");

			PortletEntry.save();
		}

		task ("Then the auto increment field is read only and the field value is 1") {
			AssertElementPresent(
				key_entry = "HAT-1",
				locator1 = "ObjectPortlet#ENTRY_READ_ONLY");
		}
	}

}