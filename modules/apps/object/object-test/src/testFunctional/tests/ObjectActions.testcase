@component-name = "portal-bpm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();

			ObjectAdmin.deleteAllCommerceOrdersAndSitesViaAPI();
		}
	}

	@description = "LPS-145665 - Verify that it's possible to activate and deactivate an Action"
	@priority = 5
	test CanActivateOrDeactivateAction {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add an object, field, action, and check if an action is active") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Action shot on add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Add an Entry and check if the action is works") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}

		task ("Delete an entry, desactivate the action, and try to create a new entry") {
			ObjectAdmin.deleteObjectEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Action shot on add");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.activateOrDeactivateAction(
				active = "false",
				viewEntry = "Custom Action");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.assertEntryNotPresent(entry = "Action shot on add");
		}
	}

	@description = "LPS-173537 - Verify creating an Account entry triggers an action to add a second Account entry"
	@priority = 5
	test CanAddAccountEntryAfterCreatingAccountEntry {
		property portal.acceptance = "true";

		task ("Given an Account object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Account");
		}

		task ("And given an action to add a new Account entry after creating an Account entry") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Account Name,Person",
				objectLabel = "Account",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("When the user creates an Account entry") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");
		}

		task ("Then the action is triggered and a second Account entry is added") {
			Account.openAccountsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Account Name");
		}
	}

	@description = "LPS-173537 - Verify creating a custom object entry triggers an action to add an Account entry"
	@priority = 5
	test CanAddAccountEntryAfterCreatingCustomObjectEntry {
		property portal.acceptance = "true";

		task ("Given a custom object with a custom field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 180082",
				objectName = "CustomObject180082",
				pluralLabelName = "Custom Objects 180082");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject180082");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180082");
		}

		task ("And given an action to add an Account entry after creating a custom object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 180082");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				inputMethod = "true",
				inputValue = "Account Name,Guest",
				objectLabel = "Account",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("When the user creates a custom object entry") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject180082",
				value = "Entry Test");
		}

		task ("Then the action is triggered and an Account entry is added") {
			Account.openAccountsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Account Name");
		}
	}

	@description = "LPS-173537 - Verify deleting a custom object entry triggers an action to add an Account entry"
	@priority = 5
	test CanAddAccountEntryAfterDeletingCustomObjectEntry {
		property portal.acceptance = "true";

		task ("Given a custom object and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 180087",
				objectName = "CustomObject180087",
				pluralLabelName = "Custom Object 180087");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject180087");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180087");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject180087",
				value = "Entry Test");
		}

		task ("And given an action to add an Account entry after deleting a custom object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 180087");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				inputMethod = "true",
				inputValue = "Account Name,Guest",
				objectLabel = "Account",
				thenAction = "Add an Object Entry",
				whenAction = "On After Delete");
		}

		task ("When the user deletes a custom object entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject180087");

			ObjectPortlet.deleteEntry(entry = "Entry Test");
		}

		task ("Then the action is triggered and an Account entry is added") {
			Account.openAccountsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Account Name");
		}
	}

	@description = "LPS-173537 - Verify updating a custom object entry triggers an action to add an Account entry"
	@priority = 5
	test CanAddAccountEntryAfterUpdatingCustomObjectEntry {
		property portal.acceptance = "true";

		task ("Given a custom object and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 180083",
				objectName = "CustomObject180083",
				pluralLabelName = "Custom Objects 180083");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject180083");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180083");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject180083",
				value = "Entry Test");
		}

		task ("And given an action to add an Account entry after updating a custom object entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 180083");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				inputMethod = "true",
				inputValue = "Account Name, Guest",
				objectLabel = "Account",
				thenAction = "Add an Object Entry",
				whenAction = "On After Update");
		}

		task ("When the user updates a custom object entry") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject180083");

			ObjectPortlet.updateEntry(
				entry = "Entry Test",
				updateEntry = "Entry Test Edited");
		}

		task ("Then the action is triggered and an Account entry is added") {
			Account.openAccountsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Account Name");
		}
	}

	@description = "LPS-173537 - Verify deleting a Commerce Product entry triggers an action to add a Commerce Product Group entry"
	@priority = 5
	test CanAddCommerceProductGroupEntryAfterDeletingCommerceProductEntry {
		property portal.acceptance = "true";

		task ("Given a Minium site and a Commerce Product") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Minium",
				productName = "Simple T-Shirt",
				productType = "Simple");
		}

		task ("And given an action to add a Commerce Product Group entry after deleting a Commerce Product entry") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "customAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Value Test",
				objectLabel = "Commerce Product Group",
				thenAction = "Add an Object Entry",
				whenAction = "On After Delete");
		}

		task ("When the user deletes a Commerce Product entry") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchProduct(search = "Simple T-Shirt");

			CommerceProducts.deleteProductsEntry(key_value = "Simple T-Shirt");
		}

		task ("Then the action is triggered and a Commerce Product Group entry is added") {
			CommerceNavigator.gotoPortlet(
				category = "Pricing",
				portlet = "Product Groups");

			LexiconEntry.viewEntryName(rowEntry = "Value Test");
		}
	}

	@description = "LPS-180070 - Verify creating a Commerce Product entry triggers an action to add a user"
	@priority = 5
	test CanAddUserAfterCreatingCommerceProductEntry {
		property portal.acceptance = "true";

		task ("Given a Commerce Product object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product");
		}

		task ("And given an action to add a new User after creating a Commerce Product entry") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "customAction",
				active = "true",
				inputMethod = "true",
				inputValue = "newusertest,newuser@test.com,newUserTest,newUserTest",
				objectLabel = "User",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("When the user creates a Commerce Product entry") {
			CommerceProducts.openProductsAdmin();

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Master",
				productName = "Simple T-Shirt",
				productType = "Simple");
		}

		task ("Then the action is triggered and a user is added") {
			User.openUsersAdmin();

			LexiconEntry.viewEntryName(rowEntry = "newusertest");
		}
	}

	@description = "LPS-139008 - Verify it is possible to cancel the creation of an Action"
	@priority = 4
	test CanCancelAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 181",
			objectName = "CustomObject181",
			pluralLabelName = "Custom Objects 181");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 181");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		Button.clickCancel();

		Refresh();

		AssertTextEquals(
			locator1 = "Message#EMPTY_STATE_INFO",
			value1 = "No Results Found");
	}

	@description = "LPS-139008 - Verify it is possible to cancel the update of an Action"
	@priority = 4
	test CanCancelActionUpdate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 182",
			objectName = "CustomObject182",
			pluralLabelName = "Custom Objects 182");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 182");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.goToActionDetails(viewEntry = "Action Label");

		ObjectAdmin.viewDetails();

		SelectFrame(locator1 = "IFrame#IFRAME");

		ObjectAdmin.fillObjectAction(
			actionLabel = "Update Action Label",
			actionName = "UpdateActionName",
			click = "cancel");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionLabel = "Action Label");
	}

	@description = "LPS-139008 - Verify it is possible to create an Action"
	@priority = 5
	test CanCreateAction {
		property ci.retries.disabled = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 183",
			objectName = "CustomObject183",
			pluralLabelName = "Custom Objects 183");

		ObjectAdmin.openObjectAdmin();

		while ((IsElementNotPresent(label = "Custom Object 183", locator1 = "ObjectPortlet#SELECT_CUSTOM_OBJECT")) && (maxIterations = "5")) {
			Refresh();
		}

		ObjectPortlet.selectCustomObject(label = "Custom Object 183");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionLabel = "Action Label");
	}

	@description = "LPS-145665 - Verify it's possible to add an object entry with the trigger On Order Status Update"
	@priority = 4
	test CanCreateActionAddObjectEntryWithOnOrderStatusUpdate {
		task ("Given an action in the Commerce Order triggered with Custom Object.") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 171861",
				objectName = "CustomObject171861",
				pluralLabelName = "Custom Objects 171861");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject171861");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject171861");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Name",
				actionName = "ActionName",
				active = "true",
				inputMethod = "true",
				inputValue = "Value Test",
				objectLabel = "Custom Object 171861",
				thenAction = "Add an Object Entry",
				whenAction = "On Order Status Update");
		}

		task ("And given the user creates a request.") {
			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Account Name",
				accountType = "Business");

			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("When The user changes the order status.") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");
		}

		task ("Then the action is triggered to add an object entry.") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject171861");

			ObjectPortlet.viewEntry(entry = "Value Test");

			// Workaround for LPS-193383

			CommerceOrders.openOrdersAdmin();

			Click.clickNoMouseOverNoWaitForVisible(locator1 = "CommerceNavigation#SELECT_ALL_CHECKBOX");

			ClickNoError(locator1 = "Button#TRASH_ENABLED");

			AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to delete all selected orders?");

			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();
		}
	}

	@description = "LPS-156312 - Assert an Action can be created with Expression Builder."
	@priority = 4
	test CanCreateActionWithExpressionBuilder {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("When an action is created and given a condition using the Expression Builder") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "New Entry After Object Add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Then the action will resolve when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "New Entry After Object Add");
		}
	}

	@description = "LPS-156569 - Verify that it's possible to create an Action with Groovy Script"
	@priority = 5
	test CanCreateActionWithGroovyScript {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a Groovy Script") {
			var groovyScript = '''
			import com.liferay.object.model.ObjectEntry;
			import com.liferay.object.service.ObjectEntryLocalServiceUtil;
			import com.liferay.portal.kernel.service.ServiceContext;

			import java.io.Serializable;

			import java.util.Map;

			ObjectEntry objectEntry = ObjectEntryLocalServiceUtil.getObjectEntry(id);

			Map<String, Serializable> values = objectEntry.getValues();

			values.put("customObjectFieldActionTest", "Action Test Works")

			System.out.println(objectEntry);

			ObjectEntryLocalServiceUtil.updateObjectEntry(objectEntry.getUserId(), id, values, new ServiceContext());
			''';
		}

		task ("And given an object with two fields is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field Action Test",
				fieldName = "customObjectFieldActionTest",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("When an action is created using Groovy Script") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				objectLabel = "Custom Object",
				scriptValidation = ${groovyScript},
				thenAction = "Groovy Script",
				whenAction = "On After Add");
		}

		task ("Then the object entry is created when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action Test Works");
		}
	}

	@description = "LPS-161904 - Verify that it's possible to create an object entry using Actions"
	@priority = 4
	test CanCreateEntryWithActions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a published object definition with a field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("When the action is added") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputMethod = "true",
				inputValue = "Object entry using Action",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Then the object entry is created when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Object entry using Action");
		}
	}

	@description = "LPS-139008 - Verify it is possible to delete an Action"
	@priority = 5
	test CanDeleteAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 184",
			objectName = "CustomObject184",
			pluralLabelName = "Custom Objects 184");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 184");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.deleteActionViaUI(actionLabel = "Action Label");

		AssertElementNotPresent(
			key_actionLabel = "Action Label",
			locator1 = "ObjectAdmin#VIEW_ACTIONS_LABEL");
	}

	@description = "LPS-145665 - Verify that you can edit the Action name"
	@priority = 4
	test CanEditActionName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 145",
			objectName = "CustomObject145",
			pluralLabelName = "Custom Objects 145");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 145");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Custom Action",
			actionName = "CustomAction",
			active = "true",
			thenAction = "Webhook",
			urlAction = "www.liferay.com",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			actionLabel = "New Action Update",
			actionName = "NewActionUpdate",
			active = "false",
			viewEntry = "Custom Action");

		ObjectAdmin.assertObjectActions(
			actionActive = "No",
			actionLabel = "New Action Update");
	}

	@description = "LPS-156560 - Verify that it's possible to edit an Action with Groovy Script"
	@priority = 5
	test CanEditActionWithGroovyScript {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a Groovy Script") {
			var groovyScript = '''
			import com.liferay.object.model.ObjectEntry;
			import com.liferay.object.service.ObjectEntryLocalServiceUtil;
			import com.liferay.portal.kernel.service.ServiceContext;

			import java.io.Serializable;

			import java.util.Map;

			ObjectEntry objectEntry = ObjectEntryLocalServiceUtil.getObjectEntry(id);

			Map<String, Serializable> values = objectEntry.getValues();

			values.put("customObjectFieldActionTest", "Action Test Works")

			System.out.println(objectEntry);

			ObjectEntryLocalServiceUtil.updateObjectEntry(objectEntry.getUserId(), id, values, new ServiceContext());
			''';
		}

		task ("And given an object with two fields and an object entry are created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field Action Test",
				fieldName = "customObjectFieldActionTest",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");
		}

		task ("And given an action using a Groovy Script is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				objectLabel = "Custom Object",
				scriptValidation = ${groovyScript},
				thenAction = "Groovy Script",
				whenAction = "On After Update");
		}

		task ("When the Action is edited") {
			ObjectAdmin.editObjectAction(
				click = "save",
				inputExpression = "customObjectField == 'Entry Update'",
				viewEntry = "Custom Action");
		}

		task ("Then the object entry name is updated when the condition is met") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.editEntryName(newEntryValue = "Entry Update");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Action Test Works");
		}
	}

	@description = "LPS-145665 - Verify that the user can edit a previously saved expression"
	@priority = 5
	test CanEditExpression {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add an Object, Field and Action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "Action shot on add",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}

		task ("Edit the expression and Check if the user can edit a previously saved expression") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.editObjectAction(
				inputExpression = "customObjectField == 'Entry Test Updated'",
				viewEntry = "Custom Action");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test Updated");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test Updated");

			ObjectPortlet.viewEntry(entry = "Action shot on add");
		}
	}

	@description = "LPS-145665 - Verify that the admin user is able to enable and disable Condition"
	@priority = 5
	test CanEnableAndDisableCondition {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add object, field, and publish then") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Add a Action and enable condition") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry with condition'",
				inputMethod = "true",
				inputValue = "Condition works",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Add entry and assert that condition it's works") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry with condition");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry with condition");

			ObjectPortlet.viewEntry(entry = "Condition works");
		}

		task ("Assert that condition is disabled") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.goToActionDetails(viewEntry = "Custom Action");

			ObjectAdmin.disableCondition();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionLabel = "Custom Action");
		}
	}

	@description = "Verify that the user can use Formula Field with User Notification"
	@priority = 4
	test CanFormulaFieldBeUsedWithUserNotification {
		task ("Given a new user and Notification Template") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");

			UserNotificationAPI.postNotificationTemplate(
				en_US = "Subject Test",
				externalReferenceCode = "test",
				name = "User Notification Template",
				recipientType = "user",
				type = "userNotification",
				userScreenName = "usersn");
		}

		task ("And given a Custom Object with a Notification action and the Formula Field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 176850",
				objectName = "CustomObject176850",
				pluralLabelName = "Custom Objects 176850");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject176850");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Formula",
				fieldLabelName = "Custom Formula Field",
				fieldName = "customFormulaField",
				fieldType = "String",
				formulaScript = "customInteger + customInteger",
				isRequired = "false",
				objectName = "CustomObject176850",
				outputOption = "Integer");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject176850");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 176850");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when entry is added",
				active = "true",
				notificationName = "User Notification Template",
				objectLabel = "Custom Object 176850",
				thenAction = "Notification",
				whenAction = "On After Add");
		}

		task ("When an entry is added") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customInteger",
				objectName = "CustomObject176850",
				value = 1111);
		}

		task ("Then the action is triggered and the notification is sent to the user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			UserBar.gotoDropdownItem(dropdownItem = "Notifications");

			Notifications.clickOnTheNotificationTitle(key_notificationsTitle = "Subject Test");

			AssertValue(
				key_labelName = "Custom Formula Field",
				locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
				value1 = 2222);
		}
	}

	@description = "LPS-139008 - Verify that it is possible to inactivate an Action"
	@priority = 4
	test CanInactivateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 185",
			objectName = "CustomObject185",
			pluralLabelName = "Custom Objects 185");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 185");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			active = "false",
			viewEntry = "Action Label");

		ObjectAdmin.assertObjectActions(
			actionActive = "No",
			actionLabel = "Action Label");
	}

	@description = "LPS-169994 - Verify users are able to manage standalone action permissions on the role page"
	@priority = 5
	test CanManageStandalonePermissionsInRoles {
		property portal.acceptance = "true";

		task ("Given an object with a standalone action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 173723",
				objectName = "CustomObject173723",
				pluralLabelName = "Custom Objects 173723");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject173723");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject173723");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 173723");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				errorMessage = "Error Message",
				inputMethod = "true",
				inputValue = "New Entry Test",
				objectLabel = "Custom Object 173723",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject173723",
				value = "Entry Test");
		}

		task ("When the user creates a regular role and navigates to the role permissions") {
			JSONRole.addRegularRole(roleKey = "Regular Role");

			Role.openRolesAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Regular Role");

			Navigator.gotoNavItem(navItem = "Define Permissions");
		}

		task ("Then the user is able to manage the standalone action permissions") {
			ObjectAdmin.searchInDefinePermissions(search = "Custom Objects 173723");

			Click(
				key_wikiPageVersionNew = "action.ActionName",
				locator1 = "WikiTable#SELECT_VERSION_NEW_VERSION_CHECKBOX");

			PortletEntry.save();

			ObjectAdmin.searchInDefinePermissions(search = "Custom Objects 173723");

			Check.toggleSwitch(
				key_wikiPageVersionNew = "action.ActionName",
				locator1 = "WikiTable#SELECT_VERSION_NEW_VERSION_CHECKBOX");
		}
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action Name field blank"
	@priority = 3
	test CannotLeaveActionNameBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 186",
			objectName = "CustomObject186",
			pluralLabelName = "Custom Objects 186");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 186");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		Click(
			key_tabName = "Basic Info",
			locator1 = "ObjectAction#TAB_GENERIC");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "Required");
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action Then field blank"
	@priority = 3
	test CannotLeaveActionThenBlank {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 187",
			objectName = "CustomObject187",
			pluralLabelName = "Custom Objects 187");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 187");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "ActionName",
			whenAction = "On After Add");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "Required");
	}

	@description = "LPS-139008 - Verify it is not possible to leave the Action When field blank"
	@priority = 3
	test CannotLeaveActionWhenBlank {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 188",
			objectName = "CustomObject188",
			pluralLabelName = "Custom Objects 188");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 188");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "Required");
	}

	@description = "LPS-139008 - Verify it is not possible to leave the URL field blank when Webhook is selected"
	@priority = 3
	test CannotLeaveURLBlank {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 189",
			objectName = "CustomObject189",
			pluralLabelName = "Custom Objects 189");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 189");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			whenAction = "On After Add");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "Required");
	}

	@description = "LPS-156319 - Verify that the Expression Builder field is required"
	@priority = 3
	test CannotSaveWithoutExpressionBuilder {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "true",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		ObjectAdmin.fillObjectAction(
			actionLabel = "Custom Action",
			actionName = "CustomAction",
			active = "true",
			inputExpression = "",
			notRefreshAttribute = "true",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		Button.clickSave();

		AssertElementPresent(
			locator1 = "Message#WARNING_FEEDBACK",
			value1 = "Required");

		Refresh();

		AssertTextEquals(
			locator1 = "Message#EMPTY_STATE_INFO",
			value1 = "No Results Found");
	}

	@description = "LPS-169994 - Verify a deactivated standalone action isn't displayed in the dropdown menu"
	@priority = 5
	test CanNotSeeDeactivatedStandaloneAction {
		property portal.acceptance = "true";

		task ("Given an object with a standalone action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 173773",
				objectName = "CustomObject173773",
				pluralLabelName = "Custom Objects 173773");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject173773");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject173773");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 173773");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				errorMessage = "Error message",
				inputMethod = "true",
				inputValue = "New Entry Test",
				objectLabel = "Custom Object 173773",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject173773",
				value = "Entry Test");
		}

		task ("When the standalone action is deactivated") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 173773");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.editObjectAction(
				active = "false",
				click = "save",
				viewEntry = "Action Label");
		}

		task ("Then the standalone action isn't present in the dropdown menu") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject173773");

			Click(
				key_entry = "Entry Test",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			AssertElementNotPresent(
				key_dropdownItem = "Action Label",
				locator1 = "ObjectPortlet#CHECK_UNCHECK_DROPDOWN_ITEM");
		}
	}

	@description = "LPS-139008 - Verify that it is possible to reactivate an Action"
	@priority = 4
	test CanReactivateAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 190",
			objectName = "CustomObject190",
			pluralLabelName = "Custom Objects 190");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 190");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			active = "false",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			active = "true",
			viewEntry = "Action Label");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionLabel = "Action Label");
	}

	@description = "LPS-139008 - Verify it is possible to search for an Action"
	@priority = 4
	test CanSearchAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 191",
			objectName = "CustomObject191",
			pluralLabelName = "Custom Objects 191");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 191");

		ObjectAdmin.goToActionsTab();

		for (var actionsNames : list "1,2") {
			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label ${actionsNames}",
				actionName = "ActionName${actionsNames}",
				thenAction = "Webhook",
				urlAction = "http://localhost:8080",
				whenAction = "On After Add");
		}

		Search.searchCP(searchTerm = 1);

		ObjectAdmin.assertObjectActions(actionLabel = "Action Label 1");

		AssertElementNotPresent(
			key_actionLabel = "Action Label 2",
			locator1 = "ObjectAdmin#VIEW_ACTIONS_LABEL");
	}

	@description = "LPS-156343 - Verify that Action can be triggered after disabling the expression"
	@priority = 4
	test CanTriggerActionAfterDisablingExpression {
		task ("Given an object with a field is created") {
			property test.liferay.virtual.instance = "false";
			property test.run.type = "single";

			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object",
				objectName = "CustomObject",
				pluralLabelName = "Custom Objects");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");
		}

		task ("Given an Action with an expression is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionDescription = "Custom Description",
				actionLabel = "Custom Action Label",
				actionName = "CustomActionName",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "New object entry value",
				objectLabel = "Custom Object",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Given an entry with enabled condition") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.deleteEntry(entry = "Entry Test");
		}

		task ("When the expression in the Action is disabled") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.goToActionDetails(viewEntry = "Custom Action Label");

			ObjectAdmin.disableCondition();

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject",
				value = "Entry Test");
		}

		task ("hen the Action will resolve when the condition is met") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject");

			ObjectPortlet.viewEntry(entry = "Entry Test");

			ObjectPortlet.viewEntry(entry = "New object entry value");
		}
	}

	@description = "LPS-156320 - Assert an Action with an Expression can be triggered after adding an entry."
	@priority = 4
	test CanTriggerActionWithExpressionByAddingEntry {
		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object156320",
				objectName = "CustomObject156320",
				pluralLabelName = "Custom Objects 156320");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject156320");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156320");
		}

		task ("When an action is created with an expression") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object156320");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "Add Entry Test",
				objectLabel = "Custom Object156320",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Then the action will be triggered after adding an entry.") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject156320",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject156320");

			ObjectPortlet.viewEntry(entry = "Add Entry Test");
		}
	}

	@description = "LPS-173218 - Assert an Action with an Expression can be triggered after deleting an entry."
	@priority = 4
	test CanTriggerActionWithExpressionByDeletingEntry {
		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object173218",
				objectName = "CustomObject173218",
				pluralLabelName = "Custom Objects 173218");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject173218");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject173218");
		}

		task ("And Given an action is created with an expression") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object173218");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label Delete",
				actionName = "CustomDeleteAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = "New Entry After Object Delete",
				objectLabel = "Custom Object173218",
				thenAction = "Add an Object Entry",
				whenAction = "On After Delete");
		}

		task ("When an entry is created and then deleted") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject173218",
				value = "Entry Test");

			ObjectAdmin.deleteObjectEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject173218",
				value = "Entry Test");
		}

		task ("Then the action will be triggered after deleting an entry.") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject173218");

			ObjectPortlet.viewEntry(entry = "New Entry After Object Delete");
		}
	}

	@description = "LPS-173219 - Assert an Action with an Expression can be triggered after updating an entry."
	@priority = 4
	test CanTriggerActionWithExpressionByUpdatingEntry {
		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object173219",
				objectName = "CustomObject173219",
				pluralLabelName = "Custom Objects 173219");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject173219");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject173219");
		}

		task ("And given an action is created with an expression") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object173219");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Update Action",
				actionName = "CustomUpdateAction",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				inputMethod = "true",
				inputValue = " New Entry Test",
				objectLabel = "Custom Object173219",
				thenAction = "Add an Object Entry",
				whenAction = "On After Update");
		}

		task ("When an object entry is updated") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject173219",
				value = "Entry");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject173219");

			ObjectPortlet.viewEntryDetails(entry = "Entry");

			ObjectAdmin.editEntryName(newEntryValue = "Entry Test");
		}

		task ("Then the action will be triggered after updating the entry.") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject173219");

			ObjectPortlet.viewEntry(entry = "New Entry Test");
		}
	}

	@description = "LPS-172918 - Verify the user can trigger a standalone action for a site scoped object"
	@priority = 4
	test CanTriggerStandaloneActionForSiteScopedObject {
		task ("Given a site scoped object definition with a standalone action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 172918",
				objectName = "CustomObject172918",
				pluralLabelName = "Custom Objects 172918",
				scope = "site");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject172918");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject172918");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 172918");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action",
				actionName = "ActionName",
				active = "true",
				errorMessage = "Error Message",
				inputMethod = "true",
				inputValue = "New Entry Test",
				objectLabel = "Custom Object 172918",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");
		}

		task ("When the standalone action is triggered manually") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject172918");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject172918");

			Click(locator1 = "Icon#SVG_ELLIPSIS");

			Click(
				key_columnOption = "Action",
				locator1 = "ObjectCustomViews#SELECT_AUTO_COMPLETE_OPTION");
		}

		task ("Then the action is triggered successfully") {
			ObjectPortlet.viewEntry(entry = "New Entry Test");
		}
	}

	@description = "LPS-169994 - Verify that a permitted user can manually trigger a standalone action"
	@priority = 5
	test CanTriggerStandaloneActionWithPermission {
		property portal.acceptance = "true";

		task ("Given an object with a standalone action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 185",
				objectName = "CustomObject185",
				pluralLabelName = "Custom Objects 185");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject185");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject185");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 185");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				errorMessage = "Error Message",
				inputMethod = "true",
				inputValue = "New Entry Test",
				objectLabel = "Custom Object 185",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject185",
				value = "Entry Test");
		}

		task ("And given a new user is added") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("When the user is given permission to trigger a standalone action") {
			JSONRole.addRegularRole(roleKey = "Regular Role");

			Role.openRolesAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Regular Role");

			Navigator.gotoNavItem(navItem = "Define Permissions");

			ObjectAdmin.searchInDefinePermissions(search = "Custom Objects 185");

			Click(
				key_wikiPageVersionNew = "action.ActionName",
				locator1 = "WikiTable#SELECT_VERSION_NEW_VERSION_CHECKBOX");

			PortletEntry.save();

			var objectId = JSONObject.getObjectId(objectName = "CustomObject185");

			var objectDefinitionPortletId = ObjectDefinitionAPI._getObjectDefinitionPortletId(objectDefinitionId = ${objectId});

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = 90,
				roleTitle = "Regular Role",
				roleType = "regular");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = ${objectDefinitionPortletId},
				roleTitle = "Regular Role",
				roleType = "regular");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = ${objectDefinitionPortletId},
				roleTitle = "Regular Role",
				roleType = "regular");

			var objectDefinitionClassName = ObjectDefinitionAPI._getObjectDefinitionClassNameById(objectDefinitionId = ${objectId});

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = ${objectDefinitionClassName},
				roleTitle = "Regular Role",
				roleType = "regular");

			JSONRole.assignRoleToUser(
				roleTitle = "Regular Role",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Then the user can manually trigger the standalone action in the drop-down list") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject185");

			Click(
				key_entry = "Entry Test",
				locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			Click(
				key_dropdownItem = "Action Label",
				locator1 = "ObjectPortlet#CHECK_UNCHECK_DROPDOWN_ITEM");

			ObjectPortlet.viewEntry(entry = "New Entry Test");
		}
	}

	@description = "LPS-173537 - Verify creating an Account entry triggers an action to update the Account entry"
	@priority = 5
	test CanUpdateAccountEntryAfterCreatingAccountEntry {
		property portal.acceptance = "true";

		task ("Given an Account object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Account");
		}

		task ("And given an action to update an Account entry after creating an Account entry") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				fieldName = "Name",
				inputMethod = "true",
				inputValue = "Updated Accounts Name",
				thenAction = "Update an Object Entry",
				whenAction = "On After Add");
		}

		task ("When the user creates an Account entry") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Person");
		}

		task ("Then the action is triggered and the created Account entry is updated") {
			Account.openAccountsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Updated Accounts Name");
		}
	}

	@description = "LPS-139008 - Verify it is possible to update an Action"
	@priority = 4
	test CanUpdateAction {
		property ci.retries.disabled = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 192",
			objectName = "CustomObject192",
			pluralLabelName = "Custom Objects 192");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 192");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.editObjectAction(
			actionLabel = "Update Action Label",
			viewEntry = "Action Label");

		ObjectAdmin.assertObjectActions(
			actionActive = "Yes",
			actionLabel = "Update Action Label");
	}

	@description = "LPS-173537 - Verify adding a Commerce Product entry triggers an action to update the Commerce Product Group entry."
	@priority = 5
	test CanUpdateCommerceProductGroupEntryAfterCreatingCommerceProductEntry {
		property portal.acceptance = "true";

		task ("Given a Commerce Product Group object") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Product Group");
		}

		task ("And given an action to update a Commerce Product Group entry after creating a Commerce Product Group entry") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				fieldName = "Title",
				inputMethod = "true",
				inputValue = "Product Group Updated",
				objectLabel = "Commerce Product Group",
				thenAction = "Update an Object Entry",
				whenAction = "On After Add");
		}

		task ("When the user creates a Commerce Product Group entry") {
			CommerceNavigator.gotoPortlet(
				category = "Pricing",
				portlet = "Product Groups");

			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

			Type(
				key_fieldLabel = "Name",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "Product Group");

			Button.clickSubmitButton();
		}

		task ("Then the action is triggered and the Commerce Product Group entry is updated") {
			CommerceNavigator.gotoPortlet(
				category = "Pricing",
				portlet = "Product Groups");

			AssertElementPresent(
				key_entryName = "Product Group Updated",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");
		}
	}

	@description = "LPS-156346 - Verify that the expression works with Groovy Script."
	@priority = 5
	test CanUseExpressionWithGroovyScript {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 198",
				objectName = "CustomObject198",
				pluralLabelName = "Custom Objects 198");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Custom Integer",
				fieldName = "customInteger",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "CustomObject198");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject198");
		}

		task ("When an action is created with an Expression using Groovy Script") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 198");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				inputExpression = "customInteger == 5",
				scriptValidation = "println 'Success'",
				thenAction = "Groovy Script",
				whenAction = "On After Add");
		}

		task ("Then the action will resolve when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customInteger",
				objectName = "CustomObject198",
				value = 5);

			Refresh();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionLabel = "Action Label",
				status = "Success");
		}
	}

	@description = "LPS-156347 - Verify that the expression works with Webhooks"
	@priority = 3
	test CanUseExpressionWithWebhook {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 185",
				objectName = "CustomObject185",
				pluralLabelName = "Custom Objects 185");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject185");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject185");
		}

		task ("When an action is created with an Expression using Webhooks") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 185");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				inputExpression = "customObjectField == 'Entry Test'",
				thenAction = "Webhook",
				urlAction = "http://localhost:8080",
				whenAction = "On After Add");
		}

		task ("Then the action will resolve when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject185",
				value = "Entry Test");

			Refresh();

			ObjectAdmin.assertObjectActions(
				actionActive = "Yes",
				actionLabel = "Action Label",
				status = "Success");
		}
	}

	@description = "LPS-173774 - Verify that an unpublished object with a standalone action does NOT show up in permissions."
	@priority = 4
	test CheckStandaloneActionPermissionOfUnpublishedObject {
		task ("Given add an object entry and publish it") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 173774",
				objectName = "CustomObject173774",
				pluralLabelName = "Custom Objects 173774");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject173774");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject173774");
		}

		task ("And add another object entry with a standalone action and unpublish it") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 173774Test",
				objectName = "CustomObject173774Test",
				pluralLabelName = "Custom Objects 173774Test");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 173774Test");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Label",
				actionName = "ActionName",
				active = "true",
				errorMessage = "Error",
				inputMethod = "true",
				inputValue = "Test",
				objectLabel = "Custom Object 173774",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");
		}

		task ("When check the object entries in define permissions tab of a regular role") {
			Role.openRolesAdmin();

			RoleNavigator.gotoDefineRolePermissions(roleTitle = "Portal Content Reviewer");

			Type(
				locator1 = "RolesPermissionsNavigation#SEARCH_FIELD",
				value1 = "Object");
		}

		task ("Then assert the unpublished object entry with a standalone action is not present") {
			AssertElementPresent(
				key_permissionNavHeader = "Object",
				key_permissionNavItem = "Custom Objects 173774",
				locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVIGATION");

			AssertElementNotPresent(
				key_permissionNavHeader = "Object",
				key_permissionNavItem = "Custom Objects 173774Test",
				locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVIGATION");
		}
	}

	@description = "LPS-146871 - Verify that the Action name is required"
	@priority = 4
	test VerifyActionNameIsRequired {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 156562",
			objectName = "CustomObject1",
			pluralLabelName = "Custom Objects 156562");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 156562");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.gotoAddObjectAction();

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "Required");
	}

	@description = "LPS-171802- Verify if the Condition card is hidden when using the trigger On Subscription Status Update"
	@priority = 5
	test VerifyTheConditionCardAreHidden {
		property portal.acceptance = "true";

		task ("Given a object system") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectSystemObject(label = "Commerce Order");
		}

		task ("When an Action using the trigger On Subscription Status Update is created") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.gotoAddObjectAction();

			ObjectAdmin.fillObjectAction(
				actionLabel = "Action Label",
				actionName = "ActionName",
				whenAction = "On Subscription Status Update");
		}

		task ("Then the card titled Condition will not be present") {
			AssertElementNotPresent(
				key_title = "Condition",
				locator1 = "ObjectAction#SECTION_TITLE");
		}
	}

}