@component-name = "portal-headless"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Object Entries REST APIs";

	setUp {
		TestCase.setUpPortalInstanceNoSelenium();

		task ("Given active object definitions created") {
			var objectDefinitionId1 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Manager",
				en_US_plural_label = "Managers",
				name = "Manager",
				requiredStringFieldName = "firstname");
			var objectDefinitionId2 = ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Employee",
				en_US_plural_label = "Employees",
				name = "Employee",
				requiredStringFieldName = "firstname");
		}

		task ("Given a relationship between two object definitions created") {
			var relationshipName = ObjectDefinitionAPI.createRelationship(
				deletionType = "cascade",
				en_US_label = "Supervisor",
				name = "supervisor",
				objectDefinitionId1 = ${objectDefinitionId1},
				objectDefinitionId2 = ${objectDefinitionId2},
				type = "oneToMany");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCPNoSelenium();
		}
	}

	@description = "Nested fields in oneToMany relationship"
	@disable-webdriver = "true"
	@priority = 5
	test CanReturnNestedFieldsDetailsInOneToManyRelationship {
		property portal.acceptance = "true";

		task ("Given manager accounts created") {
			var managerId = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
		}

		task ("Given employee accounts created") {
			var employeeId = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = ${managerId});
		}

		task ("When calling for 'employees' with a 'manager' as nestedFields parameter") {
			var getEmployeesWithManager = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "r_supervisor_c_managerId",
				objects = "employees");
		}

		task ("Then 'employee' information should be provided with 'manager' information nested as an object") {
			ObjectDefinitionAPI.assertEmployeeHasNestedFieldManager(
				expectedEmployeeFirstname = "Bruce",
				expectedManagerFirstname = "Courtney",
				expectedManagerId = ${managerId},
				nestedField = "r_${relationshipName}_c_${nestedObject}Id",
				nestedObject = "manager",
				objectId = ${employeeId},
				relationshipName = "supervisor",
				responseToParse = ${getEmployeesWithManager});
		}
	}

	@description = "Nested fields in oneToMany relationship after object deletion"
	@disable-webdriver = "true"
	@priority = 5
	test CanReturnNestedFieldsDetailsInOneToManyRelationshipAfterObjectDeletion {
		property portal.acceptance = "true";

		task ("Given two manager accounts created") {
			var managerId1 = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
			var managerId2 = ObjectDefinitionAPI.createManager(managerFirstname = "Aaron");
		}

		task ("Given two employee accounts created") {
			var employeeId1 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = ${managerId1});
			var employeeId2 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Riley",
				managerId = ${managerId2});
		}

		task ("Given deleting one of the employees") {
			ObjectDefinitionAPI.deleteObjectEntry(
				en_US_plural_label = "employees",
				objectEntryId = ${employeeId1});
		}

		task ("When calling for 'employees' with a 'manager' as nestedFields parameter") {
			var responseToParse = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "manager",
				objects = "employees");
		}

		task ("Then 'employee' information should not include 'manager' information assigned to the deleted employee") {
			ObjectDefinitionAPI.assertResponseOnlyIncludesDetailsOfNotDeletedEmployee(
				employeeId1 = ${employeeId1},
				employeeId2 = ${employeeId2},
				managerId1 = ${managerId1},
				managerId2 = ${managerId2},
				responseToParse = ${responseToParse});
		}
	}

	@description = "Nested fields in oneToMany Updated relationship"
	@disable-webdriver = "true"
	@priority = 5
	test CanReturnNestedFieldsDetailsInOneToManyUpdatedRelationship {
		property portal.acceptance = "true";

		task ("Given two manager accounts created") {
			var managerId1 = ObjectDefinitionAPI.createManager(managerFirstname = "Courtney");
			var managerId2 = ObjectDefinitionAPI.createManager(managerFirstname = "Aaron");
		}

		task ("Given two employee accounts created") {
			var employeeId1 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Bruce",
				managerId = ${managerId1});
			var employeeId2 = ObjectDefinitionAPI.createEmployee(
				employeeFirstname = "Riley",
				managerId = ${managerId2});
		}

		task ("Given the employee account updated by changing manager") {
			ObjectDefinitionAPI.updateEmployee(
				employeeFirstname = "Bruce",
				employeeId = ${employeeId1},
				managerId = ${managerId2});
		}

		task ("When calling for 'employees' with a 'manager' as nestedFields parameter") {
			var getEmployeesWithManager = ObjectDefinitionAPI.getObjectsWithNestedField(
				nestedField = "r_supervisor_c_managerId",
				objects = "employees");
		}

		task ("Then 'employee' information should be provided with 'manager' information nested as an object") {
			ObjectDefinitionAPI.assertEmployeeHasNestedFieldManager(
				expectedEmployeeFirstname = "Bruce",
				expectedManagerFirstname = "Aaron",
				expectedManagerId = ${managerId2},
				nestedField = "r_${relationshipName}_c_${nestedObject}Id",
				nestedObject = "manager",
				objectId = ${employeeId1},
				relationshipName = "supervisor",
				responseToParse = ${getEmployeesWithManager});
		}
	}

}