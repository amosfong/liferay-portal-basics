definition {

	static var clientExtension = "";
	static var companyWebId = "";
	static var siteMember = "User";
	static var siteType = "Open";

	// This macro should be removed when the issue ISSD-1572 be completed and the macro HeadlessSite.addSite() is usable.

	@summary = "Add the Site manually on the site page"
	macro addCP(membershipType = null, singleSiteTypePermission = null, siteTemplateTab = null, parentSiteName = null, uncheckPropagation = null, siteName = null, siteType = null) {
		LexiconEntry.gotoAdd();

		if (${singleSiteTypePermission} != "true") {
			if (!(isSet(siteTemplateName))) {
				var siteTemplateName = "${siteType} Site";
			}

			if (isSet(siteTemplateTab)) {
				Site.selectSiteTemplateTab(siteTemplateTab = ${siteTemplateTab});
			}

			LexiconCard.clickCard(card = ${siteTemplateName});

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = ${siteName});

			if (isSet(enablePrivatePage)) {
				Check(
					checkboxName = "Create default pages as private",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			Button.click(button = "Add");

			SelectFrameTop();

			Alert.viewSuccessMessage();
		}

		if (${siteType} == "Site Template") {
			if (${uncheckPropagation} == "true") {
				Click(
					key_itemName = "Pages",
					locator1 = "ListGroupItem#ITEM_TEXT");

				Navigator.gotoNavTab(navTab = "Pages");

				Uncheck.uncheckToggleSwitch(locator1 = "Checkbox#ENABLE_PROPAGATION");

				PortletEntry.save();

				Navigator.gotoBack();
			}
		}

		while (IsElementNotPresent(key_itemName = "Site Configuration", locator1 = "ListGroupItem#ITEM_TEXT")) {

			// Pausing 5 seconds for each iteration due ISSD-1572

			Pause(value1 = 5000);
		}

		WaitForElementPresent(
			key_itemName = "Site Configuration",
			locator1 = "ListGroupItem#ITEM_TEXT");

		Click(
			key_itemName = "Site Configuration",
			locator1 = "ListGroupItem#ITEM_TEXT");

		if (${membershipType} == "Private") {
			Select(
				locator1 = "SitesEditSite#MEMBERSHIP_TYPE",
				value1 = "Private");
		}
		else if (${membershipType} == "Restricted") {
			Select(
				locator1 = "SitesEditSite#MEMBERSHIP_TYPE",
				value1 = "Restricted");
		}
		else {
			Select(
				locator1 = "SitesEditSite#MEMBERSHIP_TYPE",
				value1 = "Open");
		}

		if (isSet(parentSiteName)) {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(
				key_fieldLabel = "Parent Site",
				key_text = "Change",
				locator1 = "Button#ANY_WITH_LABEL");

			var key_parentSiteName = ${parentSiteName};

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Search.searchCP(searchTerm = ${parentSiteName});

			var key_site = ${parentSiteName};

			AssertTextEquals(
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK",
				value1 = ${parentSiteName});

			Click(locator1 = "ContentRow#ENTRY_CONTENT_ROW_TD_1_SITE_LINK");

			var key_parentSiteName = ${parentSiteName};

			SelectFrameTop();
		}

		ScrollWebElementIntoView(locator1 = "Button#SAVE");

		PortletEntry.save();

		AssertTextEquals(
			locator1 = "SitesEditSite#DETAILS_NAME",
			value1 = ${siteName});
	}

	@summary = "Default summary"
	macro commerceTearDown() {
		JSONUser.tearDownNonAdminUsers();

		CommerceJSONAccountsAPI._deleteAllCommerceAccounts();

		CommerceJSONCatalogsAPI._deleteAllNoSystemCommerceCatalogs();

		CommerceJSONChannelsAPI._deleteAllCommerceChannels();

		CommerceJSONOptionsAPI._deleteAllCommerceOptions();

		CommerceJSONProductsAPI._deleteAllCommerceProducts();

		CommerceJSONSpecificationGroupsAPI._deleteAllCommerceSpecificationGroups();

		CommerceJSONSpecificationsAPI._deleteAllCommerceSpecifications();

		CommerceConfiguration.commerceInitializersTearDown();
	}

	@summary = "Default summary"
	macro marketplaceInitializersTearDown() {
		var companyWebId = JSONCompany.getWebId();

		if (isSet(clientExtension)) {
			var clientExtension = "liferay-marketplace-custom-element";

			AntCommands.runCommand("build-test-workspace.xml", "undeploy-workspace-client-extension -Dvirtual.instance.id=${companyWebId} -Dworkspace.client.extension.name=${clientExtension}");
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Site.openSitesAdmin();

			if (IsElementPresent(key_tableEntry = "Marketplace Site", locator1 = "LexiconTable#TABLE_ENTRY")) {
				Site.openSitesAdmin();

				PortletEntry.selectAll();

				Click(locator1 = "Icon#SITES_VERTICAL_ELLIPSIS");

				MenuItem.clickNoError(menuItem = "Delete");

				Click(locator1 = "Button#MODAL_DELETE");

				Alert.viewSuccessMessage();
			}

			Account.openAccountsAdmin();

			if (IsElementPresent(key_tableEntry = "QA", locator1 = "LexiconTable#TABLE_ENTRY")) {
				Account.tearDownCP();
			}

			MP2Configuration.commerceTearDown();

			if (isSet(doLogout)) {
				User.logoutPG();
			}
		}
	}

	@summary = "Default summary"
	macro marketplaceSetUp(clientExtensionDeploy = null) {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		if (${clientExtensionDeploy} == "true") {
			var companyWebId = JSONCompany.getWebId();
			var clientExtension = "liferay-marketplace-custom-element";

			AntCommands.runCommand("build-test-workspace.xml", "deploy-workspace-client-extension -Dvirtual.instance.id=${companyWebId} -Dworkspace.client.extension.name=${clientExtension}");

			WaitForConsoleTextPresent(value1 = "STARTED liferaymarketplacecustomelement");
		}

		// This addition should be reverted when the issue ISSD-1572 is completed and the macro HeadlessSite.addSite() is usable.

		if (${viaFrontEnd} == "true") {
			Site.openSitesAdmin();

			MP2Configuration.addCP(
				siteName = "Marketplace Site",
				siteTemplateName = "Liferay Marketplace",
				siteType = "Site Template");
		}
		else {
			HeadlessSite.addSite(
				siteName = "Marketplace Site",
				templateName = "Liferay Marketplace",
				templateType = "Site Initializer");
		}

		ApplicationsMenu.gotoSite(site = "Marketplace Site");

		WaitForPageLoad();
	}

}