definition {

	@summary = "Default summary"
	macro _updateAccount(accountId = null, catalogId = null) {
		Variables.assertDefined(parameterList = "${accountId},${catalogId}");

		if (!(isSet(accountName))) {
			var accountName = "QA Test";
		}

		var portalURL = JSONCompany.getPortalURL();
		var userLoginInfo = JSONUtil2.formatJSONUser();

		var curl = '''
			${portalURL}/o/headless-admin-user/v1.0/accounts/${accountId} \
				-u ${userLoginInfo} \
				-H 'accept: application/json' \
				-H 'Content-Type: application/json' \
				-d '{
					"customFields": [
						{
							"customValue": {
								"data": "${catalogId}"
							},
							"dataType": "Text",
							"name": "CatalogId"
						}
					],
					"name": "${accountName}"
				}'
		''';

		var response = JSONCurlUtil.patch(${curl});

		echo(${response});
	}

	@summary = "Default summary"
	macro addMKTAccount() {
		if (!(isSet(accountName))) {
			var accountName = "QA Test";
		}

		if (!(isSet(accountType))) {
			var accountType = "Business";
		}

		if (!(isSet(externalReferenceCode))) {
			var externalReferenceCode = "MKT-ACCOUNT-01-ERC";
		}

		CommerceJSONAccountsAPI._addCommerceAccount(
			accountName = ${accountName},
			accountType = ${accountType},
			externalReferenceCode = ${externalReferenceCode});
	}

	@summary = "Default summary"
	macro addMKTCatalog() {
		if (!(isSet(catalogName))) {
			var catalogName = "QA Test";
		}

		CommerceJSONCatalogsAPI._addCatalog(catalogName = ${catalogName});
	}

	@summary = "Default summary"
	macro addMKTProduct() {
		if (!(isSet(catalogName))) {
			var catalogName = "QA Test";
		}

		if (!(isSet(fieldType))) {
			var fieldType = "radio";
		}

		if (!(isSet(optionKey))) {
			var optionKey = "dxp-license-usage-type";
		}

		if (!(isSet(optionName))) {
			var optionName = "DXP License Usage Type";
		}

		if (!(isSet(productDescription))) {
			var productDescription = "This is a full Description";
		}

		if (!(isSet(productName))) {
			var productName = "QA Product";
		}

		if (!(isSet(productStatus))) {
			var productStatus = 0;
		}

		if (!(isSet(productType))) {
			var productType = "Virtual";
		}

		if (!(isSet(shortDescription))) {
			var shortDescription = "This is a short description.";
		}

		CommerceJSONProductsAPI._addCommerceProduct(
			catalogName = ${catalogName},
			productDescription = ${productDescription},
			productName = ${productName},
			productType = ${productType},
			shortDescription = ${shortDescription});

		CommerceJSONOptionsAPI._assignOptionToCommerceProduct(
			fieldType = ${fieldType},
			optionKey = ${optionKey},
			optionName = ${optionName},
			productName = ${productName});

		for (var specificationKeyAndPriority : list "developer-name:0,latest-version:1,license-type:2,price-model:3,type:4") {
			var specificationKey = StringUtil.extractFirst(${specificationKeyAndPriority}, ":");
			var priority = StringUtil.extractLast(${specificationKeyAndPriority}, ":");

			CommerceJSONProductsAPI._addCommerceProductSpecifications(
				priority = ${priority},
				productName = ${productName},
				specificationKey = ${specificationKey},
				value = 0);
		}

		CommerceProducts.openProductsAdmin();

		CommerceNavigator.gotoEntry(entryName = ${productName});

		Click(
			key_fieldName = "Marketplace Product Type",
			locator1 = "Button#SELECT_BUTTON");

		AssetCategorization.selectCategories(categoryNameList = "App");

		Button.clickPublish();

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.generateAllSkuCombinations();
	}

	@summary = "Default summary"
	macro updateAccount() {
		if (!(isSet(accountName))) {
			var accountName = "QA Test";
		}

		if (!(isSet(catalogName))) {
			var catalogName = "QA Test";
		}

		JSONMP2.addMKTAccount(accountId = ${accountId});

		JSONMP2.addMKTCatalog(catalogId = ${catalogId});

		var accountId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = ${accountName});
		var catalogId = CommerceJSONCatalogsAPI._getCommerceCatalogIdByName(catalogName = ${catalogName});

		JSONMP2._updateAccount(
			accountId = ${accountId},
			catalogId = ${catalogId});

		// Workaround for LPS-192397

		Account.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = ${accountName});

		Account.assignUsers(
			accountName = ${accountName},
			assigneeName = "Dashboard ADM");

		Account.addAssigneeToRoleViaUsersTab(
			accountRoleTitle = "Account Administrator",
			accountUserName = "Dashboard ADM");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = StringUtil.toLowerCase("dashboard@adm.com"));
	}

}