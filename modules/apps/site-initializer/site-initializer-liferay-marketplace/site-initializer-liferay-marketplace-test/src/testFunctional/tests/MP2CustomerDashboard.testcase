@component-name = "portal-site-management"
definition {

	property osgi.modules.includes = "site-initializer-liferay-marketplace";
	property portal.release = "false";
	property portal.upstream = "true";
	property test.liferay.virtual.instance = "true";
	property test.smtp.server.enabled = "true";
	property testray.main.component.name = "Site Initializer Liferay Marketplace";

	var testSiteName = "Marketplace Site";
	var testSiteURL = "marketplace-site";

	setUp {
		task ("Set up instance and create a new Marketplace Site") {

			// This addition should be reverted when the issue ISSD-1572 is completed and the macro HeadlessSite.addSite() is usable.

			MP2Configuration.marketplaceSetUp(
				clientExtensionDeploy = "true",
				viaFrontEnd = "true");
		}

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Create a New Account and assign a user") {
			JSONMP2.updateAccount();

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "QA Test",
				userEmailAddress = "dashboard@adm.com");
		}

		task ("Login with the created user and go to Marketplace") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "dashboard@adm.com",
				userLoginFullName = "Dashboard ADM");

			MP2Navigator.gotoMP2();
		}
	}

	tearDown {
		MP2Configuration.marketplaceInitializersTearDown(doLogout = "true");
	}

	@description = "LPS-174844 | Verify that after inviting a member, as a Customer, the admin is taken back to the members section of the Dashboard."
	@priority = 5
	test AssertCustomerIsTakenBackDashboard {
		task ("Given that the user goes to the Customer Dashboard page") {
			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");
		}

		task ("When the admin user invites a new member") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Administrator",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("Then after inviting a member, as a Customer, the admin is taken back to the members section of the Dashboard.") {
			AssertElementPresent(
				key_header = "Members",
				locator1 = "MP2Dashboards#HEADER");
		}
	}

	@description = "LPS-174844 | After inviting a member, the Administrator is able to see the new member listed in the user list, greyed out and with an “Invited” tag."
	@priority = 3
	test AssertNewMemberListedAndGreyedOut {
		task ("Given that the user goes to the Customer Dashboard page") {
			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");
		}

		task ("When the user invites a new member") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Administrator",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("Then the admin user should be able to see the new member listed in the user list, greyed out and with an “Invited” tag.") {
			AssertElementPresent(
				key_name = "QA Test",
				locator1 = "MP2Dashboards#INVITED_MEMBER");
		}
	}

	@description = "LPS-174845 | If the user chooses Accept Invitation, he can log in with the invited roles."
	@priority = 5
	test CanLogWithInvitedRoles {
		task ("Given that a marketplace account administrator invites a member to the Customer Dashboard") {
			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Buyer",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And I log out of the marketplace account") {
			User.logoutPG();
		}

		task ("And go to the Mock Mock page > Accept the email you received") {
			MockMock._gotoMail();
		}

		task ("When the user log into the account") {
			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "customer-gate",
				userEmailAddress = "test.mp@liferay.com");
		}

		task ("Then I should be able to assert that the user has access to the Customer Gate page from the Marketpace account") {
			AssertLocation.assertPartialLocation(value1 = "web/marketplace-site/customer-gate");
		}
	}

	@description = "LPS-174845 | Verify if the user can be invited to more than one account (Publisher and Customer)."
	@priority = 4
	test CannotBeInvitedToMoreThanOneDashboard {
		task ("Given that a marketplace account administrator invites a member to the Publisher Dashboard") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "App Editor",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And the user accepts the invitation") {
			User.logoutPG();

			MockMock._gotoMail();

			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "customer-gate",
				userEmailAddress = "test.mp@liferay.com");

			MP2Dashboards.customerGateFlow();

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			var table = '''
				| Name    | Test QA             |
				| Email   | test.mp@liferay.com |
				| Role    | App Editor          |
			''';

			var rawTable = TableUtil.newTable(${table});

			for (var row : table ${rawTable}) {
				var label = "${row[0]}";
				var value = "${row[1]}";

				AssertElementPresent(
					key_label = ${label},
					key_text = ${value},
					locator1 = "MP2Dashboards#DASHBOARD_TABLE");
			}
		}

		task ("When I invite the same user to the Customer Dashboard") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "dashboard@adm.com",
				userLoginFullName = "Dashboard ADM");

			MP2Navigator.gotoMP2();

			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Buyer",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("Then I should be able to state that the user cannot invite the same non-admin user, for both dashboards") {
			MP2Utils.viewErrorMessage();
		}
	}

	@description = "LPS-174844 | When the user have an Account Buyer role, it should not be able to invite new members."
	@priority = 5
	test CannotInviteNewMembers {
		task ("Given that the user goes to the Customer Dashboard page") {
			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "QA Test",
				userEmailAddress = "cab@buyer.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "cab@buyer.com",
				userLoginFullName = "Customer Account Buyer");

			MP2Navigator.openSitePage(pageName = "Customer Dashboard");
		}

		task ("When the user tries to invite a new member") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");
		}

		task ("Then the user has an Account Buyer role, it should not be able to invite new members.") {
			MP2Dashboards.viewNewMemberButtonNotPresent();
		}
	}

	@description = "LPS-174844 | As a customer, after inviting a member, verify if when clicking on the invited member, listed on 'members', the admin is able to see its details."
	@priority = 3
	test CanSeeMemberDetails {
		task ("Given that the user goes to the Customer Dashboard page") {
			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");
		}

		task ("When the admin user invites a new member") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Administrator",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("Then after inviting a member, verify if when clicking on the invited member, listed on 'members', the admin is able to see its details.") {
			var cardDetailsList = "Profile,Roles,Account";

			MP2Dashboards.clickOnTheInvitedUser(
				label = "Role",
				value = "Invited Member");

			MP2Utils.assertDetailsUser(detailsList = ${cardDetailsList});
		}
	}

	@description = "LPS-174809 | Verify if it is possible to upload an image for the form avatar"
	@priority = 3
	test CanUploadImage {
		task ("Given that the user goes to the Customer Gate page") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/marketplace-site/customer-gate");

			MP2Dashboards.clickOnTheGetStartedButton();
		}

		task ("When I upload the image") {
			UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
				key_field = "image",
				locator1 = "MP2Dashboards#UPLOAD_FIELD",
				value1 = "marketplace_icon.png");
		}

		task ("Then I should be able to assert that the upload was made") {
			MP2Utils.assertUploadImage();
		}
	}

	@description = "ISSD-1261 | After an Administrator Account invite a new member, assert if the user is able to see the email in their email box"
	@priority = 5
	test CanViewInviteEmail {
		task ("Given that the user goes to the Customer Dashboard page") {
			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");
		}

		task ("And the admin user invites a new member") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Buyer",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("When I go to MockMock") {
			User.logoutPG();

			MockMock._gotoMail();
		}

		// Needs refactoring after this bug ISSD-1362 is made

		task ("Then I should be able to assert that the invitation email is present on the page") {
			MockMock._viewMailFromInbox(
				asset = "Liferay Marketplace - Invitation from Dashboard",
				recipient = "test.mp@liferay.com",
				sender = "dashboard@adm.com");
		}
	}

	@description = "LPS-174845 | Verify that after accepting the invitation, the invited user role is listed in the members section of the Customer Dashboard."
	@priority = 3
	test CanViewListedGuestNoGreyedOut {
		task ("Given the user accepts the invitation") {
			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Buyer",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");

			User.logoutPG();

			MockMock._gotoMail();
		}

		task ("And logs into the panel with the invited roles") {
			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "customer-gate",
				userEmailAddress = "test.mp@liferay.com");
		}

		task ("When I go to the member page") {
			MP2Dashboards.customerGateFlow();

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");
		}

		task ("Then I should be able to assert that the invited user's status is now Active") {
			var table = '''
				| Name    | Test QA             |
				| Email   | test.mp@liferay.com |
				| Role    | Account Buyer       |
			''';

			var rawTable = TableUtil.newTable(${table});

			for (var row : table ${rawTable}) {
				var label = "${row[0]}";
				var value = "${row[1]}";

				AssertElementPresent(
					key_label = ${label},
					key_text = ${value},
					locator1 = "MP2Dashboards#DASHBOARD_TABLE");
			}
		}
	}

	@description = "LPS-174809 | Verify that after accepting an invitation, as a Publisher, when logging into the marketplace account the customer does not see the customer gate"
	@priority = 4
	test DoNotRedirectToCustomerGate {
		task ("Given that a marketplace account administrator invites a member to the Publisher Dashboard") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "App Editor",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And I go to MockMock") {
			User.logoutPG();

			MockMock._gotoMail();
		}

		task ("When the user accepts the invitation to the Publisher Dashboard") {
			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "loading",
				userEmailAddress = "test.mp@liferay.com");

			AssertLocation.assertPartialLocation(value1 = "web/marketplace-site/publisher-dashboard");
		}

		task ("Then I should be able to assert that the user does not go through the Customer Gate page") {
			MP2Dashboards.assertNotViewCustomerGatePage(title = "Becoming a Liferay Marketplace Customer");
		}
	}

	@description = "LPS-174809 | Verify that after passing through the gate and confirming all the information, the user is redirected to the account dashboard"
	@priority = 5
	test RedirectToAccountDashboard {
		task ("Given that a user is invited to the Customer Dashboard") {
			MP2Navigator.openSitePage(pageName = "Customer Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Buyer",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And go to MockMock > Accept invitation to Marketplace account") {
			User.logoutPG();

			MockMock._gotoMail();

			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "customer-gate",
				userEmailAddress = "test.mp@liferay.com");
		}

		task ("When I go through the Customer Gate page") {
			MP2Dashboards.customerGateFlow();
		}

		task ("Then I should be able to assert that the user is redirected to the account dashboard") {
			AssertLocation.assertPartialLocation(value1 = "web/marketplace-site/customer-dashboard");
		}
	}

}