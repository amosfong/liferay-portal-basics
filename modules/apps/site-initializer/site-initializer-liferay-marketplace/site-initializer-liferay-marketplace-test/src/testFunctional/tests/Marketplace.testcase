@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "site-initializer-liferay-marketplace";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Initializer Liferay Marketplace";

	var testSiteName = "Marketplace Site";
	var testSiteURL = "marketplace-site";

	setUp {

		// This addition should be reverted when the issue ISSD-1572 is completed and the macro HeadlessSite.addSite() is usable.

		MP2Configuration.marketplaceSetUp(
			clientExtensionDeploy = "true",
			viaFrontEnd = "true");

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}
	}

	tearDown {
		MP2Configuration.marketplaceInitializersTearDown(doLogout = "true");
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Accounts Users will be created for it as well"
	@priority = 3
	test AccountUsersAreCreatedForMP20 {
		task ("Given that I go to the Account Users page") {
			AccountUsers.openAccountUsersAdmin();
		}

		task ("Then I should be able to assert that Account Users was created") {
			for (var accountName : list "Dashboard ADM,Customer Account Buyer,Publisher App Editor") {
				LexiconEntry.viewEntryName(rowEntry = ${accountName});
			}
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify if Liferay Marketplace can be created with Site initializer"
	@priority = 5
	test CanMP20BeCreated {
		task ("Given that I go to the Marketplace Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}

		task ("Then I should be able to assert that the App Marketplace page is present") {
			AssertElementPresent(
				key_title = "Applications",
				locator1 = "Marketplace#FRAGMENT_HEADING");
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Catalogs will also be created for it as well"
	@priority = 4
	test CatalogsAreCreatedForMP20 {
		task ("Given that I go to the Catalogs page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Catalogs");

			// Workaround

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "Acme Development");
		}

		task ("Then I should be able to assert that Catalogs was created for the Marketplace Site") {
			CommerceEntry.viewCatalogsEntry(
				catalogCurrency = "US Dollar",
				catalogLanguage = "English (United States)",
				catalogName = "Acme Development");
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Channels will also be created for it as well"
	@priority = 4
	test ChannelsAreCreatedForMP20 {
		task ("Given that I go to the Channels page") {
			CommerceChannels.openChannelsAdmin();

			// Workaround

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "Marketplace Channel");
		}

		task ("Then I should be able to assert that Channels was created for the Marketplace Site") {
			CommerceEntry.viewChannelsEntry(
				channelCurrency = "US Dollar",
				channelName = "Marketplace Channel",
				channelSiteName = "Marketplace Site",
				channelType = "Site",
				commerceSiteType = "B2X");
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Products Options will also be created for it as well"
	@priority = 3
	test ProductsOptionsAreCreatedForMP20 {
		task ("Given that I go to the Product Options page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Options");
		}

		task ("Then I should be able to assert that all Product Options were created for the Marketplace Site") {
			CommerceNavigator.gotoEntry(entryName = "Trial");

			CommerceEntry.viewOptionsEntry(
				optionDescription = "Specifies if a trial exists for a given app or solution submission.",
				optionName = "Trial");

			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "DXP License Usage Type");

			CommerceEntry.viewOptionsEntry(
				optionDescription = "Specifies if a acquision of an app.",
				optionName = "DXP License Usage Type");

			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "DXP License Support");

			CommerceEntry.viewOptionsEntry(
				optionDescription = "Adds on support for DXP Licenses.",
				optionName = "DXP License Support");
		}
	}

	@description = "Story ID: LPS-183796 | Test Summary: Verify that when the Marketplace is created, Specification Group is also created"
	@priority = 3
	test SpecificationGroupAreCreatedForMP20 {
		task ("Given that I go to the Specifications page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Specifications");
		}

		task ("Then I should be able to assert that Specification Groups was created for the Marketplace Site") {
			CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

			CommerceEntry.viewSpecificationGroupsEntries(specificationGroupsEntries = "Pricing and Licensing Terms,App Support and Help,Product Metadata");
		}
	}

	@description = "Story ID: LPS-183796 | Test Summary: Verify that when the Marketplace is created, Specification Label is also created"
	@priority = 3
	test SpecificationLabelAreCreatedForMP20 {
		task ("Given that I go to the Specifications page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Specifications");

			Pagination.changePagination(itemsPerPage = 40);
		}

		task ("Then I should be able to assert that Specification Labels was created for the Marketplace Site") {
			CommerceEntry.viewSpecificationLabelsEntries(specificationLabelsEntries = "App API Reference URL,Latest Version,Source Code URL,Trial Length,License Term,Developer Name,License Type,App Usage Terms URL,Type,Past Versions Work With,Current Requirements,Product Downloads,Price Model,Lifetime License,Publisher Name,App Installation Guide URL,App Documentation URL,Licence Duration,Product Notes,Publisher Web site URL,Support URL");
		}
	}

}