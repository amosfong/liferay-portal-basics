@component-name = "portal-site-management"
definition {

	property osgi.modules.includes = "site-initializer-liferay-marketplace";
	property portal.release = "false";
	property portal.upstream = "true";
	property test.liferay.virtual.instance = "true";
	property test.smtp.server.enabled = "true";
	property testray.main.component.name = "Site Initializer Liferay Marketplace";

	var testSiteName = "Marketplace Site";
	var testSiteURL = "marketplace-site";

	setUp {
		task ("Set up instance and create a new Marketplace Site") {

			// This addition should be reverted when the issue ISSD-1572 is completed and the macro HeadlessSite.addSite() is usable.

			MP2Configuration.marketplaceSetUp(
				clientExtensionDeploy = "true",
				viaFrontEnd = "true");
		}

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Update the account with catalogId field") {
			JSONMP2.updateAccount();
		}

		task ("Assign the users to the account") {
			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "QA Test",
				userEmailAddress = "dashboard@adm.com");
		}

		task ("Go to Marketplace and login with the created user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "dashboard@adm.com",
				userLoginFullName = "Dashboard ADM");

			MP2Navigator.gotoMP2();
		}
	}

	tearDown {
		MP2Configuration.marketplaceInitializersTearDown(doLogout = "true");
	}

	@description = "LPS-160952 | Assert the subject of the e-mail: (Liferay Marketplace - Invitation from %Admin User%)"
	@priority = 4
	test AssertTheDetailsOfTheEmail {
		task ("Given that the user sends an invitation") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Administrator",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");

			User.logoutPG();
		}

		task ("When the user accesses the invitation email") {
			MockMock._gotoMail();
		}

		task ("Then I should be able to assert the subject of the email") {
			MockMock._viewMailFromInbox(
				asset = "Liferay Marketplace - Invitation from Dashboard",
				recipient = "test.mp@liferay.com",
				sender = "dashboard@adm.com");
		}
	}

	@description = "LPS-162211 | Publisher admin should be able to read invited user record details"
	@priority = 3
	test CanAccessInvitedUserRecordDetails {
		task ("Given that the user goes to the Publisher Dashboard page") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");
		}

		task ("And the user clicks Members in the side menu") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");
		}

		task ("When the user fills out the form and sends the invitation") {
			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "Account Administrator",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And the user opens the details of the invited member") {
			MP2Dashboards.clickOnTheInvitedUser(
				label = "Role",
				value = "Invited Member");
		}

		task ("Then I should be able to assert all user details") {
			var cardDetailsList = "Profile,Roles,Account";

			MP2Utils.assertDetailsUser(detailsList = ${cardDetailsList});
		}
	}

	@description = "LPS-162211 | As a Publisher, after inviting a member, the admin should be taken back to the members section of the Dashboard"
	@priority = 5
	test CanInviteMemberToTheMarketplaceAccount {
		task ("Given that the user goes to the Publisher Dashboard page") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");
		}

		task ("And the user clicks Members in the side menu") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");
		}

		task ("When the user fills out the form and sends the invitation") {
			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "App Editor",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("Then I should be able to assert that the user has been invited") {
			var table = '''
				| Name    | Test QA             |
				| Email   | test.mp@liferay.com |
				| Role    | Invited Member      |
			''';

			var rawTable = TableUtil.newTable(${table});

			for (var row : table ${rawTable}) {
				var label = "${row[0]}";
				var value = "${row[1]}";

				AssertElementPresent(
					key_label = ${label},
					key_text = ${value},
					locator1 = "MP2Dashboards#DASHBOARD_TABLE");
			}
		}
	}

	@description = "LPS-160952 | Verify that when the invited user accepts the invitation, and has a Liferay account, he can log in with the invited roles"
	@priority = 5
	test CanLoginToMarketplaceAccount {
		task ("Given that a marketplace account administrator invites a member to the Publisher Dashboard") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "App Editor",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And I log out of the marketplace account") {
			User.logoutPG();
		}

		task ("And go to the Mock Mock page > Accept the email you received") {
			MockMock._gotoMail();
		}

		task ("When the user log into the account") {
			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "loading",
				userEmailAddress = "test.mp@liferay.com");
		}

		task ("Then I should be able to assert that the user has access to the Publisher Dashboard from the Marketpace account") {
			AssertLocation.assertPartialLocation(value1 = "web/marketplace-site/publisher-dashboard");
		}
	}

	@description = "LPS-162211 | Verify that an alert will appear when user don't fill a mandatory field and that “Send Invite” button only will be clickable after fill all mandatory fields"
	@ignore = "true"
	@priority = 3
	test CannotContinueWithoutFillRequiredFields {

		// Blocked by POSHI

	}

	@description = "LPS-165215 | Verify that after the member accepts the invitation to the marketplace account, the 'Resend Invitation' button is no longer displayed"
	@priority = 3
	test CannotViewReinviteButton {
		task ("Given that the admin user invites a new user to the Publisher Dashboard") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "App Editor",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And I see that the resend button is present on the page") {
			MP2Dashboards.clickOnTheInvitedUser(
				label = "Role",
				value = "Invited Member");

			MP2Dashboards.assertResendInvitationButton();
		}

		task ("When the invited member accepts the invitation") {
			User.logoutPG();

			MockMock._gotoMail();

			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "loading",
				userEmailAddress = "test.mp@liferay.com");
		}

		task ("And I go back to the members page details") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "dashboard@adm.com",
				userLoginFullName = "Dashboard ADM");

			MP2Navigator.gotoMP2();

			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.clickOnTheInvitedUser(
				label = "Role",
				value = "App Editor");
		}

		task ("Then I should be able to assert that the 'Resend Invitation' button is not present on the page") {
			MP2Dashboards.assertNoResendInvitationButton();
		}
	}

	@description = "LPS-162211 | Assert that when you have an App Editor role, you should not be able to invite new members"
	@priority = 4
	test CannotViewTheNewMemberButton {
		task ("Given that I log in with 'App Editor' credentials") {
			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "QA Test",
				userEmailAddress = "pae@editor.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "pae@editor.com",
				userLoginFullName = "Publisher App Editor");
		}

		task ("And the user goes to the Publisher Dashboard page") {
			MP2Navigator.gotoMP2();

			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");
		}

		task ("When the user clicks on Members in the side menu") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");
		}

		task ("Then I should be able to assert that the '+ New Member' button is not present on the page") {
			MP2Dashboards.viewNewMemberButtonNotPresent();
		}
	}

	@description = "LPS-165215 | Verify that after inviting a member, as Publisher, if the member is still listed as invited, the member can be reinvited to marketplace account"
	@priority = 4
	test CanReinviteListedUser {
		task ("Given that the admin user invites a new user to the Publisher Dashboard") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "App Editor",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");
		}

		task ("And the user receives the invitation email") {
			User.logoutPG();

			MockMock._gotoMail();

			MockMock._viewMailFromInbox(
				asset = "Liferay Marketplace - Invitation from Dashboard",
				recipient = "test.mp@liferay.com",
				sender = "dashboard@adm.com");
		}

		task ("And delete the invitation email without accepting it") {
			MockMock.deleteMail(deleteAll = "true");

			MockMock.viewNoMail();
		}

		task ("And the user remains in the member list as a invited") {
			User.loginUserPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "dashboard@adm.com");

			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.clickOnTheInvitedUser(
				label = "Role",
				value = "Invited Member");
		}

		task ("When I click the 'Resend Invitation' button") {
			MP2Dashboards.clickOnTheResendInvitationButton();
		}

		task ("Then I should be able to assert that the invitation can be resended") {
			User.logoutPG();

			MockMock._gotoMail();

			MockMock._viewMailFromInbox(
				asset = "Liferay Marketplace - Invitation from Dashboard",
				recipient = "test.mp@liferay.com",
				sender = "dashboard@adm.com");
		}
	}

	@description = "LPS-160952 | Verify that after accepting the invitation, the guest user role is listed in the members section of the editor account"
	@priority = 3
	test CanViewTheUserRoleInTheMemberList {
		task ("Given the user accepts the invitation") {
			MP2Navigator.openSitePage(pageName = "Publisher Dashboard");

			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");

			MP2Dashboards.inviteNewMember(
				button = "true",
				checkboxName = "App Editor",
				emailAddress = "test.mp@liferay.com",
				firstName = "Test",
				lastName = "QA");

			User.logoutPG();

			MockMock._gotoMail();
		}

		task ("And logs into the panel with the invited roles") {
			MP2Utils.firstLoginMKT(
				asset = "Liferay Marketplace - Invitation from Dashboard ADM",
				bodyLink = "Accept invitation",
				recipient = "dashboard@adm.com",
				route = "loading",
				userEmailAddress = "test.mp@liferay.com");
		}

		task ("When I go to the member page") {
			MP2Dashboards.clickBreadcrumb(accountTitle = "QA Test");

			MP2Navigator.gotoNavItem(navItem = "Members");
		}

		task ("Then I should be able to assert that the invited user's status is now Active") {
			var table = '''
				| Name    | Test QA             |
				| Email   | test.mp@liferay.com |
				| Role    | App Editor          |
			''';

			var rawTable = TableUtil.newTable(${table});

			for (var row : table ${rawTable}) {
				var label = "${row[0]}";
				var value = "${row[1]}";

				AssertElementPresent(
					key_label = ${label},
					key_text = ${value},
					locator1 = "MP2Dashboards#DASHBOARD_TABLE");
			}
		}
	}

}