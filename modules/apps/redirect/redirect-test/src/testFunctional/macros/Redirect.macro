definition {

	@summary = "Default summary"
	macro addEntry(siteName = null, destinationURL = null, sourceURL = null, noUpdateReferences = null, groupName = null, portalName = null, redirectChain = null, redirectURLVariation = null, destinationURLVariation = null, noUpdateRedirect = null, destinationPageName = null, redirectType = null, expirationDate = null, sourceURLVariation = null, updateRedirect = null) {
		var portalURL = PropsUtil.get("portal.url");

		if (!(isSet(skipNavigation))) {
			LexiconEntry.gotoAdd();
		}

		AssertTextEquals(
			locator1 = "TextInput#REDIRECT_SOURCE_URL_PREFIX",
			value1 = "${portalURL}/web/${siteName}");

		AssertElementPresent(locator1 = "Button#TRY_REDIRECTION_DISABLED");

		Type(
			locator1 = "TextInput#REDIRECT_SOURCE_URL",
			value1 = ${sourceURL});

		Type(
			locator1 = "TextInput#REDIRECT_DESTINATION_URL",
			value1 = ${destinationURL});

		if (isSet(checkDestinationURL)) {
			Click(locator1 = "Button#TRY_REDIRECTION");

			SelectWindow(value1 = "title=${destinationPageName} - ${groupName} - ${portalName}");

			AssertLocation(value1 = ${destinationURL});

			Close.closeWindow(locator1 = "title=${destinationPageName} - ${groupName} - ${portalName}");
		}

		if (isSet(redirectType)) {
			Select(
				locator1 = "Select#REDIRECT_TYPE",
				value1 = ${redirectType});
		}

		if (isSet(expirationDate)) {
			Type.sendKeys(
				locator1 = "TextInput#EXPIRATION_DATE",
				value1 = ${expirationDate});
		}

		Button.click(button = "Create");

		if (${redirectURLVariation} == "Null") {
			AssertTextEquals.assertPartialText(
				locator1 = "TextInput#REQUIRED_ALERT",
				value1 = "field is required.");
		}
		else if (${sourceURLVariation} == "Duplicate") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "Error:There is already a redirect set for the same source URL.");
		}
		else if (${sourceURLVariation} == "Invalid") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "Please enter a source URL that does not begin with a slash.");
		}
		else if (${sourceURLVariation} == "LengthLimit") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "Error: The source URL is too long.");
		}
		else if (${sourceURLVariation} == "LocaleKeyword") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "Error: Please enter a source URL that does not conflict with the keyword ${localeKeyword}.");
		}
		else if ((${destinationURLVariation} == "Space") || (${destinationURLVariation} == "RelativeURL")) {
			AssertTextEquals.assertPartialText(
				locator1 = "TextInput#ALERT",
				value1 = "This URL is not supported");
		}
		else if (${redirectChain} == "true") {
			Redirect.configureRedirectChain(
				noUpdateRedirect = ${noUpdateRedirect},
				noUpdateReferences = ${noUpdateReferences},
				updateRedirect = ${updateRedirect});

			Alert.viewSuccessMessage();
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro addEntryVia404URLs(sourceURL = null, noUpdateReferences = null, activeIgnoreURL = null, siteName = null, destinationURL = null, redirectType = null, ignoredURL = null, expirationDate = null) {
		var portalURL = PropsUtil.get("portal.url");

		if (!(isSet(skipNavigation))) {
			AssertClick(
				key_navItem = "404 URLs",
				locator1 = "NavBar#NAV_ITEM_REDIRECTION",
				value1 = "404 URLs");
		}

		Click(locator1 = "ManagementBar#FILTER");

		if (isSet(ignoredURL)) {
			MenuItem.click(menuItem = "Ignored URLs");

			Redirect.gotoEntryMenuItem(
				item = "Create Redirect",
				sourceURL = ${ignoredURL});
		}
		else {
			MenuItem.click(menuItem = "Active URLs");

			Redirect.gotoEntryMenuItem(
				item = "Create Redirect",
				sourceURL = ${activeIgnoreURL});
		}

		AssertTextEquals(
			locator1 = "TextInput#REDIRECT_SOURCE_URL_PREFIX",
			value1 = "${portalURL}/web/${siteName}");

		AssertTextEquals(
			locator1 = "TextInput#REDIRECT_SOURCE_URL",
			value1 = ${sourceURL});

		Type(
			locator1 = "TextInput#REDIRECT_DESTINATION_URL",
			value1 = ${destinationURL});

		if (isSet(redirectType)) {
			Select(
				locator1 = "Select#REDIRECT_TYPE",
				value1 = ${redirectType});
		}

		if (isSet(expirationDate)) {
			Type.sendKeys(
				locator1 = "TextInput#EXPIRATION_DATE",
				value1 = ${expirationDate});
		}

		Button.click(button = "Create");

		Redirect.configureRedirectChain(noUpdateReferences = ${noUpdateReferences});

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro addPattern(destinationIndex = null, patternIndex = null, pattern = null, userAgent = null, destinationURL = null, userAgentIndex = null) {
		if (${patternIndex} != 0) {
			Click(
				key_index = ${patternIndex},
				locator1 = "Button#ADD_REPEATABLE");
		}

		Type(
			key_index = ${patternIndex},
			key_text = "Pattern",
			locator1 = "TextInput#PATTERN",
			value1 = ${pattern});

		var key_index = ${destinationIndex} + 1;

		Type(
			key_index = ${destinationIndex},
			key_text = "Destination URL",
			locator1 = "TextInput#DESTINATION_URL",
			value1 = ${destinationURL});

		if (isSet(userAgent)) {
			Select(
				key_index = ${userAgentIndex},
				locator1 = "Select#USER_AGENT",
				value1 = ${userAgent});
		}

		ClickNoError(locator1 = "Button#SAVE");

		if (isSet(destinationFieldError)) {
			AssertTextEquals(
				locator1 = "Message#ERROR_FORM_FIELD_REQUIRED",
				value1 = "Please enter a valid URL.");

			AssertElementPresent(locator1 = "Button#DISABLED_BUTTON");
		}
		else if (isSet(patternFieldError)) {
			Alert.viewErrorMessage(errorMessage = "Error:Patterns must be valid regular expressions.");
		}
		else {
			Alert.viewSuccessMessage();

			Alert.closeMessage(messageType = "SUCCESS");
		}
	}

	@summary = "Default summary"
	macro configureCrawlerUserAgents(removeCrawlerUserAgent = null, addCrawlerUserAgent = null) {
		if (isSet(removeCrawlerUserAgent)) {
			Click(
				key_crawlerUserAgent = ${removeCrawlerUserAgent},
				locator1 = "Redirect#CRAWLER_USER_AGENT_REMOVE");

			SystemSettings.saveConfiguration();

			AssertElementNotPresent(
				key_crawlerUserAgent = ${removeCrawlerUserAgent},
				locator1 = "Redirect#CRAWLER_USER_AGENT_REMOVE");
		}

		if (isSet(addCrawlerUserAgent)) {
			Click(locator1 = "Redirect#CRAWLER_USER_AGENT_DUPLICATE_LAST");

			Type(
				locator1 = "Redirect#CRAWLER_USER_AGENT_INPUT_LAST",
				value1 = ${addCrawlerUserAgent});

			SystemSettings.saveConfiguration();

			AssertElementPresent(
				key_crawlerUserAgent = ${addCrawlerUserAgent},
				locator1 = "Redirect#CRAWLER_USER_AGENT_REMOVE");
		}
	}

	@summary = "Default summary"
	macro configureFriendlyURLRedirection(redirectionType = null) {
		var baseURL = ${baseURL};

		if (!(isSet(baseURL))) {
			var baseURL = PropsUtil.get("portal.url");
		}

		if (isSet(systemSettingsInstanceScope)) {
			var portlet = "SystemSettingsPortlet";
		}
		else {
			var portlet = "InstanceSettingsPortlet";
		}

		Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_${portlet}&_com_liferay_configuration_admin_web_portlet_${portlet}_factoryPid=com.liferay.friendly.url.configuration.FriendlyURLRedirectionConfiguration&_com_liferay_configuration_admin_web_portlet_${portlet}_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration&_com_liferay_configuration_admin_web_portlet_${portlet}_pid=com.liferay.friendly.url.configuration.FriendlyURLRedirectionConfiguration");

		Click(locator1 = "Dropdown#TRIGGER");

		DropdownMenuItem.click(menuItem = ${redirectionType});

		AssertTextEquals(
			locator1 = "Dropdown#TRIGGER",
			value1 = ${redirectionType});

		SystemSettings.saveConfiguration();
	}

	@summary = "Default summary"
	macro configureRedirectChain(noUpdateReferences = null) {
		if (isSet(updateRedirect)) {
			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Update Redirect",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
		else {
			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Update References",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		if (${noUpdateReferences} == "true") {
			if (isSet(noUpdateRedirect)) {
				FormFields.disableCheckbox(fieldName = "Update Redirect");
			}
			else {
				FormFields.disableCheckbox(fieldName = "Update References");
			}
		}

		if (isSet(destinationURLEdit)) {
			AssertClick(
				locator1 = "Button#MODAL_ITEM_SUBMIT",
				value1 = "Save");
		}
		else {
			AssertClick(
				locator1 = "Button#MODAL_ITEM_SUBMIT",
				value1 = "Create");
		}
	}

	@summary = "Default summary"
	macro deleteEntry(sourceURL = null) {
		if (isSet(deletions)) {
			ClickNoError(
				key_text = "trash",
				locator1 = "ManagementBar#ANY_ICON");
		}
		else {
			Redirect.gotoEntryMenuItem(
				item = "Delete",
				sourceURL = ${sourceURL});
		}

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro editEntry(sourceURL = null, noUpdateReferences = null, sourceURLEdit = null, noUpdateRedirect = null, redirectTypeEdit = null, destinationURLEdit = null, expirationDate = null, updateRedirect = null) {
		if (!(isSet(skipNavigation))) {
			Redirect.gotoEntryMenuItem(
				item = "Edit",
				sourceURL = ${sourceURL});
		}

		if (isSet(toolTip)) {
			MouseOver(locator1 = "UserBar#USER_AVATAR_IN_CONTROL_MENU");

			MouseOver(locator1 = "Icon#TOOLTIP");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#TOOLTIP",
				value1 = "The redirect type affects how long search engines and browsers cache the information.");
		}

		if (isSet(sourceURLEdit)) {
			Type(
				locator1 = "TextInput#REDIRECT_SOURCE_URL",
				value1 = ${sourceURLEdit});
		}

		if (isSet(destinationURLEdit)) {
			Type(
				locator1 = "TextInput#REDIRECT_DESTINATION_URL",
				value1 = ${destinationURLEdit});
		}

		if (isSet(redirectTypeEdit)) {
			Select(
				locator1 = "Select#REDIRECT_TYPE",
				value1 = ${redirectTypeEdit});
		}

		if (isSet(permanentEntryEdit)) {
			AssertTextEquals(
				locator1 = "Message#INFO",
				value1 = "Info:Changes to this redirect might not be immediately seen for users whose browsers have cached the old redirect configuration.");
		}

		if (isSet(expirationDate)) {
			Type.sendKeys(
				locator1 = "TextInput#EXPIRATION_DATE",
				value1 = ${expirationDate});
		}

		Button.clickSave();

		if (isSet(redirectChain)) {
			Redirect.configureRedirectChain(
				destinationURLEdit = ${destinationURLEdit},
				noUpdateRedirect = ${noUpdateRedirect},
				noUpdateReferences = ${noUpdateReferences},
				updateRedirect = ${updateRedirect});

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro gotoConfigureCrawlerUserAgents() {
		var baseURL = PropsUtil.get("portal.url");

		if (isSet(navigateFromJavaScriptSEODynamicRendering)) {
			Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&p_p_mode=view&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=com.liferay.layout.seo.web.internal.configuration.LayoutSEODynamicRenderingConfiguration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_pid=com.liferay.layout.seo.web.internal.configuration.LayoutSEODynamicRenderingConfiguration");

			Alert.viewWarningSpecific(key_warningMessage = "To set up the user agents, go to System Settings > Pages > Crawler User Agents.");

			Click(
				key_href = "LayoutSEODynamicRenderingConfiguration",
				key_text = "Crawler User Agents",
				locator1 = "Link#ANY_HREF_2");
		}
		else {
			Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&p_p_mode=view&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=com.liferay.redirect.configuration.CrawlerUserAgentsConfiguration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_pid=com.liferay.redirect.configuration.CrawlerUserAgentsConfiguration");
		}

		AssertVisible(
			key_title = "Crawler User Agents",
			locator1 = "Header#H2_TITLE");
	}

	@summary = "Default summary"
	macro gotoEntryMenuItem(sourceURL = null, item = null) {
		LexiconTable.clickEllipsisItem(
			item = ${item},
			tableEntry = ${sourceURL});
	}

	@summary = "Default summary"
	macro gotoPatternsTab() {
		Click(
			key_tab = "Patterns",
			locator1 = "NavTab#TAB_LINK");
	}

	@summary = "Default summary"
	macro ignoreEntry(unignore = null, ignoreURL = null, unignoreAllEntries = null, ignoreAllEntries = null) {
		if (!(isSet(skipNavigation))) {
			AssertClick(
				key_navItem = "404 URLs",
				locator1 = "NavBar#NAV_ITEM_REDIRECTION",
				value1 = "404 URLs");
		}

		Click(locator1 = "ManagementBar#FILTER");

		if (${unignore} == "true") {
			MenuItem.click(menuItem = "Ignored URLs");

			if (${unignoreAllEntries} == "true") {
				PortletEntry.selectAll();

				Click(
					key_text = "view",
					locator1 = "ManagementBar#ANY_ICON");
			}
			else {
				Redirect.gotoEntryMenuItem(
					item = "Unignore",
					sourceURL = ${ignoreURL});
			}

			Alert.viewSuccessMessage();
		}
		else {
			MenuItem.click(menuItem = "Active URLs");

			if (${ignoreAllEntries} == "true") {
				PortletEntry.selectAll();

				Click(
					key_text = "hidden",
					locator1 = "ManagementBar#ANY_ICON");
			}
			else {
				Redirect.gotoEntryMenuItem(
					item = "Ignore",
					sourceURL = ${ignoreURL});
			}

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro open404URLsAdmin(siteURLKey = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_redirect_web_internal_portlet_RedirectPortlet&_com_liferay_redirect_web_internal_portlet_RedirectPortlet_navigation=404-urls");
	}

	@summary = "Default summary"
	macro openRedirectAdmin(siteURLKey = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_redirect_web_internal_portlet_RedirectPortlet");
	}

	// You can use this navigation when you need to access the configuration quickly without checking the UI.

	@summary = "Default summary"
	macro openToAddEntry(siteURLKey = null) {
		var baseURL = ${baseURL};

		if (!(isSet(baseURL))) {
			var baseURL = PropsUtil.get("portal.url");
		}

		Open(value1 = "${baseURL}/group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_redirect_web_internal_portlet_RedirectPortlet&_com_liferay_redirect_web_internal_portlet_RedirectPortlet_mvcRenderCommandName=%2Fredirect%2Fedit_redirect_entry&_com_liferay_redirect_web_internal_portlet_RedirectPortlet_redirect=http%3A%2F%2F${baseURL}%3A8080%2Fgroup%2F${siteURLKey}%2F~%2Fcontrol_panel%2Fmanage%3Fp_p_id%3Dcom_liferay_redirect_web_internal_portlet_RedirectPortlet");
	}

	@summary = "Default summary"
	macro openToConfigInSystemSettings() {
		var baseURL = PropsUtil.get("portal.url");

		Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=com.liferay.redirect.internal.configuration.RedirectConfiguration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	@summary = "Default summary"
	macro openToEditEntry(groupName = null, siteURLKey = null, destinationURL = null) {
		var redirectEntryId = JSONRedirect.getRedirectEntryId(
			destinationURL = ${destinationURL},
			groupName = ${groupName});
		var baseURL = ${baseURL};

		if (!(isSet(baseURL))) {
			var baseURL = PropsUtil.get("portal.url");
		}

		Open(value1 = "${baseURL}/group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_redirect_web_internal_portlet_RedirectPortlet&_com_liferay_redirect_web_internal_portlet_RedirectPortlet_mvcRenderCommandName=%2Fredirect%2Fedit_redirect_entry&_com_liferay_redirect_web_internal_portlet_RedirectPortlet_redirect=http%3A%2F%2F${baseURL}%3A8080%2Fgroup%2F${siteURLKey}%2F~%2Fcontrol_panel%2Fmanage%3Fp_p_id%3Dcom_liferay_redirect_web_internal_portlet_RedirectPortlet%26p_p_lifecycle%3D0%26p_p_state%3Dmaximized%26p_p_mode%3Dview&_com_liferay_redirect_web_internal_portlet_RedirectPortlet_redirectEntryId=${redirectEntryId}");
	}

	@summary = "Default summary"
	macro openToPatterns(siteURLKey = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_redirect_web_internal_portlet_RedirectPortlet&_com_liferay_redirect_web_internal_portlet_RedirectPortlet_navigation=patterns");
	}

	@summary = "Default summary"
	macro removePattern(index = null) {
		Click(
			key_index = ${index},
			locator1 = "Button#REMOVE_REPEATABLE");
	}

	@summary = "Default summary"
	macro view404URLs(requestNumber = null, ignoreURL = null, multipleUrLs = null) {
		if (isSet(activeIgnoreURL)) {
			AssertClick(
				key_navItem = "404 URLs",
				locator1 = "NavBar#NAV_ITEM_REDIRECTION",
				value1 = "404 URLs");
		}

		if (${multipleUrLs} == "true") {
			AssertTextEquals.assertPartialText(
				key_rowEntry = ${ignoreURL},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
				value1 = ${ignoreURL});
		}
		else {
			AssertTextEquals.assertPartialText(
				key_rowEntry = ${ignoreURL},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
				value1 = ${ignoreURL});

			AssertTextEquals.assertPartialText(
				key_rowEntry = ${requestNumber},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
				value1 = ${requestNumber});
		}
	}

	@summary = "Default summary"
	macro view404URLsDefault() {
		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO_TAGLIB_TITLE",
			value1 = "All is in order.");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO_TAGLIB_DESCRIPTION",
			value1 = "All your pages are connected or redirected.");
	}

	@summary = "Default summary"
	macro view404URLsTab() {
		if (isSet(disabled404Tracking)) {
			AssertElementNotPresent(
				key_navItem = "404 URLs",
				locator1 = "NavBar#NAV_ITEM_REDIRECTION");
		}
		else {
			AssertElementPresent(
				key_navItem = "404 URLs",
				locator1 = "NavBar#NAV_ITEM_REDIRECTION");
		}
	}

	@summary = "Default summary"
	macro viewActiveTabInSystemSettings() {
		AssertVisible(
			key_tab = "Redirection",
			locator1 = "NavTab#ACTIVE_TAB_LINK");
	}

	@summary = "Default summary"
	macro viewDefault() {
		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO_TAGLIB",
			value1 = "No redirects were found.");
	}

	@summary = "Default summary"
	macro viewEntry(sourceURL = null, destinationURL = null, redirectType = null, expirationDate = null) {
		AssertTextEquals.assertPartialText(
			key_rowEntry = ${sourceURL},
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
			value1 = ${sourceURL});

		AssertTextEquals.assertPartialText(
			key_rowEntry = ${destinationURL},
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
			value1 = ${destinationURL});

		if (isSet(redirectType)) {
			AssertTextEquals(
				key_rowEntry = ${redirectType},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
				value1 = ${redirectType});
		}

		if (isSet(expirationDate)) {
			AssertTextEquals(
				key_rowEntry = ${expirationDate},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
				value1 = ${expirationDate});
		}
	}

	@summary = "Default summary"
	macro viewEntryFloatingURL(redirectURL = null) {
		MouseOver(
			key_rowEntry = ${redirectURL},
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		if (IsElementNotPresent(key_redirectURL = ${redirectURL}, locator1 = "Redirect#FLOATING_TOOLTIP_URL")) {
			MouseOver(locator1 = "UserBar#USER_AVATAR_IN_CONTROL_MENU");

			MouseOver(
				key_rowEntry = ${redirectURL},
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			AssertElementPresent(
				key_redirectURL = ${redirectURL},
				locator1 = "Redirect#FLOATING_TOOLTIP_URL");
		}
	}

	@summary = "Default summary"
	macro viewEntryInfo(latestOccurrence = null, createdBy = null, type = null, createDate = null, expirationDate = null) {
		var portalURL = PropsUtil.get("portal.url");

		Check(
			key_tableEntry = "${portalURL}/web/test-site-name/test-source-page",
			locator1 = "LexiconTable#TABLE_ENTRY_CHECKBOX");

		Click.clickAt(locator1 = "Icon#INFO");

		AssertTextEquals(
			key_itemName = "Created By",
			locator1 = "Redirect#SIDEBAR_INFO_ITEM",
			value1 = ${createdBy});

		AssertTextEquals(
			key_itemName = "Type",
			locator1 = "Redirect#SIDEBAR_INFO_ITEM",
			value1 = ${type});

		AssertTextEquals.assertPartialText(
			key_itemName = "Create Date",
			locator1 = "Redirect#SIDEBAR_INFO_ITEM",
			value1 = ${createDate});

		AssertTextEquals.assertPartialText(
			key_itemName = "Latest Occurrence",
			locator1 = "Redirect#SIDEBAR_INFO_ITEM",
			value1 = ${latestOccurrence});

		AssertTextEquals(
			key_itemName = "Expiration Date",
			locator1 = "Redirect#SIDEBAR_INFO_ITEM",
			value1 = ${expirationDate});
	}

	@summary = "Default summary"
	macro viewOrderedURLs(entry1 = null, entry2 = null) {
		AssertTextEquals(
			key_rowNumber = 1,
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD_3",
			value1 = ${entry1});

		AssertTextEquals(
			key_rowNumber = 2,
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD_3",
			value1 = ${entry2});
	}

	@summary = "Default summary"
	macro viewResultEntryTitle(searchTerm = null, searchEntryTitle = null) {
		Search.searchCP(searchTerm = ${searchTerm});

		AssertTextEquals(
			key_rowEntry = ${searchEntryTitle},
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
			value1 = ${searchEntryTitle});
	}

	@summary = "Default summary"
	macro viewURLRedirectionType(temporary = null, permanent = null, url = null) {
		var curl = '''
			${url} \
				-w %{http_code}
		''';

		var output = JSONCurlUtil.post(${curl});

		if (${temporary} == "true") {
			if (contains(${output}, 302)) {
				echo("This is a temporary redirect.");
			}
			else {
				fail("FAIL! This redirect should be temporary.");
			}
		}

		if (${permanent} == "true") {
			if (contains(${output}, 301)) {
				echo("This is a permanent redirect.");
			}
			else {
				fail("FAIL! This redirect should be permanent.");
			}
		}
	}

}