<%--
/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */
--%>

<%
EditVocabularySettingsDisplayContext editVocabularySettingsDisplayContext = new EditVocabularySettingsDisplayContext(request, vocabulary);

long[] selectedClassNameIds = editVocabularySettingsDisplayContext.getSelectedClassNameIds();
long[] selectedClassTypePKs = editVocabularySettingsDisplayContext.getSelectedClassTypePKs();
%>

<liferay-ui:error exception="<%= NoSuchClassTypeException.class %>" message="one-of-your-associated-asset-types-contains-an-invalid-value.-please-configure-it-again-or-remove-it" />

<liferay-frontend:fieldset
	collapsed="<%= true %>"
	collapsible="<%= true %>"
	id='<%= liferayPortletResponse.getNamespace() + "extraFields" %>'
	label="associated-asset-types"
>
	<p class="text-secondary">
		<liferay-ui:message key="choose-the-asset-types-this-vocabulary-is-associated-with-and-whether-it-is-required" />
	</p>

	<%
	List<String> indexes = new ArrayList<>();

	for (int index = 0; index < selectedClassNameIds.length; index++) {
		indexes.add(String.valueOf(index));

		long classNameId = selectedClassNameIds[index];
		final long classTypePK = selectedClassTypePKs[index];
	%>

		<div class="lfr-form-row lfr-form-row-inline">
			<div class="row-fields">
				<clay:select
					cssClass="vocabulary-asset-type-select"
					label="asset-types"
					name='<%= "classNameId" + index %>'
					options="<%= editVocabularySettingsDisplayContext.getClassNameIdOptions(classNameId) %>"
				/>

				<%
				for (AssetRendererFactory<?> assetRendererFactory : editVocabularySettingsDisplayContext.getClassTypedAssetRenderFactories()) {
				%>

					<div class="<%= (classNameId != assetRendererFactory.getClassNameId()) ? "hide " : "" %>subtype-select">
						<clay:select
							label=""
							name='<%= "subtype" + assetRendererFactory.getClassNameId() + "-classNameId" + index %>'
							options="<%= editVocabularySettingsDisplayContext.getClassTypePKOptions(assetRendererFactory, classNameId, classTypePK) %>"
						/>
					</div>

				<%
				}
				%>

				<c:if test="<%= !editVocabularySettingsDisplayContext.classTypePKExists(classNameId, classTypePK) %>">
					<div class="has-warning">
						<div class="form-feedback-item">
							<liferay-ui:message key="the-asset-subtype-no-longer-exists" />
						</div>
					</div>
				</c:if>

				<%
				Group scopeGroup = themeDisplay.getScopeGroup();
				%>

				<c:choose>
					<c:when test="<%= scopeGroup.isDepot() %>">
						<div class="form-group">
							<clay:radio
								checked="<%= editVocabularySettingsDisplayContext.isNotRequiredChecked(classNameId, classTypePK) %>"
								label='<%= LanguageUtil.get(request, "not-required") %>'
								name='<%= liferayPortletResponse.getNamespace() + "required" + index %>'
								value="not-required"
							/>

							<clay:radio
								checked="<%= editVocabularySettingsDisplayContext.isRequiredChecked(classNameId, classTypePK) %>"
								label='<%= LanguageUtil.get(request, "only-required-in-this-asset-library") %>'
								name='<%= liferayPortletResponse.getNamespace() + "required" + index %>'
								value="required"
							/>

							<clay:radio
								checked="<%= editVocabularySettingsDisplayContext.isDepotRequiredChecked(classNameId, classTypePK) %>"
								label='<%= LanguageUtil.get(request, "required-in-this-asset-library-and-its-connected-sites") %>'
								name='<%= liferayPortletResponse.getNamespace() + "required" + index %>'
								value="depot-required"
							/>
						</div>
					</c:when>
					<c:otherwise>
						<aui:input inlineLabel="right" label="required" labelCssClass="simple-toggle-switch" name='<%= "required" + index %>' type="toggle-switch" value="<%= (vocabulary != null) ? vocabulary.isRequired(classNameId, classTypePK, scopeGroupId) : false %>" />
					</c:otherwise>
				</c:choose>
			</div>
		</div>

	<%
	}
	%>

	<aui:input name="indexes" type="hidden" value="<%= StringUtil.merge(indexes) %>" />
</liferay-frontend:fieldset>

<aui:script sandbox="<%= true %>">
	let autoFields = null;

	AUI().use('liferay-auto-fields', (A) => {
		const extraFields = A.one('#<portlet:namespace />extraFields');

		autoFields = new Liferay.AutoFields({
			contentBox: '#<portlet:namespace />extraFields',
			fieldIndexes: '<portlet:namespace />indexes',
			minimumRows: 1,
			namespace: '<portlet:namespace />',
			on: {
				clone: function (event) {
					const row = event.row.getDOM();

					row.querySelectorAll('.subtype-select').forEach((child) => {
						child.classList.add('hide');
					});
				},
			},
		}).render();

		extraFields.setData('autoFieldsInstance', autoFields);
	});

	const form = document.getElementById('<portlet:namespace />fm');

	Liferay.Util.delegate(
		form,
		'change',
		'.vocabulary-asset-type-select',
		(event) => {
			const target = event.delegateTarget;

			const row = target.closest('.lfr-form-row');

			row.querySelectorAll('.subtype-select').forEach((child) => {
				child.classList.add('hide');
			});

			const select = row.querySelector('[name*=subtype' + target.value + ']');

			if (select) {
				select.closest('.subtype-select').classList.remove('hide');
			}

			autoFields.save(A.one('#<portlet:namespace />fm'));
		}
	);
</aui:script>