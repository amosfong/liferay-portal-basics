/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

import getExportedSymbols from '../../../util/getExportedSymbols.mjs';
import getFlatName from '../../../util/getFlatName.mjs';
import {
	IMPORT_BRIDGE_FILTER,
	decodeBridgePath,
} from '../getImportBridgePath.mjs';
import getPathPrefix from '../getPathPrefix.mjs';

/**
 * This plugin feeds esbuild with on-the-fly import bridges that are composed based on the
 * information obtained from their virtual path (generated by the `getImportBridgePath()` method).
 *
 * Import bridges are necessary since we need esbuild to export symbols using standard ESM syntax
 * and for that to happen it must be fed an ES module as entry point. If fed a CommonJS one esbuild
 * will refuse to export things as ESM syntax.
 */
export default function getImportBridgesPlugin(
	globalImports,
	overridenPackageSymbols
) {
	const importBridgesCache = {};

	return {
		name: 'import-bridges-plugin',

		setup(build) {
			build.onLoad(
				{
					filter: IMPORT_BRIDGE_FILTER,
				},
				async (args) => {
					const {path: loadPath} = args;

					if (importBridgesCache[loadPath]) {
						return importBridgesCache[loadPath];
					}

					const {moduleName, type} = decodeBridgePath(loadPath);

					const {external, webContextPath} =
						globalImports[moduleName];

					const contents = getImportBridgeCode(
						globalImports,
						overridenPackageSymbols,
						type,
						moduleName,
						external,
						webContextPath
					);

					importBridgesCache[loadPath] = {
						contents,
						loader: 'js',
					};

					return importBridgesCache[loadPath];
				}
			);
		},
	};
}

function getImportBridgeCode(
	globalImports,
	overridenPackageSymbols,
	type,
	moduleName,
	external,
	webContextPath
) {
	let hasDefault;

	if (globalImports[moduleName]?.external === false) {
		hasDefault = false;
	}
	else {
		const symbols = getExportedSymbols(overridenPackageSymbols, moduleName);

		hasDefault = !!symbols['default'];
	}

	const pathPrefix = getPathPrefix(type);

	const modulePath = external
		? `exports/${getFlatName(moduleName)}.js`
		: 'index.js';

	let source = `
export * from '${pathPrefix}/${webContextPath}/__liferay__/${modulePath}';
`;

	if (hasDefault) {
		source += `
import __default__ from '${pathPrefix}/${webContextPath}/__liferay__/${modulePath}';
export default __default__;
`;
	}

	return source;
}
