/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.portal.tools.service.builder.test.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.tools.service.builder.test.model.PermissionCheckFinderEntry;
import com.liferay.portal.tools.service.builder.test.model.PermissionCheckFinderEntryModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PermissionCheckFinderEntry service. Represents a row in the &quot;PermissionCheckFinderEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PermissionCheckFinderEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PermissionCheckFinderEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PermissionCheckFinderEntryImpl
 * @generated
 */
public class PermissionCheckFinderEntryModelImpl
	extends BaseModelImpl<PermissionCheckFinderEntry>
	implements PermissionCheckFinderEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a permission check finder entry model instance should use the <code>PermissionCheckFinderEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "PermissionCheckFinderEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"permissionCheckFinderEntryId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"integer_", Types.INTEGER},
		{"name", Types.VARCHAR}, {"type_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("permissionCheckFinderEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("integer_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table PermissionCheckFinderEntry (permissionCheckFinderEntryId LONG not null primary key,groupId LONG,integer_ INTEGER,name VARCHAR(75) null,type_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table PermissionCheckFinderEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY permissionCheckFinderEntry.integer ASC, permissionCheckFinderEntry.type ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY PermissionCheckFinderEntry.integer_ ASC, PermissionCheckFinderEntry.type_ ASC";

	public static final String ORDER_BY_SQL_INLINE_DISTINCT =
		" ORDER BY permissionCheckFinderEntry.integer_ ASC, permissionCheckFinderEntry.type_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long INTEGER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long TYPE_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.portal.tools.service.builder.test.service.util.ServiceProps.
			get(
				"lock.expiration.time.com.liferay.portal.tools.service.builder.test.model.PermissionCheckFinderEntry"));

	public PermissionCheckFinderEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _permissionCheckFinderEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPermissionCheckFinderEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _permissionCheckFinderEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PermissionCheckFinderEntry.class;
	}

	@Override
	public String getModelClassName() {
		return PermissionCheckFinderEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PermissionCheckFinderEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PermissionCheckFinderEntry, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PermissionCheckFinderEntry, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(PermissionCheckFinderEntry)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PermissionCheckFinderEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PermissionCheckFinderEntry, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PermissionCheckFinderEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PermissionCheckFinderEntry, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PermissionCheckFinderEntry, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<PermissionCheckFinderEntry, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<PermissionCheckFinderEntry, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String,
						 Function<PermissionCheckFinderEntry, Object>>();

			attributeGetterFunctions.put(
				"permissionCheckFinderEntryId",
				PermissionCheckFinderEntry::getPermissionCheckFinderEntryId);
			attributeGetterFunctions.put(
				"groupId", PermissionCheckFinderEntry::getGroupId);
			attributeGetterFunctions.put(
				"integer", PermissionCheckFinderEntry::getInteger);
			attributeGetterFunctions.put(
				"name", PermissionCheckFinderEntry::getName);
			attributeGetterFunctions.put(
				"type", PermissionCheckFinderEntry::getType);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<PermissionCheckFinderEntry, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<PermissionCheckFinderEntry, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<PermissionCheckFinderEntry, ?>>();

			attributeSetterBiConsumers.put(
				"permissionCheckFinderEntryId",
				(BiConsumer<PermissionCheckFinderEntry, Long>)
					PermissionCheckFinderEntry::
						setPermissionCheckFinderEntryId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<PermissionCheckFinderEntry, Long>)
					PermissionCheckFinderEntry::setGroupId);
			attributeSetterBiConsumers.put(
				"integer",
				(BiConsumer<PermissionCheckFinderEntry, Integer>)
					PermissionCheckFinderEntry::setInteger);
			attributeSetterBiConsumers.put(
				"name",
				(BiConsumer<PermissionCheckFinderEntry, String>)
					PermissionCheckFinderEntry::setName);
			attributeSetterBiConsumers.put(
				"type",
				(BiConsumer<PermissionCheckFinderEntry, String>)
					PermissionCheckFinderEntry::setType);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public long getPermissionCheckFinderEntryId() {
		return _permissionCheckFinderEntryId;
	}

	@Override
	public void setPermissionCheckFinderEntryId(
		long permissionCheckFinderEntryId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_permissionCheckFinderEntryId = permissionCheckFinderEntryId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public int getInteger() {
		return _integer;
	}

	@Override
	public void setInteger(int integer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_integer = integer;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PermissionCheckFinderEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PermissionCheckFinderEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PermissionCheckFinderEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PermissionCheckFinderEntryImpl permissionCheckFinderEntryImpl =
			new PermissionCheckFinderEntryImpl();

		permissionCheckFinderEntryImpl.setPermissionCheckFinderEntryId(
			getPermissionCheckFinderEntryId());
		permissionCheckFinderEntryImpl.setGroupId(getGroupId());
		permissionCheckFinderEntryImpl.setInteger(getInteger());
		permissionCheckFinderEntryImpl.setName(getName());
		permissionCheckFinderEntryImpl.setType(getType());

		permissionCheckFinderEntryImpl.resetOriginalValues();

		return permissionCheckFinderEntryImpl;
	}

	@Override
	public PermissionCheckFinderEntry cloneWithOriginalValues() {
		PermissionCheckFinderEntryImpl permissionCheckFinderEntryImpl =
			new PermissionCheckFinderEntryImpl();

		permissionCheckFinderEntryImpl.setPermissionCheckFinderEntryId(
			this.<Long>getColumnOriginalValue("permissionCheckFinderEntryId"));
		permissionCheckFinderEntryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		permissionCheckFinderEntryImpl.setInteger(
			this.<Integer>getColumnOriginalValue("integer_"));
		permissionCheckFinderEntryImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		permissionCheckFinderEntryImpl.setType(
			this.<String>getColumnOriginalValue("type_"));

		return permissionCheckFinderEntryImpl;
	}

	@Override
	public int compareTo(
		PermissionCheckFinderEntry permissionCheckFinderEntry) {

		int value = 0;

		if (getInteger() < permissionCheckFinderEntry.getInteger()) {
			value = -1;
		}
		else if (getInteger() > permissionCheckFinderEntry.getInteger()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getType().compareTo(permissionCheckFinderEntry.getType());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PermissionCheckFinderEntry)) {
			return false;
		}

		PermissionCheckFinderEntry permissionCheckFinderEntry =
			(PermissionCheckFinderEntry)object;

		long primaryKey = permissionCheckFinderEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PermissionCheckFinderEntry> toCacheModel() {
		PermissionCheckFinderEntryCacheModel
			permissionCheckFinderEntryCacheModel =
				new PermissionCheckFinderEntryCacheModel();

		permissionCheckFinderEntryCacheModel.permissionCheckFinderEntryId =
			getPermissionCheckFinderEntryId();

		permissionCheckFinderEntryCacheModel.groupId = getGroupId();

		permissionCheckFinderEntryCacheModel.integer = getInteger();

		permissionCheckFinderEntryCacheModel.name = getName();

		String name = permissionCheckFinderEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			permissionCheckFinderEntryCacheModel.name = null;
		}

		permissionCheckFinderEntryCacheModel.type = getType();

		String type = permissionCheckFinderEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			permissionCheckFinderEntryCacheModel.type = null;
		}

		return permissionCheckFinderEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PermissionCheckFinderEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PermissionCheckFinderEntry, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PermissionCheckFinderEntry, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PermissionCheckFinderEntry)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, PermissionCheckFinderEntry>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						PermissionCheckFinderEntry.class, ModelWrapper.class);

	}

	private long _permissionCheckFinderEntryId;
	private long _groupId;
	private int _integer;
	private String _name;
	private String _type;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<PermissionCheckFinderEntry, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PermissionCheckFinderEntry)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"permissionCheckFinderEntryId", _permissionCheckFinderEntryId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("integer_", _integer);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("type_", _type);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("integer_", "integer");
		attributeNames.put("type_", "type");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("permissionCheckFinderEntryId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("integer_", 4L);

		columnBitmasks.put("name", 8L);

		columnBitmasks.put("type_", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PermissionCheckFinderEntry _escapedModel;

}