/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.portal.tools.service.builder.test.service.base;

import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.service.version.VersionService;
import com.liferay.portal.kernel.service.version.VersionServiceListener;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;
import com.liferay.portal.tools.service.builder.test.model.ERCVersionedEntry;
import com.liferay.portal.tools.service.builder.test.model.ERCVersionedEntryVersion;
import com.liferay.portal.tools.service.builder.test.service.ERCVersionedEntryLocalService;
import com.liferay.portal.tools.service.builder.test.service.ERCVersionedEntryLocalServiceUtil;
import com.liferay.portal.tools.service.builder.test.service.persistence.ERCVersionedEntryPersistence;
import com.liferay.portal.tools.service.builder.test.service.persistence.ERCVersionedEntryVersionPersistence;

import java.io.Serializable;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the erc versioned entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.portal.tools.service.builder.test.service.impl.ERCVersionedEntryLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.portal.tools.service.builder.test.service.impl.ERCVersionedEntryLocalServiceImpl
 * @generated
 */
public abstract class ERCVersionedEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements ERCVersionedEntryLocalService, IdentifiableOSGiService,
			   VersionService<ERCVersionedEntry, ERCVersionedEntryVersion> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>ERCVersionedEntryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>ERCVersionedEntryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the erc versioned entry to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect ERCVersionedEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param ercVersionedEntry the erc versioned entry
	 * @return the erc versioned entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ERCVersionedEntry addERCVersionedEntry(
		ERCVersionedEntry ercVersionedEntry) {

		ercVersionedEntry.setNew(true);

		return ercVersionedEntryPersistence.update(ercVersionedEntry);
	}

	/**
	 * Creates a new erc versioned entry. Does not add the erc versioned entry to the database.
	 *
	 * @return the new erc versioned entry
	 */
	@Override
	@Transactional(enabled = false)
	public ERCVersionedEntry create() {
		long primaryKey = counterLocalService.increment(
			ERCVersionedEntry.class.getName());

		ERCVersionedEntry draftERCVersionedEntry =
			ercVersionedEntryPersistence.create(primaryKey);

		draftERCVersionedEntry.setHeadId(primaryKey);

		return draftERCVersionedEntry;
	}

	/**
	 * Deletes the erc versioned entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect ERCVersionedEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param ercVersionedEntryId the primary key of the erc versioned entry
	 * @return the erc versioned entry that was removed
	 * @throws PortalException if a erc versioned entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ERCVersionedEntry deleteERCVersionedEntry(long ercVersionedEntryId)
		throws PortalException {

		ERCVersionedEntry ercVersionedEntry =
			ercVersionedEntryPersistence.fetchByPrimaryKey(ercVersionedEntryId);

		if (ercVersionedEntry != null) {
			delete(ercVersionedEntry);
		}

		return ercVersionedEntry;
	}

	/**
	 * Deletes the erc versioned entry from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect ERCVersionedEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param ercVersionedEntry the erc versioned entry
	 * @return the erc versioned entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ERCVersionedEntry deleteERCVersionedEntry(
		ERCVersionedEntry ercVersionedEntry) {

		try {
			delete(ercVersionedEntry);

			return ercVersionedEntry;
		}
		catch (PortalException portalException) {
			throw new SystemException(portalException);
		}
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return ercVersionedEntryPersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			ERCVersionedEntry.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return ercVersionedEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.liferay.portal.tools.service.builder.test.model.impl.ERCVersionedEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return ercVersionedEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.liferay.portal.tools.service.builder.test.model.impl.ERCVersionedEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return ercVersionedEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return ercVersionedEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return ercVersionedEntryPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public ERCVersionedEntry fetchERCVersionedEntry(long ercVersionedEntryId) {
		return ercVersionedEntryPersistence.fetchByPrimaryKey(
			ercVersionedEntryId);
	}

	/**
	 * Returns the erc versioned entry with the primary key.
	 *
	 * @param ercVersionedEntryId the primary key of the erc versioned entry
	 * @return the erc versioned entry
	 * @throws PortalException if a erc versioned entry with the primary key could not be found
	 */
	@Override
	public ERCVersionedEntry getERCVersionedEntry(long ercVersionedEntryId)
		throws PortalException {

		return ercVersionedEntryPersistence.findByPrimaryKey(
			ercVersionedEntryId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			ercVersionedEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ERCVersionedEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("ercVersionedEntryId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			ercVersionedEntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ERCVersionedEntry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"ercVersionedEntryId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			ercVersionedEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ERCVersionedEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("ercVersionedEntryId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return ercVersionedEntryPersistence.create(
			((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		if (_log.isWarnEnabled()) {
			_log.warn(
				"Implement ERCVersionedEntryLocalServiceImpl#deleteERCVersionedEntry(ERCVersionedEntry) to avoid orphaned data");
		}

		return ercVersionedEntryLocalService.deleteERCVersionedEntry(
			(ERCVersionedEntry)persistedModel);
	}

	@Override
	public BasePersistence<ERCVersionedEntry> getBasePersistence() {
		return ercVersionedEntryPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return ercVersionedEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the erc versioned entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.liferay.portal.tools.service.builder.test.model.impl.ERCVersionedEntryModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of erc versioned entries
	 * @param end the upper bound of the range of erc versioned entries (not inclusive)
	 * @return the range of erc versioned entries
	 */
	@Override
	public List<ERCVersionedEntry> getERCVersionedEntries(int start, int end) {
		return ercVersionedEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of erc versioned entries.
	 *
	 * @return the number of erc versioned entries
	 */
	@Override
	public int getERCVersionedEntriesCount() {
		return ercVersionedEntryPersistence.countAll();
	}

	/**
	 * Updates the erc versioned entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect ERCVersionedEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param draftERCVersionedEntry the erc versioned entry
	 * @return the erc versioned entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ERCVersionedEntry updateERCVersionedEntry(
			ERCVersionedEntry draftERCVersionedEntry)
		throws PortalException {

		return updateDraft(draftERCVersionedEntry);
	}

	/**
	 * Returns the erc versioned entry local service.
	 *
	 * @return the erc versioned entry local service
	 */
	public ERCVersionedEntryLocalService getERCVersionedEntryLocalService() {
		return ercVersionedEntryLocalService;
	}

	/**
	 * Sets the erc versioned entry local service.
	 *
	 * @param ercVersionedEntryLocalService the erc versioned entry local service
	 */
	public void setERCVersionedEntryLocalService(
		ERCVersionedEntryLocalService ercVersionedEntryLocalService) {

		this.ercVersionedEntryLocalService = ercVersionedEntryLocalService;
	}

	/**
	 * Returns the erc versioned entry persistence.
	 *
	 * @return the erc versioned entry persistence
	 */
	public ERCVersionedEntryPersistence getERCVersionedEntryPersistence() {
		return ercVersionedEntryPersistence;
	}

	/**
	 * Sets the erc versioned entry persistence.
	 *
	 * @param ercVersionedEntryPersistence the erc versioned entry persistence
	 */
	public void setERCVersionedEntryPersistence(
		ERCVersionedEntryPersistence ercVersionedEntryPersistence) {

		this.ercVersionedEntryPersistence = ercVersionedEntryPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the erc versioned entry version persistence.
	 *
	 * @return the erc versioned entry version persistence
	 */
	public ERCVersionedEntryVersionPersistence
		getERCVersionedEntryVersionPersistence() {

		return ercVersionedEntryVersionPersistence;
	}

	/**
	 * Sets the erc versioned entry version persistence.
	 *
	 * @param ercVersionedEntryVersionPersistence the erc versioned entry version persistence
	 */
	public void setERCVersionedEntryVersionPersistence(
		ERCVersionedEntryVersionPersistence
			ercVersionedEntryVersionPersistence) {

		this.ercVersionedEntryVersionPersistence =
			ercVersionedEntryVersionPersistence;
	}

	public void afterPropertiesSet() {
		ERCVersionedEntryLocalServiceUtil.setService(
			ercVersionedEntryLocalService);
	}

	public void destroy() {
		ERCVersionedEntryLocalServiceUtil.setService(null);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ERCVersionedEntry checkout(
			ERCVersionedEntry publishedERCVersionedEntry, int version)
		throws PortalException {

		if (!publishedERCVersionedEntry.isHead()) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
					publishedERCVersionedEntry.getHeadId());
		}

		ERCVersionedEntry draftERCVersionedEntry =
			ercVersionedEntryPersistence.fetchByHeadId(
				publishedERCVersionedEntry.getPrimaryKey());

		if (draftERCVersionedEntry != null) {
			throw new IllegalArgumentException(
				"Unable to checkout with unpublished changes " +
					publishedERCVersionedEntry.getPrimaryKey());
		}

		ERCVersionedEntryVersion ercVersionedEntryVersion = getVersion(
			publishedERCVersionedEntry, version);

		draftERCVersionedEntry = _createDraft(publishedERCVersionedEntry);

		ercVersionedEntryVersion.populateVersionedModel(draftERCVersionedEntry);

		draftERCVersionedEntry = ercVersionedEntryPersistence.update(
			draftERCVersionedEntry);

		for (VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterCheckout(
				draftERCVersionedEntry, version);
		}

		return draftERCVersionedEntry;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public ERCVersionedEntry delete(
			ERCVersionedEntry publishedERCVersionedEntry)
		throws PortalException {

		if (!publishedERCVersionedEntry.isHead()) {
			throw new IllegalArgumentException(
				"ERCVersionedEntry is a draft " +
					publishedERCVersionedEntry.getPrimaryKey());
		}

		ERCVersionedEntry draftERCVersionedEntry =
			ercVersionedEntryPersistence.fetchByHeadId(
				publishedERCVersionedEntry.getPrimaryKey());

		if (draftERCVersionedEntry != null) {
			deleteDraft(draftERCVersionedEntry);
		}

		for (ERCVersionedEntryVersion ercVersionedEntryVersion :
				getVersions(publishedERCVersionedEntry)) {

			ercVersionedEntryVersionPersistence.remove(
				ercVersionedEntryVersion);
		}

		ercVersionedEntryPersistence.remove(publishedERCVersionedEntry);

		for (VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDelete(publishedERCVersionedEntry);
		}

		return publishedERCVersionedEntry;
	}

	@Indexable(type = IndexableType.DELETE)
	@Override
	public ERCVersionedEntry deleteDraft(
			ERCVersionedEntry draftERCVersionedEntry)
		throws PortalException {

		if (draftERCVersionedEntry.isHead()) {
			throw new IllegalArgumentException(
				"ERCVersionedEntry is not a draft " +
					draftERCVersionedEntry.getPrimaryKey());
		}

		ercVersionedEntryPersistence.remove(draftERCVersionedEntry);

		for (VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDeleteDraft(draftERCVersionedEntry);
		}

		return draftERCVersionedEntry;
	}

	@Override
	public ERCVersionedEntryVersion deleteVersion(
			ERCVersionedEntryVersion ercVersionedEntryVersion)
		throws PortalException {

		ERCVersionedEntryVersion latestERCVersionedEntryVersion =
			ercVersionedEntryVersionPersistence.findByErcVersionedEntryId_First(
				ercVersionedEntryVersion.getVersionedModelId(), null);

		if (latestERCVersionedEntryVersion.getVersion() ==
				ercVersionedEntryVersion.getVersion()) {

			throw new IllegalArgumentException(
				"Unable to delete latest version " +
					ercVersionedEntryVersion.getVersion());
		}

		ercVersionedEntryVersion = ercVersionedEntryVersionPersistence.remove(
			ercVersionedEntryVersion);

		for (VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterDeleteVersion(ercVersionedEntryVersion);
		}

		return ercVersionedEntryVersion;
	}

	@Override
	public ERCVersionedEntry fetchDraft(ERCVersionedEntry ercVersionedEntry) {
		if (ercVersionedEntry.isHead()) {
			return ercVersionedEntryPersistence.fetchByHeadId(
				ercVersionedEntry.getPrimaryKey());
		}

		return ercVersionedEntry;
	}

	@Override
	public ERCVersionedEntry fetchDraft(long primaryKey) {
		return ercVersionedEntryPersistence.fetchByHeadId(primaryKey);
	}

	@Override
	public ERCVersionedEntryVersion fetchLatestVersion(
		ERCVersionedEntry ercVersionedEntry) {

		long primaryKey = ercVersionedEntry.getHeadId();

		if (ercVersionedEntry.isHead()) {
			primaryKey = ercVersionedEntry.getPrimaryKey();
		}

		return ercVersionedEntryVersionPersistence.
			fetchByErcVersionedEntryId_First(primaryKey, null);
	}

	@Override
	public ERCVersionedEntry fetchPublished(
		ERCVersionedEntry ercVersionedEntry) {

		if (ercVersionedEntry.isHead()) {
			return ercVersionedEntry;
		}

		if (ercVersionedEntry.getHeadId() ==
				ercVersionedEntry.getPrimaryKey()) {

			return null;
		}

		return ercVersionedEntryPersistence.fetchByPrimaryKey(
			ercVersionedEntry.getHeadId());
	}

	@Override
	public ERCVersionedEntry fetchPublished(long primaryKey) {
		ERCVersionedEntry ercVersionedEntry =
			ercVersionedEntryPersistence.fetchByPrimaryKey(primaryKey);

		if ((ercVersionedEntry == null) ||
			(ercVersionedEntry.getHeadId() ==
				ercVersionedEntry.getPrimaryKey())) {

			return null;
		}

		return ercVersionedEntry;
	}

	@Override
	public ERCVersionedEntry getDraft(ERCVersionedEntry ercVersionedEntry)
		throws PortalException {

		if (!ercVersionedEntry.isHead()) {
			return ercVersionedEntry;
		}

		ERCVersionedEntry draftERCVersionedEntry =
			ercVersionedEntryPersistence.fetchByHeadId(
				ercVersionedEntry.getPrimaryKey());

		if (draftERCVersionedEntry == null) {
			draftERCVersionedEntry = ercVersionedEntryLocalService.updateDraft(
				_createDraft(ercVersionedEntry));
		}

		return draftERCVersionedEntry;
	}

	@Override
	public ERCVersionedEntry getDraft(long primaryKey) throws PortalException {
		ERCVersionedEntry draftERCVersionedEntry =
			ercVersionedEntryPersistence.fetchByHeadId(primaryKey);

		if (draftERCVersionedEntry == null) {
			ERCVersionedEntry ercVersionedEntry =
				ercVersionedEntryPersistence.findByPrimaryKey(primaryKey);

			draftERCVersionedEntry = ercVersionedEntryLocalService.updateDraft(
				_createDraft(ercVersionedEntry));
		}

		return draftERCVersionedEntry;
	}

	@Override
	public ERCVersionedEntryVersion getVersion(
			ERCVersionedEntry ercVersionedEntry, int version)
		throws PortalException {

		long primaryKey = ercVersionedEntry.getHeadId();

		if (ercVersionedEntry.isHead()) {
			primaryKey = ercVersionedEntry.getPrimaryKey();
		}

		return ercVersionedEntryVersionPersistence.
			findByErcVersionedEntryId_Version(primaryKey, version);
	}

	@Override
	public List<ERCVersionedEntryVersion> getVersions(
		ERCVersionedEntry ercVersionedEntry) {

		long primaryKey = ercVersionedEntry.getPrimaryKey();

		if (!ercVersionedEntry.isHead()) {
			if (ercVersionedEntry.getHeadId() ==
					ercVersionedEntry.getPrimaryKey()) {

				return Collections.emptyList();
			}

			primaryKey = ercVersionedEntry.getHeadId();
		}

		return ercVersionedEntryVersionPersistence.findByErcVersionedEntryId(
			primaryKey);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ERCVersionedEntry publishDraft(
			ERCVersionedEntry draftERCVersionedEntry)
		throws PortalException {

		if (draftERCVersionedEntry.isHead()) {
			throw new IllegalArgumentException(
				"Can only publish drafts " +
					draftERCVersionedEntry.getPrimaryKey());
		}

		ERCVersionedEntry headERCVersionedEntry = null;

		int version = 1;

		if (draftERCVersionedEntry.getHeadId() ==
				draftERCVersionedEntry.getPrimaryKey()) {

			headERCVersionedEntry = create();

			draftERCVersionedEntry.setHeadId(
				headERCVersionedEntry.getPrimaryKey());
		}
		else {
			headERCVersionedEntry =
				ercVersionedEntryPersistence.findByPrimaryKey(
					draftERCVersionedEntry.getHeadId());

			ERCVersionedEntryVersion latestERCVersionedEntryVersion =
				ercVersionedEntryVersionPersistence.
					findByErcVersionedEntryId_First(
						draftERCVersionedEntry.getHeadId(), null);

			version = latestERCVersionedEntryVersion.getVersion() + 1;
		}

		ERCVersionedEntryVersion ercVersionedEntryVersion =
			ercVersionedEntryVersionPersistence.create(
				counterLocalService.increment(
					ERCVersionedEntryVersion.class.getName()));

		ercVersionedEntryVersion.setVersion(version);
		ercVersionedEntryVersion.setVersionedModelId(
			headERCVersionedEntry.getPrimaryKey());

		draftERCVersionedEntry.populateVersionModel(ercVersionedEntryVersion);

		ercVersionedEntryVersionPersistence.update(ercVersionedEntryVersion);

		ercVersionedEntryVersion.populateVersionedModel(headERCVersionedEntry);

		headERCVersionedEntry.setHeadId(-headERCVersionedEntry.getPrimaryKey());

		headERCVersionedEntry = ercVersionedEntryPersistence.update(
			headERCVersionedEntry);

		for (VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>
				versionServiceListener : _versionServiceListeners) {

			versionServiceListener.afterPublishDraft(
				draftERCVersionedEntry, version);
		}

		deleteDraft(draftERCVersionedEntry);

		return headERCVersionedEntry;
	}

	@Override
	public void registerListener(
		VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>
			versionServiceListener) {

		_versionServiceListeners.add(versionServiceListener);
	}

	@Override
	public void unregisterListener(
		VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>
			versionServiceListener) {

		_versionServiceListeners.remove(versionServiceListener);
	}

	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ERCVersionedEntry updateDraft(
			ERCVersionedEntry draftERCVersionedEntry)
		throws PortalException {

		if (draftERCVersionedEntry.isHead()) {
			throw new IllegalArgumentException(
				"Can only update draft entries " +
					draftERCVersionedEntry.getPrimaryKey());
		}

		ERCVersionedEntry previousERCVersionedEntry =
			ercVersionedEntryPersistence.fetchByPrimaryKey(
				draftERCVersionedEntry.getPrimaryKey());

		draftERCVersionedEntry = ercVersionedEntryPersistence.update(
			draftERCVersionedEntry);

		if (previousERCVersionedEntry == null) {
			for (VersionServiceListener
					<ERCVersionedEntry, ERCVersionedEntryVersion>
						versionServiceListener : _versionServiceListeners) {

				versionServiceListener.afterCreateDraft(draftERCVersionedEntry);
			}
		}
		else {
			for (VersionServiceListener
					<ERCVersionedEntry, ERCVersionedEntryVersion>
						versionServiceListener : _versionServiceListeners) {

				versionServiceListener.afterUpdateDraft(draftERCVersionedEntry);
			}
		}

		return draftERCVersionedEntry;
	}

	private ERCVersionedEntry _createDraft(
			ERCVersionedEntry publishedERCVersionedEntry)
		throws PortalException {

		ERCVersionedEntry draftERCVersionedEntry = create();

		draftERCVersionedEntry.setUuid(publishedERCVersionedEntry.getUuid());
		draftERCVersionedEntry.setExternalReferenceCode(
			publishedERCVersionedEntry.getExternalReferenceCode());
		draftERCVersionedEntry.setHeadId(
			publishedERCVersionedEntry.getPrimaryKey());
		draftERCVersionedEntry.setGroupId(
			publishedERCVersionedEntry.getGroupId());
		draftERCVersionedEntry.setCompanyId(
			publishedERCVersionedEntry.getCompanyId());

		draftERCVersionedEntry.resetOriginalValues();

		return draftERCVersionedEntry;
	}

	private final Set
		<VersionServiceListener<ERCVersionedEntry, ERCVersionedEntryVersion>>
			_versionServiceListeners = Collections.newSetFromMap(
				new ConcurrentHashMap
					<VersionServiceListener
						<ERCVersionedEntry, ERCVersionedEntryVersion>,
					 Boolean>());

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ERCVersionedEntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ERCVersionedEntry.class;
	}

	protected String getModelClassName() {
		return ERCVersionedEntry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				ercVersionedEntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	@BeanReference(type = ERCVersionedEntryLocalService.class)
	protected ERCVersionedEntryLocalService ercVersionedEntryLocalService;

	@BeanReference(type = ERCVersionedEntryPersistence.class)
	protected ERCVersionedEntryPersistence ercVersionedEntryPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@BeanReference(type = ERCVersionedEntryVersionPersistence.class)
	protected ERCVersionedEntryVersionPersistence
		ercVersionedEntryVersionPersistence;

	private static final Log _log = LogFactoryUtil.getLog(
		ERCVersionedEntryLocalServiceBaseImpl.class);

}