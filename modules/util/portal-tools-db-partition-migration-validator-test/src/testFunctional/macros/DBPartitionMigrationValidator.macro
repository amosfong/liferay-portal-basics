definition {

	@summary = "Removes artifacts generated by running the migration validator tool"
	macro clean(hardClean = null) {
		if (${hardClean} == "true") {
			DBPartitionMigrationValidator.restartSourceSchema();

			SQL.executeSQLStatement(sqlStatement = "DROP DATABASE IF EXISTS lportal_target;");

			PortalInstances.tearDownCP();

			var liferayPortalWeb = PropsUtil.get("liferay.app.server.classes.portal.dir");
		}

		AntCommands.runCommand("modules/util/portal-tools-db-partition-migration-validator-test/src/testFunctional/ant/build-test-db-partition-migration-validator.xml", "clean-db-partition-migration-validator-tool");
	}

	@summary = "Runs the db partition migration validator tool for extraction"
	macro executeExtraction(databaseSchemaName = null, ignoreErrors = null) {
		var databaseType = PropsUtil.get("database.type");

		AntCommands.runCommand("modules/util/portal-tools-db-partition-migration-validator-test/src/testFunctional/ant/build-test-db-partition-migration-validator.xml", "execute-db-partition-migration-validator-tool-extraction -Ddatabase.schema.name=${databaseSchemaName} -Ddatabase.type=${databaseType} -Dignore.migration.errors=${ignoreErrors}");
	}

	@summary = "Runs the db partition migration validator tool for validation"
	macro executeValidation(ignoreErrors = null, sourceFilePath = null, targetFilePath = null) {
		AntCommands.runCommand("modules/util/portal-tools-db-partition-migration-validator-test/src/testFunctional/ant/build-test-db-partition-migration-validator.xml", "execute-db-partition-migration-validator-tool-validation -Dignore.migration.errors=${ignoreErrors} -Dsource.file.path=${sourceFilePath} -Dtarget.file.path=${targetFilePath}");
	}

	@summary = "Sets a schema and updates its webId to use as target"
	macro generateTargetDatabase() {
		var databaseType = PropsUtil.get("database.type");

		if (${databaseType} == "mysql") {
			var autoCommit = "false";
			var sqlStatement = "CREATE DATABASE lportal_target character set utf8;";
		}
		else if (${databaseType} == "postgresql") {
			var autoCommit = "true";
			var sqlStatement = "CREATE DATABASE lportal_target ENCODING 'utf8';";
		}

		SQL.executeSettingAutoCommitSQLStatement(
			autoCommit = ${autoCommit},
			sqlStatement = ${sqlStatement});

		var liferayPortalWeb = PropsUtil.get("liferay.app.server.classes.portal.dir");

		FileUtil.replaceStringInFile("${liferayPortalWeb}/portal-ext.properties", "lportal", "lportal_target");

		TestCase.updatePortalProperties(newProperty = "company.default.web.id=lportaltarget.com");

		Portlet.startServer(keepOsGiState = "true");
	}

	@summary = "Returns the filename of the export file that has been generated"
	macro getGeneratedFile() {
		var projectDir = PropsUtil.get("project.dir");

		var dbPartitionMigratorOutputFile = FileUtil.read("${projectDir}/modules/util/portal-tools-db-partition-migration-validator-test/src/testFunctional/ant/db-partition-migration-validator.log");

		var filePath = StringUtil.extractLast(${dbPartitionMigratorOutputFile}, " ");

		return ${filePath};
	}

	@summary = "Restarts the source schema"
	macro restartSourceSchema() {
		Portlet.shutdownServer();

		var liferayPortalWeb = PropsUtil.get("liferay.app.server.classes.portal.dir");

		FileUtil.replaceStringInFile("${liferayPortalWeb}/portal-ext.properties", "lportal_target", "lportal");

		FileUtil.replaceStringInFile("${liferayPortalWeb}/portal-ext.properties", "company.default.web.id=lportaltarget.com", "");

		Portlet.startServer(keepOsGiState = "true");
	}

	@summary = "Validates an expected message generated after running the tool in its output file"
	macro validateOutput(outputMessage = null) {
		var projectDir = PropsUtil.get("project.dir");

		var dbPartitionMigratorOutputFile = FileUtil.read("${projectDir}/modules/util/portal-tools-db-partition-migration-validator-test/src/testFunctional/ant/db-partition-migration-validator.log");

		if (!(contains(${dbPartitionMigratorOutputFile}, ${outputMessage}))) {
			fail("Expected output not found: ${outputMessage}.");
		}
		else {
			echo("Expected output present: ${outputMessage}");
		}
	}

}