<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
	<module name="TreeWalker">
		<property name="tabWidth" value="4" />
		<module name="ArrayTypeStyleCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks the style of array type definitions." />
			<property name="documentationLocation" value="misc/arraytypestyle.html" />
		</module>
		<module name="AvoidNestedBlocksCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds nested blocks (blocks that are used freely in the code)." />
			<property name="documentationLocation" value="blocks/avoidnestedblocks.html" />
		</module>
		<module name="DefaultComesLastCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that the `default` is after all the cases in a `switch` statement." />
			<property name="documentationLocation" value="coding/defaultcomeslast.html" />
		</module>
		<module name="LocalFinalVariableNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that local final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/localfinalvariablename.html" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local final variable &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="LocalVariableNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that local, non-final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/localvariablename.html" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local non-final variable &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="MemberNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that instance variable names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/membername.html" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public non-static field &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="MemberNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that instance variable names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/membername.html" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private non-static field &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="MethodNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/methodname.html" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public method &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="MethodNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/methodname.html" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$|readObject|writeObject" />
			<message key="name.invalidPattern" value="Private method &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="MethodParamPadCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list." />
			<property name="documentationLocation" value="whitespace/methodparampad.html" />
		</module>
		<module name="ModifierOrderCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that the order of modifiers conforms to the suggestions in the Java Language specification, ยง 8.1.1, 8.3.1, 8.4.3 and 9.4." />
			<property name="documentationLocation" value="modifier/modifierorder.html" />
		</module>
		<module name="MultipleVariableDeclarationsCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that each variable declaration is in its own statement and on its own line." />
			<property name="documentationLocation" value="coding/multiplevariabledeclarations.html" />
		</module>
		<module name="NeedBracesCheck">
			<property name="allowEmptyLoopBody" value="true" />
			<property name="category" value="Styling" />
			<property name="description" value="Checks for braces around code blocks." />
			<property name="documentationLocation" value="blocks/needbraces.html" />
		</module>
		<module name="NoLineWrapCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that chosen statements are not line-wrapped." />
			<property name="documentationLocation" value="whitespace/nolinewrap.html" />
		</module>
		<module name="NoWhitespaceAfterCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that there is no whitespace after a token." />
			<property name="documentationLocation" value="whitespace/nowhitespaceafter.html" />
			<property name="tokens" value="ARRAY_DECLARATOR, ARRAY_INIT, BNOT, DEC, DOT, INC, INDEX_OP, LNOT, TYPECAST, UNARY_MINUS, UNARY_PLUS" />
		</module>
		<module name="NoWhitespaceBeforeCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that there is no whitespace before a token." />
			<property name="documentationLocation" value="whitespace/nowhitespacebefore.html" />
		</module>
		<module name="OneStatementPerLineCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that there is only one statement per line." />
			<property name="documentationLocation" value="coding/onestatementperline.html" />
		</module>
		<module name="OperatorWrapCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks the policy on how to wrap lines on operators." />
			<property name="documentationLocation" value="whitespace/operatorwrap.html" />
			<property name="option" value="eol" />
			<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
		</module>
		<module name="ParameterNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method parameter names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/parametername.html" />
			<message key="name.invalidPattern" value="Parameter &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="StaticVariableNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that static, non-final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/staticvariablename.html" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public static non-final field &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="StaticVariableNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that static, non-final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="naming/staticvariablename.html" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private static non-final field &quot;{0}&quot; must match pattern &quot;{1}&quot;" />
		</module>
		<module name="StringLiteralEqualityCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that string literals are not used with == or !=." />
			<property name="documentationLocation" value="coding/stringliteralequality.html" />
		</module>
		<module name="UnnecessaryParenthesesCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks if unnecessary parentheses are used in a statement or expression." />
			<property name="documentationLocation" value="coding/unnecessaryparentheses.html" />
		</module>
		<module name="WhitespaceAfterCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator." />
			<property name="documentationLocation" value="whitespace/whitespaceafter.html" />
			<property name="tokens" value="COMMA, SEMI" />
		</module>
		<module name="WhitespaceAroundCheck">
			<property name="allowEmptyTypes" value="true" />
			<property name="category" value="Styling" />
			<property name="description" value="Checks that a token is surrounded by whitespace." />
			<property name="documentationLocation" value="whitespace/whitespacearound.html" />
		</module>

		<!-- Custom checks -->

		<module name="com.liferay.source.formatter.checkstyle.check.AppendCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks instances where literal Strings are appended." />
			<message key="end.character.invalid" value="When appending multiple literal strings, only the last literal string can end with &quot;{0}&quot;" />
			<message key="line.break.incorrect" value="Avoid using line break when appending multiple literal strings" />
			<message key="literal.string.combine" value="Combine the literal strings &quot;{0}&quot; and &quot;{1}&quot;" />
			<message key="literal.string.move" value="Add the string &quot;{0}&quot; to the {1} literal string" />
			<message key="plus.incorrect" value="Incorrect use of &quot;+&quot; inside StringBundler" />
			<message key="start.character.invalid" value="When appending multiple literal strings, only the first literal string can start with &quot;{0}&quot;" />
			<message key="string.combine" value="Combine the literal string &quot;{0}&quot; with &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ArrayUtilCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks for utilization of class `ArrayUtil`." />
			<property name="enabled" value="false" />
			<message key="array.util.is.empty.use" value="Use &quot;ArrayUtil.isEmpty({0})&quot; to simplify code" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.BrandNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks the correct brand name." />
			<property name="enabled" value="false" />
			<message key="rename" value="Rename {0} &quot;{1}&quot; to &quot;{2}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.CamelCaseNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks variable names for correct use of `CamelCase`." />
			<property name="enabled" value="false" />
			<message key="following.underscore.incorrect" value="&quot;{0}&quot; should not be followed by &quot;_&quot; for variable &quot;{1}&quot;" />
			<message key="following.uppercase.incorrect" value="&quot;{0}&quot; should not be followed by an uppercase character for {1} &quot;{2}&quot;" />
			<message key="preceding.underscore.required" value="&quot;{0}&quot; should be preceded by &quot;_&quot; for variable &quot;{1}&quot;" />
			<message key="starting.uppercase.required" value="&quot;{0}&quot; should start with an uppercase character for {1} &quot;{2}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.CapsNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks the correct caps name." />
			<property name="enabled" value="false" />
			<message key="rename" value="Rename {0} &quot;{1}&quot; to &quot;{2}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ChainingCheck">
			<property name="applyToTypeCast" value="true" />
			<property name="category" value="Styling" />
			<property name="description" value="Checks that method chaining can be used when possible." />
			<message key="chaining.avoid.parentheses" value="Avoid chaining on expressions with parentheses" />
			<message key="chaining.avoid.type.cast" value="Avoid chaining on Type Cast" />
			<message key="chaining.required" value="Chaining on &quot;{0}&quot; is preferred" />
			<message key="response.unsorted" value="Method calls between &quot;Response.status&quot; and &quot;Response.build&quot; should be sorted" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.CompanyIterationCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Checks that `CompanyLocalService.forEachCompany` or `CompanyLocalService.forEachCompanyId` is used when iterating over companies." />
			<property name="enabled" value="false" />
			<message key="company.local.service.use.for.loop" value="Use &quot;CompanyLocalService.{0}&quot; when iterating over &quot;{1}&quot;" />
			<message key="company.local.service.use.sql" value="Use &quot;CompanyLocalService.forEachCompany&quot; instead of SQL" />
			<message key="portal.instances.use" value="Use &quot;PortalInstancePool.getCompanyIds&quot; instead to fetch company IDs" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ConcatCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Checks for correct use of `StringBundler.concat`." />
			<message key="end.character.invalid" value="When concatenating multiple literal strings, only the last literal string can end with &quot;{0}&quot;" />
			<message key="literal.string.combine" value="Combine the literal strings &quot;{0}&quot; and &quot;{1}&quot;" />
			<message key="literal.string.move" value="Add the string &quot;{0}&quot; to the {1} literal string" />
			<message key="plus.incorrect" value="Do not use &quot;+&quot; inside &quot;StringBundler.concat&quot;" />
			<message key="start.character.invalid" value="When concatenating multiple literal strings, only the first literal string can start with &quot;{0}&quot;" />
			<message key="string.combine" value="Combine the literal string &quot;{0}&quot; with &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ConstantNameCheck">
			<property name="camelCaseTypeNames" value="AggregateTestRule,Atomic.*,CodeCoverageAssertor,LiferayIntegrationTestRule,Log,Pattern,TestRule" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that variable names of constants follow correct naming rules." />
			<property name="immutableFieldTypes" value="boolean,byte,char,double,float,int,long,short,Boolean,Byte,Character,Class,Double,Float,Int,Long,Number,Short,String" />
			<message key="name.invalidConstantPattern" value="{0} constant &quot;{1}&quot; must match pattern &quot;{2}&quot;" />
			<message key="name.invalidConstantTypePattern" value="{0} constant &quot;{1}&quot; of type &quot;{2}&quot; must match pattern &quot;{3}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ContractionsCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds contractions in Strings (such as `can't` or `you're`)." />
			<message key="contraction.avoid" value="Avoid using contraction &quot;{0}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ExceptionMessageCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Validates messages that are passed to exceptions." />
			<message key="message.incorrect" value="Incorrect exception message" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.FactoryCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Finds cases where `*Factory` should be used when creating new instances of an object." />
			<message key="factory.use" value="Use &quot;{0}&quot; to create new instance of &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.GenericTypeCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Checks that generics are always specified to provide compile-time checking and removing the risk of `ClassCastException` during runtime." />
			<property name="enabled" value="false" />
			<property name="populateTypeNames" value="false" />
			<message key="generic.type.parameterize" value="Parameterize the generic {0} for &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.InstanceofOrderCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Check the order of `instanceof` calls." />
			<message key="instanceof.order" value="&quot;{0}&quot; should come before &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.JSONNamingCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks if variable names follow naming conventions." />
			<message key="variable.name.reserved" value="{0} name ending with &quot;{1}&quot; is reserved for object &quot;{2}&quot;" />
			<message key="variable.rename" value="Rename {0} &quot;{1}&quot; to &quot;{2}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.JSONUtilCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks for utilization of class `JSONUtil`." />
			<message key="json.util.put.all.use" value="Use &quot;JSONUtil.putAll&quot; instead of chaining on &quot;JSONUtil.put&quot;" />
			<message key="json.util.put.use" value="Combine calls &quot;{0}&quot; ({1}) and &quot;{2}&quot; ({3}) into single call &quot;{4}&quot;" />
			<message key="json.util.to.string.use.1" value="Use &quot;toString&quot; instead of &quot;String.valueOf&quot;" />
			<message key="json.util.to.string.use.2" value="Use &quot;toString&quot; instead of &quot;toJSONString&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.LambdaCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that `lambda` statements are as simple as possible." />
			<message key="lambda.simplify" value="Simplify lambda statement with single statement" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ListUtilCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks for utilization of class `ListUtil`." />
			<message key="array.unneeded" value="Pass arguments directly to &quot;ListUtil.fromArray&quot; instead of passing new array" />
			<message key="list.util.from.array.use" value="Use &quot;ListUtil.fromArray&quot; to simplify code" />
			<message key="list.util.is.empty.use" value="Use &quot;ListUtil.isEmpty({0})&quot; to simplify code" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.LiteralStringEqualsCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds cases where `Objects.equals` should be used." />
			<message key="objects.equals.use.1" value="Use &quot;Objects.equals&quot; instead of calling &quot;equals&quot; on a literal String" />
			<message key="objects.equals.use.2" value="Either use &quot;{0}&quot; or use &quot;Objects.equals&quot; if &quot;{1}&quot; can have a &quot;null&quot; value, instead of calling &quot;equals&quot; on a literal String" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MapBuilderCheck">
			<property name="category" value="Miscellaneous" />
			<property name="description" value="Checks that `ConcurrentHashMapBuilder`, `HashMapBuilder`, `LinkedHashMapBuilder` or `TreeMapBuilder` is used when possible." />
			<property name="enforceBuilderNames" value="" />
			<message key="builder.include" value="Include method call &quot;{0}&quot; ({1}) in &quot;{2}&quot; ({3})" />
			<message key="builder.use" value="Use &quot;{0}&quot; ({1}, {2})" />
			<message key="builder.use.instead" value="Use &quot;{0}&quot; instead of new instance of &quot;{1}&quot;" />
			<message key="null.value.incorrect" value="Null values are not allowed in &quot;{0}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MapIterationCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Checks that there are no unnecessary map iterations." />
			<message key="entry.set.use" value="Use Map.entrySet() to retrieve values" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MethodEqualsCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds cases where `Objects.equals` should be used." />
			<message key="objects.equals.use" value="Use &quot;Objects.equals&quot; instead of calling &quot;equals&quot; on method" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MethodNamingCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method names follow naming conventions." />
			<message key="method.rename" value="Rename method &quot;{0}&quot; to &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MissingDiamondOperatorCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Checks for missing diamond operator for types that require diamond operator." />
			<property name="enforceDiamondOperatorClassNames" value="" />
			<message key="diamond.operator.missing" value="Missing diamond operator &quot;&lt;&gt;&quot; for type &quot;{0}&quot;" />
			<message key="generic.types.missing" value="Missing generic types &quot;{0}&quot; for type &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MissingEmptyLineCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks for missing line breaks around variable declarations." />
			<message key="empty.line.missing.after.method.name" value="There should be an empty line after &quot;{0}&quot;" />
			<message key="empty.line.missing.after.variable.definition" value="There should be an empty line after variable definition of type &quot;{0}&quot;" />
			<message key="empty.line.missing.after.variable.reference" value="There should be an empty line before line &quot;{0}&quot;, as we finished referencing variable &quot;{1}&quot;" />
			<message key="empty.line.missing.before.variable.assign" value="There should be an empty line before assigning value to variable &quot;{0}&quot;" />
			<message key="empty.line.missing.before.variable.use" value="There should be an empty line between assigning and using variable &quot;{0}&quot;" />
			<message key="empty.line.missing.line.number" value="There should be an empty line {0} line &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MissingParenthesesCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds missing parentheses in conditional statement." />
			<message key="parentheses.missing.1" value="Missing parentheses between the &quot;{0}&quot; operator and the &quot;{1}&quot; operator" />
			<message key="parentheses.missing.2" value="Missing parentheses around the {0} hand side argument of the &quot;{1}&quot; operator" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.NestedIfStatementCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds nested if statements that can be combined." />
			<message key="if.statements.combine" value="Combine nested if-statements" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.NumberSuffixCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Verifies that uppercase `D`, `F`, or `L` is used when denoting Double/Float/Long." />
			<message key="suffix.incorrect" value="Use uppercase &quot;{0}&quot; as suffix for the type &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.OperatorOperandCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Verifies that operand do not go over too many lines and make the operator hard to read." />
			<property name="enabled" value="false" />
			<message key="readability.improve" value="Create a new variable for the {0} hand side operand of the &quot;{1}&quot; operator for better readability" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ParsePrimitiveTypeCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Verifies that `GetterUtil.parse*` is used to parse primitive types, when possible." />
			<message key="getter.util.method.use" value="Use &quot;GetterUtil.{0}&quot; or properly catch &quot;NumberFormatException&quot; when calling &quot;{1}.{2}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.PersistenceCallCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Finds illegal persistence calls across component boundaries." />
			<message key="persistence.call.illegal" value="Illegal call to class &quot;{0}&quot;, see LPS-68923" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.PlusStatementCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Performs several checks to statements where `+` is used for concatenation." />
			<message key="end.character.invalid" value="When concatenating multiple literal strings using &quot;+&quot;, only the last literal string can end with &quot;{0}&quot;" />
			<message key="literal.string.combine" value="Combine the literal strings &quot;{0}&quot; and &quot;{1}&quot;" />
			<message key="literal.string.move" value="Add the string &quot;{0}&quot; to the {1} literal string" />
			<message key="start.character.invalid" value="When concatenating multiple literal strings using &quot;+&quot;, only the first literal string can start with &quot;{0}&quot;" />
			<message key="string.combine" value="Combine the literal string &quot;{0}&quot; with &quot;{1}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.PortletURLBuilderCheck">
			<property name="category" value="Miscellaneous" />
			<property name="description" value="Checks that `PortletURLBuilder` is used when possible." />
			<property name="enforceBuilderNames" value="" />
			<message key="builder.include" value="Include method call &quot;{0}&quot; ({1}) in &quot;{2}&quot; ({3})" />
			<message key="builder.inline.1" value="Inline variable definition &quot;{0}&quot; ({1}) inside &quot;{2}&quot; ({3}), possibly by using a lambda function" />
			<message key="builder.inline.2" value="Inline variable definition &quot;{0}&quot; ({1}) and dependent statements ({2}) inside &quot;{3}&quot; ({4}) by using a lambda function" />
			<message key="builder.use" value="Use &quot;{0}&quot; ({1}, {2})" />
			<message key="builder.use.instead" value="Use &quot;{0}&quot; instead of new instance of &quot;{1}&quot;" />
			<message key="keyword.reserved" value="Do not use &quot;{0}&quot; to set parameter &quot;{1}&quot;, use &quot;{2}&quot; instead" />
			<message key="string.cast.unneeded" value="No need to cast parameter to &quot;String&quot; when passing to method &quot;{0}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.SemiColonCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds cases of unnecessary semicolon." />
			<message key="semi.colon.unnecessary" value="Unnecessary semi colon" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.SizeIsZeroCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds cases of calls like `list.size() == 0` (use `list.isEmpty()` instead)." />
			<message key="method.use" value="Use method &quot;{0}&quot; instead" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.StringBundlerNamingCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks for consistent naming on variables of type 'StringBundler'." />
			<message key="variable.name.incorrect" value="StringBundler {0} &quot;{1}&quot; should end with either &quot;sb&quot; or &quot;SB&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.StringCastCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Finds cases where a redundant `toString()` is called on variable type `String`." />
			<message key="string.cast.unneeded" value="No need to call &quot;.toString()&quot; on type String" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.TernaryOperatorCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds use of ternary operator in `java` files (use if statement instead)." />
			<message key="ternary.operator.avoid" value="Use if-else-statement instead of ternary conditional operator for better readability" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.UnnecessaryTypeCastCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Finds unnecessary Type Casting." />
			<message key="type.cast.unnecessary" value="No need to apply Type Cast to method &quot;{0}&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ValidatorIsNullCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Ensures that only variable of type `Long`, `Serializable` or `String` is passed to method `com.liferay.portal.kernel.util.Validator.isNull`." />
			<message key="method.invalidName" value="Avoid using method &quot;{0}&quot;" />
			<message key="method.reserved" value="Method &quot;{0}&quot; should only be used for type &quot;Long&quot;, &quot;Serializable&quot; or &quot;String&quot;" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.VariableNameCheck">
			<property name="allowedVariableNames" value="bitMode,metadata,superClass,userName" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that variable names follow naming conventions." />
			<property name="enforceTypeNames" value="" />
			<message key="variable.incorrect.count" value="Rename variable &quot;{0}&quot; to &quot;{1}&quot; (and increment counts for other variables &quot;{0}*&quot;)" />
			<message key="variable.incorrect.ending" value="Name of variable with type &quot;{0}&quot; should end with &quot;{1}&quot;" />
			<message key="variable.name.incorrect.for.statement" value="Use format &quot;curVariableName&quot; for variable &quot;{0}&quot;" />
			<message key="variable.rename" value="Rename variable &quot;{0}&quot; to &quot;{1}&quot;" />
			<message key="variable.typo" value="Typo in variable &quot;{0}&quot;, expected variable name &quot;{1}&quot;" />
		</module>
	</module>
</module>