/**
 * SPDX-FileCopyrightText: (c) 2023 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.source.formatter.dependencies.upgrade;

import org.osgi.service.component.annotations.Reference;

/**
 * @author NÃ­colas Moura
 */
public class UpgradeCatchAllCheck implements ConfigurationBeanDeclaration {

	public void method() {
		_countryService.fetchCommerceCountry(123, "test123");

		AccountPortletKeys.COMMERCE_ACCOUNT_ADMIN;
		AccountPortletKeys.COMMERCE_ACCOUNT_GROUP_ADMIN;

		CommerceOrderConstants.PAYMENT_STATUS_AUTHORIZED;
		CommerceOrderConstants.PAYMENT_STATUS_PAID;
		CommerceOrderConstants.PAYMENT_STATUS_PENDING;

		CookieKeys.COMMERCE_CONTINUE_AS_GUEST;
		CookieKeys.ID;
		CookieKeys.SCREEN_NAME;
		
		DDMStructureManagerUtil.getStructure(123, 123, "test123");
		_ddmStructureManager.getStructure(123, 123, "test123");

		DestinationNames.BASE_PRICE_LIST;
		DestinationNames.ORDER_STATUS;
		DestinationNames.PAYMENT_STATUS;
		DestinationNames.SHIPMENT_STATUS;
		DestinationNames.STOCK_QUANTITY;
		DestinationNames.SUBSCRIPTION_STATUS;

		DLUtil.getDownloadURL(null, null, null, null, null, null);
		DLUtil.getImagePreviewURL(null, null, null);

		ExpandoColumnLocalServiceUtil.getColumn(123, "test123");
		_expandoColumnLocalService.getColumn(123, "test123");

		FDSTableSchemaBuilder fDSTableSchemaBuilder = _fDSTableSchemaBuilderFactory.create();

		fDSTableSchemaBuilder.addFDSTableSchemaField("test123", "test123");

		for (CommerceOrderItem commerceOrderItem : commerceOrder.getCommerceOrderItems()) {
			commerceOrderItem.getQuantity();
		}

		HtmlUtil.extractText(null);
		HtmlUtil.getHTML();

		_http.hasProxyConfig();
		_http.addParameter(null, null, null);
		_http.decodePath(null);
		_http.decodeURL(null);
		_http.encodeParameters(null);
		_http.encodePath(null);
		_http.fixPath(null);
		_http.getCompleteURL(null, null, null);
		_http.getDomain(null);
		_http.getIpAddress(null);
		_http.getParameter(null, null);
		_http.getParameterMap(null);
		_http.getPath(null);
		_http.getProtocol(null);
		_http.getQueryString(null);
		_http.getRequestURL(null);
		_http.getURI(null);
		_http.hasDomain(null);
		_http.hasProtocol(null);
		_http.isForwarded(null);
		_http.isSecure(null);
		_http.normalizePath(null);
		_http.parameterMapFromString(null);
		_http.protocolize(null, null);
		_http.removeDomain(null);
		_http.removeParameter(null);
		_http.removePathParameters(null);
		_http.removeProtocol(null);
		_http.sanitizeHeader(null);
		_http.setParameter(null, null, null);
		_http.shortenURL(null);

		HttpUtil.hasProxyConfig();
		HttpUtil.addParameter(null, null, null);
		HttpUtil.decodePath(null);
		HttpUtil.decodeURL(null);
		HttpUtil.encodeParameters(null);
		HttpUtil.encodePath(null);
		HttpUtil.fixPath(null);
		HttpUtil.getCompleteURL(null, null, null);
		HttpUtil.getDomain(null);
		HttpUtil.getIpAddress(null);
		HttpUtil.getParameter(null, null);
		HttpUtil.getParameterMap(null);
		HttpUtil.getPath(null);
		HttpUtil.getProtocol(null);
		HttpUtil.getQueryString(null);
		HttpUtil.getRequestURL(null);
		HttpUtil.getURI(null);
		HttpUtil.hasDomain(null);
		HttpUtil.hasProtocol(null);
		HttpUtil.isForwarded(null);
		HttpUtil.isSecure(null);
		HttpUtil.normalizePath(null);
		HttpUtil.parameterMapFromString(null);
		HttpUtil.protocolize(null, null);
		HttpUtil.removeDomain(null);
		HttpUtil.removeParameter(null);
		HttpUtil.removePathParameters(null);
		HttpUtil.removeProtocol(null);
		HttpUtil.sanitizeHeader(null);
		HttpUtil.setParameter(null, null, null);
		HttpUtil.shortenURL(null);

		JSONUtil.isValid("test123");

		ListUtil.fromArray(LanguageUtil.getAvailableLocales());

		new AppTitleComparator();
		new ArticleCreateDateComparator();
		new ArticleDisplayDateComparator();
		new ArticleIDComparator();
		new ArticleModifiedDateComparator();
		new ArticleResourcePKComparator();
		new ArticleReviewDateComparator();
		new ArticleTitleComparator();
		new ArticleVersionComparator();
		new AssetCategoryCreateDateComparator();
		new AssetListEntryCreateDateComparator();
		new AssetListEntrySegmentsEntryRelPriorityComparator();
		new AssetListEntryTitleComparator();
		new AssetListEntryUsageModifiedDateComparator();
		new AssetTagAssetCountComparator();
		new AssetTagCountComparator();
		new AssetVocabularyCreateDateComparator();
		new BackgroundTaskCompletionDateComparator();
		new BackgroundTaskCreateDateComparator();
		new BackgroundTaskNameComparator();
		new CPAttachmentFileEntryDisplayDateComparator();
		new CPAttachmentFileEntryModifiedDateComparator();
		new CPAttachmentFileEntryPriorityComparator();
		new CPDefinitionDisplayDateComparator();
		new CPDefinitionGroupedEntryPriorityComparator();
		new CPDefinitionGroupedEntryQuantityComparator();
		new CPDefinitionLinkPriorityComparator();
		new CPDefinitionModifiedDateComparator();
		new CPDefinitionNameComparator();
		new CPDefinitionOptionRelCreateDateComparator();
		new CPDefinitionOptionRelNameComparator();
		new CPDefinitionOptionRelPriorityComparator();
		new CPDefinitionOptionValueRelNameComparator();
		new CPDefinitionOptionValueRelPriorityComparator();
		new CPDefinitionSpecificationOptionValuePriorityComparator();
		new CPDefinitionVersionComparator();
		new CPInstanceCreateDateComparator();
		new CPInstanceDisplayDateComparator();
		new CPInstanceSkuComparator();
		new CPInstanceUnitOfMeasurePriorityComparator();
		new CPMeasurementUnitPriorityComparator();
		new CPOptionCategoryModifiedDateComparator();
		new CPOptionCategoryPriorityComparator();
		new CPOptionCategoryTitleComparator();
		new CPOptionModifiedDateComparator();
		new CPOptionNameComparator();
		new CPOptionValueNameComparator();
		new CPOptionValuePriorityComparator();
		new CPSpecificationOptionModifiedDateComparator();
		new CPSpecificationOptionTitleComparator();
		new CPTaxCategoryCreateDateComparator();
		new CPTaxCategoryNameComparator();
		new CalendarBookingStartTimeComparator();
		new CalendarNameComparator();
		new CalendarResourceCodeComparator();
		new CalendarResourceNameComparator();
		new CategoryModifiedDateComparator();
		new CategoryTitleComparator();
		new CommerceAddressCreateDateComparator();
		new CommerceAddressNameComparator();
		new CommerceAddressRestrictionCreateDateComparator();
		new CommerceAvailabilityEstimatePriorityComparator();
		new CommerceCatalogCreateDateComparator();
		new CommerceCurrencyPriorityComparator();
		new CommerceDiscountCommerceAccountGroupRelCreateDateComparator();
		new CommerceDiscountCreateDateComparator();
		new CommerceDiscountRelCreateDateComparator();
		new CommerceDiscountRuleCreateDateComparator();
		new CommerceInventoryReplenishmentItemAvailabilityDateComparator();
		new CommerceInventoryWarehouseCityComparator();
		new CommerceInventoryWarehouseItemQuantityComparator();
		new CommerceInventoryWarehouseItemWarehouseNameComparator();
		new CommerceInventoryWarehouseNameComparator();
		new CommerceNotificationAttachmentCreateDateComparator();
		new CommerceNotificationQueueEntryPriorityComparator();
		new CommerceNotificationTemplateCommerceAccountGroupRelCreateDateComparator();
		new CommerceNotificationTemplateModifiedDateComparator();
		new CommerceNotificationTemplateNameComparator();
		new CommerceOrderCreateDateComparator();
		new CommerceOrderIdComparator();
		new CommerceOrderItemCreateDateComparator();
		new CommerceOrderPaymentCreateDateComparator();
		new CommerceOrderTotalComparator();
		new CommercePriceEntryUOMCreateDateComparator();
		new CommercePriceListCreateDateComparator();
		new CommercePriceListDisplayDateComparator();
		new CommercePriceListPriorityComparator();
		new CommercePricingClassCreateDateComparator();
		new CommerceShipmentCreateDateComparator();
		new CommerceShipmentExpectedDateComparator();
		new CommerceShipmentIdComparator();
		new CommerceShipmentItemCreateDateComparator();
		new CommerceShipmentShippingDateComparator();
		new CommerceShippingFixedOptionPriorityComparator();
		new CommerceShippingFixedOptionRelCountryIdComparator();
		new CommerceShippingMethodPriorityComparator();
		new CommerceSubscriptionEntryCreateDateComparatorOrganizationIdComparator();
		new CommerceTaxFixedRateAddressRelCreateDateComparator();
		new CommerceTaxFixedRateCreateDateComparator();
		new CommerceTierPriceEntryMinQuantityComparator();
		new CommerceVirtualOrderItemCreateDateComparator();
		new CommerceWishListCreateDateComparator();
		new CommerceWishListItemCreateDateComparator();
		new CommerceWishListNameComparator();
		new DDLRecordCreateDateComparator();
		new DDLRecordIdComparator();
		new DDLRecordSetCreateDateComparator();
		new DDLRecordSetNameComparator();
		new DDMFormInstanceNameComparator();
		new DDMFormInstanceRecordIdComparator();
		new DEDataListViewCreateDateComparator();
		new DEDataListViewNameComparator();
		new DLContentVersionComparator();
		new DLFileVersionVersionComparator();
		new DataProviderInstanceModifiedDateComparator();
		new DataProviderInstanceNameComparator();
		new DefinitionCreateDateComparator();
		new EntryCreateDateComparator();
		new EntryDisplayDateComparator();
		new EntryIdComparator();
		new EntryModifiedDateComparator();
		new EntryNameComparator();
		new EntryPriorityComparator();
		new EntryTitleComparator();
		new EntryTypeComparator();
		new EntryURLComparator();
		new EntryUserNameComparator();
		new ExportImportConfigurationNameComparator();
		new FeedIDComparator();
		new FeedNameComparator();
		new FolderArticleArticleIdComparator();
		new FolderArticleCreateDateComparator();
		new FolderArticleDisplayDateComparator();
		new FolderArticleModifiedDateComparator();
		new FolderArticleTitleComparator();
		new FolderIdComparator();
		new FolderNameComparator();
		new FragmentCollectionCreateDateComparator();
		new FragmentCollectionNameComparator();
		new FragmentCompositionFragmentEntryCreateDateComparator();
		new FragmentCompositionFragmentEntryModifiedDateComparator();
		new FragmentCompositionFragmentEntryNameComparator();
		new FragmentEntryCreateDateComparator();
		new FragmentEntryLinkLastPropagationDateComparator();
		new FragmentEntryNameComparator();
		new FriendlyURLEntryCreateDateComparator();
		new FriendlyURLEntryLocalizationComparator();
		new GroupFriendlyURLComparator();
		new GroupIdComparator();
		new GroupTypeComparator();
		new KBArticleCreateDateComparator();
		new KBArticleModifiedDateComparator();
		new KBArticlePriorityComparator();
		new KBArticleStatusComparator();
		new KBArticleTitleComparator();
		new KBArticleUserNameComparator();
		new KBArticleVersionComparator();
		new KBArticleViewCountComparator();
		new KBCommentCreateDateComparator();
		new KBCommentModifiedDateComparator();
		new KBCommentStatusComparator();
		new KBCommentUserNameComparator();
		new KBFolderNameComparator();
		new KBObjectsPriorityComparator();
		new KBObjectsViewCountComparator();
		new KBTemplateCreateDateComparator();
		new KBTemplateModifiedDateComparator();
		new KBTemplateTitleComparator();
		new KBTemplateUserNameComparator();
		new KaleoDefinitionVersionActiveComparator();
		new KaleoDefinitionVersionComparator();
		new KaleoDefinitionVersionIdComparator();
		new KaleoDefinitionVersionModifiedDateComparator();
		new KaleoDefinitionVersionNameComparator();
		new KaleoDefinitionVersionVersionComparator();
		new KaleoProcessCreateDateComparator();
		new LayoutClassedModelUsageModifiedDateComparator();
		new LayoutComparator();
		new LayoutCreateDateComparator();
		new LayoutModifiedDateComparator();
		new LayoutPageTemplateCollectionCreateDateComparator();
		new LayoutPageTemplateCollectionLayoutPageTemplateEntryCreateDateComparator();
		new LayoutPageTemplateCollectionLayoutPageTemplateEntryModifiedDateComparator();
		new LayoutPageTemplateCollectionLayoutPageTemplateEntryNameComparator();
		new LayoutPageTemplateCollectionModifiedDateComparator();
		new LayoutPageTemplateCollectionNameComparator();
		new LayoutPageTemplateEntryCreateDateComparator();
		new LayoutPageTemplateEntryModifiedDateComparator();
		new LayoutPageTemplateEntryNameComparator();
		new LayoutPrototypeCreateDateComparator();
		new LayoutRelevanceComparator();
		new LayoutRevisionCreateDateComparator();
		new LayoutRevisionIdComparator();
		new LayoutRevisionModifiedDateComparator();
		new LayoutSetBranchCreateDateComparator();
		new LayoutSetPrototypeCreateDateComparator();
		new MBObjectsComparator();
		new MBObjectsModifiedDateComparator();
		new MBObjectsTitleComparator();
		new MessageCreateDateComparator();
		new MessageModifiedDateComparator();
		new MessageSubjectComparator();
		new MessageURLSubjectComparator();
		new NodeLastPostDateComparator();
		new NodeNameComparator();
		new ObjectFieldCreateDateComparator();
		new OrganizationNameComparator();
		new OrganizationTypeComparator();
		new PageCreateDateComparator();
		new PageModifiedDateComparator();
		new PageTitleComparator();
		new PageVersionComparator();
		new PasswordPolicyDescriptionComparator();
		new PasswordPolicyNameComparator();
		new PushNotificationsDevicePlatformComparator();
		new ResourceActionBitwiseValueComparator();
		new RoleDescriptionComparator();
		new RoleNameComparator();
		new RoleRoleIdComparator();
		new RoleTypeComparator();
		new SAPEntryNameComparator();
		new SXPBlueprintModifiedDateComparator();
		new SavedContentEntryClassNameIdComparator();
		new SharingEntryModifiedDateComparator();
		new SiteNavigationMenuCreateDateComparator();
		new SiteNavigationMenuItemOrderComparator();
		new SiteNavigationMenuModifiedDateComparator();
		new SiteNavigationMenuNameComparator();
		new SocialActivitySetModifiedDateComparator();
		new SourceCreateDateComparator();
		new StructureCreateDateComparator();
		new StructureIdComparator();
		new StructureLayoutCreateDateComparator();
		new StructureLayoutNameComparator();
		new StructureLinkStructureModifiedDateComparator();
		new StyleBookEntryCreateDateComparator();
		new StyleBookEntryNameComparator();
		new SubscriptionClassNameIdComparator();
		new TeamNameComparator();
		new TemplateIdComparator();
		new ThreadCreateDateComparator();
		new ThreadLastPostDateComparator();
		new ThreadModifiedDateComparator();
		new ThreadTitleComparator();
		new UserEmailAddressComparator();
		new UserFirstNameComparator();
		new UserGroupDescriptionComparator();
		new UserGroupIdComparator();
		new UserIdComparator();
		new UserJobTitleComparator();
		new UserLastNameComparator();
		new UserLoginDateComparator();
		new UserScreenNameComparator();
		new WorkflowMetricsSLADefinitionVersionIdComparator();

		PortletDisplayTemplateManager.DISPLAY_STYLE_PREFIX;
		PortletDisplayTemplateManager.ENTRIES;
		
		RoleLocalServiceUtil.loadFetchRole(123, "test123");
		_roleLocalService.loadFetchRole(123, "test123");

		ServiceTrackerList<Class<T>, Class<E>> serviceTrackerList = ServiceTrackerListFactory.open(null, null);

		StructureStructureKeyComparator.INSTANCE_ASCENDING;
		StructureStructureKeyComparator.INSTANCE_DESCENDING;
	}

	public void method(
		Address address, EmailAddress emailAddress, OrgLabor orgLabor,
		Phone phone, Website website) {

		address.getTypeId();
		address.setTypeId();
		emailAddress.getTypeId();
		emailAddress.setTypeId();
		orgLabor.getTypeId();
		orgLabor.setTypeId();
		phone.getTypeId();
		phone.setTypeId();
		website.getTypeId();
		website.setTypeId();
	}

	public void method(AssetCategory<?> assetCategory) {
		AssetCategory::getLeftCategoryId;
		assetCategory.getLeftCategoryId;
	}

	public void method(boolean showHiddenPages) {
		LayoutItemSelectorCriterion layoutItemSelectorCriterion = new LayoutItemSelectorCriterion();

		layoutItemSelectorCriterion.setShowHiddenPages(null);
		layoutItemSelectorCriterion.setShowHiddenPages(showHiddenPages);

		new AppTitleComparator(showHiddenPages);
		new ArticleCreateDateComparator(showHiddenPages);
		new ArticleDisplayDateComparator(showHiddenPages);
		new ArticleIDComparator(showHiddenPages);
		new ArticleModifiedDateComparator(showHiddenPages);
		new ArticleResourcePKComparator(showHiddenPages);
		new ArticleReviewDateComparator(showHiddenPages);
		new ArticleTitleComparator(showHiddenPages);
		new ArticleVersionComparator(showHiddenPages);
		new AssetCategoryCreateDateComparator(showHiddenPages);
		new AssetListEntryCreateDateComparator(showHiddenPages);
		new AssetListEntrySegmentsEntryRelPriorityComparator(showHiddenPages);
		new AssetListEntryTitleComparator(showHiddenPages);
		new AssetListEntryUsageModifiedDateComparator(showHiddenPages);
		new AssetTagAssetCountComparator(showHiddenPages);
		new AssetTagCountComparator(showHiddenPages);
		new AssetVocabularyCreateDateComparator(showHiddenPages);
		new BackgroundTaskCompletionDateComparator(showHiddenPages);
		new BackgroundTaskCreateDateComparator(showHiddenPages);
		new BackgroundTaskNameComparator(showHiddenPages);
		new CPAttachmentFileEntryDisplayDateComparator(showHiddenPages);
		new CPAttachmentFileEntryModifiedDateComparator(showHiddenPages);
		new CPAttachmentFileEntryPriorityComparator(showHiddenPages);
		new CPDefinitionDisplayDateComparator(showHiddenPages);
		new CPDefinitionGroupedEntryPriorityComparator(showHiddenPages);
		new CPDefinitionGroupedEntryQuantityComparator(showHiddenPages);
		new CPDefinitionLinkPriorityComparator(showHiddenPages);
		new CPDefinitionModifiedDateComparator(showHiddenPages);
		new CPDefinitionNameComparator(showHiddenPages);
		new CPDefinitionOptionRelCreateDateComparator(showHiddenPages);
		new CPDefinitionOptionRelNameComparator(showHiddenPages);
		new CPDefinitionOptionRelPriorityComparator(showHiddenPages);
		new CPDefinitionOptionValueRelNameComparator(showHiddenPages);
		new CPDefinitionOptionValueRelPriorityComparator(showHiddenPages);
		new CPDefinitionSpecificationOptionValuePriorityComparator(showHiddenPages);
		new CPDefinitionVersionComparator(showHiddenPages);
		new CPInstanceCreateDateComparator(showHiddenPages);
		new CPInstanceDisplayDateComparator(showHiddenPages);
		new CPInstanceSkuComparator(showHiddenPages);
		new CPInstanceUnitOfMeasurePriorityComparator(showHiddenPages);
		new CPMeasurementUnitPriorityComparator(showHiddenPages);
		new CPOptionCategoryModifiedDateComparator(showHiddenPages);
		new CPOptionCategoryPriorityComparator(showHiddenPages);
		new CPOptionCategoryTitleComparator(showHiddenPages);
		new CPOptionModifiedDateComparator(showHiddenPages);
		new CPOptionNameComparator(showHiddenPages);
		new CPOptionValueNameComparator(showHiddenPages);
		new CPOptionValuePriorityComparator(showHiddenPages);
		new CPSpecificationOptionModifiedDateComparator(showHiddenPages);
		new CPSpecificationOptionTitleComparator(showHiddenPages);
		new CPTaxCategoryCreateDateComparator(showHiddenPages);
		new CPTaxCategoryNameComparator(showHiddenPages);
		new CalendarBookingStartTimeComparator(showHiddenPages);
		new CalendarNameComparator(showHiddenPages);
		new CalendarResourceCodeComparator(showHiddenPages);
		new CalendarResourceNameComparator(showHiddenPages);
		new CategoryModifiedDateComparator(showHiddenPages);
		new CategoryTitleComparator(showHiddenPages);
		new CommerceAddressCreateDateComparator(showHiddenPages);
		new CommerceAddressNameComparator(showHiddenPages);
		new CommerceAddressRestrictionCreateDateComparator(showHiddenPages);
		new CommerceAvailabilityEstimatePriorityComparator(showHiddenPages);
		new CommerceCatalogCreateDateComparator(showHiddenPages);
		new CommerceCurrencyPriorityComparator(showHiddenPages);
		new CommerceDiscountCommerceAccountGroupRelCreateDateComparator(showHiddenPages);
		new CommerceDiscountCreateDateComparator(showHiddenPages);
		new CommerceDiscountRelCreateDateComparator(showHiddenPages);
		new CommerceDiscountRuleCreateDateComparator(showHiddenPages);
		new CommerceInventoryReplenishmentItemAvailabilityDateComparator(showHiddenPages);
		new CommerceInventoryWarehouseCityComparator(showHiddenPages);
		new CommerceInventoryWarehouseItemQuantityComparator(showHiddenPages);
		new CommerceInventoryWarehouseItemWarehouseNameComparator(showHiddenPages);
		new CommerceInventoryWarehouseNameComparator(showHiddenPages);
		new CommerceNotificationAttachmentCreateDateComparator(showHiddenPages);
		new CommerceNotificationQueueEntryPriorityComparator(showHiddenPages);
		new CommerceNotificationTemplateCommerceAccountGroupRelCreateDateComparator(showHiddenPages);
		new CommerceNotificationTemplateModifiedDateComparator(showHiddenPages);
		new CommerceNotificationTemplateNameComparator(showHiddenPages);
		new CommerceOrderCreateDateComparator(showHiddenPages);
		new CommerceOrderIdComparator(showHiddenPages);
		new CommerceOrderItemCreateDateComparator(showHiddenPages);
		new CommerceOrderPaymentCreateDateComparator(showHiddenPages);
		new CommerceOrderTotalComparator(showHiddenPages);
		new CommercePriceEntryUOMCreateDateComparator(showHiddenPages);
		new CommercePriceListCreateDateComparator(showHiddenPages);
		new CommercePriceListDisplayDateComparator(showHiddenPages);
		new CommercePriceListPriorityComparator(showHiddenPages);
		new CommercePricingClassCreateDateComparator(showHiddenPages);
		new CommerceShipmentCreateDateComparator(showHiddenPages);
		new CommerceShipmentExpectedDateComparator(showHiddenPages);
		new CommerceShipmentIdComparator(showHiddenPages);
		new CommerceShipmentItemCreateDateComparator(showHiddenPages);
		new CommerceShipmentShippingDateComparator(showHiddenPages);
		new CommerceShippingFixedOptionPriorityComparator(showHiddenPages);
		new CommerceShippingFixedOptionRelCountryIdComparator(showHiddenPages);
		new CommerceShippingMethodPriorityComparator(showHiddenPages);
		new CommerceSubscriptionEntryCreateDateComparatorOrganizationIdComparator(showHiddenPages);
		new CommerceTaxFixedRateAddressRelCreateDateComparator(showHiddenPages);
		new CommerceTaxFixedRateCreateDateComparator(showHiddenPages);
		new CommerceTierPriceEntryMinQuantityComparator(showHiddenPages);
		new CommerceVirtualOrderItemCreateDateComparator(showHiddenPages);
		new CommerceWishListCreateDateComparator(showHiddenPages);
		new CommerceWishListItemCreateDateComparator(showHiddenPages);
		new CommerceWishListNameComparator(showHiddenPages);
		new DDLRecordCreateDateComparator(showHiddenPages);
		new DDLRecordIdComparator(showHiddenPages);
		new DDLRecordSetCreateDateComparator(showHiddenPages);
		new DDLRecordSetNameComparator(showHiddenPages);
		new DDMFormInstanceNameComparator(showHiddenPages);
		new DDMFormInstanceRecordIdComparator(showHiddenPages);
		new DEDataListViewCreateDateComparator(showHiddenPages);
		new DEDataListViewNameComparator(showHiddenPages);
		new DLContentVersionComparator(showHiddenPages);
		new DLFileVersionVersionComparator(showHiddenPages);
		new DataProviderInstanceModifiedDateComparator(showHiddenPages);
		new DataProviderInstanceNameComparator(showHiddenPages);
		new DefinitionCreateDateComparator(showHiddenPages);
		new EntryCreateDateComparator(showHiddenPages);
		new EntryDisplayDateComparator(showHiddenPages);
		new EntryIdComparator(showHiddenPages);
		new EntryModifiedDateComparator(showHiddenPages);
		new EntryNameComparator(showHiddenPages);
		new EntryPriorityComparator(showHiddenPages);
		new EntryTitleComparator(showHiddenPages);
		new EntryTypeComparator(showHiddenPages);
		new EntryURLComparator(showHiddenPages);
		new EntryUserNameComparator(showHiddenPages);
		new ExportImportConfigurationNameComparator(showHiddenPages);
		new FeedIDComparator(showHiddenPages);
		new FeedNameComparator(showHiddenPages);
		new FolderArticleArticleIdComparator(showHiddenPages);
		new FolderArticleCreateDateComparator(showHiddenPages);
		new FolderArticleDisplayDateComparator(showHiddenPages);
		new FolderArticleModifiedDateComparator(showHiddenPages);
		new FolderArticleTitleComparator(showHiddenPages);
		new FolderIdComparator(showHiddenPages);
		new FolderNameComparator(showHiddenPages);
		new FragmentCollectionCreateDateComparator(showHiddenPages);
		new FragmentCollectionNameComparator(showHiddenPages);
		new FragmentCompositionFragmentEntryCreateDateComparator(showHiddenPages);
		new FragmentCompositionFragmentEntryModifiedDateComparator(showHiddenPages);
		new FragmentCompositionFragmentEntryNameComparator(showHiddenPages);
		new FragmentEntryCreateDateComparator(showHiddenPages);
		new FragmentEntryLinkLastPropagationDateComparator(showHiddenPages);
		new FragmentEntryNameComparator(showHiddenPages);
		new FriendlyURLEntryCreateDateComparator(showHiddenPages);
		new FriendlyURLEntryLocalizationComparator(showHiddenPages);
		new GroupFriendlyURLComparator(showHiddenPages);
		new GroupIdComparator(showHiddenPages);
		new GroupTypeComparator(showHiddenPages);
		new KBArticleCreateDateComparator(showHiddenPages);
		new KBArticleModifiedDateComparator(showHiddenPages);
		new KBArticlePriorityComparator(showHiddenPages);
		new KBArticleStatusComparator(showHiddenPages);
		new KBArticleTitleComparator(showHiddenPages);
		new KBArticleUserNameComparator(showHiddenPages);
		new KBArticleVersionComparator(showHiddenPages);
		new KBArticleViewCountComparator(showHiddenPages);
		new KBCommentCreateDateComparator(showHiddenPages);
		new KBCommentModifiedDateComparator(showHiddenPages);
		new KBCommentStatusComparator(showHiddenPages);
		new KBCommentUserNameComparator(showHiddenPages);
		new KBFolderNameComparator(showHiddenPages);
		new KBObjectsPriorityComparator(showHiddenPages);
		new KBObjectsViewCountComparator(showHiddenPages);
		new KBTemplateCreateDateComparator(showHiddenPages);
		new KBTemplateModifiedDateComparator(showHiddenPages);
		new KBTemplateTitleComparator(showHiddenPages);
		new KBTemplateUserNameComparator(showHiddenPages);
		new KaleoDefinitionVersionActiveComparator(showHiddenPages);
		new KaleoDefinitionVersionComparator(showHiddenPages);
		new KaleoDefinitionVersionIdComparator(showHiddenPages);
		new KaleoDefinitionVersionModifiedDateComparator(showHiddenPages);
		new KaleoDefinitionVersionNameComparator(showHiddenPages);
		new KaleoDefinitionVersionVersionComparator(showHiddenPages);
		new KaleoProcessCreateDateComparator(showHiddenPages);
		new LayoutClassedModelUsageModifiedDateComparator(showHiddenPages);
		new LayoutComparator(showHiddenPages);
		new LayoutCreateDateComparator(showHiddenPages);
		new LayoutModifiedDateComparator(showHiddenPages);
		new LayoutPageTemplateCollectionCreateDateComparator(showHiddenPages);
		new LayoutPageTemplateCollectionLayoutPageTemplateEntryCreateDateComparator(showHiddenPages);
		new LayoutPageTemplateCollectionLayoutPageTemplateEntryModifiedDateComparator(showHiddenPages);
		new LayoutPageTemplateCollectionLayoutPageTemplateEntryNameComparator(showHiddenPages);
		new LayoutPageTemplateCollectionModifiedDateComparator(showHiddenPages);
		new LayoutPageTemplateCollectionNameComparator(showHiddenPages);
		new LayoutPageTemplateEntryCreateDateComparator(showHiddenPages);
		new LayoutPageTemplateEntryModifiedDateComparator(showHiddenPages);
		new LayoutPageTemplateEntryNameComparator(showHiddenPages);
		new LayoutPrototypeCreateDateComparator(showHiddenPages);
		new LayoutRelevanceComparator(showHiddenPages);
		new LayoutRevisionCreateDateComparator(showHiddenPages);
		new LayoutRevisionIdComparator(showHiddenPages);
		new LayoutRevisionModifiedDateComparator(showHiddenPages);
		new LayoutSetBranchCreateDateComparator(showHiddenPages);
		new LayoutSetPrototypeCreateDateComparator(showHiddenPages);
		new MBObjectsComparator(showHiddenPages);
		new MBObjectsModifiedDateComparator(showHiddenPages);
		new MBObjectsTitleComparator(showHiddenPages);
		new MessageCreateDateComparator(showHiddenPages);
		new MessageModifiedDateComparator(showHiddenPages);
		new MessageSubjectComparator(showHiddenPages);
		new MessageURLSubjectComparator(showHiddenPages);
		new NodeLastPostDateComparator(showHiddenPages);
		new NodeNameComparator(showHiddenPages);
		new ObjectFieldCreateDateComparator(showHiddenPages);
		new OrganizationNameComparator(showHiddenPages);
		new OrganizationTypeComparator(showHiddenPages);
		new PageCreateDateComparator(showHiddenPages);
		new PageModifiedDateComparator(showHiddenPages);
		new PageTitleComparator(showHiddenPages);
		new PageVersionComparator(showHiddenPages);
		new PasswordPolicyDescriptionComparator(showHiddenPages);
		new PasswordPolicyNameComparator(showHiddenPages);
		new PushNotificationsDevicePlatformComparator(showHiddenPages);
		new ResourceActionBitwiseValueComparator(showHiddenPages);
		new RoleDescriptionComparator(showHiddenPages);
		new RoleNameComparator(showHiddenPages);
		new RoleRoleIdComparator(showHiddenPages);
		new RoleTypeComparator(showHiddenPages);
		new SAPEntryNameComparator(showHiddenPages);
		new SXPBlueprintModifiedDateComparator(showHiddenPages);
		new SavedContentEntryClassNameIdComparator(showHiddenPages);
		new SharingEntryModifiedDateComparator(showHiddenPages);
		new SiteNavigationMenuCreateDateComparator(showHiddenPages);
		new SiteNavigationMenuItemOrderComparator(showHiddenPages);
		new SiteNavigationMenuModifiedDateComparator(showHiddenPages);
		new SiteNavigationMenuNameComparator(showHiddenPages);
		new SocialActivitySetModifiedDateComparator(showHiddenPages);
		new SourceCreateDateComparator(showHiddenPages);
		new StructureCreateDateComparator(showHiddenPages);
		new StructureIdComparator(showHiddenPages);
		new StructureLayoutCreateDateComparator(showHiddenPages);
		new StructureLayoutNameComparator(showHiddenPages);
		new StructureLinkStructureModifiedDateComparator(showHiddenPages);
		new StyleBookEntryCreateDateComparator(showHiddenPages);
		new StyleBookEntryNameComparator(showHiddenPages);
		new SubscriptionClassNameIdComparator(showHiddenPages);
		new TeamNameComparator(showHiddenPages);
		new TemplateIdComparator(showHiddenPages);
		new ThreadCreateDateComparator(showHiddenPages);
		new ThreadLastPostDateComparator(showHiddenPages);
		new ThreadModifiedDateComparator(showHiddenPages);
		new ThreadTitleComparator(showHiddenPages);
		new UserEmailAddressComparator(showHiddenPages);
		new UserFirstNameComparator(showHiddenPages);
		new UserGroupDescriptionComparator(showHiddenPages);
		new UserGroupIdComparator(showHiddenPages);
		new UserIdComparator(showHiddenPages);
		new UserJobTitleComparator(showHiddenPages);
		new UserLastNameComparator(showHiddenPages);
		new UserLoginDateComparator(showHiddenPages);
		new UserScreenNameComparator(showHiddenPages);
		new WorkflowMetricsSLADefinitionVersionIdComparator(showHiddenPages);
	}

	public void method(CommerceAddress commerceAddress) {
		CommerceAddressLocalServiceUtil.updateCommerceAddress(commerceAddress);
		CommerceAddressLocalServiceUtil.updateCommerceAddress(null);
		_commerceAddressLocalService.updateCommerceAddress(commerceAddress);
	}

	public void method(
		CommerceAddress commerceAddress, Country country, Region region) {

		commerceAddress.getCountry().getTwoLettersISOCode();
		country.getCommerceCountryId();
		country.getTwoLettersISOCode();
		country.setTwoLettersISOCode();
		country.getThreeLettersISOCode();
		country.setThreeLettersISOCode();

		commerceAddress.getRegion().getCode();
		region.getCode();
	}

	public void method(Contact contact) {
		contact.getPrefixId();
		contact.getSuffixId();
		contact.setPrefixId();
		contact.setSuffixId();
	}

	public void method(
		CustomFacetPortletPreferences customFacetPortletPreferences) {

		customFacetPortletPreferences.getFederatedSearchKeyOptional();
	}

	public void method(
		DDMFormViewFormInstanceRecordsDisplayContext
			ddmFormViewFormInstanceRecordsDisplayContext){
		
		ddmFormViewFormInstanceRecordsDisplayContext.getFormViewRecordsDisplayContext();
		ddmFormViewFormInstanceRecordsDisplayContext.getSearch();
	}

	public void method(DDMStructure ddmStructure, Fields ddmFields) {
		_journalConverter.getContent(ddmStructure, null);
		_journalConverter.getContent(ddmStructure, ddmFields);
	}

	public void method(Group group, LayoutSet layoutSet) {
		group.getPrivateLayoutSet().getVirtualHostname();
		layoutSet.getVirtualHostname();
	}

	public void method(HttpServletRequest httpServletRequest) {
		_commerceAccountHelper.getCurrentCommerceAccount(httpServletRequest);
		_commerceAccountHelper.getCurrentCommerceAccount(null);
	}

	public void method(HttpServletRequest httpServletRequest, Object value) {
		httpServletRequest.setAttribute(null, null);
		httpServletRequest.setAttribute(InfoDisplayWebKeys.INFO_ITEM_FIELD_VALUES_PROVIDER, value);
		httpServletRequest.setAttribute(InfoDisplayWebKeys.INFO_ITEM_FIELD_VALUES_PROVIDER, infoItemServiceTracker.getFirstInfoItemService(InfoItemFieldValuesProvider.class, infoItemClassName));
	}

	public void method(HttpServletRequest httpServletRequest, String name) {
		CookieKeys.getCookie(httpServletRequest, "test123");
		CookieKeys.getCookie(httpServletRequest, name);

		CookieUtil.get(httpServletRequest, "test123");
		CookieUtil.get(httpServletRequest, name);
	}

	public void method(
		HttpServletRequest httpServletRequest, String name,
		boolean toUpperCase) {

		CookieUtil.get(httpServletRequest, "test123", toUpperCase);
		CookieUtil.get(httpServletRequest, name, toUpperCase);
	}

	public void method(
		Indexer indexer, ServiceReference<Indexer> serviceReference) {

		Map<Indexer, Indexer> indexerRequests = new LinkedHashMap<>();
		List<Indexer> indexers = portlet.getIndexerInstances();
	}

	public void method(Indexer<?> indexer) {
		indexer.getClassNames();
	}

	public void method(Layout layout, String friendlyURL) {
		LayoutFriendlyURLComposite(layout, friendlyURL);
	}

	public void method(long commerceOrderId) {
		CommerceOrderItemLocalServiceUtil.deleteCommerceOrderItems(commerceOrderId);
		_commerceOrderItemLocalService.deleteCommerceOrderItems(123);
		_commerceOrderItemLocalService.deleteCommerceOrderItems(commerceOrderId);
	}

	public void method(long companyId, boolean readOnly) {
		PrefsPropsUtil.getPreferences(123, readOnly);
		PrefsPropsUtil.getPreferences(companyId, readOnly);
	}

	public void method(
		long groupId, boolean privateLayout, long layoutId, long parentLayoutId,
		Map<java.util.Locale, String> nameMap,
		Map<java.util.Locale, String> titleMap,
		Map<java.util.Locale, String> descriptionMap,
		Map<java.util.Locale, String> keywordsMap,
		Map<java.util.Locale, String> robotsMap, String type, boolean hidden,
		Map<java.util.Locale, String> friendlyURLMap, boolean hasIconImage,
		byte[] iconBytes, ServiceContext serviceContext) {

		LayoutLocalServiceUtil.updateLayout(groupId, privateLayout, layoutId, parentLayoutId, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, hidden, friendlyURLMap, hasIconImage, iconBytes, serviceContext);
		LayoutServiceUtil.updateLayout(groupId, privateLayout, 123, parentLayoutId, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, test, hidden, friendlyURLMap, hasIconImage, iconBytes, serviceContext);
		LayoutServiceUtil.updateLayout(groupId, privateLayout, layoutId, parentLayoutId, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, hidden, friendlyURLMap, hasIconImage, iconBytes, serviceContext);
		_layoutLocalService.updateLayout(groupId, privateLayout, layoutId, parentLayoutId, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, hidden, friendlyURLMap, hasIconImage, iconBytes, serviceContext);
		_layoutService.updateLayout(groupId, privateLayout, layoutId, parentLayoutId, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, hidden, friendlyURLMap, hasIconImage, iconBytes, serviceContext);
	}

	public void method(
		long companyId, boolean autoPassword, String password1,
		String password2, boolean autoScreenName, String screenName,
		String emailAddress, long facebookId, String openId, Locale locale,
		String firstName, String middleName, String lastName, long prefixId,
		long suffixId, boolean male, int birthdayMonth, int birthdayDay,
		int birthdayYear, String jobTitle, long[] groupIds,
		long[] organizationIds, long[] roleIds, long[] userGroupIds,
		boolean sendEmail, ServiceContext serviceContext) {

		UserLocalServiceUtil.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		UserServiceUtil.addUser(123, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		UserServiceUtil.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		_userLocalService.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		_userService.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
	}

	public void method(
		long companyId, boolean autoPassword, String password1,
		String password2, boolean autoScreenName, String screenName,
		String emailAddress, long facebookId, String openId, Locale locale,
		String firstName, String middleName, String lastName, long prefixId,
		long suffixId, boolean male, int birthdayMonth, int birthdayDay,
		int birthdayYear, String jobTitle, long[] groupIds,
		long[] organizationIds, long[] roleIds, long[] userGroupIds,
		List<Address> addresses, List<EmailAddress> emailAddresses,
		List<Phone> phones, List<Website> websites,
		List<AnnouncementsDelivery> announcementsDelivers, boolean sendEmail,
		ServiceContext serviceContext) {

		UserLocalServiceUtil.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, addresses, emailAddresses, phones, websites, announcementsDelivers, sendEmail, serviceContext);
		UserServiceUtil.addUser(123, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, addresses, emailAddresses, phones, websites, announcementsDelivers, sendEmail, serviceContext);
		UserServiceUtil.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, addresses, emailAddresses, phones, websites, announcementsDelivers, sendEmail, serviceContext);
		_userLocalService.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, addresses, emailAddresses, phones, websites, announcementsDelivers, sendEmail, serviceContext);
		_userService.addUser(companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, addresses, emailAddresses, phones, websites, announcementsDelivers, sendEmail, serviceContext);
	}

	public void method(long userId, int status) {
		UserLocalServiceUtil.updateStatus(userId, status);
		UserServiceUtil.updateStatus(123, status);
		UserServiceUtil.updateStatus(userId, status);
		_userLocalService.updateStatus(userId, status);
		_userService.updateStatus(userId, status);
	}

	public void method(long companyId, long workflowTaskId) {
		_workflowTaskManager.getWorkflowTask(123, workflowTaskId);
		_workflowTaskManager.getWorkflowTask(companyId, workflowTaskId);
	}

	public void method(
		long userId, long groupId, boolean privateLayout, long parentLayoutId,
		long classNameId, long classPK, Map<java.util.Locale, String> nameMap,
		Map<java.util.Locale, String> titleMap,
		Map<java.util.Locale, String> descriptionMap,
		Map<java.util.Locale, String> keywordsMap,
		Map<java.util.Locale, String> robotsMap, String type,
		String typeSettings, boolean hidden, boolean system,
		Map<java.util.Locale, String> friendlyURLMap,
		ServiceContext serviceContext) {

		LayoutLocalServiceUtil.addLayout(userId, groupId, privateLayout, parentLayoutId, classNameId, classPK, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, serviceContext);
		_layoutLocalService.addLayout(userId, groupId, 123, parentLayoutId, classNameId, classPK, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, serviceContext);
		_layoutLocalService.addLayout(userId, groupId, privateLayout, parentLayoutId, classNameId, classPK, nameMap, titleMap, descriptionMap, keywordsMap, robotsMap, type, typeSettings, hidden, system, friendlyURLMap, serviceContext);
	}

	public void method(
		long userId, long groupId, boolean mountPoint, long parentFolderId,
		String name, String description, ServiceContext serviceContext) {

		DLFolderServiceUtil.addFolder(123, groupId, mountPoint, parentFolderId, name, description, serviceContext);
		DLFolderServiceUtil.addFolder(userId, groupId, mountPoint, parentFolderId, name, description, serviceContext);
		_dlFolderService.addFolder(userId, groupId, mountPoint, parentFolderId, name, description, serviceContext);
	}

	public void method(
		long creatorUserId, long companyId, boolean autoPassword,
		String password1, String password2, boolean autoScreenName,
		String screenName, String emailAddress, long facebookId, String openId,
		Locale locale, String firstName, String middleName, String lastName,
		long prefixId, long suffixId, boolean male, int birthdayMonth,
		int birthdayDay, int birthdayYear, String jobTitle, long[] groupIds,
		long[] organizationIds, long[] roleIds, long[] userGroupIds,
		boolean sendEmail, ServiceContext serviceContext) {

		UserLocalServiceUtil.addUser(creatorUserId, companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		UserServiceUtil.addUser(123, companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		UserServiceUtil.addUser(creatorUserId, companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		_userLocalService.addUser(creatorUserId, companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
		_userService.addUser(creatorUserId, companyId, autoPassword, password1, password2, autoScreenName, screenName, emailAddress, facebookId, openId, locale, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, jobTitle, groupIds, organizationIds, roleIds, userGroupIds, sendEmail, serviceContext);
	}

	public void method(
		long cpDefinitionId, long cProductId, double priority, String type,
		ServiceContext serviceContext) {

		CPDefinitionLinkLocalServiceUtil.addCPDefinitionLinkByCProductId(123, cProductId, priority, type, serviceContext);
		CPDefinitionLinkLocalServiceUtil.addCPDefinitionLinkByCProductId(cpDefinitionId, cProductId, priority, type, serviceContext);
		_cpDefinitionLinkLocalService.addCPDefinitionLinkByCProductId(cpDefinitionId, cProductId, priority, type, serviceContext);
	}

	public void method(
		long sourceCPDefinitionId, long groupId, int status) {

		CPDefinitionLocalServiceUtil.copyCPDefinition(null, groupId);
		CPDefinitionLocalServiceUtil.copyCPDefinition(sourceCPDefinitionId, groupId);
		_cpDefinitionLocalService.copyCPDefinition(sourceCPDefinitionId, groupId);
    }

	public void method(
		long commerceOrderId, long cpInstanceId, int quantity,
		int shippedQuantity, String json, CommerceContext commerceContext,
		ServiceContext serviceContext) {

		_commerceOrderItemLocalService.addCommerceOrderItem(commerceOrderId, cpInstanceId, quantity, shippedQuantity, json, commerceContext, serviceContext);
		CommerceOrderItemLocalServiceUtil.addCommerceOrderItem(commerceOrderId, cpInstanceId, quantity, shippedQuantity, json, commerceContext, serviceContext);
		CommerceOrderItemLocalServiceUtil.addCommerceOrderItem(123, cpInstanceId, 123, shippedQuantity, "test", commerceContext, serviceContext);

		CommerceOrderItemServiceUtil.addCommerceOrderItem(commerceOrderId, cpInstanceId, quantity, shippedQuantity, json, commerceContext, serviceContext);
		_commerceOrderItemService.addCommerceOrderItem(commerceOrderId, cpInstanceId, quantity, shippedQuantity, json, commerceContext, serviceContext);
		_commerceOrderItemService.addCommerceOrderItem(123, cpInstanceId, 123, shippedQuantity, "test", commerceContext, serviceContext);
	}

	public void method(
		long userId, long groupId, long repositoryId, boolean mountPoint,
		long parentFolderId, String name, String description, boolean hidden,
		ServiceContext serviceContext) {

		DLFolderLocalServiceUtil.addFolder(123, groupId, repositoryId, mountPoint, parentFolderId, name, description, hidden, serviceContext);
		DLFolderLocalServiceUtil.addFolder(userId, groupId, repositoryId, mountPoint, parentFolderId, name, description, hidden, serviceContext);
		_dlFolderLocalService.addFolder(userId, groupId, repositoryId, mountPoint, parentFolderId, name, description, hidden, serviceContext);
	}

	public void method(
		long userId, long groupId, long billingAddressId,
		long commerceAccountId, long commerceCurrencyId,
		long commerceOrderTypeId, long commerceShippingMethodId,
		long shippingAddressId, String commercePaymentMethodKey,
		int orderDateMonth, int orderDateDay, int orderDateYear,
		int orderDateHour, int orderDateMinute, int orderStatus,
		int paymentStatus, String purchaseOrderNumber,
		BigDecimal shippingAmount, String shippingOptionName,
		BigDecimal shippingWithTaxAmount, BigDecimal subtotal,
		BigDecimal subtotalWithTaxAmount, BigDecimal taxAmount,
		BigDecimal total, BigDecimal totalWithTaxAmount,
		ServiceContext serviceContext) {

		CommerceOrderLocalServiceUtil.addCommerceOrder(123, groupId, billingAddressId, commerceAccountId, commerceCurrencyId, commerceOrderTypeId, commerceShippingMethodId, shippingAddressId, commercePaymentMethodKey, orderDateMonth, orderDateDay, orderDateYear, orderDateHour, orderDateMinute, orderStatus, paymentStatus, purchaseOrderNumber, shippingAmount, "test123", shippingWithTaxAmount, subtotal, subtotalWithTaxAmount, taxAmount, total, totalWithTaxAmount, serviceContext);
		CommerceOrderLocalServiceUtil.addCommerceOrder(userId, groupId, billingAddressId, commerceAccountId, commerceCurrencyId, commerceOrderTypeId, commerceShippingMethodId, shippingAddressId, commercePaymentMethodKey, orderDateMonth, orderDateDay, orderDateYear, orderDateHour, orderDateMinute, orderStatus, paymentStatus, purchaseOrderNumber, shippingAmount, shippingOptionName, shippingWithTaxAmount, subtotal, subtotalWithTaxAmount, taxAmount, total, totalWithTaxAmount, serviceContext);
		_commerceOrderLocalService.addCommerceOrder(userId, groupId, billingAddressId, commerceAccountId, commerceCurrencyId, commerceOrderTypeId, commerceShippingMethodId, shippingAddressId, commercePaymentMethodKey, orderDateMonth, orderDateDay, orderDateYear, orderDateHour, orderDateMinute, orderStatus, paymentStatus, purchaseOrderNumber, shippingAmount, shippingOptionName, shippingWithTaxAmount, subtotal, subtotalWithTaxAmount, taxAmount, total, totalWithTaxAmount, serviceContext);
	}

	public void method(
		long userId, long groupId, long parentCategoryId,
		Map<Locale, String> titleMap, Map<Locale, String> descriptionMap,
		long vocabularyId, String[] categoryProperties,
		ServiceContext serviceContext) {

		AssetCategoryLocalServiceUtil.addCategory(123, groupId, parentCategoryId, titleMap, descriptionMap, vocabularyId, categoryProperties, serviceContext);
		AssetCategoryLocalServiceUtil.addCategory(userId, groupId, parentCategoryId, titleMap, descriptionMap, vocabularyId, categoryProperties, serviceContext);
		_assetCategoryLocalService.addCategory(userId, groupId, parentCategoryId, titleMap, descriptionMap, vocabularyId, categoryProperties, serviceContext);
	}

	public void method(
		long userId, long repositoryId, long folderId,
		String sourceFileName, String mimeType, byte[] bytes,
		ServiceContext serviceContext) {
		
		_dlAppLocalService.addFileEntry(123, repositoryId, folderId, sourceFileName, mimeType, bytes, serviceContext);
		_dlAppLocalService.addFileEntry(userId, repositoryId, folderId, sourceFileName, mimeType, bytes, serviceContext);
		_dlAppService.addFileEntry(userId, repositoryId, folderId, sourceFileName, mimeType, bytes, serviceContext);
	}

	public void method(
		long userId, long repositoryId, long parentFolderId, String name,
		String description, com.liferay.portal.kernel.service.ServiceContext
		serviceContext) {

		DLAppLocalServiceUtil.addFolder(userId, repositoryId, parentFolderId, name, description, serviceContext);
		DLAppServiceUtil.addFolder(123, repositoryId, parentFolderId, name, description, serviceContext);
		DLAppServiceUtil.addFolder(userId, repositoryId, parentFolderId, name, description, serviceContext);
		_dlAppLocalService.addFolder(userId, repositoryId, parentFolderId, name, description, serviceContext);
		_dlAppService.addFolder(userId, repositoryId, parentFolderId, name, description, serviceContext);
	}

	public void method(
		long userId, long groupId, long parentFolderId, String name,
		String description, ServiceContext serviceContext) {

		JournalFolderLocalServiceUtil.addFolder(123, groupId, parentFolderId, "test123", description, serviceContext);
		_journalFolderLocalService.addFolder(userId, groupId, parentFolderId, name, description, serviceContext);
	}

	public void method(
		long userId, long repositoryId, long folderId, String sourceFileName,
		String mimeType, String title, String description, String changeLog,
		byte[] bytes, ServiceContext serviceContext) {

		DLAppLocalServiceUtil.addFileEntry(123, repositoryId, folderId, "test123", mimeType, title, description, changeLog, bytes, serviceContext);
		DLAppLocalServiceUtil.addFileEntry(userId, repositoryId, folderId, sourceFileName, mimeType, title, description, changeLog, bytes, serviceContext);
		_dlAppLocalService.addFileEntry(userId, repositoryId, folderId, sourceFileName, mimeType, title, description, changeLog, bytes, serviceContext);
	}

	public void method(
		long groupId, long userId, Map<Locale, String> nameMap,
		Map<Locale, String> shortDescriptionMap,
		Map<Locale, String> descriptionMap, Map<Locale, String> urlTitleMap,
		Map<Locale, String> metaTitleMap,
		Map<Locale, String> metaDescriptionMap,
		Map<Locale, String> metaKeywordsMap, String productTypeName,
		boolean ignoreSKUCombinations, boolean shippable, boolean freeShipping,
		boolean shipSeparately, double shippingExtraPrice, double width,
		double height, double depth, double weight, long cpTaxCategoryId,
		boolean taxExempt, boolean telcoOrElectronics, String ddmStructureKey,
		boolean published, int displayDateMonth, int displayDateDay,
		int displayDateYear, int displayDateHour, int displayDateMinute,
		int expirationDateMonth, int expirationDateDay, int expirationDateYear,
		int expirationDateHour, int expirationDateMinute, boolean neverExpire,
		String defaultSku, boolean subscriptionEnabled, int subscriptionLength,
		String subscriptionType,
		UnicodeProperties subscriptionTypeSettingsUnicodeProperties,
		long maxSubscriptionCycles, String externalReferenceCode,
		ServiceContext serviceContext) {

		CPDefinitionLocalServiceUtil.upsertCPDefinition(groupId, userId, nameMap, shortDescriptionMap, descriptionMap, urlTitleMap, metaTitleMap, metaDescriptionMap, metaKeywordsMap, productTypeName, ignoreSKUCombinations, shippable, freeShipping, shipSeparately, shippingExtraPrice, width, height, depth, weight, cpTaxCategoryId, taxExempt, telcoOrElectronics, ddmStructureKey, published, displayDateMonth, displayDateDay, displayDateYear, displayDateHour, displayDateMinute, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, defaultSku, subscriptionEnabled, subscriptionLength, subscriptionType, subscriptionTypeSettingsUnicodeProperties, maxSubscriptionCycles, externalReferenceCode, serviceContext);
		CPDefinitionServiceUtil.upsertCPDefinition(123, userId, nameMap, shortDescriptionMap, descriptionMap, urlTitleMap, metaTitleMap, metaDescriptionMap, metaKeywordsMap, productTypeName, ignoreSKUCombinations, shippable, freeShipping, shipSeparately, shippingExtraPrice, width, height, depth, weight, cpTaxCategoryId, taxExempt, telcoOrElectronics, ddmStructureKey, published, displayDateMonth, displayDateDay, displayDateYear, displayDateHour, displayDateMinute, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, defaultSku, subscriptionEnabled, subscriptionLength, subscriptionType, subscriptionTypeSettingsUnicodeProperties, maxSubscriptionCycles, externalReferenceCode, serviceContext);
		CPDefinitionServiceUtil.upsertCPDefinition(groupId, userId, nameMap, shortDescriptionMap, descriptionMap, urlTitleMap, metaTitleMap, metaDescriptionMap, metaKeywordsMap, productTypeName, ignoreSKUCombinations, shippable, freeShipping, shipSeparately, shippingExtraPrice, width, height, depth, weight, cpTaxCategoryId, taxExempt, telcoOrElectronics, ddmStructureKey, published, displayDateMonth, displayDateDay, displayDateYear, displayDateHour, displayDateMinute, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, defaultSku, subscriptionEnabled, subscriptionLength, subscriptionType, subscriptionTypeSettingsUnicodeProperties, maxSubscriptionCycles, externalReferenceCode, serviceContext);
		_cpDefinitionLocalService.upsertCPDefinition(groupId, userId, nameMap, shortDescriptionMap, descriptionMap, urlTitleMap, metaTitleMap, metaDescriptionMap, metaKeywordsMap, productTypeName, ignoreSKUCombinations, shippable, freeShipping, shipSeparately, shippingExtraPrice, width, height, depth, weight, cpTaxCategoryId, taxExempt, telcoOrElectronics, ddmStructureKey, published, displayDateMonth, displayDateDay, displayDateYear, displayDateHour, displayDateMinute, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, defaultSku, subscriptionEnabled, subscriptionLength, subscriptionType, subscriptionTypeSettingsUnicodeProperties, maxSubscriptionCycles, externalReferenceCode, serviceContext);
		_cpDefinitionService.upsertCPDefinition(groupId, userId, nameMap, shortDescriptionMap, descriptionMap, urlTitleMap, metaTitleMap, metaDescriptionMap, metaKeywordsMap, productTypeName, ignoreSKUCombinations, shippable, freeShipping, shipSeparately, shippingExtraPrice, width, height, depth, weight, cpTaxCategoryId, taxExempt, telcoOrElectronics, ddmStructureKey, published, displayDateMonth, displayDateDay, displayDateYear, displayDateHour, displayDateMinute, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, defaultSku, subscriptionEnabled, subscriptionLength, subscriptionType, subscriptionTypeSettingsUnicodeProperties, maxSubscriptionCycles, externalReferenceCode, serviceContext);
	}

	public void method(
		long companyId, long groupId, String title, int start, int end) {

		_assetVocabularyLocalService.searchVocabularies(companyId, groupId, title, start, end);
		_assetVocabularyService.searchVocabularies(companyId, 123, "test123", start, end);
		_assetVocabularyService.searchVocabularies(companyId, groupId, title, start, end);
	}

	public void method(
		long userId, long fileEntryId, String sourceFileName, String mimeType,
		String title, String description, String changeLog,
		boolean majorVersion, byte[] bytes, ServiceContext serviceContext) {

		DLAppLocalServiceUtil.updateFileEntry(123, fileEntryId, "test123", mimeType, title, description, changeLog, majorVersion, bytes, serviceContext);
		DLAppLocalServiceUtil.updateFileEntry(userId, fileEntryId, sourceFileName, mimeType, title, description, changeLog, majorVersion, bytes, serviceContext);
		_dlAppLocalService.updateFileEntry(userId, fileEntryId, sourceFileName, mimeType, title, description, changeLog, majorVersion, bytes, serviceContext);
	}

	public void method(
		long userId, long fileEntryId, String sourceFileName, String mimeType,
		String title, String description, String changeLog,
		DLVersionNumberIncrease dlVersionNumberIncrease, byte[] bytes,
		ServiceContext serviceContext) {

		DLAppLocalServiceUtil.updateFileEntry(123, fileEntryId, "test123", mimeType, title, description, changeLog, dlVersionNumberIncrease, bytes, serviceContext);
		DLAppLocalServiceUtil.updateFileEntry(userId, fileEntryId, sourceFileName, mimeType, title, description, changeLog, dlVersionNumberIncrease, bytes, serviceContext);
		_dlAppLocalService.updateFileEntry(userId, fileEntryId, sourceFileName, mimeType, title, description, changeLog, dlVersionNumberIncrease, bytes, serviceContext);
	}

	public void method(
		long companyId, long[] groupIds, long[] calendarIds,
		long[] calendarResourceIds, long parentCalendarBookingId,
		String keywords, long startTime, long endTime, boolean recurring,
		int[] statuses, int start, int end,
		OrderByComparator<CalendarBooking> orderByComparator) {

		CalendarBookingLocalServiceUtil.search(companyId, groupIds, calendarIds, calendarResourceIds, parentCalendarBookingId, keywords, startTime, endTime, recurring, statuses, start, end, orderByComparator);
		CalendarBookingServiceUtil.search(123, groupIds, calendarIds, calendarResourceIds, parentCalendarBookingId, keywords, startTime, endTime, recurring, statuses, start, end, orderByComparator);
		CalendarBookingServiceUtil.search(companyId, groupIds, calendarIds, calendarResourceIds, parentCalendarBookingId, keywords, startTime, endTime, recurring, statuses, start, end, orderByComparator);
		_calendarBookingLocalService.search(companyId, groupIds, calendarIds, calendarResourceIds, parentCalendarBookingId, keywords, startTime, endTime, recurring, statuses, start, end, orderByComparator);
		_calendarBookingService.search(companyId, groupIds, calendarIds, calendarResourceIds, parentCalendarBookingId, keywords, startTime, endTime, recurring, statuses, start, end, orderByComparator);
	}

	public void method(long companyId, String externalReferenceCode) {
		AccountGroupLocalServiceUtil.fetchCommerceAccountGroupByExternalReferenceCode(companyId, externalReferenceCode);
		_accountGroupLocalService.fetchCommerceAccountGroupByExternalReferenceCode(123, "test123");
		_accountGroupLocalService.fetchCommerceAccountGroupByExternalReferenceCode(companyId, externalReferenceCode);

		AssetVocabularyLocalServiceUtil.fetchAssetVocabularyByExternalReferenceCode(123, externalReferenceCode);
		AssetVocabularyLocalServiceUtil.fetchAssetVocabularyByExternalReferenceCode(companyId, externalReferenceCode);
		_assetVocabularyLocalService.fetchAssetVocabularyByExternalReferenceCode(companyId, externalReferenceCode);

		CommerceCatalogLocalServiceUtil.fetchCommerceCatalogByExternalReferenceCode(companyId, externalReferenceCode);
		_commerceCatalogLocalService.fetchCommerceCatalogByExternalReferenceCode(123, "test123");
		_commerceCatalogLocalService.fetchCommerceCatalogByExternalReferenceCode(companyId, externalReferenceCode);

		CommercePriceListLocalServiceUtil.fetchByExternalReferenceCode(companyId, externalReferenceCode);
		_commercePriceListLocalService.fetchByExternalReferenceCode(123, "test123");
		_commercePriceListLocalService.fetchByExternalReferenceCode(companyId, externalReferenceCode);

		_cpDefinitionLocalService.fetchCPDefinitionByCProductExternalReferenceCode(companyId, externalReferenceCode);
		_cpDefinitionService.fetchCPDefinitionByCProductExternalReferenceCode(123, "test123");
		_cpDefinitionService.fetchCPDefinitionByCProductExternalReferenceCode(companyId, externalReferenceCode);

		CPInstanceLocalServiceUtil.fetchByExternalReferenceCode(123, "test123");
		CPInstanceLocalServiceUtil.fetchByExternalReferenceCode(companyId, externalReferenceCode);
		CPInstanceLocalServiceUtil.fetchCPInstanceByExternalReferenceCode(123, "test123");
		CPInstanceLocalServiceUtil.fetchCPInstanceByExternalReferenceCode(companyId, externalReferenceCode);
		CPInstanceServiceUtil.fetchByExternalReferenceCode(companyId, externalReferenceCode);
		_cpInstanceLocalService.fetchByExternalReferenceCode(companyId, externalReferenceCode);
		_cpInstanceLocalService.fetchCPInstanceByExternalReferenceCode(companyId, externalReferenceCode);
		_cpInstanceService.fetchByExternalReferenceCode(companyId, externalReferenceCode);
	}

	public void method(
		long companyId, String externalReferenceCode, long groupId) {

		AssetCategoryLocalServiceUtil.fetchAssetCategoryByExternalReferenceCode(companyId, externalReferenceCode);
		AssetCategoryLocalServiceUtil.fetchAssetCategoryByExternalReferenceCode(externalReferenceCode, groupId);
		_assetCategoryLocalService.fetchAssetCategoryByExternalReferenceCode(companyId, externalReferenceCode);
	}

	public void method(
		long userId, String className, long classPK, String number,
		String extension, long listTypeId, boolean primary) {

		PhoneLocalServiceUtil.addPhone(123, className, classPK, number, extension, listTypeId, primary);
		PhoneLocalServiceUtil.addPhone(userId, className, classPK, number, extension, listTypeId, primary);
	}

	public void method(
		long userId, String className, long classPK, String street1,
		String street2, String street3, String city, String zip, long regionId,
		long countryId, long typeId, boolean mailing, boolean primary) {

		AddressLocalServiceUtil.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary);
		AddressServiceUtil.addAddress(123, "test123", classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary);
		AddressServiceUtil.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary);
		_addressLocalService.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary);
		_addressService.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary);
	}

	public void method(
		long userId, String className, long classPK, String street1,
		String street2, String street3, String city, String zip, long regionId,
		long countryId, long typeId, boolean mailing, boolean primary,
		ServiceContext serviceContext) {

		AddressLocalServiceUtil.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary, serviceContext);
		AddressServiceUtil.addAddress(userId, "test123", 123, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary, serviceContext);
		AddressServiceUtil.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary, serviceContext);
		_addressLocalService.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary, serviceContext);
		_addressService.addAddress(userId, className, classPK, street1, street2, street3, city, zip,regionId, countryId, typeId, mailing, primary, serviceContext);
	}

	public void method(
		long companyId, String webId, String virtualHostname, String mx,
		int maxUsers, boolean active, String defaultAdminPassword,
		String defaultAdminScreenName, String defaultAdminEmailAddress,
		String defaultAdminFirstName, String defaultAdminMiddleName,
		String defaultAdminLastName) {

		CompanyLocalServiceUtil.addCompany(123, webId, virtualHostname, mx, maxUsers, active, defaultAdminPassword, defaultAdminScreenName, defaultAdminEmailAddress, defaultAdminFirstName, defaultAdminMiddleName, defaultAdminLastName);
		CompanyLocalServiceUtil.addCompany(companyId, webId, virtualHostname, mx, maxUsers, active, defaultAdminPassword, defaultAdminScreenName, defaultAdminEmailAddress, defaultAdminFirstName, defaultAdminMiddleName, defaultAdminLastName);
		_companyLocalService.addCompany(companyId, webId, virtualHostname, mx, maxUsers, active, defaultAdminPassword, defaultAdminScreenName, defaultAdminEmailAddress, defaultAdminFirstName, defaultAdminMiddleName, defaultAdminLastName);
	}

	public void method(long[] segmentsExperienceIds) {
		DefaultFragmentRendererContext defaultFragmentRendererContext = new DefaultFragmentRendererContext(null);

		defaultFragmentRendererContext.setSegmentsExperienceIds(new long[0]);
		defaultFragmentRendererContext.setSegmentsExperienceIds(segmentsExperienceIds);
	}

	public void method(Map<String, Object> fieldValues) {
		DefaultFragmentRendererContext defaultFragmentRendererContext = new DefaultFragmentRendererContext(null);

		defaultFragmentRendererContext.setFieldValues(fieldValues);
		defaultFragmentRendererContext.setFieldValues(new HashMap<String, Object>());
	}

	public void method(Organization organization) {
		organization.getStatusId();
		organization.setStatusId();
	}

	public void method(PortletDisplay portletDisplay, Class<T> clazz) {
		portletDisplay.getPortletInstanceConfiguration(clazz);
		portletDisplay.getPortletInstanceConfiguration(null);
	}

	public void method(Product product) {
		product.getConfiguration();
	}

	public void method(
		ResourceRequest resourceRequest, ResourceResponse resourceResponse) {

		CaptchaUtil.serveImage(resourceRequest, resourceResponse);
	}

	public void method(String searchEngineId) {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setSearchEngineId("test123");
		indexableActionableDynamicQuery.setSearchEngineId(searchEngineId);
	}

	public void method(String externalReferenceCode, long companyId) {
		CommercePriceListLocalServiceUtil.fetchByExternalReferenceCode(externalReferenceCode, companyId);
		_commercePriceListLocalService.fetchByExternalReferenceCode("test123", 123);
		_commercePriceListLocalService.fetchByExternalReferenceCode(externalReferenceCode, companyId);

		CPInstanceLocalServiceUtil.fetchByExternalReferenceCode("test123", 123);
		CPInstanceLocalServiceUtil.fetchByExternalReferenceCode(externalReferenceCode, companyId);
		CPInstanceServiceUtil.fetchByExternalReferenceCode(externalReferenceCode, companyId);
		_cpInstanceLocalService.fetchByExternalReferenceCode(externalReferenceCode, companyId);
		_cpInstanceService.fetchByExternalReferenceCode(externalReferenceCode, companyId);
	}

	public void method(
		String searchEngineId, long companyId, Collection<Document> documents,
		boolean commitImmediately) {

		IndexWriterHelperUtil.updateDocuments("test123", 123, null, null);
		IndexWriterHelperUtil.updateDocuments(searchEngineId, companyId, documents, commitImmediately);
		_indexWriterHelper.updateDocuments(searchEngineId, companyId, documents, commitImmediately);
	}

	public void method(
		String searchEngineId, long companyId, Document document,
		boolean commitImmediately) {

		IndexWriterHelperUtil.updateDocument("test123", 123, null, null);
		IndexWriterHelperUtil.updateDocument(searchEngineId, companyId, document, commitImmediately);
		_indexWriterHelper.updateDocument(searchEngineId, companyId, document, commitImmediately);
	}

	public void method(
		String className, long classPK, Locale locale,
		ThemeDisplay themeDisplay) {

		_assetDisplayPageFriendlyURLProvider.getFriendlyURL(className, classPK, locale, themeDisplay);
		_assetDisplayPageFriendlyURLProvider.getFriendlyURL("test123", 123, locale, themeDisplay);
	}

	public void method(
		String className, long classPK, long accountGroupId,
		ServiceContext serviceContext) {

		AccountGroupRelLocalServiceUtil.addCommerceAccountGroupRel(className, classPK, accountGroupId, serviceContext);
		AccountGroupRelServiceUtil.addCommerceAccountGroupRel("test123", classPK, 123, serviceContext);
		_accountGroupRelLocalService.addCommerceAccountGroupRel(className, classPK, accountGroupId, serviceContext);
		_accountGroupRelService.addCommerceAccountGroupRel(className, classPK, accountGroupId, serviceContext);
	}

	public void method(
		String searchEngineId, long companyId, String className,
		boolean commitImmediately) {

		IndexWriterHelperUtil.deleteEntityDocuments("test123", companyId, className, commitImmediately);
		IndexWriterHelperUtil.deleteEntityDocuments(searchEngineId, companyId, className, commitImmediately);
		_indexWriterHelper.deleteEntityDocuments(searchEngineId, companyId, className, commitImmediately);
	}

	public void method(
		String externalReferenceCode, long cProductId, String cpInstanceUuid,
		long commercePriceListId, BigDecimal price, BigDecimal promoPrice,
		ServiceContext serviceContext) {

		CommercePriceEntryLocalServiceUtil.addCommercePriceEntry(externalReferenceCode, cProductId, cpInstanceUuid, commercePriceListId, price, promoPrice, serviceContext);
		_commercePriceEntryLocalService.addCommercePriceEntry("test123", cProductId, cpInstanceUuid, commercePriceListId, price, promoPrice, serviceContext);
		_commercePriceEntryLocalService.addCommercePriceEntry(externalReferenceCode, cProductId, cpInstanceUuid, commercePriceListId, price, promoPrice, serviceContext);
	}

	public void method(
		String className, long classPK, ThemeDisplay themeDisplay) {

		_assetDisplayPageFriendlyURLProvider.getFriendlyURL(className, classPK, themeDisplay);
		_assetDisplayPageFriendlyURLProvider.getFriendlyURL("test123", 123, themeDisplay);
	}

	public void method(String name, String type) {
		ListTypeServiceUtil.getListTypes("test123");
		ListTypeServiceUtil.getListTypes(type);
		_listTypeLocalService.addListType("test123", type);
		_listTypeLocalService.addListType(name, type);
	}

	public void method(String name, String label, BigDecimal amount) {
		CommerceShippingOption(name, label, amount);
	}

	public void method(ThemeDisplay themeDisplay) {
		DLUtil.getGroupIds(null);
		DLUtil.getGroupIds(themeDisplay);

		themeDisplay.getPortletGroupId();
	}

	@Reference
	private AccountGroupLocalService _accountGroupLocalService;

	@Reference
	private AccountGroupRelLocalService _accountGroupRelLocalService;

	@Reference
	private AccountGroupRelService _accountGroupRelService;

	@Reference
	private AddressLocalService _addressLocalService;

	@Reference
	private AddressService _addressService;

	@Reference
	private AssetCategoryLocalService _assetCategoryLocalService;

	@Reference
	private AssetDisplayPageFriendlyURLProvider _assetDisplayPageFriendlyURLProvider;

	@Reference
	private AssetVocabularyLocalService _assetVocabularyLocalService;

	@Reference
	private AssetVocabularyService _assetVocabularyService;

	@Reference
	private CalendarBookingLocalService _calendarBookingLocalService;

	@Reference
	private CalendarBookingService _calendarBookingService;

	@Reference
	private CommerceAccountHelper _commerceAccountHelper;

	@Reference
	private CommerceAddressLocalService _commerceAddressLocalService;

	@Reference
	private CommerceCatalogLocalService _commerceCatalogLocalService;

	@Reference
	private CommerceOrderItemLocalService _commerceOrderItemLocalService;

	@Reference
	private CommerceOrderItemService _commerceOrderItemService;

	@Reference
	private CommerceOrderLocalService _commerceOrderLocalService;

	@Reference
	private CommercePriceEntryLocalService _commercePriceEntryLocalService;

	@Reference
	private CommercePriceListLocalService _commercePriceListLocalService;

	@Reference
	private CompanyLocalService _companyLocalService;

	@Reference
	private CountryService _countryService;

	@Reference
	private CPDefinitionLinkLocalService _cpDefinitionLinkLocalService;

	@Reference
	private CPDefinitionLocalService _cpDefinitionLocalService;

	@Reference
	private CPDefinitionService _cpDefinitionService;

	@Reference
	private CPInstanceLocalService _cpInstanceLocalService;

	@Reference
	private CPInstanceService _cpInstanceService;

	@Reference
	private DDMStructureManager _ddmStructureManager;

	@Reference
	private DLAppLocalService _dlAppLocalService;

	@Reference
	private DLAppService _dlAppService;

	@Reference
	private DLFolderLocalService _dlFolderLocalService;

	@Reference
	private DLFolderService _dlFolderService;

	@Reference
	private ExpandoColumnLocalService _expandoColumnLocalService;

	@Reference
	private FDSTableSchemaBuilderFactory _fDSTableSchemaBuilderFactory;

	@Reference
	private Http _http;

	@Reference
	private IndexWriterHelper _indexWriterHelper;

	@Reference
	private JournalConverter _journalConverter;

	@Reference
	private JournalFolderLocalService _journalFolderLocalService;

	@Reference
	private LayoutLocalService _layoutLocalService;

	@Reference
	private LayoutService _layoutService;

	@Reference
	private ListTypeLocalService _listTypeLocalService;

	@Reference
	private PrefsProps _prefsProps;

	@Reference
	private RoleLocalService _roleLocalService;

	private ServiceTrackerList<Class<T>, Class<E>> _serviceTrackerList;

	@Reference
	private UserLocalService _userLocalService;

	@Reference
	private UserService _userService;

	@Reference
	private WorkflowTaskManager _workflowTaskManager;

}