diff --git a/org/springframework/beans/CachedIntrospectionResults.java b/org/springframework/beans/CachedIntrospectionResults.java
index 1af0bde135c64..b42463df25c4a 100644
--- a/org/springframework/beans/CachedIntrospectionResults.java
+++ b/org/springframework/beans/CachedIntrospectionResults.java
@@ -16,15 +16,18 @@
 
 package org.springframework.beans;
 
+import java.beans.BeanDescriptor;
 import java.beans.BeanInfo;
 import java.beans.IntrospectionException;
 import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
+import java.beans.SimpleBeanInfo;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.net.URL;
 import java.security.ProtectionDomain;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -249,9 +252,94 @@ public final class CachedIntrospectionResults {
 			}
 		}
 
-		BeanInfo beanInfo = (shouldIntrospectorIgnoreBeaninfoClasses ?
-				Introspector.getBeanInfo(beanClass, Introspector.IGNORE_ALL_BEANINFO) :
-				Introspector.getBeanInfo(beanClass));
+		BeanInfo beanInfo = null;
+
+		if (!shouldIntrospectorIgnoreBeaninfoClasses) {
+			beanInfo = Introspector.getBeanInfo(beanClass);
+		}
+		else {
+			try {
+				Map<String, PropertyDescriptor> propertyDescriptors = new HashMap<>();
+
+				for (Method method : beanClass.getMethods()) {
+					if (Modifier.isStatic(method.getModifiers())) {
+						continue;
+					}
+
+					String name = method.getName();
+
+					if (name.length() <= 3 && !name.startsWith("is")) {
+						continue;
+					}
+
+					int count = method.getParameterCount();
+
+					Class<?> returnType = method.getReturnType();
+
+					if (count > 1) {
+						continue;
+					}
+
+					if (count == 0) {
+						String propertyName = null;
+
+						if (name.startsWith("get")) {
+							propertyName = Introspector.decapitalize(name.substring(3));
+						}
+						else if ((returnType == boolean.class) && name.startsWith("is")) {
+							propertyName = Introspector.decapitalize(name.substring(2));
+						}
+
+						if (propertyName != null) {
+							PropertyDescriptor propertyDescriptor = propertyDescriptors.get(propertyName);
+
+							if (propertyDescriptor == null) {
+								propertyDescriptor = new PropertyDescriptor(propertyName, method, null);
+
+								propertyDescriptors.put(propertyName, propertyDescriptor);
+							}
+							else {
+								propertyDescriptor.setReadMethod(method);
+							}
+						}
+					}
+					else if ((returnType == void.class) && name.startsWith("set")) {
+						String propertyName = Introspector.decapitalize(name.substring(3));
+
+						PropertyDescriptor propertyDescriptor = propertyDescriptors.get(propertyName);
+
+						if (propertyDescriptor == null) {
+							propertyDescriptor = new PropertyDescriptor(propertyName, null, method);
+
+							propertyDescriptors.put(propertyName, propertyDescriptor);
+						}
+						else {
+							propertyDescriptor.setWriteMethod(method);
+						}
+					}
+				}
+
+				PropertyDescriptor[] propertyDescriptorArray =
+					propertyDescriptors.values().toArray(new PropertyDescriptor[0]);
+
+				beanInfo = new SimpleBeanInfo() {
+
+					@Override
+					public BeanDescriptor getBeanDescriptor() {
+						return new BeanDescriptor(beanClass, null);
+					}
+
+					@Override
+					public PropertyDescriptor[] getPropertyDescriptors() {
+						return propertyDescriptorArray;
+					}
+
+				};
+			}
+			catch (IntrospectionException introspectionException) {
+				beanInfo = Introspector.getBeanInfo(beanClass, Introspector.IGNORE_ALL_BEANINFO);
+			}
+		}
 
 		// Immediately remove class from Introspector cache to allow for proper garbage
 		// collection on class loader shutdown; we cache it in CachedIntrospectionResults
@@ -459,3 +547,4 @@ public final class CachedIntrospectionResults {
 	}
 
 }
+/* @generated */
\ No newline at end of file
