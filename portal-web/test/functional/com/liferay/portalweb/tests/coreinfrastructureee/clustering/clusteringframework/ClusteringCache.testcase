@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@ignore = "true"
	@priority = 4
	test CanModuleBeShutdownDuringReplicateSession {
		property cluster.session.replicated = "true";
		property custom.properties = "portlet.session.replicate.enabled=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.deployClusteringModule(nodePort = 8080);

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Session Replication Test");

		Navigator.gotoPage(pageName = "Session Replication Test");

		Portlet.addPG(portletName = "ClusterSampleSessionReplication");

		AssertElementPresent(locator1 = "ClusterSamplePortlet#GENERATED_DATA_MESSAGE");

		Clustering.deployClusteringModule(nodePort = 9080);

		Navigator.gotoPage(pageName = "Session Replication Test");

		AssertElementPresent(locator1 = "ClusterSamplePortlet#STORED_DATA");

		var sessionData = selenium.getText("ClusterSamplePortlet#STORED_DATA");

		echo(${sessionData});

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Gogo Shell");

		GogoShell.executeCommand(commandName = "lb | grep 'Portal Cluster Multiple Sample Web'");

		var moduleID = GogoShell.getModuleID(moduleName = "'Portal Cluster Multiple Sample Web'");

		GogoShell.stopModule(moduleID = ${moduleID});

		GogoShell.viewModuleStatus(
			moduleName = "'Portal Cluster Multiple Sample Web'",
			moduleStatus = "Resolved");

		Navigator.gotoSpecificURLPage(
			pageName = "Session Replication Test",
			url = "http://localhost:9080");

		AssertTextEquals(
			locator1 = "ClusterSamplePortlet#STORED_DATA",
			value1 = ${sessionData});

		for (var serverPort : list "8080,9080") {
			Clustering.viewNoSessionReplicateLogErrorOnSpecificNode(
				exceptionText = "Unable to deserialize object",
				nodePort = ${serverPort});
		}
	}

	@priority = 4
	test DoNotReplicatePut {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePuts=false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = 8080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.key=test.value",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-update.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = 9080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.key=test.value.update",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.key=test.value",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(scriptFile = "groovy-script-portal-cache-remove.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = 8080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = 9080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");
	}

	@priority = 4
	test ReplicateByCopy {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePutsViaCopy=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = 8080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.key=test.value",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = 9080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.key=test.value",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(scriptFile = "groovy-script-portal-cache-remove.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = 8080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = 9080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");
	}

	@priority = 4
	test ReplicateByRemove {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePutsViaCopy=false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = 8080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.key=test.value",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = 9080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Groovy.runScriptViaGogoShell(scriptFile = "groovy-script-portal-cache-remove-all.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Cleared test.cache",
			nodePort = 8080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Cleared test.cache",
			nodePort = 9080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "test.cache is empty",
			nodePort = 9080,
			scriptFile = "groovy-script-portal-cache-get.groovy");
	}

	@priority = 4
	test SessionReplicatedIdAndAttributesAreTheSameInBothNodes {
		property cluster.session.replicated = "true";
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}portlet.session.replicate.enabled=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.deployClusteringModule(nodePort = 8080);

		Clustering.deployClusteringModule(nodePort = 9080);

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Session Replication Test");

		Navigator.gotoPage(pageName = "Session Replication Test");

		Portlet.addPG(portletName = "ClusterSampleSessionReplication");

		Open(value1 = "http://localhost:8080/web/guest/session-replication-test");

		var sampleData = selenium.getText("ClusterSamplePortlet#STORED_DATA_VALUE");
		var sessionId = selenium.getText("ClusterSamplePortlet#SESSION_ID");

		Open(value1 = "http://localhost:9080/web/guest/session-replication-test");

		AssertTextEquals(
			locator1 = "ClusterSamplePortlet#STORED_DATA_VALUE",
			value1 = ${sampleData});

		AssertTextEquals(
			locator1 = "ClusterSamplePortlet#SESSION_ID",
			value1 = ${sessionId});

		JSONUser.addUser(
			userEmailAddress = "test1@liferay.com",
			userFirstName = "Test1",
			userLastName = "Test1",
			userScreenName = "Test1");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "test1@liferay.com");

		User.firstLoginUI(
			password = PropsUtil.get("default.admin.password"),
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test1@liferay.com");

		Open(value1 = "http://www.able.com:9080/web/guest/session-replication-test");

		AssertTextNotEquals(
			locator1 = "ClusterSamplePortlet#STORED_DATA_VALUE",
			value1 = ${sampleData});

		AssertTextNotEquals(
			locator1 = "ClusterSamplePortlet#SESSION_ID",
			value1 = ${sessionId});

		var sampleData = selenium.getText("ClusterSamplePortlet#STORED_DATA_VALUE");
		var sessionId = selenium.getText("ClusterSamplePortlet#SESSION_ID");

		Open(value1 = "http://www.able.com:8080/web/guest/session-replication-test");

		AssertTextEquals(
			locator1 = "ClusterSamplePortlet#STORED_DATA_VALUE",
			value1 = ${sampleData});

		AssertTextEquals(
			locator1 = "ClusterSamplePortlet#SESSION_ID",
			value1 = ${sessionId});

		AssertElementPresent(
			locator1 = "ClusterSamplePortlet#LOGGED_IN_SESSION_COUNT",
			sessionCount = 2);
	}

	@priority = 4
	test UserStayLoggedInOnBothNodes {
		property cluster.session.replicated = "true";
		property custom.properties = "portlet.session.replicate.enabled=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		User.viewLoggedInPG();

		Open(value1 = "http://localhost:9080");

		User.viewLoggedInPG();

		Clustering.shutdownSpecificServer(nodePort = 8080);

		Open(value1 = "http://localhost:9080");

		User.viewLoggedInPG();

		Clustering.startSpecificServer(
			deleteLiferayHome = "false",
			keepCachedAppServerData = "true",
			nodePort = 8080);

		Open(value1 = "http://localhost:8080");

		User.viewLoggedInPG();

		Open(value1 = "http://localhost:9080");

		User.viewLoggedInPG();
	}

}