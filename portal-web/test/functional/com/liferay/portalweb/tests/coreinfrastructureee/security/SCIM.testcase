@component-name = "portal-security"
definition {

	property ci.retries.disabled = "true";
	property custom.properties = "feature.flag.LPS-96845=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "SCIM";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-190119 (TC-1 & TC-2 & TC-3). Admin User can Generate and Revoke SCIM Access Tokens."
	@priority = 5
	test AdminUserCanGenerateAndRevokeSCIMTokens {
		property custom.properties = "feature.flag.LPS-96845=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Admin User can Generate SCIM a Access Token") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			PortalSettings.gotoConfiguration(
				configurationCategory = "SCIM",
				configurationName = "SCIM",
				configurationScope = "Virtual Instance Scope");

			SCIM.configureSCIM(
				applicationName = "Name",
				generateAccessToken = "Yeah",
				matcherField = "userName");
		}

		task ("When: It is verified that the Token exists") {
			WaitForElementPresent(locator1 = "SCIM#ACCESS_TOKEN_FIELD");

			var accessTokenFieldFilled = selenium.getAttribute("SCIM#ACCESS_TOKEN_FIELD_VALUE");

			TestUtils.assertNotEquals(
				actual = ${accessTokenFieldFilled},
				expected = "");
		}

		task ("Then: Verify that Admin User can Revoke the Token (and log out after it)") {
			Button.click(button = "Revoke");

			AssertConfirm(value1 = "Are you sure you want to revoke all access tokens?");

			WaitForElementPresent(locator1 = "SCIM#ACCESS_TOKEN_FIELD");

			var accessTokenFieldEmpty = selenium.getAttribute("SCIM#ACCESS_TOKEN_FIELD_VALUE");

			TestUtils.assertEquals(
				actual = ${accessTokenFieldEmpty},
				expected = "");

			User.logoutPG();
		}
	}

	@description = "This is a use case for LPS-190327. TC1: Verify the grace period should work after generating a new access token."
	@priority = 4
	test GracePeriodShouldBeTriggerredWhenGenerateNewAccessToken {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add a SCIM client") {
			PortalSettings.openToConfigInInstanceSettings(portletKey = "scim-name");

			SCIM.configureSCIM(
				applicationName = "SCIM Application",
				matcherField = "email");
		}

		task ("When: Generate an access token") {
			SCIM.configureSCIM(generateAccessToken = "true");
		}

		task ("Then: Verify the authorization should be expired within 12 months") {
			OAuth2.openOAuth2Admin();

			OAuth2.viewGrantedAuthViaAdmin(
				applicationName = "SCIM Application",
				expiration = "Within 12 Months");
		}

		task ("When: Generate a new access token") {
			PortalSettings.openToConfigInInstanceSettings(portletKey = "scim-name");

			SCIM.configureSCIM(generateAccessToken = "true");
		}

		task ("Then: Verify the previous authorization should be expired within 9 days") {
			OAuth2.openOAuth2Admin();

			OAuth2.viewGrantedAuthViaAdmin(
				applicationName = "SCIM Application",
				expiration = "Within 9 Days");
		}
	}

	@description = "This is a use case for LPS-190327. TC2: Verify Matcher field should work after changing email to username."
	@priority = 4
	test MatcherFieldShouldWorkAfterChangeToUserName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add a SCIM client") {
			PortalSettings.openToConfigInInstanceSettings(portletKey = "scim-name");

			SCIM.configureSCIM(
				applicationName = "SCIM Application",
				matcherField = "email");

			SCIM.configureSCIM(generateAccessToken = "true");
		}

		task ("And: Change matcher field to userName") {
			SCIM.configureSCIM(matcherField = "userName");
		}

		task ("And: Add a regular user") {
			JSONUser.addUser(
				userEmailAddress = "test1@liferay.com",
				userFirstName = "Test",
				userLastName = "One",
				userScreenName = "test1");

			var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = "test1@liferay.com");
		}

		task ("When: Provision portal user to SCIM user with matched username") {
			var scimUserId = HeadlessSCIM.addSCIMUser(
				scimUserEmailAddress = "test1@liferay.com",
				userFirstName = "Test",
				userLastName = "One",
				userScreenName = "test1");
		}

		task ("Then: The provision is successful") {
			if (${scimUserId} == ${userId}) {
				echo("The provision is successful");
			}
		}
	}

	@description = "This is a use case for LPS-191052. TC-1 and TC-2 and TC-3: Verify that the system administrator can configure a SCIM client by deploying a config file and then register the SCIM client in the OAuth2 application."
	@ignore = "true"
	@priority = 5
	test SCIMClientCanBeConfiguredViaConfigFile {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When: Deploy the config file of the SCIM client") {
			var companyId = JSONCompany.getCompanyId();

			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "com.liferay.scim.client.configuration.ScimClientOAuth2ApplicationConfiguration.config",
				osgiConfigs = "applicationName=\"Test Application Name\",companyId=L\"${companyId}\",matcherField=\"userName\"");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then: Assert an access token is generated in the log and an OAuth2 application is added") {
			WaitForConsoleTextPresent(value1 = "New access token for SCIM OAuth 2 application Test Application Name generated");

			OAuth2.openOAuth2Admin();

			OAuth2.viewApplicationInAuthorizationsTable(
				entryIndex = 1,
				tableEntry = "Test Application Name");
		}

		task ("And: Assert a new access token is generated in the log after modifying entries in config file") {
			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "com.liferay.scim.client.configuration.ScimClientOAuth2ApplicationConfiguration.config",
				osgiConfigs = "applicationName=\"Test Application Name\",companyId=L\"${companyId}\",matcherField=\"emailAddress\"");

			OSGiConfig.waitForOSGiConfig();

			WaitForConsoleTextPresent(value1 = "New access token for SCIM OAuth 2 application Test Application Name generated");

			OAuth2.openOAuth2Admin();

			OAuth2.viewApplicationInAuthorizationsTable(
				entryIndex = 2,
				tableEntry = "Test Application Name");
		}

		task ("And: Assert SCIM client is removed after removing the config file") {
			OSGiConfig.deleteOSGiConfigFile(osgiConfigFileName = "com.liferay.scim.client.configuration.ScimClientOAuth2ApplicationConfiguration.config");

			OSGiConfig.waitForOSGiConfig();

			OAuth2.openOAuth2Admin();

			LexiconEntry.viewNoEntry(rowEntry = "Test Application Name");
		}
	}

	@description = "This is a use case for LPS-97345 (TC-10). If POST/Users tries to create a User that is already linked to another SCIM Client, the creation will fail."
	@ignore = "true"
	@priority = 5
	test SCIMClientCannotPostAUserIfTheyAreLinkedToAnotherClient {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: After setting up SCIM Client and post a User via HeadlessAPI") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			PortalSettings.gotoConfiguration(
				configurationCategory = "SCIM",
				configurationName = "SCIM",
				configurationScope = "Virtual Instance Scope");

			SCIM.configureSCIM(
				applicationName = "Name",
				generateAccessToken = "Yeah",
				matcherField = "userName");

			var response = SCIMAPI.postUser(
				emailAddress = "eren@liferay.com",
				familyName = "Yeager",
				givenName = "Eren",
				printheader = "true",
				userName = "eren");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = '''"emails":[{"type":"default","value":"eren@liferay.com"''');
		}

		task ("When: Another SCIM Client is set up and it tries to post the same User") {
			Navigator.openURL(baseURL = "http://localhost:8080");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			PortalSettings.gotoConfiguration(
				configurationCategory = "SCIM",
				configurationName = "SCIM",
				configurationScope = "Virtual Instance Scope");

			SCIM.configureSCIM(
				applicationName = "AnotherName",
				generateAccessToken = "Yeah",
				matcherField = "userName");
		}

		task ("Then: The posting will fail, as the User is linked to a different SCIM Client") {
			var response = SCIMAPI.postUser(
				emailAddress = "eren@liferay.com",
				familyName = "Yeager",
				givenName = "Eren",
				printheader = "true",
				userName = "eren");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "User was provisioned by another SCIM client");
		}
	}

	@description = "This is a use case for LPS-97345 (TC-14). A SCIM Client cannot update a User if they are linked to a different SCIM Client."
	@ignore = "true"
	@priority = 5
	test SCIMClientCannotUpdateAUserOfADifferentClient {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: After setting up SCIM Client and post a User via HeadlessAPI") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			PortalSettings.gotoConfiguration(
				configurationCategory = "SCIM",
				configurationName = "SCIM",
				configurationScope = "Virtual Instance Scope");

			SCIM.configureSCIM(
				applicationName = "Name",
				generateAccessToken = "Yeah",
				matcherField = "userName");

			var response = SCIMAPI.postUser(
				emailAddress = "eren@liferay.com",
				familyName = "Yeager",
				givenName = "Eren",
				printheader = "true",
				userName = "eren");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = '''"emails":[{"type":"default","value":"eren@liferay.com"''');

			var userId = JSONUserSetter.setUserId(userEmailAddress = "eren@liferay.com");
		}

		task ("When: Another SCIM Client is set up and it tries to update the previous User") {
			Navigator.openURL(baseURL = "http://localhost:8080");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			PortalSettings.gotoConfiguration(
				configurationCategory = "SCIM",
				configurationName = "SCIM",
				configurationScope = "Virtual Instance Scope");

			SCIM.configureSCIM(
				applicationName = "AnotherName",
				generateAccessToken = "Yeah",
				matcherField = "userName");
		}

		task ("Then: The update will fail, as the User is linked to a different Client") {
			var response = SCIMAPI.putUser(
				emailAddress = "yeager@liferay.com",
				familyName = "Yeager",
				givenName = "Eren",
				printheader = "true",
				userId = ${userId},
				userName = "eren");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "User was provisioned by another SCIM client");
		}
	}

	@description = "This is a use case for LPS-191052. TC-4: Verify that the config file of the SCIM client works well with companyWebID."
	@ignore = "true"
	@priority = 5
	test SCIMClientConfigFileCanWorkByCompanyWebID {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add a virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("When: Deploy the config file") {
			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "com.liferay.scim.client.configuration.ScimClientOAuth2ApplicationConfiguration.config",
				osgiConfigs = "applicationName=\"Test Application Name\",companyWebId=\"www.able.com\",matcherField=\"userName\"");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then: Assert an access token is generated in the log and an OAuth2 application is added in virtual instance") {
			User.logoutPG();

			User.viewLoggedOutPG();

			User.firstLoginPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");

			AssertConsoleTextPresent(value1 = "New access token for SCIM OAuth 2 application Test Application Name generated");

			OAuth2.openOAuth2Admin(baseURL = "http://www.able.com:8080");

			OAuth2.viewApplicationInAuthorizationsTable(
				entryIndex = 1,
				tableEntry = "Test Application Name");
		}
	}

}