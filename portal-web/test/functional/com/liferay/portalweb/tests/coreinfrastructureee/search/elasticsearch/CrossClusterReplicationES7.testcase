@component-name = "portal-search-ee"
definition {

	property elasticsearch.ccr.enabled = "true";
	property elasticsearch.multiple.connections = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7,opensearch2";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property search.environment.suite.exclude = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 4
	test AssertReplicationAfterReindex {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONDocument.addFile(
			dmDocumentDescription = "DM Description",
			dmDocumentTitle = "Apple1",
			groupName = "Guest");

		CrossClusterReplication.setupCrossClusterReplication();

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Apple1",
			searchAssetType = "Document");

		SearchAdministration.executeReindex();

		JSONDocument.addFile(
			dmDocumentDescription = "DM Description",
			dmDocumentTitle = "Apple2",
			groupName = "Guest");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewMultipleSearchResults(
			resultsList = "Apple1,Apple2",
			searchTerm = "Apple");
	}

	@priority = 3
	test AssertReplicationWithSynonyms {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		for (var title : list "banana,red apple") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = ${title});
		}

		SearchTuning.openSynonymsAdmin();

		var ccrStatsInitial = CrossClusterReplication.getNumberOfSuccessfulWriteRequests(indexName = "search-tuning-synonyms");

		SearchTuning.addSynonymSet(synonyms = "banana,red apple,fruit");

		AssertElementPresent(
			key_synonyms = "banana, red apple, fruit",
			locator1 = "SearchTuning#SYNONYMS_ENTRY");

		var ccrStatsCurrent = CrossClusterReplication.getNumberOfSuccessfulWriteRequests(indexName = "search-tuning-synonyms");

		var ccrStatsIncrement = MathUtil.isGreaterThan(${ccrStatsCurrent}, ${ccrStatsInitial});

		if (${ccrStatsIncrement} == "false") {
			fail("Synonyms index was not successfully replicated from write cluster to read cluster.");
		}
	}

	@priority = 3
	test BreakWorkflowSLA {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		WorkflowMetrics.setSLADefinitionsJobInterval(
			definitionsJobInterval = 1,
			slaJobInterval = 1);

		CrossClusterReplication.setupCrossClusterReplication();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Workflow");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		WorkflowMetrics.goToWorkflowSLASettings(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetricsSLA#ADD_NEW_SLA_BUTTON");

		WorkflowMetrics.fillSLAForm(
			slaDefinitionDays = 0,
			slaDefinitionDescription = "SLA Description",
			slaDefinitionEnd = "Process Ends: Approved",
			slaDefinitionHours = "00:02",
			slaDefinitionName = "SLA Name",
			slaDefinitionStart = "Enters Task: Review");

		Button.clickSave();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		WorkflowMetrics.waitForSLA(
			key_expectedValue = 0,
			key_status = "ONTIME");

		WorkflowMetrics.checkPendingWorkflowValues(
			key_ontime = 1,
			key_overdue = 0,
			key_pending = 1,
			key_untracked = 0);

		Refresh();

		WorkflowMetrics.waitForSLA(
			key_expectedValue = 0,
			key_status = "OVERDUE");

		WorkflowMetrics.checkPendingWorkflowValues(
			key_ontime = 0,
			key_overdue = 1,
			key_pending = 1,
			key_untracked = 0);
	}

	@priority = 4
	test CanReindexWithConcurrentExecutionMode {
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Guest",
			title = "WC Title");

		SearchAdministration.executeReindex(reindexMode = "Concurrent");

		task ("Assert that the web content shows up after the concurrent reindex completes") {
			Navigator.openURL();

			SearchPage.searchEmbedded(searchTerm = "WC Title");

			SearchResults.viewSearchResults(
				searchAssetTitle = "WC Title",
				searchAssetType = "Web Content Article",
				searchTerm = "WC Title");
		}
	}

	@ignore = "true"
	@priority = 3
	test CleanAndReindexWorkflowMetricsInstances {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		CrossClusterReplication.setupWorkflow();

		CrossClusterReplication.cleanWorkflowIndex(workflowIndexName = "workflow-metrics-instances");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_PENDING_ITEMS_VALUE",
			value1 = 0);

		WorkflowMetrics.executeIndexActions(actionDescription = "Workflow Metrics Instances");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		AssertTextEquals(
			locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_PENDING_ITEMS_VALUE",
			value1 = 1);
	}

	@ignore = "true"
	@priority = 3
	test CleanAndReindexWorkflowMetricsNodes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		CrossClusterReplication.cleanWorkflowIndex(workflowIndexName = "workflow-metrics-nodes");

		WorkflowMetrics.goToWorkflowSLASettings(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetricsSLA#ADD_NEW_SLA_BUTTON");

		Click(locator1 = "WorkflowMetricsSLA#SLA_DEFINITION_START");

		AssertTextEquals(
			key_slaDefinitionStart = "No results were found.",
			locator1 = "WorkflowMetricsSLA#SLA_DROPDOWN_START_OPTION",
			value1 = "No results were found.");

		WorkflowMetrics.executeIndexActions(actionDescription = "Workflow Metrics Nodes");

		WorkflowMetrics.goToWorkflowSLASettings(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetricsSLA#ADD_NEW_SLA_BUTTON");

		WorkflowMetrics.fillSLAForm(
			slaDefinitionDays = 0,
			slaDefinitionDescription = "SLA Description",
			slaDefinitionEnd = "Process Ends: Approved",
			slaDefinitionHours = "00:02",
			slaDefinitionName = "SLA Name",
			slaDefinitionStart = "Enters Task: Review");
	}

	@ignore = "true"
	@priority = 3
	test CleanAndReindexWorkflowMetricsProcesses {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		CrossClusterReplication.cleanWorkflowIndex(workflowIndexName = "workflow-metrics-processes");

		Workflow.openWorkflowMetrics();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "Once there are active processes, metrics will appear here.");

		WorkflowMetrics.executeIndexActions(actionDescription = "Workflow Metrics Processes");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");
	}

	@ignore = "true"
	@priority = 3
	test CleanAndReindexWorkflowMetricsSLAInstanceResults {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		CrossClusterReplication.cleanWorkflowIndex(workflowIndexName = "workflow-metrics-sla-instance-results");

		Workflow.openWorkflowMetrics();

		AssertElementNotPresent(
			key_workflowProcessName = "Single Approver",
			locator1 = "WorkflowMetrics#METRICS_WORKFLOW_PROCESS_NAME");

		WorkflowMetrics.executeIndexActions(actionDescription = "Workflow SLA Instance Results");

		WorkflowMetrics.goToWorkflowSLASettings(workflowProcessName = "Single Approver");
	}

	@ignore = "true"
	@priority = 3
	test CleanAndReindexWorkflowMetricsSLATaskResults {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		CrossClusterReplication.cleanWorkflowIndex(workflowIndexName = "workflow-metrics-sla-task-results");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		AssertElementNotPresent(
			key_rowName = "Update",
			key_rowNumber = 2,
			locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_STEP_ROW_ORDER_CHECK");

		WorkflowMetrics.executeIndexActions(actionDescription = "Workflow SLA Task Results");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		AssertElementPresent(
			key_rowName = "Update",
			key_rowNumber = 2,
			locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_STEP_ROW_ORDER_CHECK");
	}

	@ignore = "true"
	@priority = 3
	test CleanAndReindexWorkflowMetricsTasks {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		CrossClusterReplication.setupWorkflow();

		CrossClusterReplication.cleanWorkflowIndex(workflowIndexName = "workflow-metrics-tasks");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		Workflow.approveTaskByActions(
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_TAB");

		AssertElementPresent(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_BY_ASSIGNEE_CARD_EMPTY_STATE");

		WorkflowMetrics.executeIndexActions(actionDescription = "Workflow Metrics Tasks");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_TAB");

		WorkflowMetrics.viewPerformanceByAssignee(
			assignee = "Test Test",
			avgCompletionTime = "1min",
			taskCount = 1);
	}

	@ignore = "true"
	@priority = 3
	test CleanAndReindexWorkflowMetricsTransitions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		CrossClusterReplication.setupWorkflow();

		CrossClusterReplication.cleanWorkflowIndex(workflowIndexName = "workflow-metrics-transitions");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_PENDING_ITEMS_TITLE");

		Click(
			locator1 = "WorkflowAllItems#KEBAB_DROPDOWN",
			task = 1);

		AssertElementNotPresent(
			key_menuItem = "Approve",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		WorkflowMetrics.executeIndexActions(actionDescription = "Workflow Metrics Transitions");

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_PENDING_ITEMS_TITLE");

		Click(
			locator1 = "WorkflowAllItems#KEBAB_DROPDOWN",
			task = 1);

		AssertElementPresent(
			key_menuItem = "Approve",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
	}

	@priority = 3
	test CreateBlogsEntryWithNewWorkflow {
		property portal.upstream = "false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		Workflow.openWorkflowListView();

		Workflow.duplicateSingleApproverWorkflow(workflowName = "Copy of Single Approver");

		Workflow.openWorkflowListView();

		Navigator.gotoNavItem(navItem = "Configuration");

		Workflow.configureWorkflow(
			workflowDefinition = "Copy of Single Approver",
			workflowResourceValue = "Blogs Entry");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			panel = "Site Administration",
			portlet = "Blogs");

		Blogs.addWithWorkflow(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Subtitle",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		// Workaround for LPS-180801

		var workflowTask = Workflow._matchTaskCase(
			workflowAssetTitle = "Blogs Entry Title",
			workflowDefinitionTask = "approve",
			workflowTask = "review");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = ${workflowTask});

		Workflow.approveTaskByActions(
			workflowAssetTitle = "Blogs Entry Title",
			workflowAssetType = "Blogs Entry",
			workflowDefinitionTask = ${workflowDefinitionTask},
			workflowTask = ${workflowTask});

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Blogs");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry",
			searchTerm = "Blogs");
	}

	@priority = 3
	test SearchWithResultRankings {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication();

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "WC Title 1");

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "WC Title 2");

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "WC Title 3");

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "WC Title");

		SearchTuning.pinResult(assetTitle = "WC Title 3");

		SearchTuning.hideResult(assetTitle = "WC Title 2");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		Refresh();

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "WC Title 3,WC Title 1");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "WC Title 2",
			searchAssetType = "Web Content Article");
	}

	@priority = 3
	test SearchWithVirtualInstance {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONDocument.addFile(
			dmDocumentDescription = "DM Description",
			dmDocumentTitle = "Apple 1",
			groupName = "Guest");

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		CrossClusterReplication.setupCrossClusterReplication();

		User.firstLoginPG(
			password = PropsUtil.get("default.admin.password"),
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Apple 2");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Apple 2",
			searchAssetType = "Document");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Apple 1",
			searchAssetType = "Document");
	}

	@priority = 5
	test Smoke {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CrossClusterReplication.setupCrossClusterReplication(portalCluster = "true");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Description",
			dmDocumentTitle = "DM Title 1",
			groupName = "Guest");

		SearchAdministration.openSearchAdmin();

		AssertTextEquals.assertPartialText(
			key_connectionId = "__REMOTE__",
			locator1 = "SearchAdmin#CLUSTER_NAME",
			value1 = "LiferayElasticsearchCluster");

		AssertTextEquals.assertPartialText(
			key_clusterMode = "Write",
			key_connectionId = "__REMOTE__",
			locator1 = "SearchAdmin#CLUSTER_MODE",
			value1 = "Write");

		AssertTextEquals.assertPartialText(
			key_connectionId = "localcluster",
			locator1 = "SearchAdmin#CLUSTER_NAME",
			value1 = "LiferayElasticsearchClusterTwo");

		AssertTextEquals.assertPartialText(
			key_clusterMode = "Read",
			key_connectionId = "localcluster",
			locator1 = "SearchAdmin#CLUSTER_MODE",
			value1 = "Read");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "DM");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Title 1",
			searchAssetType = "Document");

		User.logoutPG(
			password = PropsUtil.get("default.admin.password"),
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = PropsUtil.get("default.admin.password"),
			userEmailAddress = "test@liferay.com");

		SearchPage.searchEmbedded(searchTerm = "DM");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Title 1",
			searchAssetType = "Document");
	}

}