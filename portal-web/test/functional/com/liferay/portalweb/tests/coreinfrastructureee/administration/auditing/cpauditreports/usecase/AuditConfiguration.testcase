@component-name = "portal-security"
definition {

	property ci.retries.disabled = "true";
	property osgi.module.configuration.file.names = "com.liferay.portal.security.audit.router.configuration.PersistentAuditMessageProcessorConfiguration.config";
	property osgi.module.configurations = "bufferSize=\"0\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Audit";
	property testray.testcase.product.edition = "EE";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			Role.tearDownCP();
		}
	}

	@description = "This test Audit log can be enabled in log file or console with CSV or JSON format through System Settings or OSGI config file."
	@priority = 4
	test CanEnableLogAndConsoleAudit {
		property log.context.enabled = "true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.audit.router.configuration.CSVLogMessageFormatterConfiguration.config:com.liferay.portal.security.audit.router.configuration.LoggingAuditMessageProcessorConfiguration.config:com.liferay.portal.security.audit.router.configuration.PersistentAuditMessageProcessorConfiguration.config";
		property osgi.module.configurations = "columns=[\"eventType\",\"userId\",\"userName\"]:enabled=B\"true\"${line.separator}logMessageFormat=\"CSV\"${line.separator}outputToConsole=B\"true\":bufferSize=\"0\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Logging Message Audit Message Processor",
			configurationScope = "System Scope");

		FormFields.viewCheckboxChecked(fieldName = "Enabled");

		Audit.verifyConfigurationElementIsConfigured(
			element = "Audit#AUDIT_LOG_MESSAGE_FORMAT",
			portlet = "Logging Message Audit",
			text = "CSV");

		FormFields.viewCheckboxChecked(fieldName = "Output to Console");

		SignOut.signOut();

		AuditLog.viewLogFileContent(logString = '''"LOGOUT","${userId}","Test Test"''');
	}

	@description = "This test Audit can be enabled or disabled through System Settings and OSGI config file."
	@priority = 4
	test CanEnableOrDisableAudit {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.audit.configuration.AuditConfiguration.config:com.liferay.portal.security.audit.router.configuration.PersistentAuditMessageProcessorConfiguration.config";
		property osgi.module.configurations = "enabled=\"false\":bufferSize=\"0\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Audit",
			configurationScope = "System Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "Enabled");

		Audit.openAuditAdmin();

		AssertElementNotPresent(locator1 = "AuditReports#REPORTS_TABLE_RESOURCE_ACTION");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Audit",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Enabled");

		SystemSettings.saveConfiguration();

		User.logoutPG();

		User.firstLoginUI(
			password = PropsUtil.get("default.admin.password"),
			userEmailAddress = "test@liferay.com");

		Audit.openAuditAdmin();

		AssertTextEquals(
			key_resourceAction = "LOGIN",
			key_resourceName = "User",
			locator1 = "AuditReports#REPORTS_TABLE_RESOURCE_ACTION",
			value1 = "LOGIN");
	}

	@description = "This test Audit log can be disabled to persist in database table Audit_AuditEvent through System Settings or OSGI config file"
	@priority = 4
	test CanEnableOrDisableDatabasePersistence {
		property osgi.module.configuration.file.names = "com.liferay.portal.security.audit.router.configuration.PersistentAuditMessageProcessorConfiguration.config";
		property osgi.module.configurations = "bufferSize=\"0\"${line.separator}enabled=\"false\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Persistent Message Audit Message Processor",
			configurationScope = "System Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "Enabled");

		SignOut.signOut();

		var auditTablePersistenceDisabled = SQL.executeSQLStatement(sqlStatement = "SELECT COUNT(*) FROM Audit_AuditEvent;");

		echo("Audit table: ${auditTablePersistenceDisabled}");

		if (!(contains(${auditTablePersistenceDisabled}, 0))) {
			fail("Unexpected entries found in Audit_AuditEvent event table.");
		}

		User.firstLoginUI(
			password = PropsUtil.get("default.admin.password"),
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Audit",
			configurationName = "Persistent Message Audit Message Processor",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Enabled");

		SystemSettings.saveConfiguration();

		SignOut.signOut();

		User.firstLoginUI(
			password = PropsUtil.get("default.admin.password"),
			userEmailAddress = "test@liferay.com");

		var auditTablePersistenceEnabled = SQL.executeSQLStatement(sqlStatement = "SELECT COUNT(*) FROM Audit_AuditEvent;");

		echo("Audit table: ${auditTablePersistenceEnabled}");

		if (!(contains(${auditTablePersistenceEnabled}, 2))) {
			fail("Expected entries not found in Audit_AuditEvent event table.");
		}
	}

}