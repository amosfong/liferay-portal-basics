@component-name = "portal-security"
definition {

	property app.server.bundles.size = "1";
	property ci.retries.disabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property databases.size = "1";
	property dummy.socket.proxy.disabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "SAML";

	var oauth2URL = PropsUtil.get("oauth2.url");

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		SAML.enableSAMLDebugLogs();
	}

	@description = "This is a use case for LPS-32577. Add user inherited roles as SAML attribute statements."
	@priority = 4
	test AddUserInheritedRolesAsSAMLAttributeStatements {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure SAML as IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}

		task ("Configure SAML as IdP") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spAttributes = "siteRoles",
				spURL = "http://www.able.com:9080");
		}

		task ("Add Category log levels") {
			Navigator.openURL();

			var baseURL = PropsUtil.get("portal.url");

			ServerAdministration.openServerAdmin();

			ServerAdministration.addCategoryLogLevels(
				categoryLevel = "DEBUG",
				categoryName = "com.liferay.saml.opensaml.integration");
		}

		task ("Add site role") {
			JSONRole.addSiteRole(
				roleKey = "TestSiteRole",
				roleTitle = "TestSiteRole");
		}

		task ("Add CP") {
			HeadlessSite.addSite(siteName = "Site Name");
		}

		task ("Add user group CP") {
			JSONUserGroup.addUserGroup(userGroupName = "UG UserGroup Name");
		}

		task ("Assign user group as member CP") {
			JSONGroup.assignUserGroupToGroup(
				groupName = "Site Name",
				userGroupName = "UG UserGroup Name");
		}

		task ("Assign site role to user group") {
			JSONUserGroup.assignGroupRoleToUserGroup(
				groupName = "Site Name",
				roleTitle = "TestSiteRole",
				userGroupName = "UG UserGroup Name");
		}

		task ("Assign member CP") {
			JSONUser.addUserToUserGroup(
				userEmailAddress = "test@liferay.com",
				userGroupName = "UG UserGroup Name");
		}

		task ("View user information roles CP") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "test");

			User.viewUserInformationRolesCP(
				roleTitle = "TestSiteRole",
				roleType = "Inherited Site Roles");
		}

		task ("Logout from both portals") {
			User.logoutPG();

			User.viewLoggedOutPG();

			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Login at able.com:9080") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();

			AssertConsoleTextPresent(value1 = "TestSiteRole");
		}
	}

	@description = "This is a use case for LRQA-57574 TC-1: Combines SAML.CreateAndSyncUserAfterSAMLSetupWithMatchingScreenNameAttribute and OAuth2.AuthorizeExternalApplication to verify that the portal works when OAuth 2 and SAML are both enabled with a synced user on SP."
	@priority = 4
	test AssertAuthorizationOnOAuth2WithSAMLConnectionWithExistingUser {
		property oauth2.application.enabled = "true";
		property portal.ssl.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add the OSGI configuration file to www.able.com:9080 instance") {
			OAuth2.deployInstanceConfigFile(
				bundleId = 1,
				osgiConfigFileName = "com.liferay.portal.remote.cors.configuration.PortalCORSConfiguration~allow~headless~admin~user.config",
				portalURL = "http://www.able.com:9080");
		}

		task ("Logout") {
			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IDP role") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP role") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add IDP configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add SP configurations to TP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:9080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Login at able.com:9080 and logout") {
			User.firstLoginUI(
				specificURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Login at able.com:9080") {
			User.firstLoginUI(
				specificURL = "http://www.able.com:9080/web/guest/home?p_p_id=com_liferay_login_web_portlet_LoginPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&saveLastPath=false&_com_liferay_login_web_portlet_LoginPortlet_mvcRenderCommandName=%2Flogin%2Flogin",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add OAuth 2 external application") {
			OAuth2.addAndEditExternalApplication(
				applicationName = "Third-party Application",
				baseURL = "http://www.able.com:9080",
				callbackUri = '''${oauth2URL}/grant-type-authorization-code''',
				clientId = "abc123",
				clientProfile = "Web Application",
				clientSecret = "abc123");
		}

		task ("Add application permission to role") {
			OAuth2.addApplicationPermissionToRole(
				applicationName = "Third-party Application",
				userRole = "user");
		}

		task ("Logout from able.com:9080") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Authorize OAuth 2 app and launch request") {
			OAuth2.authorizeMyApplication(
				clientId = "abc123",
				clientSecret = "abc123",
				portalURL = "http://www.able.com:9080/o/oauth2/authorize",
				tokenURL = "http://www.able.com:9080/o/oauth2/token");

			OAuth2.launchRequest(requestURL = "http://www.able.com:9080/o/headless-admin-user/v1.0/user-accounts");
		}

		task ("View request results") {
			SAML.viewTesterRequestResults(
				entry1 = "test@liferay.com",
				entry2 = '''"firstName":"Test"''',
				entry3 = '''"lastName":"Test"''',
				entry4 = '''"screenName":"test"''');
		}
	}

	@description = "This is a use case for LRQA-57574 TC-2: Combines SAML.CreateAndSyncUserAfterSAMLSetupWithMatchingScreenNameAttribute and OAuth2.AuthorizeExternalApplication to verify that the portal works when OAuth 2 and SAML are both enabled and authenticating with a user who is not synced to SP."
	@priority = 4
	test AssertAuthorizationOnOAuth2WithSAMLConnectionWithoutExistingUser {
		property oauth2.application.enabled = "true";
		property portal.ssl.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add the OSGI configuration file to www.able.com:9080 instance") {
			OAuth2.deployInstanceConfigFile(
				bundleId = 1,
				osgiConfigFileName = "com.liferay.portal.remote.cors.configuration.PortalCORSConfiguration~allow~headless~admin~user.config",
				portalURL = "http://www.able.com:9080");
		}

		task ("Logout") {
			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup IdP connection") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com",
				userResolution = "dynamic");
		}

		task ("Enable SP roles") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP connection") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:9080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Login at able.com:9080") {
			User.firstLoginUI(
				specificURL = "http://www.able.com:9080/web/guest/home?p_p_id=com_liferay_login_web_portlet_LoginPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&saveLastPath=false&_com_liferay_login_web_portlet_LoginPortlet_mvcRenderCommandName=%2Flogin%2Flogin",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add OAuth 2 external application") {
			OAuth2.addAndEditExternalApplication(
				applicationName = "Third-party Application",
				baseURL = "http://www.able.com:9080",
				callbackUri = '''${oauth2URL}/grant-type-authorization-code''',
				clientId = "abc123",
				clientProfile = "Web Application",
				clientSecret = "abc123");
		}

		task ("Add OAuth 2 app permission role") {
			OAuth2.addApplicationPermissionToRole(
				applicationName = "Third-party Application",
				userRole = "user");
		}

		task ("Logout from able.com:9080") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Authorize OAuth 2 app and launch request") {
			OAuth2.authorizeMyApplication(
				clientId = "abc123",
				clientSecret = "abc123",
				portalURL = "http://www.able.com:9080/o/oauth2/authorize",
				tokenURL = "http://www.able.com:9080/o/oauth2/token");

			OAuth2.launchRequest(requestURL = "http://www.able.com:9080/o/headless-admin-user/v1.0/user-accounts");
		}

		task ("View request results") {
			SAML.viewTesterRequestResults(
				entry1 = "test@liferay.com",
				entry2 = '''"firstName":"Test"''',
				entry3 = '''"lastName":"Test"''',
				entry4 = '''"screenName":"test"''');
		}
	}

	@description = "LPS-123218 TC-6: Assertion for: empty attribute mapping cannot be used for user matching."
	@priority = 4
	test AssertEmptyMappingCannotBeUsedForUserMatching {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlsp as SP") {
			var baseURL = PropsUtil.get("portal.url");

			SAML.goToSAMLAdmin();

			SAMLRole.configure(
				samlEntityId = "samlsp",
				samlRoleType = "Service Provider");
		}

		task ("Add samlidp as identity provider") {
			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.addIdentityProviderConnectionWithBasicSetupWithEmptyUserMapping(idpEntityId = "samlidp");
		}

		task ("Assert No mapping selected") {
			SAML.viewNoAttributeMappingSelectedForUserMatching();
		}
	}

	@description = "LPS-123218 TC-2 Assertion for: first name cannot be used for user matching even if LDAP import is enabled."
	@priority = 4
	test AssertFirstNameCannotBeUsedForUserMatchingEvenWithLDAPEnabled {
		property apacheds.enabled = "true";
		property app.server.bundles.size = "0";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Ad LDAP server and test connection") {
			LDAP.addLDAPServerAndTestConnection(ldapServerName = "ApacheDS Server");
		}

		task ("Enable LDAP settings") {
			LDAP.enableLDAPSettings(enableSettingList = "enabled,ldapImportEnabled");
		}

		task ("Configure samlsp as service provider") {
			var baseURL = PropsUtil.get("portal.url");

			SAML.goToSAMLAdmin();

			SAMLRole.configure(
				samlEntityId = "samlsp",
				samlRoleType = "Service Provider");
		}

		task ("Add IdP connection with basic setup") {
			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.addIdentityProviderConnectionWithBasicSetup(idpEntityId = "samlidp");
		}

		task ("Add IdP attribute for user matching") {
			SAMLPortlet.addAndSelectInvalidAttributeForUserMatching(idpAttributeMapping = "firstName");
		}

		task ("Assert no mapping selected for user matching") {
			SAML.viewNoAttributeMappingSelectedForUserMatching();
		}
	}

	@description = "This is a use case for LPS-105165. Assert instance admin cannot configure IdP when disable IdP role."
	@priority = 4
	test AssertInstanceAdminCannotConfigureIdPWhenDisableIdPRole {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Disable IdP role to be configured") {
			var baseURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_pid=com.liferay.saml.runtime.configuration.SamlConfiguration");

			FormFields.disableCheckbox(fieldName = "Enable Identity Provider Role To Be Configured");

			SystemSettings.saveConfiguration();
		}

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Assert IdP role disabled message in SAML admin") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.goToSAMLAdmin(baseURL = "http://www.able.com:8080");

			AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(locator1 = "CPSAMLAdmin#SAML_ROLE_SELECT_DISABLED");
		}
	}

	@description = "This is a use case for LPS-94699. assert keep alive to keep my SAML session alive."
	@priority = 4
	test AssertKeepAliveToKeepMySAMLSessionAlive {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Sign out and Login at localhost:9080") {
			UserBar.signOut();

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://localhost:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add CP able.com and baker.com") {
			PortalInstances.openVirtualInstancesAdmin(baseURL = "http://localhost:9080");

			PortalInstances.addCP(
				mailDomain = "www.able.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			PortalInstances.addCP(
				mailDomain = "www.baker.com",
				virtualHost = "www.baker.com",
				webId = "www.baker.com");
		}

		task ("Edit email address CP") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:9080",
				userEmailAddress = "test@www.able.com");

			User.openUsersAdmin(baseURL = "http://www.able.com:9080");

			User.editEmailAddressCP(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com",
				userScreenName = "test");
		}

		task ("Logout") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Login at baker.com:9080") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.baker.com:9080",
				userEmailAddress = "test@www.baker.com");

			User.openUsersAdmin(baseURL = "http://www.baker.com:9080");
		}

		task ("Edit address CP") {
			User.editEmailAddressCP(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com",
				userScreenName = "test");
		}

		task ("Logout and login") {
			User.logoutPG(specificURL = "http://www.baker.com:9080");

			User.viewLoggedOutPG();

			User.firstLoginUI();
		}

		task ("Configure samlidp ad IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}

		task ("Configure samlsp as SP") {
			SAML.configureLiferaySAMLAsSP(
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				samlEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:9080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:9080");
		}

		task ("Configure samlsp2 as SP") {
			SAML.configureLiferaySAMLAsSP(
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				samlEntityId = "samlsp2",
				spKeepAliveURL = "http://www.baker.com:9080/c/portal/saml/keep_alive",
				spURL = "http://www.baker.com:9080");
		}

		task ("Logout from able.com:9080 and baker.com:9080") {
			User.logoutPG();

			User.viewLoggedOutPG();

			Navigator.openSpecificURL(url = "http://www.able.com:9080");

			User.viewLoggedOutPG();

			Navigator.openSpecificURL(url = "http://www.baker.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Execute SP initiated SSO able.com:9080") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Login into baker.com:9080") {
			Navigator.openURL();

			User.viewLoggedInPG();

			Navigator.openSpecificURL(url = "http://www.baker.com:9080");

			Navigator.gotoLoginPage();

			User.viewLoggedInPG();

			Navigator.openSpecificURL(url = "http://localhost:8080/c/portal/saml/keep_alive?entityId=");
		}

		task ("Assert response has 2 document.write commands") {
			SAML.assertTextCountFromHtml(value = 2);
		}
	}

	@description = "LPS-123218 TC-3 Assertion for: last name cannot be used for user matching even if LDAP import is enabled."
	@priority = 4
	test AssertLastNameCannotBeUsedForUserMatchingEvenWithLDAPEnabled {
		property apacheds.enabled = "true";
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add LDAP server and test connection") {
			LDAP.addLDAPServerAndTestConnection(ldapServerName = "ApacheDS Server");
		}

		task ("Enable LDAP settings") {
			LDAP.enableLDAPSettings(enableSettingList = "enabled,ldapImportEnabled");
		}

		task ("Configure samlsp as SP") {
			var baseURL = PropsUtil.get("portal.url");

			SAML.goToSAMLAdmin();

			SAMLRole.configure(
				samlEntityId = "samlsp",
				samlRoleType = "Service Provider");
		}

		task ("Add IdP connection with basic setup") {
			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.addIdentityProviderConnectionWithBasicSetup(idpEntityId = "samlidp");
		}

		task ("Add invalid attribute for user matching") {
			SAMLPortlet.addAndSelectInvalidAttributeForUserMatching(idpAttributeMapping = "lastName");
		}

		task ("Assert no mapping selected") {
			SAML.viewNoAttributeMappingSelectedForUserMatching();
		}
	}

	@description = "This is a use case for LPS-39013. Assert SAML SP user information updates after changing on IdP."
	@priority = 4
	test AssertSAMLSPUserInformationUpdatesAfterChangingOnIdP {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}

		task ("Configure samlsp as SP") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spAttributes = "firstName",
				spURL = "http://www.able.com:9080",
				userResolution = "dynamic");
		}

		task ("Logout") {
			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Login at able.com:9080") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();

			Navigator.openURL();

			User.viewLoggedInPG();
		}

		task ("Logout and login") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");
		}

		task ("Edit user information") {
			MyAccount.openMyAccountAdmin();

			User.editUserInformation(userFirstNameEdit = "Testedit");
		}

		task ("View CP information") {
			Navigator.openSpecificURL(url = "http://www.able.com:9080");

			Navigator.gotoLoginPage();

			User.openUsersAdmin(baseURL = "http://www.able.com:9080");

			User.viewCP(
				userEmailAddress = "test@liferay.com",
				userFirstName = "Testedit",
				userLastName = "Test",
				userScreenName = "test");
		}
	}

	@description = "This is a use case for LRQA-47412. Assert signed SAML metadata."
	@priority = 4
	test AssertSignedSAMLMetadata {
		property test.assert.javascript.errors = "false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}

		task ("Assert ds:Signature present in HTML source text") {
			Open.openNoError(value1 = "http://localhost:8080/c/portal/saml/metadata");

			AssertHTMLSourceTextPresent.assertHTMLSourceTextPresentNoSPARefresh(value1 = "ds:Signature");

			Open.openNoErrorNoSPARefresh(value1 = "http://localhost:8080/group/guest/~/control_panel/manage?p_p_id=com_liferay_saml_web_internal_portlet_SamlAdminPortlet");
		}

		task ("Disable IdP") {
			SAMLNavigation.gotoIdentityProvider();

			SAMLPortlet.configureIdentityProvider(signMetadata = "disable");
		}

		task ("Assert ds:Signature not present in HTML source text") {
			Open.openNoError(value1 = "http://localhost:8080/c/portal/saml/metadata");

			AssertHTMLSourceTextNotPresent.assertHTMLSourceTextNotPresentNoSPARefresh(value1 = "ds:Signature");
		}
	}

	@description = "This is a use case for LPS-96104. Assert SSO fails when algorithms mismatch."
	@priority = 4
	test AssertSSOFailsWhenAlgorithmsMismatch {
		property blacklist.saml.algorithms = "true";
		property test.assert.javascript.errors = "false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}

		task ("Configure samlsp as SP at able.com:9080") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Assert http://www.w3.org/2000/09/xmldsig#rsa-sha1 not present in able.com:9080 HTML source text ") {
			Open.openNoError(value1 = "http://www.able.com:9080/c/portal/saml/metadata");

			AssertHTMLSourceTextNotPresent.assertHTMLSourceTextNotPresentNoSPARefresh(value1 = "http://www.w3.org/2000/09/xmldsig#rsa-sha1");
		}

		task ("Assert http://www.w3.org/2001/04/xmldsig-more#rsa-sha256,http://www.w3.org/2001/04/xmldsig-more#rsa-sha384,http://www.w3.org/2001/04/xmldsig-more#rsa-sha512 not present in localhost:8080 HTML source text ") {
			Open.openNoErrorNoSPARefresh(value1 = "http://localhost:8080/c/portal/saml/metadata");

			for (var algorithm : list "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256,http://www.w3.org/2001/04/xmldsig-more#rsa-sha384,http://www.w3.org/2001/04/xmldsig-more#rsa-sha512") {
				AssertHTMLSourceTextNotPresent.assertHTMLSourceTextNotPresentNoSPARefresh(value1 = "algorithm");
			}
		}

		task ("Logout and open able.com:9080") {
			Open.openNoErrorNoSPARefresh(value1 = "http://localhost:8080/web/guest/home");

			UserBar.signOut();

			User.viewLoggedOutPG();

			Open.openNoError(value1 = "http://www.able.com:9080");
		}

		task ("Assert console message: validation of protocol message signature failed") {
			SAML.assertSAMLRequestNotValid();
		}
	}

	@description = "This is a use case for LRQA-35866. Assert SSO idle session takes precedence over IdP session time out."
	@priority = 4
	test AssertSSOIdleSessionTakesPrecedenceOverIdPSessionTimeout {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}session.timeout=2";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property web.xml.timeout = "2";

		task ("Configure samlidp as IdP with 480 as idle timout") {
			SAML.configureLiferaySAMLAsIdP(
				idpSessionIdleTimeout = 480,
				idpSessionMaximumAge = 0,
				samlEntityId = "samlidp");
		}

		task ("Configure samlsp as SP") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Logout and execute IdP initiated SSO at http://www.able.com:9080") {
			User.logoutPG();

			User.viewLoggedOutPG();

			var portalURL = PropsUtil.get("portal.url");

			SAML.executeIdPInitiatedSSO(
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				samlEnabled = "true",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Wait for idle time and Assert expired session error message") {
			Navigator.openURL();

			SAML.viewSessionExpired(timer = 120000);
		}

		task ("Refresh and view logged in PG") {
			Refresh();

			User.viewLoggedInPG();
		}

		task ("Configure IdP idle timout as 60") {
			SAML.goToSAMLAdmin(baseURL = ${portalURL});

			SAMLNavigation.gotoIdentityProvider();

			SAMLRole.configureIdentityProvider(
				idpSessionIdleTimeout = 60,
				idpSessionMaximumAge = 0);
		}

		task ("Logout and execute IdP initiated SSO at http://www.able.com:9080") {
			User.logoutPG();

			User.viewLoggedOutPG();

			SAML.executeIdPInitiatedSSO(
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				samlEnabled = "true",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("execute IdP initiated SSO at http://www.able.com:9080") {
			Navigator.openURL();

			// This pause is waiting to test how the login behaves when timeout is reached. See LRQA-35814 for more details.

			Pause(value1 = 60000);

			SAML.executeIdPInitiatedSSO(
				autoLogin = "true",
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				samlEnabled = "true",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Wait for idle time and assert expired session error message") {
			Navigator.openURL();

			SAML.viewSessionExpired(timer = 120000);
		}

		task ("Assert user logged out") {
			Refresh();

			User.viewLoggedOutPG();
		}
	}

	@description = "LPS-143338. Assert SSO reject assertion when nameId value is null."
	@priority = 4
	test AssertSSORejectAssertionWithoutANameIDValue {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP at localhost:8080 and SP at able.com:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "emailAddress",
				idpAttributeMappingText = "emailAddress",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "expando:inputField",
				nameIdentifierFormat = "Unspecified",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");
		}

		task ("Add new user") {
			JSONUser.addUser(
				userEmailAddress = "usera@liferay.com",
				userFirstName = "user",
				userLastName = "a",
				userScreenName = "usera");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "usera@liferay.com");
		}

		task ("SSO with new user to SP and assert authentication failed error message") {
			User.firstLoginUI(
				emailPassword = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "usera@liferay.com");

			SAML.viewUnableToProcessSAMLRequest();
		}
	}

	@description = "This is a use case for LRQA-35784. Assert SSO session exists after SP session timeout."
	@priority = 4
	test AssertSSOSessionExistsAfterSPSessionTimeout {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}session.timeout=2";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property web.xml.timeout = "2";

		task ("Configure samlidp as IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}

		task ("Configure samlsp as SP at able.com:9080") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Logout and execute IdP initiated SSO at http://www.able.com:9080") {
			User.logoutPG();

			User.viewLoggedOutPG();

			var portalURL = PropsUtil.get("portal.url");

			SAML.executeIdPInitiatedSSO(
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Wait for idle and assert expired session error message") {
			SAML.viewSessionExpired(timer = 120000);
		}

		task ("Refresh and click sign in") {
			Refresh();

			SAML.clickAtSignIn();

			User.viewLoggedInPG();
		}
	}

	@description = "This is a use case for LRQA-35833. Assert SSO expires after maximum session age."
	@priority = 4
	test AssertSSOSessionExpiresAfterMaximumSessionAge {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}session.timeout=2";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property web.xml.timeout = "2";

		task ("Configure SAML as IdP with session maximum age as 180") {
			SAML.configureLiferaySAMLAsIdP(
				idpSessionIdleTimeout = 0,
				idpSessionMaximumAge = 180,
				samlEntityId = "samlidp");
		}

		task ("Configure samlsp as SP at able.com:9080") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Logout and execute IdP initiated SSO at http://www.able.com:9080") {
			User.logoutPG();

			User.viewLoggedOutPG();

			var portalURL = PropsUtil.get("portal.url");

			SAML.executeIdPInitiatedSSO(
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				samlEnabled = "true",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			Navigator.openURL();
		}

		task ("Wait for idle time and assert session expired error message") {
			SAML.viewSessionExpired(timer = 120000);
		}

		task ("Refresh and assert logged in") {
			Refresh();

			User.viewLoggedInPG();
		}

		task ("Wait for idle and assert session expired error message") {
			SAML.viewSessionExpired(timer = 120000);
		}

		task ("Refresh and assert logged out") {
			Refresh();

			User.viewLoggedOutPG();
		}
	}

	@description = "This is a use case for LPS-88924 - Using virtual instances. Assert SSO with encryption and decryption."
	@priority = 4
	test AssertSSOWithEncryptionAndDecryption {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Edit user screen name") {
			MyAccount.openMyAccountAdmin();

			User.editUserInformation(userScreenNameEdit = "tester");
		}

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to service provider") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");
		}

		task ("Enable SP roles and SP configurations to IdP") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
				firstName
				lastName
				screenName
				uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Enable encryption on SP connection") {
			SAML.enableEncryptionOnSPConnection(samlEntityId = "samlsp");
		}

		task ("Delete SP certificate") {
			SAML.deleteSPCertificate(
				specificURL = "http://www.able.com:8080/web/guest/home?p_p_id=com_liferay_login_web_portlet_LoginPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&saveLastPath=false&_com_liferay_login_web_portlet_LoginPortlet_mvcRenderCommandName=%2Flogin%2Flogin0",
				userEmailAddress = "test@www.able.com");
		}

		task ("Login at able.com:8080 and assert Unable to process SAML request") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			SAML.viewUnableToProcessSAMLRequest();
		}

		task ("View text(Data encryption key was null in port) present on node port 8080") {
			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Data encryption key was null",
				nodePort = 8080);
		}
	}

	@description = "This is a use case for LPD-31188: ClassCastException after non-graceful shutdown."
	@priority = 4
	test AssertUserLoggedInAfterNonGracefulShutdown {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Edit user screen name") {
			MyAccount.openMyAccountAdmin();

			User.editUserInformation(userScreenNameEdit = "tester");
		}

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to service provider") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");
		}

		task ("Enable SP roles and SP configurations to IdP") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
				firstName
				lastName
				screenName
				uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Login at able.com:8080 and assert Logged in") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Kill server and start it") {
			AntCommands.runCommand("build-test.xml", "terminate-one-java-process -Dprocess.name=Bootstrap");

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Refresh and assert logged in") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Refresh();

			User.viewLoggedInPG();

			Portlet.shutdownServer();
		}
	}

	@description = "This is a use case for LPS-105170 TC-5: Verification for portal User Attributes when they are duplicated in the mapping  when saving the SAML configuration - Using virtual instances."
	@priority = 4
	test AssertVerificationForDuplicatedUserAttributeMappingSAML {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IDP as localhost:8080 and SP as able.com:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Login at able.com:8080") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP connection") {
			SAML.goToSAMLAdmin(baseURL = "http://www.able.com:8080");

			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.addIdentityProviderConnection(
				idpAttributeMapping = "UUID,UUID,lastName,lastName",
				idpAttributeMappingText = "UUID,UUID,lastName,lastName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpNameId = "samlidp",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 1,
				userResolution = "attribute");
		}

		task ("Assert error message (Basic User Fields: Each user field can only be mapped to one SAML attribute.)") {
			SAML.viewEachUserFieldCanOnlyBeMappedToOneSAMLAttributeErrorMessage();
		}

		task ("Delete Entry 4") {
			SAML.removeEntryFromTable(rowNumber = 4);
		}

		task ("Assert error message (Basic User Fields: Each user field can only be mapped to one SAML attribute.)") {
			SAML.viewEachUserFieldCanOnlyBeMappedToOneSAMLAttributeErrorMessage();

			PortletEntry.save();
		}

		task ("Delete entry 2") {
			SAML.removeEntryFromTable(rowNumber = 2);
		}

		task ("Assert error message (Basic User Fields: Each user field can only be mapped to one SAML attribute.)") {
			SAML.viewEachUserFieldCanOnlyBeMappedToOneSAMLAttributeErrorMessage();

			PortletEntry.save();
		}

		task ("Delete last entry") {
			SAML.removeEntryFromTable();
		}
	}

	@description = "This is a use case for LPS-105170 TC-4: Verification for portal User Attributes when they are without SAML attribute value in the mapping when saving the SAML configuration - Using virtual instances."
	@priority = 4
	test AssertVerificationForEmptyUserAttributeMappingSAML {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IDP as localhost:8080 and SP as able.com:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Login at able.com:8080") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP connection") {
			SAML.goToSAMLAdmin(baseURL = "http://www.able.com:8080");

			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.addIdentityProviderConnection(
				idpAttributeMapping = "screenName,screenName,UUID,UUID",
				idpAttributeMappingText = ",,,,",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpMetadataURL = "http://localhost:8080/c/portal/saml/metadata",
				idpNameId = "samlidp",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 3,
				userResolution = "attribute");
		}

		task ("Assert error message (Basic User Fields: All attribute mappings must specify a SAML attribute)") {
			SAML.viewAllAttributeMappingsMustSpecifyASAMLAttributeErrorMessage();
		}
	}

	@description = "This is a use case for LPS-179688 TC-5: Verify user could log in via SAML (Portal to Portal) when password creation is disabled."
	@priority = 4
	test CanLoginViaSAMLWithDisablePasswordCreation {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Add virtual instance able.com setup IDP as localhost:8080 and SP as able.com:8080") {
			SAML.addVirtualInstances(virtualHosts = "www.able.com");

			SAML.configureLiferaySAMLAsIdP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			SAML.setupSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.connectSPAndIdP(
				idpAttributeMapping = "UUID,screenName,firstName,lastName,emailAddress",
				idpEntityId = "samlidp",
				idpURL = "http://localhost:8080",
				keepSPLogin = "true",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				sPUserEmailAddress = "test@www.able.com",
				userResolution = "dynamic");
		}

		task ("When Disable Allow Custom Password At Account Creation password in SP") {
			SAML.goToSAMLAdmin(baseURL = "http://www.able.com:8080");

			User.configureCustomPasswordField(baseURL = "http://www.able.com:8080");

			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();
		}

		task ("Then Verify that the user successfully logged in to SP") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			SAML.clickAtWarningEmailLink();

			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "userea1@liferay.com");

			User.viewLoggedInPG();
		}
	}

	@description = "This is a test for LPS-179689. TC-5: Verify if users cannot edit their password on the My Account page if the change password option is disabled by default policy and SAML SSO is enabled."
	@priority = 4
	test CannotChangePasswordWhenLoginViaSAMLSSOWithDisablePasswordChangeable {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Disable password changeable in default password policy in SP") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			PasswordPolicies.openPasswordPoliciesAdmin(baseURL = "http://www.able.com:8080");

			PasswordPolicies.disableChangeable(
				passwordPolicyName = "Default Password Policy",
				passwordPolicyPanel = "Password Changes");
		}

		task ("And: Create user and setup a SAML link between localhost and able.com") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			JSONUser.addUser(
				userEmailAddress = "usera@liferay.com",
				userFirstName = "user",
				userLastName = "a",
				userScreenName = "usera");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "usera@liferay.com");

			SAML.setupSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.connectSPAndIdP(
				idpAttributeMapping = "UUID,screenName,firstName,lastName,emailAddress",
				idpEntityId = "samlidp",
				idpURL = "http://localhost:8080",
				keepSPLogin = "true",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				sPUserEmailAddress = "test@www.able.com",
				userResolution = "dynamic");

			User.logoutPG(specificURL = "http://localhost:8080");

			User.viewLoggedOutPG();

			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();
		}

		task ("When: Login via SAML SSO and navigate to Account Settings") {
			User.firstLoginUI(
				idpName = "samlidp",
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "usera@liferay.com");

			OpenIDConnect.acceptConditions();

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			UserNavigator.gotoGeneral();
		}

		task ("Then: Assert there is no Password menu item at the General tab") {
			AssertElementNotPresent(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}
	}

	@description = "LPS-128600 TC-3. User can't log in with invalid custom field mapping on SP. Blocked by LPS-142222."
	@priority = 4
	test CannotLoginWithInvalidCustomFieldMappingInSAML {
		property app.server.bundles.size = "0";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User adds a virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("And: Add a boolean custom field on localhost") {
			CustomFields.openCustomFieldAdmin();

			CustomFields.addCP(
				customBooleanDefaultValue = "False",
				customFieldName = "boolean",
				customFieldType = "True",
				nameLocalization = "false",
				resourceName = "User");
		}

		task ("And: Add an inputfield custom field on able.com") {
			User.firstLoginUI(
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			CustomFields.openCustomFieldAdmin(baseURL = "http://www.able.com:8080");

			CustomFields.addCP(
				baseURL = "http://www.able.com:8080",
				customFieldName = "inputfield",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				nameLocalization = "false",
				resourceName = "User");
		}

		task ("And: Add a new user on localhost") {
			JSONUser.addUser(
				userEmailAddress = "usera@liferay.com",
				userFirstName = "user",
				userLastName = "a",
				userScreenName = "usera");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "usera@liferay.com");
		}

		task ("When: User configures SP and IdP connection") {
			SAML.configureLiferaySAMLAsIdP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.connectSPAndIdP(
				idpAttributeMapping = "UUID,screenName,firstName,lastName,emailAddress",
				idpCustomFieldAttributeMapping = "inputfield",
				idpCustomFieldAttributeMappingText = "boolean",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				spAttributes = '''emailAddress
			firstName
			lastName
			screenName
			uuid
			expando:boolean''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				sPUserEmailAddress = "test@www.able.com",
				userResolution = "dynamic");

			User.logoutPG();
		}

		task ("Then: User is unable to initiate SP SSO on able.com") {
			User.firstLoginUI(
				idpName = "samlidp",
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "usera@liferay.com");

			User.viewLoggedOutPG();
		}
	}

	@description = "This is a use case for LPS-129373. Configure SAML to import users from LDAP."
	@priority = 4
	test ConfigureSAMLToImportUsersFromLDAP {
		property apacheds.enabled = "true";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}

		task ("Configure samlsp as SP on able.com:9080") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Add ApacheDS server as LDAP server and test connection") {
			Navigator.openURL();

			var baseURL = PropsUtil.get("portal.url");

			PortalSettings.addLDAPServer(ldapServerName = "ApacheDS Server");

			PortalSettings.editLDAPServer(ldapServerName = "ApacheDS Server");

			PortalSettings.testLDAPConnection();
		}

		task ("Open able.com:9080 and add LDAP server") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			PortalSettings.addLDAPServer(
				baseURL = "http://www.able.com:9080",
				ldapServerName = "ApacheDS Server");

			PortalSettings.editLDAPServer(
				baseURL = "http://www.able.com:9080",
				ldapServerName = "ApacheDS Server");
		}

		task ("Test LDAP connection") {
			PortalSettings.testLDAPConnection();
		}

		task ("Enable LDAP enabled,ldapImportEnabled,importOnStartup settings") {
			Navigator.openURL();

			var enableSettingList = "enabled,ldapImportEnabled,importOnStartup";

			PortalSettings.configureLDAPSetting(enableSettingList = ${enableSettingList});

			PortalSettings.viewEnabledLDAPSetting(enableSettingList = ${enableSettingList});
		}

		task ("Logout and restart server") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Login and reindex search indexes") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");

			SearchAdministration.executeReindex();
		}

		task ("View CP ldapuseremail@liferay.com information") {
			var baseURL = PropsUtil.get("portal.url");

			User.openUsersAdmin();

			User.viewCP(
				userEmailAddress = "ldapuseremail@liferay.com",
				userFirstName = "ldapusergivenname",
				userLastName = "ldapusersn",
				userScreenName = "ldapusercn");
		}

		task ("Edit password CP") {
			Navigator.gotoBack();

			User.editPasswordCP(
				samlEnabled = "true",
				userEmailAddress = "ldapuseremail@liferay.com",
				userScreenName = "ldapusercn");
		}

		task ("Open able.com:9080 Enable LDAP import in SP configuration") {
			Navigator.openSpecificURL(url = "http://www.able.com:9080");

			SAML.loginIfProductMenuNotOpened();

			SAML.goToSAMLAdmin(baseURL = "http://www.able.com:9080");

			SAMLNavigation.gotoServiceProvider();

			SAMLPortlet.configureServiceProvider(ldapImport = "enable");
		}

		task ("Logout from able.com:9080, login at able.com:9080 as ldapuseremail, logout from able.com:9080, login at able.com:9080 as test@liferay.com ") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.firstLoginUI(
				password = "password",
				specificURL = "http://www.able.com:9080",
				userEmailAddress = "ldapuseremail@liferay.com");

			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("View CP at able.com:9080") {
			User.openUsersAdmin(baseURL = "http://www.able.com:9080");

			User.viewCP(
				userEmailAddress = "ldapuseremail@liferay.com",
				userFirstName = "ldapusergivenname",
				userLastName = "ldapusersn",
				userScreenName = "ldapusercn");
		}
	}

	@description = "This is a use case for LPS-105170 TC-2: User creation and sync after SAML setup, using email Address for IdP Identifier and screenName for Attribute matching - Using virtual instances."
	@priority = 4
	test CreateAndSyncUserAfterSAMLSetupMatchingEmailAddressNameIDWithScreenNameAttribute {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Logout, setup IdP and SP") {
			User.logoutPG();

			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");
		}

		task ("Enable SP roles") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "tester@localhost.com",
				newUserFirstName = "first",
				newUserLastName = "tester",
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "tester",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Open portal and assert logged in") {
			Navigator.openURL();

			User.viewLoggedInPG();
		}
	}

	@description = "This is a use case for LPS-105170 TC-3: User creation and sync after SAML setup, using screenName for IdP Identifier and UUID for Attribute matching - Using virtual instances."
	@priority = 4
	test CreateAndSyncUserAfterSAMLSetupMatchingScreenNameIdentifierWithUUIDAttribute {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Logout, setup IdP and SP") {
			User.logoutPG();

			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,emailAddress,firstName,lastName,UUID",
				idpAttributeMappingText = "screenName,emailAddress,firstName,lastName,uuid",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");
		}

		task ("Enable SP and add SP configurations to IdP") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "screenName",
				nameIdentifierFormat = "Unspecified",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "tester@localhost.com",
				newUserFirstName = "first",
				newUserLastName = "tester",
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "tester",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Open site and assert logged in") {
			Navigator.openURL();

			User.viewLoggedInPG();
		}
	}

	@description = "This is a use case for LPS-105170 TC-1: User creation and sync after SAML setup, using screenName field both for User Matching and IdP Identifier - Using virtual instances."
	@priority = 4
	test CreateAndSyncUserAfterSAMLSetupWithMatchingScreenNameAttribute {
		property app.server.bundles.size = "0";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Logout, setup IdP and SP") {
			User.logoutPG();

			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");

			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "screenName",
				nameIdentifierFormat = "Unspecified",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "tester@localhost.com",
				newUserFirstName = "first",
				newUserLastName = "tester",
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "tester",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Open site and assert logged in") {
			Navigator.openURL();

			User.viewLoggedInPG();
		}
	}

	@description = "This is a use case for LPS-105170 TC-7: User creation and sync after SAML setup with 2 IdP portal - Using virtual instances."
	@priority = 4
	test CreateAndSyncUserAfterSAMLSetupWithMultipleIdPs {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add virtual instance able.com and baker.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.baker.com",
				portalInstanceId = "www.baker.com",
				virtualHost = "www.baker.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP samlidp1 at localhost:8080 and samlidp2 at baker.com:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp1",
				userEmailAddress = "test@liferay.com");

			SAML.setupIDP(
				idpURL = "http://www.baker.com:8080",
				samlEntityId = "samlidp2",
				userEmailAddress = "test@www.baker.com");
		}

		task ("Setup sp samlsp at able.com:8080") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP samlidp1 and samlidp2 configurations to SP able.com:8080") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,emailAddress,firstName,lastName,UUID",
				idpEntityId = "samlidp1",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 1,
				userResolution = "attribute");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,UUID,firstName,lastName,emailAddress",
				idpEntityId = "samlidp2",
				idpKeepAliveURL = "www.baker.com:8080/c/portal/saml/keep_alive",
				idpURL = "http://www.baker.com:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");
		}

		task ("Enable SP roles") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP samlsp configurations to IdP localhost:8080 and able.com:8080") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "screenName",
				nameIdentifierFormat = "Unspecified",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://www.baker.com:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.baker.com");
		}

		task ("Add and sync users at localhost:8080 and able.com:8080") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				idpName = "samlidp1",
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "first",
				newUserLastName = "tester",
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				samlMultiIdPs = "true",
				spURL = "http://www.able.com:8080");

			User.logoutPG(specificURL = "http://www.able.com:8080");

			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@www.baker.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				idpName = "samlidp2",
				newUserEmailAddress = "user2@www.baker.com",
				newUserFirstName = "second",
				newUserLastName = "tester",
				newUserPortalURL = "http://www.baker.com:8080",
				newUserScreenName = "user2",
				portalInstanceName = "www.baker.com",
				samlMultiIdPs = "true",
				spURL = "http://www.able.com:8080");
		}

		task ("Verify IdP is logged in at baker.com:8080") {
			Navigator.openURL(baseURL = "http://www.baker.com:8080");

			User.viewLoggedInPG();
		}
	}

	@description = "This is a use case for LPS-105170 TC-8: Verifying that deleting a User will sync with the SP site - Using virtual instances."
	@priority = 4
	test DeleteUserAfterSAMLSetupAndVerify {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP samlidp at localhost:8080") {
			User.logoutPG();

			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP samlsp at albe.com:8080") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,emailAddress,firstName,lastName,UUID",
				idpAttributeMappingText = "screenName,emailAddress,firstName,lastName,uuid",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");
		}

		task ("Enable SP roles and add SP configurations to IdP") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "screenName",
				nameIdentifierFormat = "Unspecified",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@localhost.com",
				newUserFirstName = "first",
				newUserLastName = "tester",
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Logout from able.com:8080 and single deactivate CP user") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.firstLoginUI();

			var baseURL = PropsUtil.get("portal.url");

			User.openUsersAdmin();

			User.singleDeactivateCP(userFirstName = "first");

			ManagementBar.setFilterAndOrder(filterBy = "Inactive");

			User.singleDeleteCP(userFirstName = "first");
		}

		task ("Login at able and assert authentication failed error message") {
			User.logoutPG();

			User.firstLoginUI(
				emailPassword = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "user1@liferay.com");

			SAML.viewAuthenticationFailedErrorMessage();
		}
	}

	@description = "LPS-128600 TC-5. SAML connection cannot be saved if more than one custom field value is mapped with the same SAML attribute. Blocked by LPS-141959."
	@priority = 4
	test DuplicatedCustomFieldMappingCannotBeSavedInSAML {
		property app.server.bundles.size = "0";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: new custom fields are added") {
			CustomFields.openCustomFieldAdmin();

			CustomFields.addCP(
				customFieldName = "inputfield1",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				nameLocalization = "false",
				resourceName = "User");

			CustomFields.openCustomFieldAdmin();

			CustomFields.addCP(
				customFieldName = "inputfield2",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				nameLocalization = "false",
				resourceName = "User");
		}

		task ("And: Enable SP role") {
			SAML.goToSAMLAdmin();

			SAMLRole.configure(
				samlEntityId = "samlsp",
				samlRoleType = "Service Provider");
		}

		task ("When: User tries to add IdP connection with 2 custom field mapped with the same attribute") {
			SAML.goToSAMLAdmin();

			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.addIdentityProviderConnection(
				idpAttributeMapping = "UUID,UUID,lastName,lastName",
				idpCustomFieldAttributeMapping = "inputfield1,inputfield2",
				idpCustomFieldAttributeMappingText = "attribute,attribute",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpNameId = "samlidp",
				idpURL = "http://localhost:8080",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");
		}

		task ("Then: The save of the connection fails and the correct error message appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_DISMISSIBLE",
				value1 = "User Custom Fields: Each user field can only be mapped to one SAML attribute.");
		}
	}

	@description = "This is a use case for LPS-110344. Hot deploy SAML app."
	@priority = 4
	test HotDeploySAMLApp {
		property hot.deploy.osgi.app.includes = "saml";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Assert healthy instance started with liferay connector to SAML 2.0") {
			AssertConsoleTextNotPresent(value1 = "The portal instance needs to be restarted");

			AssertConsoleTextPresent(value1 = "STARTED Liferay Foundation - Liferay Connector to SAML 2.0");
		}

		task ("configure samlidp as IdP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");
		}
	}

	@description = "This is a use case for LPS-108077. Import encryption certificate from PKCS12 keystore file."
	@priority = 4
	test ImportEncryptionCertificateFromPKCS12KeystoreFile {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP and samlsp as SP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			SAML.configureLiferaySAMLAsSP(
				encryptionCertificate = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Enable samlsp force encryption") {
			SAMLNavigation.gotoServiceProviderConnection();

			SAMLPortlet.configureServiceProviderConnection(
				forceEncryption = "enable",
				samlEntityId = "samlsp");
		}

		task ("Logout and execute SP initiated SSO") {
			User.logoutPG();

			User.viewLoggedOutPG();

			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Convert encryption certificate") {
			SAML.goToSAMLAdmin(baseURL = "http://www.able.com:9080");

			SAML.downloadCertificate(certificate = "ENCRYPTION");

			SAMLRole.convertEncryptionCertificate();
		}

		task ("Import certificate and private key") {
			SAMLRole.importCertificateAndPrivateKey(
				certificateUsage = "ENCRYPTION",
				keyStoreAlias = "samlsp-encryption");
		}

		task ("Logout and login") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");
		}
	}

	@description = "LPS-152122 TC6. Import JSon file to configure the SAML IdP provider via Import/Export Center."
	@priority = 4
	test ImportJSONFileToConfigureSAMLIDP {
		property app.server.bundles.size = "0";
		property custom.properties = "feature.flag.COMMERCE-8087=true${line.separator}feature.flag.LPS-186620=true";
		property keystore.enabled = "true";
		property portal.release = "false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add SAP") {
			var baseURL = PropsUtil.get("portal.url");

			ServiceAccessPolicy.openServiceAccessPolicyAdmin();

			ServiceAccessPolicy.addServiceAccessPolicy(
				enabled = "true",
				methodName = "*",
				policyName = "SAML_Provider",
				serviceClass = "com.liferay.saml.admin.rest.internal.resource.v1_0.SamlProviderResourceImpl",
				title = "Configure SAML provider");
		}

		task ("When: Import the JSON file via Import/Export Center") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			ImportExport.configureImport(
				entityType = "SamlProvider (v1.0 - Liferay SAML Admin REST)",
				fileName = "identity-provider-configuration.json",
				importStrategy = "Only Add New Records");

			Button.click(button = "Next");

			Button.click(button = "Start Import");

			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");
		}

		task ("Then: SAML is enabled with IDP role") {
			SAML.goToSAMLAdmin();

			SAMLRole.viewGeneralConfigurations(
				samlEntityId = "samlidp",
				samlRoleType = "Identity Provider");
		}

		task ("And: All the configurations which defines in identity-provider-configuration.json are configured") {
			SAMLNavigation.gotoIdentityProvider();

			SAMLPortlet.viewIdentityProviderConfigurations(sessionMaximum = 10000);
		}
	}

	@description = "LPS-152122 TC5. Import JSon file to configure the SAML SP provider via Import/Export Center."
	@priority = 4
	test ImportJSONFileToConfigureSAMLSP {
		property app.server.bundles.size = "0";
		property custom.properties = "feature.flag.COMMERCE-8087=true${line.separator}feature.flag.LPS-186620=true";
		property keystore.enabled = "true";
		property portal.release = "false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add SAP") {
			var baseURL = PropsUtil.get("portal.url");

			ServiceAccessPolicy.openServiceAccessPolicyAdmin();

			ServiceAccessPolicy.addServiceAccessPolicy(
				enabled = "true",
				methodName = "*",
				policyName = "SAML_Provider",
				serviceClass = "com.liferay.saml.admin.rest.internal.resource.v1_0.SamlProviderResourceImpl",
				title = "Configure SAML provider");
		}

		task ("When: Import the JSON file via Import/Export Center") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			ImportExport.configureImport(
				entityType = "SamlProvider (v1.0 - Liferay SAML Admin REST)",
				fileName = "service-provider-configuration.json",
				importStrategy = "Only Add New Records");

			Button.click(button = "Next");

			Button.click(button = "Start Import");

			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");
		}

		task ("Then: SAML is enabled with SP role") {
			SAML.goToSAMLAdmin();

			SAMLRole.viewGeneralConfigurations(
				samlEntityId = "samlsp",
				samlRoleType = "Service Provider");
		}

		task ("And: All the configurations which defines in service-provider-configuration.json are configured") {
			SAMLNavigation.gotoServiceProvider();

			SAMLPortlet.viewServiceProviderConfigurations(clockSkew = 3500);
		}
	}

	@description = "LPS-152122 TC7. Import JSON file to configure the SAML SP provider via Import/Export Center in a non-default port."
	@priority = 4
	test ImportJSONFileToConfigureSAMLSPOnNonDefaultPort {
		property custom.properties = "feature.flag.COMMERCE-8087=true${line.separator}feature.flag.LPS-186620=true";
		property keystore.enabled = "true";
		property portal.release = "false";
		property skip.start.app.server.index = "1";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Start up second bundle and add SAP") {
			Clustering.startSpecificServer(
				deleteLiferayHome = "false",
				nodePort = 9080);

			User.logoutPG();

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://localhost:9080",
				userEmailAddress = "test@liferay.com");

			ServiceAccessPolicy.openServiceAccessPolicyAdmin(baseURL = "http://localhost:9080");

			ServiceAccessPolicy.addServiceAccessPolicy(
				enabled = "true",
				methodName = "*",
				policyName = "SAML_Provider",
				serviceClass = "com.liferay.saml.admin.rest.internal.resource.v1_0.SamlProviderResourceImpl",
				title = "Configure SAML provider");
		}

		task ("When: Import the JSON file via Import/Export Center") {
			ImportExport.openImportExportAdmin(baseURL = "http://localhost:9080");

			ImportExport.gotoImport();

			ImportExport.configureImport(
				entityType = "SamlProvider (v1.0 - Liferay SAML Admin REST)",
				fileName = "service-provider-configuration.json",
				importStrategy = "Only Add New Records");

			Button.click(button = "Next");

			Button.click(button = "Start Import");

			WaitForElementPresent(locator1 = "ImportExport#EXECUTION_SUCCESS");
		}

		task ("Then: SAML is enabled with SP role") {
			SAML.goToSAMLAdmin(baseURL = "http://localhost:9080");

			SAMLRole.viewGeneralConfigurations(
				samlEntityId = "samlsp",
				samlRoleType = "Service Provider");
		}

		task ("And: All the configurations which defines in service-provider-configuration.json are configured") {
			SAMLNavigation.gotoServiceProvider();

			SAMLPortlet.viewServiceProviderConfigurations(clockSkew = 3500);
		}
	}

	@description = "This is a use case for LPS-108077. Import signing certificate from PKCS12 keystore file."
	@priority = 4
	test ImportSigningCertificateFromPKCS12KeystoreFile {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP and samlsp as SP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spAttributes = "firstName",
				spURL = "http://www.able.com:9080",
				userResolution = "dynamic");
		}

		task ("Logout and execute SP initiated SSO") {
			User.logoutPG();

			User.viewLoggedOutPG();

			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Convert signing certificate") {
			Navigator.openURL();

			var baseURL = PropsUtil.get("portal.url");

			SAML.goToSAMLAdmin();

			SAML.downloadCertificate(certificate = "SIGNING");

			SAMLRole.convertSingingCertificate();
		}

		task ("Import certificate and private key") {
			SAMLRole.importCertificateAndPrivateKey(
				certificateUsage = "SIGNING",
				keyStoreAlias = "samlidp");
		}

		task ("Logout, open able.com and login") {
			User.logoutPG();

			User.viewLoggedOutPG();

			Navigator.openSpecificURL(url = "http://www.able.com:9080");

			SAML.loginIfUSerAvatarNotPresent();
		}
	}

	@description = "This is a use case for LPS-201987. Certificate file should be saved to DL root folder after changing the Keystore Manager Target to Document Library Keystore Manager"
	@priority = 5
	test KeystoreManagerTargetShouldWorkAfterChangeFromDefault {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Deploy the OSGI configuration file") {
			SAML.deployConfigFile(osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlKeyStoreManagerConfiguration.config");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("When: Generate a certificate") {
			SAML.goToSAMLAdmin();

			SAMLRole.configure(
				samlEntityId = "samlidp",
				samlRoleType = "Identity Provider");

			SAMLRole.configureCertificateAndPrivateKey(
				certificateUsage = "SIGNING",
				samlKeyPassword = "samlidp");
		}

		task ("Then: Verify that the certificate file should be saved to DL root folder") {
			SAML.validateFolderExist();
		}
	}

	@description = "This is a use case for LPD-32196. Certificate file should be migrated when fileStore change to GCS and Keystore Manager Target is Document Library Keystore Manager"
	@priority = 5
	test KeystoreManagerTargetShouldWorkAfterChangeFromDefaultAndMigratedToGCSStore {
		property app.server.bundles.size = "0";
		property gcs.store.enabled = "true";
		property store.migration.test = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Deploy the OSGI configuration file") {
			SAML.deployConfigFile(osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlKeyStoreManagerConfiguration.config");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("When: Generate a certificate") {
			SAML.goToSAMLAdmin();

			SAMLRole.configure(
				samlEntityId = "samlidp",
				samlRoleType = "Identity Provider");

			SAMLRole.configureCertificateAndPrivateKey(
				certificateUsage = "SIGNING",
				samlKeyPassword = "samlidp");
		}

		task ("Then: Verify that the certificate file should be saved to DL root folder") {
			SAML.validateFolderExist();
		}

		task ("And the user cannot migrate data to GCS store without setting up a connection configuration") {
			ServerAdministration.openServerAdmin();

			Navigator.gotoNavItem(navItem = "Data Migration");

			AssertElementNotPresent(
				key_fieldLabel = "dl.store.impl",
				key_value = "com.liferay.portal.store.gcs.GCSStore",
				locator1 = "Select#GENERIC_SELECT_VALUE");
		}

		task ("When the user adds the configuration") {
			var bucketId = PropsUtil.get("gcs.bucket.id");

			AntCommands.runCommand("build-test.xml", "prepare-gcs-store-configuration -Dgcs.bucket.id=${bucketId}");

			while ((IsElementNotPresent(locator1 = "Select#SELECT_VALUE_ID", option = "com.liferay.portal.store.gcs.GCSStore", selectFieldId = "dl-store-impl")) && (maxIterations = "2")) {
				OSGiConfig.waitForOSGiConfig();

				Refresh();
			}
		}

		task ("Then the user can now migrate data over to the GCS bucket") {
			SelectField.select(
				selectFieldLabel = "dl.store.impl",
				selectFieldValue = "com.liferay.portal.store.gcs.GCSStore");
		}

		task ("When the user executes the data migration") {
			Button.click(button = "Execute");

			AssertTextPresent(
				locator1 = "//body",
				value1 = "Executing com.liferay.document.library.internal.convert.document.library.DocumentLibraryConvertProcess");

			WaitForConsoleTextPresent(value1 = "Please set dl.store.impl in your portal-ext.properties to use com.liferay.portal.store.gcs.GCSStore");

			WaitForConsoleTextPresent(value1 = "Finished conversion for com.liferay.document.library.internal.convert.document.library.DocumentLibraryConvertProcess");
		}

		task ("Then the document is migrated over from the default store to the GCS bucket") {
			var companyId = JSONCompany.getCompanyId();
			var folderName = "saml/keystore.jks";
			var groupId = 0;

			AntCommands.runCommand("build-test-gcs-store.xml", "assert-document-in-bucket-folder -Dcompany.id=${companyId} -Dfolder.name=${folderName} -Dgcs.bucket.id=${bucketId} -Dgroup.id=${groupId}");
		}

		task ("And the user can configure the portal to use GCS store without issue") {
			Portlet.shutdownServer();

			var newProperty = "dl.store.impl=com.liferay.portal.store.gcs.GCSStore";

			AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=${newProperty}");

			Portlet.startServer(deleteLiferayHome = "false");

			User.firstLoginPG();
		}

		task ("Assert certificate is migrated.") {
			SAML.goToSAMLAdmin();

			AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
				key_certificateUsage = "SIGNING",
				locator1 = "CPSAMLAdmin#DOWNLOAD_CERTIFICATE");
		}
	}

	@description = "This is a use case for LPS-147809. TC2: Metadata source is changed after changed from XML File To URL."
	@priority = 4
	test MetadataSourceIsChangedAfterChangedFromXMLFileToURL {
		property app.server.bundles.size = "0";
		property keystore.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add SAML configuration files") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructureee/security/dependencies",
				osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlKeyStoreManagerConfiguration.config");

			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructureee/security/dependencies",
				osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlProviderConfiguration.config");
		}

		task ("And: Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("When: User configures SP and IdP connection") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				keystoreEnabled = "true",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				keystoreEnabled = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				uploadMetadataXML = "identity-provider-metadata.xml",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");
		}

		task ("And: Edit IdP connection and change to a metadata URL instead of uploading the metadata XML file") {
			SAML.editIdentityProviderConnection(
				changeToURL = "true",
				idpEntityId = "samlidp",
				idpMetadataURL = "http://localhost:8080/c/portal/saml/metadata",
				metadata = "true",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Then: Metadata URL is changed as requested") {
			SAMLPortlet.viewMetadataConfigurationsOfSP(
				idpEntityId = "samlidp",
				metadataURL = "true");
		}
	}

	@description = "This is a use case for LPS-147809. TC3: SAML Metadata URL is no longer shown after change metadata source from URL to file."
	@priority = 4
	test MetadataURLDisappearsAfterChangedFromURLToXMLFile {
		property app.server.bundles.size = "0";
		property keystore.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add SAML configuration files") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructureee/security/dependencies",
				osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlKeyStoreManagerConfiguration.config");

			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructureee/security/dependencies",
				osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlProviderConfiguration.config");
		}

		task ("And: Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("When: User configures SP and IdP connection") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				keystoreEnabled = "true",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				keystoreEnabled = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");
		}

		task ("And: Edit IdP connection and replace metadata URL with metadata XML file") {
			SAML.editIdentityProviderConnection(
				changeToXML = "true",
				idpEntityId = "samlidp",
				metadata = "true",
				spURL = "http://www.able.com:8080",
				uploadMetadataXML = "identity-provider-metadata.xml",
				userEmailAddress = "test@www.able.com",
				viewMetadata = "true");
		}

		task ("Then: Metadata URL is changed as requested") {
			SAMLPortlet.viewMetadataConfigurationsOfSP(
				idpEntityId = "samlidp",
				metadataXML = "true");
		}
	}

	@description = "LPS-105169 TC-3: SP initiated login should not sync IdP&SP user attributes if not part of attribute mapping - Using virtual instances."
	@priority = 4
	test SPInitiatedSSODoesNotSyncAttributesIfNotMapped {
		property app.server.bundles.size = "0";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP at localhost:8080 and SP at able.com:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "emailAddress,screenName,firstName,lastName,UUID",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");
		}

		task ("Add and sync new user without validation") {
			SAML.addAndSyncNewUserWithoutValidation(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");

			User.logoutPG(specificURL = "http://www.able.com:8080");
		}

		task ("Edit IdP connection") {
			SAML.editIdentityProviderConnection(
				idpAttributeMappingNew = "emailAddress,screenName,firstName,UUID",
				idpAttributeMappingOld = "emailAddress,screenName,firstName,lastName,UUID",
				idpEntityId = ${identityProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			User.logoutPG(specificURL = "http://www.able.com:8080");
		}

		task ("Update user and execute Sp initiated SSO") {
			JSONUser.updateUser(
				screenNameUpdate = "user1_changed",
				userEmailAddress = "user1@liferay.com",
				userEmailAddressUpdate = "user1@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed");

			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "user1@liferay.com");
		}

		task ("View user information at able.com:8080") {
			MyAccount.openMyAccountAdmin(baseURL = "http://www.able.com:8080");

			User.viewUserInformation(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user_changed",
				userLastName = 1,
				userScreenName = "user1_changed");
		}
	}

	@description = "LPS-105169 TC-4: SP initiated login should not sync IdP&SP user attributes if not sent by IdP - Using virtual instances."
	@priority = 4
	test SPInitiatedSSODoesNotSyncAttributesIfNotSent {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP as localhost:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP as able.com:8080") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configuration to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,emailAddress,firstName,lastName,UUID",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");
		}

		task ("Add and sync new user without validation and edit service provider connection") {
			SAML.addAndSyncNewUserWithoutValidation(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");

			User.logoutPG(specificURL = "http://www.able.com:8080");

			SAML.editServiceProviderConnection(
				idpURL = "http://localhost:8080",
				spAttributes = '''emailAddress
					firstName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId});
		}

		task ("Update user and execute SP initiated SSO") {
			JSONUser.updateUser(
				screenNameUpdate = "user1",
				userEmailAddress = "user1@liferay.com",
				userEmailAddressUpdate = "user1@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed");

			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "user1@liferay.com");
		}

		task ("View user information") {
			MyAccount.openMyAccountAdmin(baseURL = "http://www.able.com:8080");

			User.viewUserInformation(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user_changed",
				userLastName = 1,
				userScreenName = "user1");
		}
	}

	@description = "LPS-105169 TC-1: SP initiated login should sync IdP&SP user attributes based on user attribute mapping - Using virtual instances. Blocked by LPS-137141."
	@priority = 4
	test SPInitiatedSSOSyncsUserAttributesFromIdPToSPDefaultMapping {
		property app.server.bundles.size = "0";
		property app.server.types = "jboss,tcserver,tomcat,weblogic,wildfly";
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property environment.acceptance = "true";
		property operating.system.types = "alpine,amazonlinux,centos,debian,fedora,orcllinux,osx,redhat,rockylinux,solaris,suse,ubuntu,windows";
		property portal.acceptance = "quarantine";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP as localhost:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");
		}

		task ("Setup SP as able.com:8080") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configuration to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,emailAddress,firstName,lastName,UUID",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Unspecified",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "screenName",
				nameIdentifierFormat = "Unspecified",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");
		}

		task ("Add and sync new user without validation") {
			SAML.addAndSyncNewUserWithoutValidation(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Logout and update user") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();

			JSONUser.updateUser(
				screenNameUpdate = "user1",
				userEmailAddress = "user1@liferay.com",
				userEmailAddressUpdate = "user1changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed");
		}

		task ("Execute SP initiated SSO") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "user1changed@liferay.com");
		}

		task ("View user information") {
			MyAccount.openMyAccountAdmin(baseURL = "http://www.able.com:8080");

			User.viewUserInformation(
				userEmailAddress = "user1changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed",
				userScreenName = "user1");
		}
	}

	@description = "LPS-105169 TC-2: SP initiated login should sync IdPs&SP user attributes based on custom user attribute mapping - Using virtual instances."
	@priority = 4
	test SPInitiatedSSOSyncsUserAttributesFromMultipleIdPToSPCustomMapping {
		property app.server.bundles.size = "0";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId1 = "samlidp1";
		var identityProviderEntityId2 = "samlidp2";
		var serviceProviderEntityId = "samlsp";

		task ("Add 2 virtual instances") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.baker.com",
				portalInstanceId = "www.baker.com",
				virtualHost = "www.baker.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP at localhost:8080 and baker.com:8080") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId1},
				userEmailAddress = "test@liferay.com");

			SAML.setupIDP(
				idpURL = "http://www.baker.com:8080",
				samlEntityId = ${identityProviderEntityId2},
				userEmailAddress = "test@www.baker.com");
		}

		task ("Setup SP") {
			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP localhost:8080 and baker.com:8080 configurations to SP") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "emailAddress,firstName,lastName,screenName,UUID",
				idpAttributeMappingText = "emailAddress,firstName,jobTitle,screenName,UUID",
				idpEntityId = ${identityProviderEntityId1},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "emailAddress,firstName,lastName,screenName,UUID",
				idpAttributeMappingText = "emailAddress,firstName,jobTitle,screenName,UUID",
				idpEntityId = ${identityProviderEntityId2},
				idpKeepAliveURL = "http://www.baker.com:8080/c/portal/saml/keep_alive",
				idpURL = "http://www.baker.com:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userResolution = "dynamic");
		}

		task ("Enable SP roles and add SP configurations to localhost:8080 and baker.com:8080 IdP") {
			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid
					jobTitle''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://www.baker.com:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid
					jobTitle''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.baker.com");
		}

		task ("Add and sync new user without validation") {
			SAML.addAndSyncNewUserWithoutValidation(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				idpName = ${identityProviderEntityId1},
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "userIDP1",
				newUserJobTitle = "engineerIDP1",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user_shared",
				portalInstanceName = "localhost",
				samlMultiIdPs = "true",
				spURL = "http://www.able.com:8080");
		}

		task ("Assert user information") {
			MyAccount.openMyAccountAdmin(baseURL = "http://www.able.com:8080");

			User.viewUserInformation(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "userIDP1",
				userJobTitle = "",
				userLastName = "engineerIDP1",
				userScreenName = "user_shared");

			User.logoutPG(specificURL = "http://www.able.com:8080");
		}

		task ("Logout, add and sync new user without validation ") {
			User.viewLoggedOutPG();

			SAML.addAndSyncNewUserWithoutValidation(
				creatorEmailAddress = "test@www.baker.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				idpName = ${identityProviderEntityId2},
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "userIDP2",
				newUserJobTitle = "engineerIDP2",
				newUserLastName = 1,
				newUserPortalURL = "http://www.baker.com:8080",
				newUserScreenName = "user_shared",
				portalInstanceName = "www.baker.com",
				samlMultiIdPs = "true",
				spURL = "http://www.able.com:8080");
		}

		task ("Assert user information") {
			MyAccount.openMyAccountAdmin(baseURL = "http://www.baker.com:8080");

			User.viewUserInformation(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "userIDP2",
				userJobTitle = "",
				userLastName = "engineerIDP2",
				userScreenName = "user_shared");
		}
	}

	@description = "This is a use case for LRQA-35866. SP initiated SSO with screen name identifier."
	@priority = 4
	test SPInitiatedSSOWithScreenNameIdentifier {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP and samlsp as SP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			SAML.configureLiferaySAMLAsSP(
				nameIdentifierAttributeName = "screenName",
				nameIdentifierFormat = "Unspecified",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Add category levels and log out") {
			ServerAdministration.openServerAdmin();

			ServerAdministration.addCategoryLogLevels(
				categoryLevel = "DEBUG",
				categoryName = "com.liferay.saml.opensaml.integration");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Execute SP initiated SSO and assert nameid-format:unspecified is present in login console") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();

			AssertConsoleTextPresent(value1 = "nameid-format:unspecified");
		}
	}

	@description = "This is a use case for LPS-50747. Validate vulnerabilities XML attacks."
	@priority = 4
	test ValidateVulnerabilitiesXMLAttacks {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP and samlsp as SP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Logout and execute SP initiated SSO") {
			User.logoutPG();

			User.viewLoggedOutPG();

			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Add WC CP with malicious URL") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:9080",
				siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			var adminEditURL = Navigator.getCurrentURL();

			var maliciousURL = '''
					${adminEditURL}/&_15_content=%3C!DOCTYPE%20lolz%20%5B%0A%3C!ENTITY%20lol%20%22lol%22%3E%0A%3C!ENTITY%20lol2%20%22%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%26lol%3B%22%3E%0A%3C!ENTITY%20lol3%20%22%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%26lol2%3B%22%3E%0A%3C!ENTITY%20lol4%20%22%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%26lol3%3B%22%3E%0A%3C!ENTITY%20lol5%20%22%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%26lol4%3B%22%3E%0A%3C!ENTITY%20lol6%20%22%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%26lol5%3B%22%3E%0A%3C!ENTITY%20lol7%20%22%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%26lol6%3B%22%3E%0A%3C!ENTITY%20lol8%20%22%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%26lol7%3B%22%3E%0A%3C!ENTITY%20lol9%20%22%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%26lol8%3B%22%3E%0A%5D%3E%0A%3Clolz%3E%26lol9%3B%3C%2Flolz%3E
				''';

			Navigator.openSpecificURL(url = ${maliciousURL});

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Open site and Add WC with malicious url") {
			Navigator.openURL();

			User.viewLoggedInPG();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			var adminEditURL = Navigator.getCurrentURL();

			Navigator.openSpecificURL(url = ${maliciousURL});

			WebContent.addCP(
				webContentContent = "Web Content Content 2",
				webContentTitle = "Web Content Title 2");

			PortletEntry.publish();
		}
	}

	@description = "This is a use case for LRQA-35866. Sign into portal by executing a IdP initiated SSO login. After a successful login, the IdP will redirect to the SP. If the same users with the same email address are present on both instances, it will authenticate and show the SP. SAML can authenticate across major portal versions, that is, the IdP can be Portal 6.1 EE GA3 and the SP can be Portal 6.2. EE GA1. For testing purposes, it is obvious if the authentication succeeds or fails if the IdP and SP are different portal versions."
	@priority = 4
	test ViewIdPInitiatedSSO {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP and samlsp as SP at able.com:9080") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Logout and execute IdP initiated SSO") {
			User.logoutPG();

			User.viewLoggedOutPG();

			var portalURL = PropsUtil.get("portal.url");

			SAML.executeIdPInitiatedSSO(
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Assert IdP logged in") {
			Navigator.openURL();

			User.viewLoggedInPG();
		}

		task ("Logout SP and verify SP is logged out") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Verify IdP is also logged out") {
			Navigator.openURL();

			User.viewLoggedOutPG();
		}
	}

	@description = "This is a use case for LPS-50220. IdP initiated SSO login should work regardless if 'Remember Me' is checked or not."
	@priority = 4
	test ViewIdPInitiatedSSOWithRememberMeChecked {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP and samlsp as SP at able.com:9080") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Logout and execute IdP initiated SSO") {
			User.logoutPG();

			User.viewLoggedOutPG();

			var portalURL = PropsUtil.get("portal.url");

			SAML.executeIdPInitiatedSSO(
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				rememberMeChecked = "true",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Verify IdP is logged in") {
			Navigator.openURL();

			User.viewLoggedInPG();
		}

		task ("Logout SP and verify SP is logged out") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Verify IdP is also logged out") {
			Navigator.openURL();

			User.viewLoggedOutPG();
		}
	}

	@description = "This is a use case for LPS-49666. SAML Single Logout should support HTTP-POST binding."
	@priority = 4
	test ViewSingleLogoutHTTPPostBindingInConsole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Configure samlidp as IdP and samlsp as SP") {
			SAML.configureLiferaySAMLAsIdP(samlEntityId = "samlidp");

			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:9080");
		}

		task ("Add category log levels") {
			ServerAdministration.openServerAdmin();

			ServerAdministration.addCategoryLogLevels(
				categoryLevel = "DEBUG",
				categoryName = "com.liferay.saml.opensaml.integration");
		}

		task ("Logout and execute IdP initiated SSO") {
			User.logoutPG();

			User.viewLoggedOutPG();

			var portalURL = PropsUtil.get("portal.url");

			SAML.executeIdPInitiatedSSO(
				idpInitiatedSsourl = "${portalURL}/c/portal/saml/sso?entityId=samlsp&RelayState=http://www.able.com:9080",
				password = PropsUtil.get("default.admin.password"),
				rememberMeChecked = "true",
				spURL = "http://www.able.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Logout and assert urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST message present on console") {
			User.logoutPG(specificURL = "http://www.able.com:9080");

			User.viewLoggedOutPG();

			AssertConsoleTextPresent(value1 = "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST");
		}
	}

	@description = "This is a use case for LPS-88089. View SP initiated SSO with multiple IdPs and assert render login portlet without IdPs matched."
	@priority = 4
	test ViewSPInitiatedSSOWithMultipleIdPsAndAssertRenderLoginPortletWithoutIdpsMatched {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com and edit email information") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			User.openUsersAdmin(baseURL = "http://www.able.com:8080");

			User.editEmailAddressCP(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com",
				userScreenName = "test");
		}

		task ("Logout from able.com:8080 and take screenshot") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			takeScreenshot();

			User.viewLoggedOutPG();

			takeScreenshot();
		}

		task ("Login and logout at able.com") {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();
		}

		task ("Logout from localhost:8080") {
			User.logoutPG(specificURL = "http://localhost:8080");

			User.viewLoggedOutPG();
		}

		task ("Configure samlidp as IdP at localhost:8080") {
			SAML.configureLiferaySAMLAsIdP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp");
		}

		task ("Configure samlidp2 as IdP at able.com:8080") {
			SAML.configureLiferaySAMLAsIdP(
				idpURL = "http://www.able.com:8080",
				samlEntityId = "samlidp2");
		}

		task ("Configure samlsp as SP at baker.com:9080") {
			SAML.configureLiferaySAMLAsSP(
				samlEntityId = "samlsp",
				spURL = "http://www.baker.com:9080");
		}

		task ("Logout and connect SP baker.com:9080 and IdP able.com:8080") {
			User.logoutPG();

			User.viewLoggedOutPG();

			SAML.connectSPAndIdP(
				idpEntityId = "samlidp2",
				idpURL = "http://www.able.com:8080",
				spEntityId = "samlsp",
				spURL = "http://www.baker.com:9080");
		}

		task ("Logout and execute SP initiated SSO baker.com:9080") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();

			SAML.executeSPInitiatedSSO(
				idpName = "samlidp",
				samlMultiIdPs = "true",
				spURL = "http://www.baker.com:9080");

			User.viewLoggedInPG();
		}

		task ("Open URL and logout from baker.com:9080") {
			Navigator.openURL();

			User.viewLoggedInPG();

			User.logoutPG(specificURL = "http://www.baker.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Open URL and assert logged out") {
			Navigator.openURL();

			User.viewLoggedOutPG();
		}

		task ("Execute SP initiated SSO baker.com:9080") {
			SAML.executeSPInitiatedSSO(
				idpName = "samlidp2",
				samlMultiIdPs = "true",
				spURL = "http://www.baker.com:9080");

			User.viewLoggedInPG();
		}

		task ("Verify second IdP is logged in") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			User.viewLoggedInPG();
		}

		task ("Initiate Single Logout via SP with second IdP") {
			User.logoutPG(specificURL = "http://www.baker.com:9080");

			User.viewLoggedOutPG();
		}

		task ("Verify second IdP is logged out") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			User.viewLoggedOutPG();
		}

		task ("Login at baker.com:9080") {
			User.firstLoginUI(
				idpName = "samlidp",
				password = PropsUtil.get("default.admin.password"),
				samlMultiIdPs = "true",
				specificURL = "http://www.baker.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Delete SAML connection samlidp and samlidp2") {
			SAML.goToSAMLAdmin(baseURL = "http://www.baker.com:9080");

			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.deleteSAMLConnection(samlEntityId = "samlidp");

			SAMLNavigation.gotoIdentityProviderConnections();

			SAMLPortlet.deleteSAMLConnection(samlEntityId = "samlidp2");
		}

		task ("Assert You must configure at least one identity provider connection for SAML to function. message at SAML admin") {
			SAMLNavigation.gotoGeneral();

			SAML.assertSAMLAdminInfoMessage();
		}

		task ("Logout and login at baker.com:9080") {
			User.logoutPG(specificURL = "http://www.baker.com:9080");

			User.viewLoggedOutPG();

			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://www.baker.com:9080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Disable allow showing the login portlet") {
			SAML.goToSAMLAdmin(baseURL = "http://www.baker.com:9080");

			SAMLNavigation.gotoServiceProvider();

			SAMLPortlet.configureServiceProvider(allowShowingTheLoginPortlet = "disable");
		}

		task ("Logout from baker.com:9080 and assert No identity provider is available to sign you in. message") {
			User.logoutPG(specificURL = "http://www.baker.com:9080");

			User.viewLoggedOutPG();

			Navigator.gotoLoginPage();

			SAML.viewNoIdentityProviderAvailableMessage();
		}
	}

	@description = "This is a use case for LPS-180198 TC-1 and TC-4: The user could be assigned to an existing user group at Portal, during login using Okta as SAML IDP (AC-1), and the missing user group is not created at Portal."
	@priority = 4
	test ViewSPInitiatedSSOWithOktaAndUserGroups {
		property app.server.types = "jboss,tcserver,tomcat,wildfly";
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.release = "false";
		property portal.ssl.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var userPassword = PropsUtil.get("openid.provider.okta.test.account.password");

		task ("Given: Setup SAML connection with Okta as Identity Probider") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "Okta User Group Description",
				userGroupName = "Okta-UserGroup 1");

			SAML.setupSP(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "http://www.okta.com/exka0uuf1q7RZCdmV5d7",
				idpMetadataURLRaw = "https://dev-68908313.okta.com/app/exka0uuf1q7RZCdmV5d7/sso/saml/metadata",
				idpUserMembershipsAttributeMapping = "userGroups",
				idpUserMembershipsAttributeMappingText = "userGroup",
				nameIdentifierFormat = "Email Address",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");
		}

		task ("When: User logs in with multiline User Group value in SAML assertion") {
			SAML.accountSignInOkta(
				specificURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userPassword = ${userPassword});
		}

		task ("Then: User logged in succesfully and assigned to the existing user group only with matching name at Portal") {
			WaitForConsoleTextPresent(value1 = "Ignored unknown user group: Okta-UserGroup 2");

			User.viewLoggedInPG();

			MyAccount.openMyAccountAdmin();

			UserNavigator.gotoMemberships();

			AssertTextPresent(value1 = "Okta-UserGroup 1");

			AssertTextNotPresent(value1 = "Okta-UserGroup 2");
		}
	}

	@description = "This is a use case for LPS-180198 TC-5: Verify the user group could be assigned even if it's not present at first time login from Okta."
	@priority = 4
	test ViewSPInitiatedSSOWithOktaUserGroupCanBeAssignedLater {
		property app.server.types = "jboss,tcserver,tomcat,wildfly";
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.release = "false";
		property portal.ssl.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var userPassword = PropsUtil.get("openid.provider.okta.test.account.password");

		task ("Given: Setup SAML connection with Okta as Identity Probider") {
			SAML.setupSP(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "http://www.okta.com/exka0uuf1q7RZCdmV5d7",
				idpMetadataURLRaw = "https://dev-68908313.okta.com/app/exka0uuf1q7RZCdmV5d7/sso/saml/metadata",
				idpUserMembershipsAttributeMapping = "userGroups",
				idpUserMembershipsAttributeMappingText = "userGroup",
				nameIdentifierFormat = "Email Address",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");
		}

		task ("When: User logs in with multiline User Group value in SAML assertion, but the user groups are not exists at Portal") {
			SAML.accountSignInOkta(
				specificURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userPassword = ${userPassword});

			WaitForConsoleTextPresent(value1 = "Ignored unknown user group: Okta-UserGroup 2");

			User.viewLoggedInPG();

			MyAccount.openMyAccountAdmin();

			UserNavigator.gotoMemberships();

			AssertTextNotPresent(value1 = "Okta-UserGroup 1");

			AssertTextNotPresent(value1 = "Okta-UserGroup 2");

			User.logoutPG();
		}

		task ("Then: We can add the user group to Portal later, and the same user will be assigned to it during his second login") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "Okta User Group Description",
				userGroupName = "Okta-UserGroup 1");

			Navigator.openURL();

			AssertClick(
				locator1 = "UserBar#USER_SIGN_IN",
				value1 = "Sign In");

			User.viewLoggedInPG();

			MyAccount.openMyAccountAdmin();

			UserNavigator.gotoMemberships();

			AssertTextPresent(value1 = "Okta-UserGroup 1");

			AssertTextNotPresent(value1 = "Okta-UserGroup 2");
		}
	}

	@description = "This is a use case for LPS-180198 TC-3: The user's non-existing user group at Portal is not created when logging in using Okta as SAML IDP."
	@priority = 4
	test ViewSPInitiatedSSOWithOktaUserGroupsAreNotCreatedDuringLogin {
		property app.server.types = "jboss,tcserver,tomcat,wildfly";
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.release = "false";
		property portal.ssl.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var userPassword = PropsUtil.get("openid.provider.okta.test.account.password");

		task ("Given: Setup SAML connection with Okta as Identity Probider") {
			SAML.setupSP(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "http://www.okta.com/exka0uuf1q7RZCdmV5d7",
				idpMetadataURLRaw = "https://dev-68908313.okta.com/app/exka0uuf1q7RZCdmV5d7/sso/saml/metadata",
				idpUserMembershipsAttributeMapping = "userGroups",
				idpUserMembershipsAttributeMappingText = "userGroup",
				nameIdentifierFormat = "Email Address",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");
		}

		task ("When: User logs in with multiline User Group value in SAML assertion") {
			SAML.accountSignInOkta(
				specificURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userPassword = ${userPassword});
		}

		task ("Then: User logged in succesfully but not assigned to any user group as they are not exists at Portal") {
			WaitForConsoleTextPresent(value1 = "Ignored unknown user group: Okta-UserGroup 1");

			WaitForConsoleTextPresent(value1 = "Ignored unknown user group: Okta-UserGroup 2");

			User.viewLoggedInPG();

			MyAccount.openMyAccountAdmin();

			UserNavigator.gotoMemberships();

			AssertTextNotPresent(value1 = "Okta-UserGroup 1");

			AssertTextNotPresent(value1 = "Okta-UserGroup 2");
		}
	}

	@description = "This is a use case for LPS-180198 TC-2: The user could be assigned to multiple existing user groups at the Portal, during login using Okta as SAML IDP."
	@priority = 4
	test ViewSPInitiatedSSOWithOktaWithMultipleUserGroups {
		property app.server.types = "jboss,tcserver,tomcat,wildfly";
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.release = "false";
		property portal.ssl.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var userPassword = PropsUtil.get("openid.provider.okta.test.account.password");

		task ("Given: Setup SAML connection with Okta as Identity Probider") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "Okta User Group Description",
				userGroupName = "Okta-UserGroup 1");

			JSONUserGroup.addUserGroup(
				userGroupDescription = "Okta User Group Description",
				userGroupName = "Okta-UserGroup 2");

			SAML.setupSP(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "http://www.okta.com/exka0uuf1q7RZCdmV5d7",
				idpMetadataURLRaw = "https://dev-68908313.okta.com/app/exka0uuf1q7RZCdmV5d7/sso/saml/metadata",
				idpUserMembershipsAttributeMapping = "userGroups",
				idpUserMembershipsAttributeMappingText = "userGroup",
				nameIdentifierFormat = "Email Address",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userResolution = "dynamic");

			SAML.enableSPRoles(
				samlEntityId = "SP1",
				spURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com");
		}

		task ("When: User logs in with multiline User Group value in SAML assertion") {
			SAML.accountSignInOkta(
				specificURL = "https://localhost:8443",
				userEmailAddress = "test@liferay.com",
				userPassword = ${userPassword});
		}

		task ("Then: User logged in succesfully and assigned to the existing user groups only with matching name at Portal") {
			AssertConsoleTextNotPresent(value1 = "Ignored unknown user group: Okta-UserGroup 1");

			AssertConsoleTextNotPresent(value1 = "Ignored unknown user group: Okta-UserGroup 2");

			User.viewLoggedInPG();

			MyAccount.openMyAccountAdmin();

			UserNavigator.gotoMemberships();

			AssertTextPresent(value1 = "Okta-UserGroup 1");

			AssertTextPresent(value1 = "Okta-UserGroup 2");
		}
	}

	@description = "LPS-123218 TC-5: SP initiated login, using email address for user matching - Using virtual instances."
	@priority = 4
	test ViewSPInitiatedSSOWithSAMLAttributeEmailAddressUsedForUserMatching {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP and SP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "emailAddress,UUID,firstName,lastName,screenName",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 0,
				userResolution = "attribute");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Logout and assert message Resolving user with user field expression: emailAddress. On console") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();

			AssertConsoleTextPresent(value1 = "Resolving user with user field expression: emailAddress");
		}

		task ("Update user") {
			JSONUser.updateUser(
				screenNameUpdate = "user1_changed",
				userEmailAddress = "user1@liferay.com",
				userEmailAddressUpdate = "user1@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed");
		}

		task ("Execute SP initiated SSO and confirm user information") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "user1@liferay.com");

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed",
				userScreenName = "user1_changed");
		}
	}

	@description = "LPS-123218 TC-4: SP initiated login, using screenName for user matching - Using virtual instances."
	@priority = 4
	test ViewSPInitiatedSSOWithSAMLAttributeScreenNameUsedForUserMatching {
		property app.server.bundles.size = "0";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual intance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP and SP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,UUID,emailAddress,firstName,lastName",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 0,
				userResolution = "attribute");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Logout and assert Resolving user with user field expression: screenName. Message present on console") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();

			AssertConsoleTextPresent(value1 = "Resolving user with user field expression: screenName");
		}

		task ("Update user") {
			JSONUser.updateUser(
				screenNameUpdate = "user1",
				userEmailAddress = "user1@liferay.com",
				userEmailAddressUpdate = "user1changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed");
		}

		task ("Execute SP initiated SSO and confirm user information") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "user1changed@liferay.com");

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userEmailAddress = "user1changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed",
				userScreenName = "user1");
		}
	}

	@description = "LPS-123218 TC-7: SP initiated login, using screenName for user matching, multiple IDPs - Using virtual instances. Blocked by LPS-137141."
	@priority = 4
	test ViewSPInitiatedSSOWithSAMLAttributeScreenNameUsedForUserMatchingMultipleIdP {
		property app.server.bundles.size = "0";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId1 = "samlidp1";
		var identityProviderEntityId2 = "samlidp2";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual instances able.com and baker.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.baker.com",
				portalInstanceId = "www.baker.com",
				virtualHost = "www.baker.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdPs and SP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId1},
				userEmailAddress = "test@liferay.com");

			SAML.setupIDP(
				idpURL = "http://www.baker.com:8080",
				samlEntityId = ${identityProviderEntityId2},
				userEmailAddress = "test@www.baker.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add samlidp1 configurations to SP") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,UUID,emailAddress,firstName,lastName",
				idpEntityId = ${identityProviderEntityId1},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 0,
				userResolution = "attribute");
		}

		task ("Add samlidp2 configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "screenName,UUID,emailAddress,firstName,lastName",
				idpEntityId = ${identityProviderEntityId2},
				idpKeepAliveURL = "http://www.baker.com:8080/c/portal/saml/keep_alive",
				idpURL = "http://www.baker.com:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 0,
				userResolution = "attribute");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdPs") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://www.baker.com:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.baker.com");
		}

		task ("Add and sync new user at localhost:8080") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				idpName = ${identityProviderEntityId1},
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user_able",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user_shared",
				portalInstanceName = "localhost",
				samlMultiIdPs = "true",
				spURL = "http://www.able.com:8080");
		}

		task ("Logout and assert Resolving user with user field expression: screenName. Message present on console") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();

			AssertConsoleTextPresent(value1 = "Resolving user with user field expression: screenName");
		}

		task ("Add and sync new user at baker.com:8080") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@www.baker.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				idpName = ${identityProviderEntityId2},
				newUserEmailAddress = "user2@www.baker.com",
				newUserFirstName = "user_baker",
				newUserLastName = 2,
				newUserPortalURL = "http://www.baker.com:8080",
				newUserScreenName = "user_shared",
				portalInstanceName = "www.baker.com",
				samlMultiIdPs = "true",
				spURL = "http://www.able.com:8080");
		}
	}

	@description = "LPS-123218 TC-1: SP initiated login, using UUID for user matching - Using virtual instances."
	@priority = 4
	test ViewSPInitiatedSSOWithSAMLAttributeUUIDUsedForUserMatching {
		property app.server.bundles.size = "0";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId = "samlsp";

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP and SP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to SP and enable SP roles") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpAttributeMappingText = "uuid,emailAddress,firstName,lastName,screenName",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 0,
				userResolution = "attribute");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add SP configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Logout and assert Resolving user with user field expression: uuid. Message present on console") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();

			AssertConsoleTextPresent(value1 = "Resolving user with user field expression: uuid");
		}

		task ("Update user") {
			JSONUser.updateUser(
				screenNameUpdate = "user1_changed",
				userEmailAddress = "user1@liferay.com",
				userEmailAddressUpdate = "user1changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed");
		}

		task ("Execute SP initiated SSO and confirm user information") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "user1changed@liferay.com");

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userEmailAddress = "user1changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed",
				userScreenName = "user1_changed");
		}
	}

	@description = "LPS-123218 TC-8: SP initiated login, using UUID for user matching, multiple SPs - Using virtual instances."
	@priority = 4
	test ViewSPInitiatedSSOWithSAMLAttributeUUIDUsedForUserMatchingMultipleSP {
		property app.server.bundles.size = "0";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var identityProviderEntityId = "samlidp";
		var serviceProviderEntityId1 = "samlsp1";
		var serviceProviderEntityId2 = "samlsp2";

		task ("Add virtual instances able.com and baker.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.baker.com",
				portalInstanceId = "www.baker.com",
				virtualHost = "www.baker.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP and SPs") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				samlEntityId = ${identityProviderEntityId},
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId1},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.setupSP(
				encryptionCertificate = "true",
				samlEntityId = ${serviceProviderEntityId2},
				spURL = "http://www.baker.com:8080",
				userEmailAddress = "test@www.baker.com");
		}

		task ("Add IdP configurations to SPs") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,screenName,emailAddress,firstName,lastName",
				idpAttributeMappingText = "uuid,screenName,emailAddress,firstName,lastName",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 0,
				userResolution = "attribute");

			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,screenName,emailAddress,firstName,lastName",
				idpAttributeMappingText = "uuid,screenName,emailAddress,firstName,lastName",
				idpEntityId = ${identityProviderEntityId},
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.baker.com:8080",
				userEmailAddress = "test@www.baker.com",
				userMatchingAttributeIndex = 0,
				userResolution = "attribute");
		}

		task ("Enable SPs roles") {
			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId1},
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.enableSPRoles(
				samlEntityId = ${serviceProviderEntityId2},
				spURL = "http://www.baker.com:8080",
				userEmailAddress = "test@www.baker.com");
		}

		task ("Add SPs configurations to IdP") {
			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId1},
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierAttributeName = "emailAddress",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
					firstName
					lastName
					screenName
					uuid''',
				spEntityId = ${serviceProviderEntityId2},
				spKeepAliveURL = "http://www.baker.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.baker.com:8080");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "user1@liferay.com",
				newUserFirstName = "user",
				newUserLastName = 1,
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "user1",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Logout and view Resolving user with user field expression: uuid. Message on console") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();

			AssertConsoleTextPresent(value1 = "Resolving user with user field expression: uuid");
		}

		task ("Execute SP initiated SSO baker.com:8080 and logout") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.baker.com:8080",
				userEmailAddress = "user1@liferay.com");

			User.logoutPG(specificURL = "http://www.baker.com:8080");

			User.viewLoggedOutPG();
		}

		task ("Update user") {
			JSONUser.updateUser(
				screenNameUpdate = "user1_changed",
				userEmailAddress = "user1@liferay.com",
				userEmailAddressUpdate = "user1_changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed");
		}

		task ("Execute SP initiated SSO able.com:8080 and confirm user information") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "user1_changed@liferay.com");

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userEmailAddress = "user1_changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed",
				userScreenName = "user1_changed");
		}

		task ("Logout") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.viewLoggedOutPG();
		}

		task ("Execute SP initiated SSO baker.com:8080 and confirm user information") {
			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.baker.com:8080",
				userEmailAddress = "user1_changed@liferay.com");

			MyAccount.openMyAccountAdmin();

			User.viewUserInformation(
				userEmailAddress = "user1_changed@liferay.com",
				userFirstName = "user_changed",
				userLastName = "1_changed",
				userScreenName = "user1_changed");
		}
	}

	@description = "LPS-125272 User profile match up when NameID is transient, and screenName is in SAML Attributes list."
	@priority = 4
	test ViewSPInitiatedSSOWithTransientNameId {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Configure samlidp as IdP and samlsp as SP") {
			User.logoutPG();

			SAML.configureLiferaySAMLAsIdP(
				idpURL = "http://localhost:8080",
				samlEntityId = "samlidp");

			User.logoutPG();

			SAML.configureLiferaySAMLAsSP(
				idpAttributes = '''emailAddress=emailAddress
firstName=firstName
lastName=lastName
screenName=screenName
uuid=uuid''',
				nameIdentifierAttributeName = "static:CustomNameIDValue",
				nameIdentifierFormat = "Transient",
				samlEntityId = "samlsp",
				spAttributes = '''emailAddress
firstName
lastName
screenName
uuid''',
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Logout and execute SP initiated SSO") {
			User.logoutPG();

			User.viewLoggedOutPG();

			SAML.executeSPInitiatedSSO(
				password = PropsUtil.get("default.admin.password"),
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			User.viewLoggedInPG();
		}

		task ("Assert duplicate user not present") {
			User.openUsersAdmin(baseURL = "http://www.able.com:8080");

			SAML.viewNoDuplicateUser(user = "Test Test");

			AssertElementNotPresent(locator1 = "xpath=(//tr[contains(.,'${user}')][2]/td[2]/a)");
		}
	}

	@description = "This is a use case for LPS-147809. TC1: SP initiated SSO with uploaded metadata XML file."
	@priority = 4
	test ViewSPInitiatedSSOWithUploadMetadataXML {
		property app.server.bundles.size = "0";
		property keystore.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add SAML configuration files") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructureee/security/dependencies",
				osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlKeyStoreManagerConfiguration.config");

			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/coreinfrastructureee/security/dependencies",
				osgiConfigFileName = "com.liferay.saml.runtime.configuration.SamlProviderConfiguration.config");
		}

		task ("Add virtual instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Setup IdP and SP") {
			SAML.setupIDP(
				idpURL = "http://localhost:8080",
				keystoreEnabled = "true",
				samlEntityId = "samlidp",
				userEmailAddress = "test@liferay.com");

			SAML.setupSP(
				keystoreEnabled = "true",
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Add IdP configurations to service provider") {
			SAML.addIDPConfigurationsToServiceProvider(
				idpAttributeMapping = "UUID,emailAddress,firstName,lastName,screenName",
				idpEntityId = "samlidp",
				idpKeepAliveURL = "http://localhost:8080/c/portal/saml/keep_alive",
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spURL = "http://www.able.com:8080",
				uploadMetadataXML = "identity-provider-metadata.xml",
				userEmailAddress = "test@www.able.com",
				userMatchingAttributeIndex = 4,
				userResolution = "attribute");
		}

		task ("Enable SP roles and add SP configurations to IdP") {
			SAML.enableSPRoles(
				samlEntityId = "samlsp",
				spURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			SAML.addSPConfigurationsToIdentityProvider(
				idpURL = "http://localhost:8080",
				nameIdentifierFormat = "Email Address",
				spAttributes = '''emailAddress
				firstName
				lastName
				screenName
				uuid''',
				spEntityId = "samlsp",
				spKeepAliveURL = "http://www.able.com:8080/c/portal/saml/keep_alive",
				spURL = "http://www.able.com:8080",
				uploadMetadataXML = "service-provider-metadata.xml",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add and sync new user") {
			SAML.addAndSyncNewUser(
				creatorEmailAddress = "test@liferay.com",
				creatorPassword = PropsUtil.get("default.admin.password"),
				newUserEmailAddress = "tester@localhost.com",
				newUserFirstName = "first",
				newUserLastName = "tester",
				newUserPortalURL = "http://localhost:8080",
				newUserScreenName = "tester",
				portalInstanceName = "localhost",
				spURL = "http://www.able.com:8080");
		}

		task ("Open portal and assert logged in") {
			Navigator.openURL();

			User.viewLoggedInPG();
		}
	}

}