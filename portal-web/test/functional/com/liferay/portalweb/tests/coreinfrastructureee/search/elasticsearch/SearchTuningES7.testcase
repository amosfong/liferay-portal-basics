@component-name = "portal-search-ee"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7,opensearch2";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test AssertAliasCaseInsensitivity {
		JSONWebcontent.addWebContent(
			content = "WC WC",
			groupName = "Guest",
			title = "WC Title");

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Title");

		SearchTuning.pinResult(assetTitle = "WC Title");

		SearchTuning.configureAliases(addAlias = "abc");

		SearchTuning.configureAliases(addAlias = "ABC");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "abc");

		Refresh();

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "ABC");

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");
	}

	@description = "This is a use case for LPS-191998."
	@priority = 3
	test AssertCannotAddDuplicateQueriesAndAliases {
		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Article");

		SearchTuning.configureAliases(addAlias = "Journal");

		Button.clickSave();

		LexiconEntry.gotoAdd();

		PortletEntry.inputText(
			fieldLabel = "Search Query",
			text = "Article");

		Button.click(button = "Customize Results");

		Alert.viewErrorMessage(errorMessage = "A ranking with the same search query and scope already exists.");

		PortletEntry.inputText(
			fieldLabel = "Search Query",
			text = "Journal");

		Button.click(button = "Customize Results");

		Alert.viewErrorMessage(errorMessage = "A ranking with the same search query and scope already exists.");

		SearchTuning.openResultRankingsAdmin();

		AssertElementNotPresent(
			key_query = "Article",
			locator1 = "SearchTuning#RESULT_RANKINGS_DUPLICATE_ENTRY");

		AssertElementNotPresent(
			key_query = "Journal",
			locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");

		SearchTuning.addResultRanking(searchQuery = "Web Content");

		SearchTuning.configureAliases(addAlias = "Article");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "Search queries and aliases with a given scope must be unique across all active rankings. The following ones already exist: Article.");

		SearchTuning.configureAliases(
			addAlias = "Journal",
			deleteAlias = "Article");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "Search queries and aliases with a given scope must be unique across all active rankings. The following ones already exist: Journal.");

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Third Ranking");

		SearchTuning.configureAliases(addAlias = "Article");

		SearchTuning.configureAliases(addAlias = "Web Content");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "Search queries and aliases with a given scope must be unique across all active rankings. The following ones already exist: Article, Web Content.");

		Refresh();

		ControlMenu.viewHeaderTitle(headerTitle = "Customize Results");
	}

	@priority = 4
	test AssertDeletedResultRanking {
		var content = "Article Article Article";

		for (var title : list "Article 1,Article 2,Article 3") {
			JSONWebcontent.addWebContent(
				content = ${content},
				groupName = "Guest",
				title = ${title});

			var content = StringUtil.replaceFirst(${content}, "Article ", "");
		}

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Article");

		SearchTuning.pinResult(assetTitle = "Article 3");

		SearchTuning.hideResult(assetTitle = "Article 2");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "Article");

		Refresh();

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Article 3,Article 1");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Article 2",
			searchAssetType = "Web Content Article");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.delete(rowEntry = "Article");

		AssertElementNotPresent(
			key_query = "Article",
			locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Article");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Article 1,Article 2,Article 3");
	}

	@description = "This is a use case for LPS-197744."
	@priority = 3
	test AssertResultRankingsDoesNotAffectResultRankingsEditScreen {
		task ("Add Result Ranking with pinned result") {
			SearchTuning.openResultRankingsAdmin();

			SearchTuning.addResultRanking(searchQuery = "test");

			SearchTuning.pinResult(assetTitle = "tree.png");

			Button.clickSave();
		}

		task ("Add second Result Ranking and assert the pinned result from the first Result Ranking is not the top result") {
			SearchTuning.addResultRanking(searchQuery = "test2");

			Button.click(button = "Add Result");

			Type(
				locator1 = "SearchTuning#RESULT_RANKINGS_ADD_RESULT_SEARCH_BAR",
				value1 = "test");

			KeyPress(
				locator1 = "SearchTuning#RESULT_RANKINGS_ADD_RESULT_SEARCH_BAR",
				value1 = "\RETURN");

			AssertTextNotEquals.assertNotPartialMatch(
				locator1 = "SearchTuning#RESULT_RANKINGS_ADD_RESULT_RESULT_TITLE_SPECIFIC_ORDER",
				resultOrder = 1,
				value1 = "tree.png");
		}
	}

	@priority = 3
	test AssertResultRankingsMiscUI {
		SearchTuning.openResultRankingsAdmin();

		AssertElementNotPresent(locator1 = "Pagination#PAGINATION_BAR");

		LexiconEntry.gotoAdd();

		Button.click(button = "Customize Results");

		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "The Search Query field is required.");

		Navigator.gotoBack();

		for (var query : list "Article 1,Article 2,Article 3,Article 4,Article 5,Article 6,Article 7") {
			SearchTuning.addResultRanking(searchQuery = ${query});

			Button.clickSave();
		}

		Pagination.changePagination(itemsPerPage = 4);

		for (var query : list "Article 1,Article 2,Article 3,Article 4") {
			AssertElementPresent(
				key_query = ${query},
				locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");
		}

		for (var query : list "Article 5,Article 6,Article 7") {
			AssertElementNotPresent(
				key_query = ${query},
				locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 7 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		for (var query : list "Article 5,Article 6,Article 7") {
			AssertElementPresent(
				key_query = ${query},
				locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");
		}

		for (var query : list "Article 1,Article 2,Article 3,Article 4") {
			AssertElementNotPresent(
				key_query = ${query},
				locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");
		}

		Pagination.viewResults(results = "Showing 5 to 7 of 7 entries.");

		Click(locator1 = "Pagination#PREVIOUS_LINK");

		Pagination.viewResults(results = "Showing 1 to 4 of 7 entries.");

		PortletEntry.deleteViaToolbar(rowEntries = "Article 1,Article 2,Article 3");

		for (var query : list "Article 1,Article 2,Article 3") {
			AssertElementNotPresent(
				key_query = ${query},
				locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");
		}

		PortletEntry.selectAll();

		ClickNoError(
			key_text = "times-circle",
			locator1 = "ManagementBar#ANY_ICON");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No Custom Results Yet");
	}

	@priority = 4
	test AssertResultRankingsPagination {
		property custom.properties = "search.container.page.default.delta=5";

		SearchTuning.openResultRankingsAdmin();

		AssertElementNotPresent(locator1 = "Pagination#PAGINATION_BAR");

		for (var counter : list "1,2,3,4,5") {
			SearchTuning.addResultRanking(searchQuery = "Article ${counter}");

			Button.clickSave();
		}

		AssertElementPresent(locator1 = "Pagination#PAGINATION_BAR");

		SearchTuning.addResultRanking(searchQuery = "Article 6");

		Button.clickSave();

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");
	}

	@priority = 4
	test AssertResultRankingsWithSynonyms {
		for (var webContentTitle : list "Article 1,Article 2,Journal 1,Journal 2") {
			JSONWebcontent.addWebContent(
				content = "",
				groupName = "Guest",
				title = ${webContentTitle});
		}

		SearchTuning.openSynonymsAdmin();

		SearchTuning.addSynonymSet(synonyms = "Article,Journal");

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Article");

		SearchTuning.pinResult(assetTitle = "Journal 2");

		SearchTuning.hideResult(assetTitle = "Article 2");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "Article");

		Refresh();

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Journal 2");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Article 1",
			searchAssetType = "Web Content Article");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Journal 1",
			searchAssetType = "Web Content Article");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Article 2",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "Journal");

		for (var webContentTitle : list "Article 1,Article 2,Journal 1,Journal 2") {
			SearchResults.viewSearchResults(
				searchAssetTitle = ${webContentTitle},
				searchAssetType = "Web Content Article");
		}

		SearchTuning.openSynonymsAdmin();

		SearchTuning.deleteSynonymSet(synonymSet = "Article, Journal");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Article");

		AssertElementPresent(
			key_assetTitle = "Journal 2",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_PINNED");

		AssertElementNotPresent(
			key_assetTitle = "Journal 1",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Article");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Journal 2,Article 1");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "Article 2,Journal 1");

		SearchPage.searchEmbedded(searchTerm = "Journal");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Journal 1",
			searchAssetType = "Web Content Article");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Journal 2",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "Article 1,Article 2");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Article");

		SearchTuning.unpinResult(assetTitle = "Journal 2");

		Button.clickSave();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Article");

		AssertElementNotPresent(
			key_assetTitle = "Journal 2",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Article");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Article 1",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "Article 2,Journal 1,Journal 2");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Article");

		SearchTuning.addResult(
			assetTitle = "Journal 2",
			searchTerm = "Journal");

		Button.clickSave();

		SearchTuning.openSynonymsAdmin();

		SearchTuning.addSynonymSet(synonyms = "Article,Journal");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Article");

		AssertElementPresent(
			key_assetTitle = "Journal 2",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_PINNED");

		AssertElementPresent(
			key_assetTitle = "Journal 1",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT");

		SearchTuning.configureAliases(addAlias = "Journal");

		Button.clickSave();

		Navigator.openURL();

		for (var searchTerm : list "Article,Journal") {
			SearchPage.searchEmbedded(searchTerm = ${searchTerm});

			SearchResults.viewSearchResultsSpecificOrder(resultsList = "Journal 2");

			SearchResults.viewSearchResults(
				searchAssetTitle = "Article 1",
				searchAssetType = "Web Content Article");

			SearchResults.viewSearchResults(
				searchAssetTitle = "Journal 1",
				searchAssetType = "Web Content Article");

			SearchResults.viewSearchResultNotPresent(
				searchAssetTitle = "Article 2",
				searchAssetType = "Web Content Article");
		}
	}

	@priority = 3
	test AssertSynonymBulkActions {
		SearchTuning.openSynonymsAdmin();

		AssertElementNotPresent(locator1 = "Pagination#PAGINATION_BAR");

		for (var counter : list "1,2,3,4,5,6") {
			SearchTuning.addSynonymSet(synonyms = "phone${counter},mobile${counter}");
		}

		LexiconEntry.selectEntry(key_rowEntry = "phone2, mobile2");

		LexiconEntry.selectEntry(key_rowEntry = "phone5, mobile5");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 6 Items Selected");

		ClickNoError(
			key_text = "times-circle",
			locator1 = "ManagementBar#ANY_ICON");

		AssertConfirm(value1 = "Are you sure you want to delete the selected entries? They will be deleted immediately.");

		AssertElementNotPresent(
			key_rowEntry = "phone2, mobile2",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		AssertElementNotPresent(
			key_rowEntry = "phone5, mobile5",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		PortletEntry.selectAll();

		ClickNoError(
			key_text = "times-circle",
			locator1 = "ManagementBar#ANY_ICON");

		AssertConfirm(value1 = "Are you sure you want to delete the selected entries? They will be deleted immediately.");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no entries.");
	}

	@priority = 4
	test AssertSynonymsPagination {
		property custom.properties = "search.container.page.default.delta=5";

		SearchTuning.openSynonymsAdmin();

		AssertElementNotPresent(locator1 = "Pagination#PAGINATION_BAR");

		for (var counter : list "1,2,3,4,5") {
			SearchTuning.addSynonymSet(synonyms = "Article ${counter}");
		}

		AssertElementPresent(locator1 = "Pagination#PAGINATION_BAR");

		SearchTuning.addSynonymSet(synonyms = "Article 6");

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");
	}

	@priority = 5
	test EnableAndDisableResultRankings {
		var content = "Article Article Article Article";

		for (var count : list "1,2,3,4") {
			JSONWebcontent.addWebContent(
				content = ${content},
				groupName = "Guest",
				title = "Article ${count}");

			var content = StringUtil.replaceFirst(${content}, "Article ", "");
		}

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Article");

		SearchTuning.pinResult(assetTitle = "Article 4");

		SearchTuning.configureAliases(addAlias = "apple");

		Uncheck.uncheckToggleSwitch(locator1 = "SearchTuning#RESULT_RANKINGS_ACTIVE_TOGGLE_SWITCH");

		Button.clickSave();

		AssertElementPresent(
			key_query = "Article",
			locator1 = "SearchTuning#RESULT_RANKINGS_INACTIVE_RANKING");

		SearchTuning.addResultRanking(searchQuery = "Article");

		SearchTuning.configureAliases(addAlias = "orange");

		SearchTuning.pinResult(assetTitle = "Article 3");

		SearchTuning.hideResult(assetTitle = "Article 2");

		Button.clickSave();

		Click(
			key_query = "Article",
			locator1 = "SearchTuning#RESULT_RANKINGS_INACTIVE_RANKING");

		AssertElementPresent(
			key_assetTitle = "Article 4",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_PINNED");

		AssertElementNotPresent(
			key_assetTitle = "Article 3",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_PINNED");

		for (var assetTitle : list "Article 1,Article 2,Article 3") {
			AssertElementPresent(
				key_assetTitle = ${assetTitle},
				locator1 = "SearchTuning#RESULT_RANKINGS_RESULT");
		}

		Navigator.openURL();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "Article");

		Refresh();

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Article 3,Article 1,Article 4");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Article 2",
			searchAssetType = "Web Content Article");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "orange");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Article 3",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "Article 1,Article 2,Article 4");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "apple");

		SearchResults.viewNoSearchResults(searchTerm = "apple");

		SearchTuning.openResultRankingsAdmin();

		Click(
			key_query = "Article",
			locator1 = "SearchTuning#RESULT_RANKINGS_INACTIVE_RANKING");

		Check.checkToggleSwitch(locator1 = "SearchTuning#RESULT_RANKINGS_ACTIVE_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "Search queries and aliases with a given scope must be unique across all active rankings. The following ones already exist: Article.");

		Navigator.gotoBack();

		Click(
			key_query = "Article",
			locator1 = "SearchTuning#RESULT_RANKINGS_ACTIVE_RANKING");

		Uncheck.uncheckToggleSwitch(locator1 = "SearchTuning#RESULT_RANKINGS_ACTIVE_TOGGLE_SWITCH");

		Button.clickSave();

		Click(
			key_alias = "apple",
			key_query = "Article",
			locator1 = "SearchTuning#RESULT_RANKINGS_RANKING_WITH_SPECIFIC_ALIAS");

		Check.checkToggleSwitch(locator1 = "SearchTuning#RESULT_RANKINGS_ACTIVE_TOGGLE_SWITCH");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Article");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Article 4,Article 1,Article 2,Article 3");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Article 4",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "Article 1,Article 2,Article 3");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "orange");

		SearchResults.viewNoSearchResults(searchTerm = "orange");
	}

	@priority = 3
	test NavigateToResultRankingsViaUI {
		ApplicationsMenu.gotoPortlet(
			category = "Search Tuning",
			panel = "Applications",
			portlet = "Result Rankings");

		ControlMenu.viewHeaderTitle(headerTitle = "Result Rankings");
	}

	@priority = 3
	test NavigateToSynonymsViaUI {
		ApplicationsMenu.gotoPortlet(
			category = "Search Tuning",
			panel = "Applications",
			portlet = "Synonyms");

		ControlMenu.viewHeaderTitle(headerTitle = "Synonyms");
	}

	@priority = 4
	test PinAndHideResultsWithAliases {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC WC",
			groupName = "Guest",
			title = "WC Title 1");

		JSONWebcontent.addWebContent(
			content = "apple WC",
			groupName = "Guest",
			title = "WC Title 2");

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "WC Title 3");

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "WC Title");

		SearchTuning.pinResult(assetTitle = "WC Title 3");

		SearchTuning.hideResult(assetTitle = "WC Title 2");

		SearchTuning.configureAliases(addAlias = "apple");

		SearchTuning.configureAliases(addAlias = "banana");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		Refresh();

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "WC Title 3,WC Title 1");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "WC Title 2",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title 3",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "WC Title 1,WC Title 2");

		SearchPage.searchEmbedded(searchTerm = "banana");

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title 3",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "WC Title 1,WC Title 2");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "WC Title");

		SearchTuning.configureAliases(deleteAlias = "apple");

		SearchTuning.configureAliases(deleteAlias = "banana");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "WC Title 3,WC Title 1");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "WC Title 2",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title 2",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "WC Title 1,WC Title 3");

		SearchPage.searchEmbedded(searchTerm = "banana");

		SearchResults.viewNoSearchResults(searchTerm = "banana");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "WC Title");

		SearchTuning.unpinResult(assetTitle = "WC Title 3");

		SearchTuning.unhideResult(assetTitle = "WC Title 2");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "WC Title 1,WC Title 2,WC Title 3");
	}

	@priority = 5
	test ReindexingRestoresResultRankingsIndex {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		for (var title : list "Article,Journal") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = "Liferay ${title}");
		}

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Article");

		SearchTuning.pinResult(assetTitle = "Liferay Article");

		Button.clickSave();

		SearchTuning.addResultRanking(searchQuery = "Journal");

		Button.clickSave();

		SearchAdministration.executeReindex();

		SearchTuning.openResultRankingsAdmin();

		for (var title : list "Article,Journal") {
			AssertElementPresent(
				key_query = ${title},
				locator1 = "SearchTuning#RESULT_RANKINGS_ENTRY");
		}

		SearchAdministration.openFieldMappings();

		var companyId = JSONCompany.getCompanyId();

		Click(
			key_navNested = "liferay-${companyId}-search-tuning-rankings",
			locator1 = "NavNested#NAV_NESTED_LINK");

		AssertTextEquals.assertPartialText(
			indexName = "liferay-${companyId}-search-tuning-rankings",
			locator1 = "Search#FIELD_MAPPINGS_EDITOR",
			value1 = "liferay-${companyId}-search-tuning-rankings");
	}

	@priority = 5
	test ReindexingRestoresSynonymsIndex {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SearchTuning.openSynonymsAdmin();

		SearchTuning.addSynonymSet(synonyms = "liferay,company");

		SearchTuning.addSynonymSet(synonyms = "dxp,platform");

		SearchAdministration.executeReindex();

		SearchTuning.openSynonymsAdmin();

		AssertElementPresent(
			key_synonyms = "liferay, company",
			locator1 = "SearchTuning#SYNONYMS_ENTRY");

		AssertElementPresent(
			key_synonyms = "dxp, platform",
			locator1 = "SearchTuning#SYNONYMS_ENTRY");

		SearchAdministration.openFieldMappings();

		var companyId = JSONCompany.getCompanyId();

		Click(
			key_navNested = "liferay-${companyId}-search-tuning-synonyms",
			locator1 = "NavNested#NAV_NESTED_LINK");

		AssertTextEquals.assertPartialText(
			indexName = "liferay-${companyId}-search-tuning-synonyms",
			locator1 = "Search#FIELD_MAPPINGS_EDITOR",
			value1 = "liferay-${companyId}-search-tuning-synonyms");
	}

	@description = "This is a use case for LPS-177665."
	@priority = 4
	test ReindexSearchTuningWithConcurrentExecutionMode {
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a new result ranking") {
			SearchTuning.openResultRankingsAdmin();

			SearchTuning.addResultRanking(searchQuery = "Test Ranking");
		}

		task ("Create a new synonym set") {
			SearchTuning.openSynonymsAdmin();

			SearchTuning.addSynonymSet(synonyms = "Test Synonym Set");
		}

		task ("Perform a concurrent reindex") {
			SearchAdministration.executeReindex(reindexMode = "Concurrent");
		}

		task ("Assert that the result ranking and synonym set is still available after concurrent reindex") {
			SearchTuning.openResultRankingsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Test Ranking");

			SearchTuning.openSynonymsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Test Synonym Set");
		}
	}

	@description = "This is a use case for LPS-184999."
	@priority = 4
	test ReindexSearchTuningWithSyncExecutionMode {
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a new result ranking") {
			SearchTuning.openResultRankingsAdmin();

			SearchTuning.addResultRanking(searchQuery = "Test Ranking");
		}

		task ("Create a new synonym set") {
			SearchTuning.openSynonymsAdmin();

			SearchTuning.addSynonymSet(synonyms = "Test Synonym Set");
		}

		task ("Grab the timestamp values for the result ranking and synonyms set indexed documents before a Sync reindex is executed") {
			var companyId = JSONCompany.getCompanyId();
			var port = Elasticsearch.getServerPort();
			var portalHostname = PropsUtil.get("portal.hostname");

			var rankingsCurl = '''
				http://${portalHostname}:${port}/liferay-${companyId}-search-tuning-rankings/_search?pretty \
					-H 'Content-Type: application/json' \
					-d '{
						"query": {
							"match_all": {
							}
						}
					}'
			''';

			var rankingsPreSyncReindexTimestamp = JSONCurlUtil.get(${rankingsCurl}, "$.hits.hits[0]._source.timestamp");
			var synonymsCurl = '''
				http://${portalHostname}:${port}/liferay-${companyId}-search-tuning-synonyms/_search?pretty \
					-H 'Content-Type: application/json' \
					-d '{
						"query": {
							"match_all": {
							}
						}
					}'
			''';

			var synonymsPreSyncReindexTimestamp = JSONCurlUtil.get(${synonymsCurl}, "$.hits.hits[0]._source.timestamp");
		}

		task ("Begin a full reindex using sync execution mode") {
			SearchAdministration.executeReindex(
				reindexMode = "Sync",
				waitForReindexFinished = "false");
		}

		task ("Assert that the result ranking and synonym set is still available in the UI during the reindex") {
			SearchTuning.openResultRankingsAdmin();

			AssertElementPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			LexiconEntry.viewEntryName(rowEntry = "Test Ranking");

			SearchTuning.openSynonymsAdmin();

			AssertElementPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			LexiconEntry.viewEntryName(rowEntry = "Test Synonym Set");
		}

		task ("After the reindex is complete, assert the timestamp values for both the result ranking and the synonym set are updated in the index") {
			SearchAdministration.openIndexActions();

			WaitForElementNotPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			var rankingsPostSyncReindexTimestamp = JSONCurlUtil.get(${rankingsCurl}, "$.hits.hits[0]._source.timestamp");

			if (${rankingsPreSyncReindexTimestamp} != ${rankingsPostSyncReindexTimestamp}) {
				echo("The timestamp value for the result ranking document has been updated in the index");
			}
			else {
				fail("The timestamp value for the result ranking document has not been updated in the index");
			}

			var synonymsPostSyncReindexTimestamp = JSONCurlUtil.get(${synonymsCurl}, "$.hits.hits[0]._source.timestamp");

			if (${synonymsPreSyncReindexTimestamp} != ${synonymsPostSyncReindexTimestamp}) {
				echo("The timestamp value for the synonym set document has been updated in the index");
			}
			else {
				fail("The timestamp value for the synonym set document has not been updated in the index");
			}
		}

		task ("Reindex the individual Result Rankings index using sync execution mode") {
			SearchAdministration.executeReindex(
				action = "Ranking",
				reindexMode = "Sync",
				waitForReindexFinished = "false");
		}

		task ("Assert that the Result Rankings is still present within Result Rankings") {
			SearchTuning.openResultRankingsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Test Ranking");
		}

		task ("Reindex the individual Synonym Set index using sync execution mode") {
			SearchAdministration.executeReindex(
				action = "Synonym Set",
				reindexMode = "Sync",
				waitForReindexFinished = "false");
		}

		task ("Assert the Synonym set is still present within Synonyms admin") {
			SearchTuning.openSynonymsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Test Synonym Set");
		}
	}

	@priority = 4
	test ReorderAddedResultsFromOtherSites {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Liferay Article");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "Liferay Journal");

		HeadlessSite.addSite(siteName = "New Site");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "New Site",
			title = "New Site Article");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "New Site",
			title = "New Site Journal");

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Article");

		SearchTuning.pinResult(assetTitle = "New Site Article");

		SearchTuning.addResult(
			assetTitle = "Liferay Journal",
			searchTerm = "content");

		SearchTuning.addResult(
			assetTitle = "New Site Journal",
			searchTerm = "journal");

		DragAndDrop.javaScriptDragAndDropToObject(
			key_assetTitle = "New Site Journal",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_DRAG_HANDLE",
			locator2 = "//li[contains(@class,'result-ranking-item-pinned')][3]",
			value1 = "");

		Button.clickSave();

		Navigator.openURL();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "Article");

		Refresh();

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Liferay Journal,New Site Article,New Site Journal,Liferay Article");

		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Article");

		for (var title : list "Liferay Journal,New Site Article,New Site Journal") {
			SearchTuning.unpinResult(assetTitle = ${title});
		}

		Button.clickSave();

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Article");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Liferay Article",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "Liferay Journal,New Site Article,New Site Journal");
	}

	@description = "This is a use case for LPS-126743"
	@priority = 4
	test SearchWithMoreThanTenSynonymSets {
		SearchTuning.openSynonymsAdmin();

		var digit = 1;

		for (var number : list "one,two,three,four,five,six,seven,eight,nine,ten,eleven") {
			SearchTuning.addSynonymSet(synonyms = "${digit},${number}");

			var digit = ${digit} + 1;
		}

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "eleven");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = 11);

		SearchResults.viewSearchResults(
			searchAssetTitle = "eleven",
			searchAssetType = "Web Content Article");
	}

	@priority = 5
	test SearchWithSynonyms {
		property portal.acceptance = "true";

		for (var title : list "banana,red apple,citrus-orange,blue.berry!,\"xigua\"") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = ${title});
		}

		SearchTuning.openSynonymsAdmin();

		SearchTuning.addSynonymSet(synonyms = "banana,red apple,blue.berry!,\"xigua\",fruit,sweet");

		AssertElementPresent(
			key_synonyms = "banana, red apple, blue.berry!, \"xigua\", fruit, sweet",
			locator1 = "SearchTuning#SYNONYMS_ENTRY");

		Navigator.openURL();

		var searchTerms = "banana,red apple,blue.berry!,\"xigua\",fruit,sweet";

		for (var searchTerm : list ${searchTerms}) {
			SearchPage.searchEmbedded(searchTerm = ${searchTerm});

			SearchResults.viewMultipleSearchResults(
				resultsList = "banana,red apple,blue.berry!,\"xigua\"",
				searchTerm = ${searchTerm});
		}

		SearchTuning.openSynonymsAdmin();

		SearchTuning.editSynonymSet(
			addSynonyms = "pear",
			deleteSynonym = "banana",
			synonymSet = "banana, red apple, blue.berry!, \"xigua\", fruit, sweet");

		AssertElementPresent(
			key_synonyms = "red apple, blue.berry!, \"xigua\", fruit, sweet, pear",
			locator1 = "SearchTuning#SYNONYMS_ENTRY");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "banana");

		SearchResults.viewSearchResults(
			searchAssetTitle = "banana",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "pear");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "banana",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResults(
			resultsList = "red apple,blue.berry!,\"xigua\"",
			searchTerm = "pear");

		SearchPage.searchEmbedded(searchTerm = "red apple");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "banana",
			searchAssetType = "Web Content Article");

		SearchResults.viewMultipleSearchResults(
			resultsList = "red apple,blue.berry!,\"xigua\"",
			searchTerm = "red apple");

		SearchTuning.openSynonymsAdmin();

		SearchTuning.addSynonymSet(synonyms = "red apple,citrus-orange");

		AssertElementPresent(
			key_synonyms = "red apple, citrus-orange",
			locator1 = "SearchTuning#SYNONYMS_ENTRY");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "red apple");

		SearchResults.viewMultipleSearchResults(
			resultsList = "red apple,blue.berry!,\"xigua\",citrus-orange",
			searchTerm = "red apple");

		SearchPage.searchEmbedded(searchTerm = "citrus-orange");

		SearchResults.viewMultipleSearchResults(
			resultsList = "red apple,citrus-orange",
			searchTerm = "citrus-orange");

		SearchTuning.openSynonymsAdmin();

		SearchTuning.deleteSynonymSet(synonymSet = "red apple, blue.berry!, \"xigua\", fruit, sweet, pear");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "fruit");

		SearchResults.viewNoSearchResults(searchTerm = "fruit");
	}

	@priority = 3
	test ViewResultRankingsAssetDetails {
		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "banana, red apple, blueberry!",
			threadSubject = "MB Thread Message Subject Apple");

		JSONWebcontent.addWebContent(
			content = "red apple, citrus-orange",
			groupName = "Guest",
			title = "Web Content Article Apple");

		SearchTuning.openResultRankingsAdmin();

		SearchTuning.addResultRanking(searchQuery = "Apple");

		Click(
			key_assetTitle = "MB Thread Message Subject Apple",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_TITLE");

		var assetName = "MB Thread Message Subject Apple";
		var siteName = TestCase.getSiteName(siteName = ${siteName});

		SelectWindow(value1 = "title=${assetName} - ${assetName} - ${siteName}");

		AssertTextEquals(
			locator1 = "ControlMenu#HEADING",
			value1 = ${assetName});

		AssertVisible(
			key_threadBody = "banana, red apple, blueberry!",
			locator1 = "MessageBoardsThread#THREAD_BODY");

		Close.closeAndSelectWindow(value1 = "title=Customize Results - ${siteName}");

		Click(
			key_assetTitle = "Web Content Article Apple",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_TITLE");

		SelectWindow(value1 = "title=Result Rankings - ${siteName}");

		AssertVisible(
			key_assetTitle = "Web Content Article Apple",
			locator1 = "SearchTuning#RESULT_RANKINGS_ASSET_DETAILS_TITLE");

		AssertTextEquals(
			index = 1,
			locator1 = "WCD#WEB_CONTENT_CONTENT",
			value1 = "red apple, citrus-orange");
	}

}