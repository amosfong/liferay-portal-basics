@component-name = "portal-content-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	@priority = 5
	test AddTemplateWithStructure {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavItem(navItem = "Templates");

		WebContentTemplates.viewCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateName = "WC Template Name",
			templateScript = "Text.getData()");
	}

	@description = "This is a use case for LPS-116515. The Add FreeMarker button should be hidden when disable template creation in Dynamic Data Mapping."
	@priority = 5
	test CannotAddTemplateWhenDisableTemplateCreation {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Disable Template Creation") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Dynamic Data Mapping",
				configurationName = "Dynamic Data Mapping Web",
				configurationScope = "System Scope");

			FormFields.disableCheckbox(fieldName = "Enable Template Creation");

			if (IsElementPresent(locator1 = "Button#UPDATE")) {
				PortletEntry.update();
			}
			else if (IsElementPresent(locator1 = "Button#SAVE")) {
				PortletEntry.save();
			}
		}

		task ("Assert Add FreeMarker button doesn't present") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WaitForPageLoad();

			AssertElementNotPresent(locator1 = "Button#PLUS");
		}

		task ("Enable Template Creation") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Dynamic Data Mapping",
				configurationName = "Dynamic Data Mapping Web",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enable Template Creation");

			PortletEntry.update();
		}
	}

	@description = "This is a test for LPS-134063. The template can be copied."
	@priority = 5
	test CopyTemplate {
		property portal.acceptance = "true";

		task ("Add a template for Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateFieldNames = "Content",
				templateName = "WC Template Name");
		}

		task ("Make a copy of new template") {
			WebContentTemplates.copyCP(
				templateCopyName = "WC Template Name (Copy)",
				templateName = "WC Template Name");
		}

		task ("View the copy of template shown in Templates admin") {
			NavItem.viewActive(navItem = "Templates");

			WebContentTemplates.viewCardsEntryCP(templateName = "WC Template Name (Copy)");
		}

		task ("View the original template shown in Templates admin") {
			WebContentTemplates.viewCardsEntryCP(templateName = "WC Template Name");
		}
	}

	@description = "This is a test for LPS-123118. The page creator can map a fragment to web content template with portlet request model."
	@priority = 4
	test MapTemplateWithPortletRequestModelToFragment {
		property custom.properties = "configuration.override.com.liferay.portal.template.freemarker.configuration.FreeMarkerEngineConfiguration_restrictedClasses=[\"org.glassfish.*\",\"org.jboss.*\",\"org.springframework.*\",\"org.wildfly.*\",\"weblogic.*\",]${line.separator}configuration.override.com.liferay.portal.template.freemarker.configuration.FreeMarkerEngineConfiguration_restrictedVariables=[\"httpUtilUnsafe\",\"staticFieldGetter\",\"staticUtil\",\"serviceLocator\",]";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");
		}

		task ("Given a page creator has a web content template with portlet request model") {
			task ("Add a web content template for Basic Web Content structure") {
				WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

				WebContentTemplates.addCP(
					structureName = "Basic Web Content",
					templateDescription = "WC Template Description",
					templateName = "WC Template Name",
					templateScript = "<#assign portletRequestModel = objectUtil(\"com.liferay.portal.kernel.portlet.PortletRequestModel\", request.getAttribute(\"javax.portlet.request\"), request.getAttribute(\"javax.portlet.response\")) />");
			}

			task ("Add a web content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "Web Content Title");
			}

			task ("Add a Paragraph fragment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Content Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Paragraph");
			}
		}

		task ("When the page creator maps the Paragraph fragment to web content template") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "WC Template Name");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page creator should not see an error at edit mode") {
			AssertTextNotPresent(value1 = "An error occurred while processing the template.");
		}

		task ("When the page creator accesses published content page at view mode") {
			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the page creator should not see an error at view mode") {
			AssertTextNotPresent(value1 = "An error occurred while processing the template.");
		}
	}

	@description = "This is a use case for LPS-116515. The user is able to save changes in existing template when disable template creation in Dynamic Data Mapping."
	@priority = 5
	test SaveChangesInExistingTemplateWhenDisableTemplateCreation {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add a template for Basic Web Content Structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateDescription = "WC Template Description",
				templateFieldNames = "Content",
				templateName = "WC Template Name");

			LexiconCard.viewCardTitle(card = "WC Template Name");
		}

		task ("Disable Template Creation") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Dynamic Data Mapping",
				configurationName = "Dynamic Data Mapping Web",
				configurationScope = "System Scope");

			FormFields.disableCheckbox(fieldName = "Enable Template Creation");

			if (IsElementPresent(locator1 = "Button#UPDATE")) {
				PortletEntry.update();
			}
			else if (IsElementPresent(locator1 = "Button#SAVE")) {
				PortletEntry.save();
			}
		}

		task ("Assert can save changes in existing template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.modifyTemplate(
				templateName = "WC Template Name Edit",
				templatePreviousName = "WC Template Name",
				templateScript = "${content.getName()}: ${content.getData()}");

			LexiconCard.viewCardTitle(card = "WC Template Name Edit");
		}

		task ("Enable Template Creation") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Dynamic Data Mapping",
				configurationName = "Dynamic Data Mapping Web",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enable Template Creation");

			PortletEntry.update();
		}
	}

	@description = "This is a test for LPS-125933. Create, read, update and delete a Template based on a Structure with all possible fields."
	@priority = 4
	test ViewAndEditAsWellAsDeleteTemplateWithAllFieldsStructure {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

		WebContentTemplates.addCP(
			templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page",
			templateName = "WC Template Name");

		WebContentTemplates.gotoTemplateEllipsisItem(
			item = "Edit",
			templateName = "WC Template Name");

		PortletEntry.inputName(name = "WC Template Name Edit");

		for (var fieldFieldLabel : list "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation") {
			var key_fieldFieldLabel = ${fieldFieldLabel};
			var fieldReference = StringUtil.replace(${fieldFieldLabel}, " ", "");

			AssertTextEquals.assertPartialText(
				locator1 = "DDMEditTemplate#CODE_MIRROR_EDITOR_CONTENT",
				value1 = "${fieldReference}.getData()");
		}

		AssertTextEquals.assertPartialText(
			locator1 = "DDMEditTemplate#CODE_MIRROR_EDITOR_CONTENT",
			value1 = "LinktoPage.getFriendlyUrl()");

		PortletEntry.save();

		LexiconCard.viewCardTitle(card = "WC Template Name Edit");

		WebContentTemplates.deleteCP(templateName = "WC Template Name Edit");

		LexiconCard.viewCardNotPresent(card = "WC Template Name Edit");
	}

}