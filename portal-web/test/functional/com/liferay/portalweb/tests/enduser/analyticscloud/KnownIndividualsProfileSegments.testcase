@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add 2 new users") {
			for (var n : list "1,2") {
				JSONUser.addUser(
					userEmailAddress = "user${n}@liferay.com",
					userFirstName = "user${n}",
					userLastName = "user${n}",
					userScreenName = "user${n}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "user${n}@liferay.com");
			}
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8993 | Test Summary: Selecting a Segment in Individuals"
	@priority = 3
	test AssertIndividualsSegmentSelected {
		property test.run.type = "single";

		var emailList = "user1@liferay.com";

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View WC",
				documentTitleList = "View Page 1,View Page 2,View Page 3",
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add 2 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = ${segmentName});

				ACSegments.addStaticMember(tableMember = "user1 user1");

				ACSegments.saveSegment();
			}
		}

		task ("Go to the Individual > KnownIndividual > Segments") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "user1 user1");

			ACNavigation.switchTab(tabName = "Segments");
		}

		task ("Assert can select a Segment in Individuals Associated Segments card") {
			ACUtils.searchBar(searchItem = "Test2");

			ACIndividualsDashboard.assertIndividualAttribute(key_individualAttribute = "Static Segment Test2");

			ACNavigation.openItem(itemName = "Static Segment Test2");

			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "user1 user1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8991 | Test Summary: Order an Individual's Associated Segments List"
	@priority = 3
	test OrderIndividualsAssociatedSegments {
		property test.run.type = "single";

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View WC",
				documentTitleList = "1,2,3,4",
				emailList = "user1@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add 3 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = ${segmentName});

				ACSegments.addStaticMember(tableMember = "user1 user1");

				ACSegments.saveSegment();
			}
		}

		task ("Go to the Individual > KnownIndividual > Segments") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "user1 user1");

			ACNavigation.switchTab(tabName = "Segments");
		}

		task ("Go to Segments and filter by "Name"") {
			ACSegments.filterAndOrderForSegLists(
				filterName = "Name",
				key_dropdownName = "Order");
		}

		task ("Assert 3 segments in order filter by Name display") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Static Segment Test1");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Static Segment Test3");
		}

		task ("Check descending arrow descending of table title of Name") {
			ACUtils.orderTableTitleArrow(type = "down");
		}

		task ("Assert 3 segments in order filter by Name display") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Static Segment Test3");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Static Segment Test1");
		}

		task ("Go to Segments and filter by "Date Created"") {
			ACSegments.filterAndOrderForSegLists(
				filterName = "Date Created",
				key_dropdownName = "Order");
		}

		task ("Assert 3 segments in order filter by date created display") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Static Segment Test3");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Static Segment Test1");
		}

		task ("Check descending arrow descending of the Date Created column") {
			ACUtils.orderTableTitleArrow(type = "up");
		}

		task ("Assert 3 segments in order filter by date created display") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Static Segment Test1");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Static Segment Test3");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9003 | Test Summary: Individuals Segment list has pagination"
	@priority = 3
	test PaginateIndividualsSegmentList {
		property test.run.type = "single";

		task ("View the page as the new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");

			ACUtils.navigateToSitePage(
				actionType = "View WC",
				documentTitleList = "1,2,3,4",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add 6 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5,Static Segment Test6") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = ${segmentName});

				ACSegments.addStaticMember(tableMember = "user1 user1");

				ACSegments.saveSegment();
			}
		}

		task ("Go to the Individual > KnownIndividual > Segments") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "user1 user1");

			ACNavigation.switchTab(tabName = "Segments");
		}

		task ("Assert 6 segments display") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5,Static Segment Test6") {
				ACSegments.assertSegmentPresent(segmentName = ${segmentName});
			}
		}

		task ("Assert default pagination display "20 Items" message and page number") {
			AssertTextEquals.assertText(
				locator1 = "ACUtils#PAGINATION_ITEMS_PER_PAGE_SELECT",
				value1 = "20 Items");

			ACUtils.viewResultsMessage(results = "Showing 1 to 6 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = 1);
		}

		task ("Change the pagination to "4"") {
			ACUtils.changePagination(itemsPerPage = 4);

			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4") {
				ACSegments.assertSegmentPresent(segmentName = ${segmentName});
			}

			ACUtils.viewResultsMessage(results = "Showing 1 to 4 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = 1);

			ACUtils.viewResultsPages(pageNumber = 2);
		}

		task ("Page number display 1 2 and check previous next button") {
			ACUtils.checkPreviousNextButton(nextButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 5 to 6 of 6 entries.");

			ACSegments.assertSegmentPresent(segmentName = "Static Segment Test5");

			ACSegments.assertSegmentPresent(segmentName = "Static Segment Test6");

			ACUtils.checkPreviousNextButton(previousButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 1 to 4 of 6 entries.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8948 | Test Summary: Segments the individual Belongs To appear in the list and Clicking an associated segment navigates to segment profile"
	@priority = 5
	test SegmentsIndividualBelongsToAppearInList {
		property test.run.type = "single";

		var emailList = "user1@liferay.com,user2@liferay.com";

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View WC",
				documentTitleList = "1,2,3,4,5",
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add 2 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = ${segmentName});

				if (${segmentName} == "Static Segment Test1") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1,user2 user2");
				}

				if (${segmentName} == "Static Segment Test2") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1");
				}

				ACSegments.saveSegment();
			}
		}

		task ("Go to the Individual > KnownIndividual") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "user1 user1");
		}

		task ("Check if the Associated Segment appears in the overview tab") {
			for (var individualAttribute : list "Static Segment Test1,Static Segment Test2") {
				ACIndividualsDashboard.assertSegmentInAssociatedSegmentsCard(itemName = ${individualAttribute});
			}
		}

		task ("Go to the Segments tab") {
			ACNavigation.switchTab(tabName = "Segments");
		}

		task ("Assert segments the individual Belongs To appear in the list") {
			for (var individualAttribute : list "Static Segment Test1,Static Segment Test2") {
				ACIndividualsDashboard.assertIndividualAttribute(key_individualAttribute = ${individualAttribute});
			}
		}

		task ("Go to the Individual > KnownIndividual") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "user2 user2");
		}

		task ("Check if the Associated Segment appears in the overview tab") {
			ACIndividualsDashboard.assertSegmentInAssociatedSegmentsCard(itemName = "Static Segment Test1");
		}

		task ("Go to the Segments tab") {
			ACNavigation.switchTab(tabName = "Segments");
		}

		task ("Assert segments the individual Belongs To appear in the list") {
			ACIndividualsDashboard.assertIndividualAttribute(key_individualAttribute = "Static Segment Test1");

			ACIndividualsDashboard.assertNoIndividualAttribute(key_individualAttribute = "Static Segment Test2");
		}

		task ("Check that clicking an associated segment in Associated Segment card list navigates to segment profile") {
			ACNavigation.openItem(itemName = "Static Segment Test1");

			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "user1 user1,user2 user2");
		}
	}

}