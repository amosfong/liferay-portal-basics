@component-name = "portal-content-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.liferay.virtual.instance = "false";
	property test.run.type = "single";
	property testray.main.component.name = "Comment";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			PagesAdmin.tearDownCP();

			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This ensures that the comment of an asset can be subscribed automatically when the setting is true."
	@priority = 4
	test CanConfigureDiscussionSubscribeAtInstanceLevel {
		Comments.openToCommentsConfiguration();

		Comments.configureCommentSubscribe(commentSubscribe = "false");

		Comments.openToCommentsConfiguration(configurationScope = "Instance Settings");

		Comments.configureCommentSubscribe(commentSubscribe = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "This is a comment");

		AssertVisible(locator1 = "Button#UNSUBSCRIBE");
	}

	@description = "This ensures that the comment of an asset will not be subscribed automatically when the setting is false."
	@priority = 4
	test CanConfigureDiscussionSubscribeAtSystemLevel {
		Comments.openToCommentsConfiguration();

		Comments.configureCommentSubscribe(commentSubscribe = "false");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			siteURLKey = "guest");

		Comments.addPG(entryComment = "This is a comment");

		AssertVisible(locator1 = "Button#SUBSCRIBE");
	}

	@description = "This ensures that users without permissions can delete his own comments when the “Always editable by owner” is enabled."
	@priority = 5
	test CanDeleteCommentWhenEnablingEditableByOwner {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Comments.openToCommentsConfiguration(configurationScope = "Instance Settings");

		Comments.configureCommentEditable(commentEditable = "true");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = 1,
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_1.jpg");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "Document_1.jpg");

		SetWindowSize.maximizeWindow();

		Comments.addPG(entryComment = "This is a comment");

		Comments.delete(entryComment = "This is a comment");
	}

	@description = "This ensures that users without permissions can edit his own comments when the “Always editable by owner” is enabled."
	@priority = 5
	test CanEditCommentWhenEnablingEditableByOwner {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Comments.openToCommentsConfiguration();

		Comments.configureCommentEditable(commentEditable = "true");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = 1,
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_1.jpg");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "Document_1.jpg");

		SetWindowSize.maximizeWindow();

		Comments.addPG(entryComment = "This is a comment");

		Comments.edit(
			entryComment = "This is a comment",
			entryCommentEdit = "This is a new comment");
	}

	@description = "This ensures that users without permissions can not delete his own comments when the “Always editable by owner” is disabled."
	@priority = 5
	test CannotEditCommentWhenEditableByOwnerIsDisabled {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Comments.openToCommentsConfiguration();

		Comments.configureCommentEditable(commentEditable = "true");

		Comments.openToCommentsConfiguration(configurationScope = "Instance Settings");

		Comments.configureCommentEditable(commentEditable = "false");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = 1,
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_1.jpg");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "Document_1.jpg");

		Comments.addPG(entryComment = "This is a comment");

		MouseOver(
			key_entryComment = "This is a comment",
			locator1 = "Comments#COMMENT_BODY_SPECIFIC");

		AssertElementNotPresent(locator1 = "Comments#COMMENT_ACTIONS");
	}

	@description = "This ensures that users without permissions can not edit/delete other people's comments when the “Always editable by owner” is enabled."
	@priority = 3
	test CannotEditOtherUsersCommentWhenEditableByOwnerIsEnabled {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Comments.openToCommentsConfiguration(configurationScope = "Instance Settings");

		Comments.configureCommentEditable(commentEditable = "true");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "Userfn",
			userLastName = "Userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = 1,
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_1.jpg");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "Document_1.jpg");

		Comments.addPG(entryComment = "This is a comment");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "Document_1.jpg");

		MouseOver(
			key_entryComment = "This is a comment",
			locator1 = "Comments#COMMENT_BODY_SPECIFIC");

		AssertElementNotPresent(locator1 = "Comments#COMMENT_ACTIONS");
	}

	@description = "This ensures that changing the comments configuraton in one instance does not affect the value in another instance."
	@priority = 4
	test InstanceLevelConfigurationsAreIndependentFromOneAnother {
		HeadlessPortalInstanceAPI.addPortalInstance(
			domain = "www.able.com",
			portalInstanceId = "www.able.com",
			virtualHost = "www.able.com");

		Comments.openToCommentsConfiguration(configurationScope = "Instance Settings");

		Comments.configureCommentSubscribe(commentSubscribe = "false");

		Comments.configureCommentEditable(commentEditable = "true");

		User.firstLoginUI(
			password = PropsUtil.get("default.admin.password"),
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		JSONUser.addUser(
			creatorEmailAddress = "test@www.able.com",
			creatorPassword = PropsUtil.get("default.admin.password"),
			portalInstanceName = "www.able.com",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "userea@www.able.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin(baseURL = "http://www.able.com:8080");

		UserNavigator.gotoUser(userScreenName = "usersn");

		User.editPassword(newPassword = PropsUtil.get("default.admin.password"));

		Navigator.openURL(baseURL = "http://www.able.com:8080");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "Test Page",
			sitePageType = "Widget Page");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page",
			url = "http://www.able.com:8080");

		Portlet.addPG(portletName = "Documents and Media");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://www.able.com:8080",
			siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		User.logoutPG(specificURL = "http://www.able.com:8080");

		User.firstLoginUI(
			password = PropsUtil.get("default.admin.password"),
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "userea@www.able.com");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page",
			url = "http://www.able.com:8080");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "DM Document Title");

		Comments.addPG(entryComment = "This is a comment");

		AssertVisible(locator1 = "Button#UNSUBSCRIBE");

		MouseOver(
			key_entryComment = "This is a comment",
			locator1 = "Comments#COMMENT_BODY_SPECIFIC");

		AssertElementNotPresent(locator1 = "Comments#COMMENT_ACTIONS");
	}

}