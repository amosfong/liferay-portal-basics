@component-name = "portal-questions"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Questions";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Questions Page");

		JSONLayout.addWidgetToPublicLayout(
			column = 2,
			groupName = "Guest",
			layoutName = "Questions Page",
			widgetName = "Questions");
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Message Boards");

			if (IsElementPresent(locator1 = "Questions#QUESTIONS_LIST")) {
				Questions.tearDown();
			}

			PagesAdmin.tearDownCP();
		}
	}

	@description = "LPS-110392 - Verify if the user can create a question with an image from a connected Depot."
	@priority = 4
	@refactordone
	test CanAddQuestionWithDepotImage {
		task ("Given a connected depot with an image") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "Test Depot Name");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_2.jpeg",
				groupName = "Test Depot Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpeg");

			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "Guest");
		}

		task ("and a Message Boards Category is added") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("When a Question is created with an image from the connected Depot") {
			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Body AddQuestionWithTheALImage",
				depotName = "Test Depot Name",
				imageFileName = "Document_2.jpeg",
				layoutName = "questions-page",
				siteURLKey = "guest",
				titleField = "Title AddQuestionWithTheALImage",
				topicName = "questions-test-category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestionWithTheALImage");
		}

		task ("Then the image from the Depot should be displayed.") {
			Questions.viewImageInQuestion(imageFileName = "document_2-jpeg");
		}
	}

	@description = "LPS-110392 - Verify if the user can create a question with an image from the DM Library."
	@priority = 5
	@refactordone
	@uitest
	test CanAddQuestionWithImage {
		property portal.acceptance = "true";

		task ("Given an image exists in Document Library and a category is available") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_1.svg",
				groupName = "Guest",
				mimeType = "image/svg+xml",
				sourceFileName = "Document_1.svg");

			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");
		}

		task ("When a Question is created with an image from Document Library") {
			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Body AddQuestionWithTheImage",
				imageFileName = "Document_1.svg",
				titleField = "Title AddQuestionWithTheImage");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestionWithTheImage");
		}

		task ("Then the image from Document Library should be displayed") {
			Questions.viewImageInQuestion(imageFileName = "document_1-svg");
		}
	}

	@description = "LPS-113665 - Validate if the user can view the topic selector and category label."
	@priority = 4
	@refactordone
	test CanAddSubcategoryConfigureParentCategoryDisplay {
		task ("Given that the user creates a category and opens a question thread") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Question Body 1",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Question 1");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			AssertElementNotPresent(
				key_categoryItem = "Questions Test Category",
				locator1 = "Questions#QUESTIONS_CATEGORY_LABEL_ITEM");
		}

		task ("And he doesn't see the topic selector or category label") {
			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question 1");

			AssertElementNotPresent(
				key_categoryItem = "Questions Test Category",
				locator1 = "Questions#QUESTIONS_CATEGORY_LABEL_ITEM");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Click(locator1 = "Questions#ASK_QUESTION_BUTTON");

			AssertElementNotPresent(locator1 = "Questions#QUESTIONS_SELECT_TOPIC");
		}

		task ("When go to the tab activity, he should see the topic selector") {
			Questions.gotoTab(questionTabField = "Activity");

			AssertVisible(
				key_categoryItem = "Questions Test Category",
				locator1 = "Questions#QUESTIONS_CATEGORY_LABEL_BADGE");

			var parentCategoryId = JSONMBMessage.getCategoryIdByName(
				categoryName = "Questions Test Category",
				groupName = "Guest");

			JSONMBMessage.addCategory(
				categoryDescription = "MB Subcategory Description",
				categoryName = "Questions Test Subcategory",
				groupName = "Guest",
				parentCategoryId = ${parentCategoryId},
				userEmailAddress = "test@liferay.com");

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			AssertVisible(
				key_categoryItem = "Questions Test Category",
				locator1 = "Questions#QUESTIONS_CATEGORY_LABEL_ITEM");
		}

		task ("And the question details and question topics page see the topic selector") {
			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question 1");

			AssertVisible(
				key_categoryItem = "Questions Test Category",
				locator1 = "Questions#QUESTIONS_CATEGORY_LABEL_ITEM");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Click(locator1 = "Questions#ASK_QUESTION_BUTTON");

			AssertVisible(locator1 = "Questions#QUESTIONS_SELECT_TOPIC");
		}

		task ("Then go to the tab activity, he should see the Category Label") {
			Questions.gotoTab(questionTabField = "Activity");

			AssertVisible(
				key_categoryItem = "Questions Test Category",
				locator1 = "Questions#QUESTIONS_CATEGORY_LABEL_ITEM");
		}
	}

	@description = "LPS-116516 - Validate if the user can add a subtopic using the widget from other subtopics."
	@priority = 4
	@refactordone
	@uitest
	test CanAddSubTopicsViaWidget {
		task ("Given a category is created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("And the user creates a subtopic") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.addSubTopic(
				subTopicDescription = "SubTopicA Description",
				subTopicName = "SubTopicA");
		}

		task ("When the user creates a subtopic B from the subtopic A") {
			Questions.changeTopic(
				parentTopicName = "Questions Test Category",
				subTopicName = "SubTopicA");

			Questions.addSubTopic(
				subTopicDescription = "SubTopicB Description",
				subTopicName = "SubTopicB");
		}

		task ("Then the user can navigate from the topics he created") {
			Questions.changeTopic(
				gotoParentTopic = "Questions Test Category",
				multipleSubTopics = "true");

			Questions.changeTopic(
				parentTopicName = "Questions Test Category",
				subTopicName = "SubTopicA");

			Questions.changeTopic(
				parentTopicName = "SubTopicA",
				subTopicName = "SubTopicB");
		}
	}

	@description = "LPS-125783 - Validate if the user can cancel the deletions."
	@priority = 4
	@refactordone
	test CanCancelDeletions {
		task ("Given there is a question with answers and comments created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.answerQuestion(contentField = "This is my answer");

			Questions.replyToComment(commentReply = "This is my reply");
		}

		task ("When the user goes to delete then he can see that is possible cancel the deletions") {
			Questions.deleteComment(
				cancel = "true",
				commentReply = "This is my reply");

			Questions.deleteAnswer(
				cancel = "true",
				contentField = "This is my answer");

			Questions.deleteQuestion(
				cancel = "true",
				questionTitle = "Title AddQuestion");
		}
	}

	@description = "LPS-116845 - Validate if the user can setup the landing page topic navigation for the widget."
	@priority = 4
	@refactordone
	test CanConfigureLandingPageTopicNavigation {
		property portal.release = "quarantine";

		task ("Given there is a caregory created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category1",
				userEmailAddress = "test@liferay.com");
		}

		task ("And disable landing page topic navigation") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.configureLandingPageTopicNavigation(toggleValue = "disable");

			Navigator.gotoPage(pageName = "Questions Page");

			AssertElementNotPresent(
				key_card = "Questions Test Category1",
				locator1 = "Card#CARD_TITLE");

			Questions.viewHomeTopicsList(topicsName = "Questions Test Category1");
		}

		task ("When the user add subtopics and a question") {
			Questions.addSubTopic(
				subTopicDescription = "Description",
				subTopicName = "Questions Test Category2");

			Questions.viewHomeTopicsList(topicsName = "Questions Test Category1,Questions Test Category2");

			Questions.addSubTopic(
				subTopicDescription = "Description",
				subTopicName = "Questions Test SubCategory2");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category1",
				groupName = "Guest",
				titleField = "Title AddQuestion");
		}

		task ("And enable landing page topic navigation") {
			Questions.configureLandingPageTopicNavigation(toggleValue = "enable");

			Navigator.gotoPage(pageName = "Questions Page");

			for (var topicName : list "Questions Test Category1,Questions Test Category2") {
				AssertElementPresent(
					key_card = ${topicName},
					locator1 = "Card#CARD_TITLE");
			}
		}

		task ("Then the he can navigate through the topics") {
			Questions.gotoCategory(categoryName = "Questions Test Category1");

			AssertVisible(
				key_questionTitle = "Title AddQuestion",
				locator1 = "Questions#QUESTIONS_TITLE");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category2");

			Questions.changeTopic(
				parentTopicName = "Questions Test Category2",
				subTopicName = "Questions Test SubCategory2");
		}
	}

	@description = "LPS-116844 - Validate if the user can setup the root topic for the widget."
	@priority = 4
	@refactordone
	test CanConfigureRootTopic {
		property portal.release = "quarantine";

		task ("Given there is a created categoies") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			var parentCategoryId = JSONMBMessage.getCategoryIdByName(
				categoryName = "Questions Test Category",
				groupName = "Guest");

			JSONMBMessage.addCategory(
				categoryDescription = "Subcategory Description",
				categoryName = "Questions Test SubCategory",
				groupName = "Guest",
				parentCategoryId = ${parentCategoryId},
				userEmailAddress = "test@liferay.com");
		}

		task ("When the user configure the root topic") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.configureRootTopic(categoryName = "Questions Test Category");
		}

		task ("Then he can not see the categories anymore") {
			Navigator.gotoPage(pageName = "Questions Page");

			AssertElementNotPresent(
				key_card = "Questions Test Category",
				locator1 = "Card#CARD_TITLE");

			AssertElementPresent(
				key_card = "Questions Test SubCategory",
				locator1 = "Card#CARD_TITLE");
		}

		task ("When the user configure again") {
			Questions.configureRootTopic(
				parentCategoryName = "Questions Test Category",
				subCategoryName = "Questions Test SubCategory");
		}

		task ("Then he can not see the categories") {
			Navigator.gotoPage(pageName = "Questions Page");

			for (var topicName : list "Questions Test Category,Questions Test SubCategory") {
				AssertElementNotPresent(
					key_card = ${topicName},
					locator1 = "Card#CARD_TITLE");
			}
		}

		task ("When the user creates a category again") {
			var parentCategoryId = JSONMBMessage.getCategoryIdByName(
				categoryName = "Questions Test SubCategory",
				groupName = "Guest");

			JSONMBMessage.addCategory(
				categoryDescription = "Subcategory Description",
				categoryName = "New Questions Test SubCategory",
				groupName = "Guest",
				parentCategoryId = ${parentCategoryId},
				userEmailAddress = "test@liferay.com");
		}

		task ("And remove the the root topic from the configuration") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.removeRootTopicConfiguration();
		}

		task ("Then he can navigate through the subcatergories,") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.changeTopic(
				parentTopicName = "Questions Test Category",
				subTopicName = "Questions Test SubCategory");

			Questions.changeTopic(
				parentTopicName = "Questions Test SubCategory",
				subTopicName = "New Questions Test SubCategory");
		}
	}

	@description = "LPS-125783 - Validate if the user can delete an answer to a question."
	@priority = 4
	@refactordone
	test CanDeleteAnswer {
		task ("Given that there is a question with a answer created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "This is my answer",
				threadSubject = "Title AddQuestion",
				titleField = "Title AddQuestion");
		}

		task ("When the user goes to question page") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("Then he can delete an answer") {
			Questions.deleteAnswer(contentField = "This is my answer");
		}
	}

	@description = "LPS-122830 - Validate if the user can delete a comment to an answer."
	@priority = 4
	@refactordone
	test CanDeleteComment {
		property solutions.acceptance = "true";

		task ("Given that there is a question with a answer created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "This is my answer",
				threadSubject = "Title AddQuestion",
				titleField = "Title AddQuestion");
		}

		task ("And the user creates a comment") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.replyToComment(commentReply = "This is my reply");
		}

		task ("When the user deletes the comment then he can see that the coment was deleted") {
			Questions.deleteComment(commentReply = "This is my reply");
		}
	}

	@description = "LPS-125783 - Validate if the user can delete a question with an answer."
	@priority = 4
	@refactordone
	test CanDeleteQuestionWithAnAnswer {
		task ("Given that there is a question with a answer created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "This is my answer",
				threadSubject = "Title AddQuestion",
				titleField = "Title AddQuestion");
		}

		task ("When the user goes to question page") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("Then he can delete an answer") {
			Questions.deleteQuestion(questionTitle = "Title AddQuestion");
		}
	}

	@description = "LPS-137639 - Validate if the user can delete a thread through Activity, it also covers LPS-137639."
	@priority = 4
	test CanDeleteThreadThroughMyActivity {
		task ("Given there is a message created") {
			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject");
		}

		task ("When the user goes to Activity tab") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoTab(questionTabField = "Activity");
		}

		task ("Then the user can deletes the question") {
			Questions.gotoDetails(questionTitle = "MB Thread Message Subject");

			Questions.deleteQuestion(
				deleteInActivity = "true",
				questionTitle = "MB Thread Message Subject");
		}
	}

	@description = "LPS-128698 - Validate if the user can delete a topic, it also covers LPS-128699."
	@priority = 5
	@refactordone
	test CanDeleteTopic {
		task ("Given there is a category created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("When the user deletes a category") {
			JSONMBMessage.deleteCategory(
				categoryName = "Questions Test Category",
				groupName = "Guest");
		}

		task ("Then he can see that the category was deleted") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.viewDefault();
		}
	}

	@description = "LPS-128698 - Validate if the user can edit an answer to a question."
	@priority = 5
	@refactordone
	test CanEditAnswer {
		task ("Given that there are a question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");
		}

		task ("And the user create an answer") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.answerQuestion(contentField = "This is my answer");
		}

		task ("When the user try to edit an answer then he can see that his answer was edited") {
			Questions.editAnswer(contentField = "This is my edited answer");
		}
	}

	@description = "LPS-121205 - Validate if the user can lock and unlock a question through the MB."
	@priority = 4
	@refactordone
	test CanLockAndUnlockThroughMB {
		task ("Given there is a question and a answer created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Content1",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Question1");

			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "This is my answer",
				threadSubject = "Question1",
				titleField = "Question1");
		}

		task ("When the user locks a question through the message board") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question1");

			AssertVisible(
				key_answerBodyContent = "This is my answer",
				locator1 = "Questions#ANSWER_BODY");

			MessageboardsCategory.openToCategory(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				siteURLKey = "guest");

			LexiconEntry.openEntryMenu(rowEntry = "Question1");

			MenuItem.click(menuItem = "Lock");
		}

		task ("Then he can see that the question was locked") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			AssertElementPresent(
				key_questionTitle = "Question1",
				locator1 = "Questions#QUESTIONS_LIST_LOCKED_ICON");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question1");

			AssertVisible(
				key_answerBodyContent = "This is my answer",
				locator1 = "Questions#ANSWER_BODY");

			Questions.viewLockedQuestion(
				lockedStatus = "true",
				questionTitle = "Question1");
		}

		task ("When the user unlock a question through message board") {
			MessageboardsCategory.openToCategory(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				siteURLKey = "guest");

			LexiconEntry.openEntryMenu(rowEntry = "Question1");

			MenuItem.click(menuItem = "Unlock");
		}

		task ("Then he can see that the questions is unlocked") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			AssertElementNotPresent(
				key_questionTitle = "Question1",
				locator1 = "Questions#QUESTIONS_LIST_LOCKED_ICON");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question1");

			Questions.viewUnlockedQuestion(questionTitle = "Question1");
		}

		task ("And he can answer the question") {
			Questions.answerQuestion(contentField = "This is my answer2");
		}
	}

	@description = "LPS-122830 - Validate if the user can add a comment to an answer, it also covers that the published dates for responses can be shown."
	@priority = 4
	@refactordone
	test CanReplyToAnAnswer {
		task ("Given that there are a question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");
		}

		task ("When the user creates an answer") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.answerQuestion(
				answeredLabel = "true",
				contentField = "This is my answer text.");
		}

		task ("Then the user can creates a comment on the answer") {
			Questions.replyToComment(
				commentReply = "This is my reply text.",
				repliedLabel = "true");
		}
	}

	@description = "LPS-131941 - Validate if a user can view question details after restoring history router to default setting."
	@priority = 3
	test CanRestoreHistoryRouterToDefaultSetting {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the router configuration is set") {
			Questions.openToConfigInSystemSettings(portlet = "Questions");

			SystemSettings.editTextAreaSetting(
				settingName = "Set Base Path for History Router",
				settingValue = "/questions-page");

			SystemSettings.saveConfiguration();
		}

		task ("When the user restore the configuration") {
			SystemSettings.editTextAreaSetting(
				settingName = "Set Base Path for History Router",
				settingValue = " ");

			SystemSettings.saveConfiguration();
		}

		task ("And creates a category and a question") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");
		}

		task ("Then he can see question details") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestion");

			Questions.viewDetailsTitle(questionTitle = "Title AddQuestion");
		}
	}

	@description = "LPS-112029 - Validate if the user can search for the questions."
	@priority = 4
	@refactordone
	test CanSearchForQuestions {
		task ("Given there is a category with some questions created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestionWithTag(
				bodyField = "Content1",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				tagField = "new",
				titleField = "Question1");

			for (var num : list "2,3,4") {
				JSONQuestions.addQuestion(
					bodyField = "Content${num}",
					categoryName = "Questions Test Category",
					groupName = "Guest",
					titleField = "Question${num}");
			}

			JSONQuestions.addQuestion(
				bodyField = "Quesions Body 5",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Questions Title 5");
		}

		task ("When the user search for 'questions title 5'") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.search(
				resultsInfo = '''1 Result for "questions title 5"''',
				searchKey = "Questions Title 5");
		}

		task ("Then he can see that only 'questions title 5' is being showed") {
			Questions.viewSearchResults(questionsList = "Questions Title 5");

			Questions.viewNoSearchResults(questionsList = "Question1,Question2,Question3,Question4");
		}

		task ("When the user search for 'Test'") {
			Questions.search(
				resultsInfo = '''5 Results for "test"''',
				searchKey = "Test");
		}

		task ("Then he can see all questios created by Test user") {
			Questions.viewSearchResults(questionsList = "Question1,Question2,Question3,Question4");
		}

		task ("When the user search for 'Question4'") {
			Questions.search(
				resultsInfo = '''1 Result for "question4"''',
				searchKey = "Question4");
		}

		task ("Then he can see that only 'Question4' is being showed") {
			Questions.viewSearchResults(questionsList = "Question4");

			Questions.viewNoSearchResults(questionsList = "Question1,Question2,Question3");
		}

		task ("When the user search for a especific content'Content2'") {
			Questions.search(
				resultsInfo = '''1 Result for "content2"''',
				searchKey = "Content2");
		}

		task ("Then he can see that only the question with this specific content is being showed") {
			Questions.viewSearchResults(questionsList = "Question2");

			Questions.viewNoSearchResults(questionsList = "Question1,Question3,Question4");
		}

		task ("When the user search for a tag:'new'") {
			Questions.search(
				resultsInfo = '''1 Result for "new"''',
				searchKey = "New");
		}

		task ("hen he can see that only the question with this specific tag is being showed") {
			Questions.viewSearchResults(questionsList = "Question1");

			Questions.viewNoSearchResults(questionsList = "Question2,Question3,Question4,Questions Title 5");
		}

		task ("When the search for question that is not exists then he can see 'There are no results' message") {
			Questions.search(
				noQuestionsResults = "true",
				searchKey = "Questions5");
		}

		task ("When the user clear search results") {
			Questions.clearSearchResults();
		}

		task ("Then all the questions are showed") {
			for (var num : list "1,2,3,4") {
				AssertVisible(
					key_questionTitle = "Question${num}",
					locator1 = "Questions#QUESTIONS_TITLE");
			}

			AssertVisible(
				key_questionTitle = "Questions Title 5",
				locator1 = "Questions#QUESTIONS_TITLE");
		}
	}

	@description = "LPS-113166 - Validate if the user can subscribe and unsubscribe from the question."
	@priority = 5
	@refactordone
	test CanSubscribeAndUnsubscribeFromQuestion {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given there is a user, a category and a question created") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");

			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");
		}

		task ("When the user subscribes on a question") {
			Questions.gotoTab(questionTabField = "Subscriptions");

			Questions.viewSubscribedQuestion(noSubscribedQuestion = "true");

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Content AddQuestion",
				titleField = "Title AddQuestion",
				topicName = "questions-test-category");
		}

		task ("Then he can see that he was subscribed on 'Subscriptions' page") {
			Questions.gotoDetails(questionTitle = "Title AddQuestion");

			Questions.gotoTab(questionTabField = "Subscriptions");

			Questions.viewSubscribedQuestion(subscribedQuestion = "Title AddQuestion");
		}

		task ("When the user unsubscribes on a question") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.gotoDetails(questionTitle = "Title AddQuestion");

			Questions.unsubscribeFromQuestion(questionTitle = "Title AddQuestion");
		}

		task ("Then he ca see that he was unsubscribes on 'Subscriptions' page") {
			Questions.gotoTab(questionTabField = "Subscriptions");

			Questions.viewSubscribedQuestion(noSubscribedQuestion = "true");
		}

		task ("When another user asnwer a question that the Test user is subscribed") {
			Questions.gotoTab(questionTabField = "Questions");

			Questions.subscribeQuestion();

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.gotoDetails(questionTitle = "Title AddQuestion");

			Questions.answerQuestion(contentField = "This is my answer");
		}

		task ("Then the Test user will receive a notification and can see the answer") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Notifications.gotoNotifications();

			Notifications.navigateToContent(contentBody = "Title AddQuestion");

			AssertVisible(
				key_answerBodyContent = "This is my answer",
				locator1 = "Questions#ANSWER_BODY");
		}
	}

	@description = "LPS-113166 - Validate if the user can subscribe and unsubscribe from the topic."
	@priority = 5
	@refactordone
	test CanSubscribeAndUnsubscribeFromTopic {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given there is a created user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");

			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("And the user test is not subscribed on topic") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.gotoTab(questionTabField = "Subscriptions");

			Questions.viewSubscribedTopic(noSubscribedTopic = "true");
		}

		task ("When the user subscribes on topic") {
			Questions.gotoTab(questionTabField = "Questions");

			Questions.subscribeTopic();

			Questions.gotoTab(questionTabField = "Subscriptions");

			Questions.viewSubscribedTopic(subscribedTopic = "Questions Test Category");
		}

		task ("Then the user can unsubscribes on topic") {
			Questions.unsubscribeFromTopic(topicName = "Questions Test Category");

			Questions.viewSubscribedTopic(noSubscribedTopic = "true");
		}

		task ("When the user is subscibes on topic") {
			Questions.gotoTab(questionTabField = "Questions");

			Questions.subscribeTopic();
		}

		task ("And another user ask a question") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Content AddQuestion",
				layoutName = "questions-page",
				siteURLKey = "guest",
				titleField = "Title AddQuestion",
				topicName = "questions-test-category");
		}

		task ("Then the user test is notificated and can see the questions created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Notifications.gotoNotifications();

			Notifications.navigateToContent(contentBody = "Title AddQuestion");

			Questions.viewDetailsTitle(questionTitle = "Title AddQuestion");
		}
	}

	@description = "LPS-133798 - Validate if the guest can check the canonical URL, also covers LPS-137636."
	@priority = 4
	test CanViewCanonicalURL {
		property portal.release = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var portalURL = PropsUtil.get("portal.url");

		task ("Given there is a category and a question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Category",
				groupName = "Guest",
				titleField = "Question");
		}

		task ("When the user set the configuration and enable anonoymius read") {
			Questions.openToConfigInSystemSettings(portlet = "Questions");

			SystemSettings.editTextAreaSetting(
				settingName = "Set Base Path for History Router",
				settingValue = "/questions-page");

			SystemSettings.saveConfiguration();

			Questions.enableAnonymousRead();
		}

		task ("Then a anonymous user can go to question page and se a question detail") {
			User.logoutPG();

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question");

			Questions.assertCanonicalURL(
				category = "category",
				pageName = "questions-page",
				portalURL = ${portalURL},
				title = "question");
		}
	}

	@description = "LPS-133798 - Validate if the guest can check the canonical URL for duplicated questions."
	@priority = 4
	test CanViewCanonicalURLForDuplicatedQuestions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var portalURL = PropsUtil.get("portal.url");

		task ("Given that the configuration is set and anonymous read is anable") {
			Questions.openToConfigInSystemSettings(portlet = "Questions");

			SystemSettings.editTextAreaSetting(
				settingName = "Set Base Path for History Router",
				settingValue = "/questions-page");

			SystemSettings.saveConfiguration();

			Questions.enableAnonymousRead();
		}

		task ("And there are duplicated questions") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Category",
				groupName = "Guest",
				titleField = "Question");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion Text",
				categoryName = "Category",
				groupName = "Guest",
				titleField = "Question");
		}

		task ("When an anonymous goes to the fist question's detail page") {
			User.logoutPG();

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Category");

			Questions.gotoDetails(
				duplicatedQuestions = "true",
				questionTabField = "Questions",
				questionTitle = "Question");
		}

		task ("Then a he can see the question title on url as 'question'") {
			Questions.assertCanonicalURL(
				category = "category",
				pageName = "Questions Page",
				portalURL = ${portalURL},
				title = "question");
		}

		task ("When an anonymous user goes to the most recently created question's detail page") {
			Navigator.openSpecificURL(url = "${portalURL}/web/guest/questions-page/questions/category/question-1");
		}

		task ("Then a he can see the question title on url as 'question-1'") {
			Questions.assertCanonicalURL(
				category = "category",
				pageName = "Questions Page",
				portalURL = ${portalURL},
				title = "question-1");
		}
	}

	@description = "LPS-133798 - Validate if the guest can check the canonical URL with special characters."
	@priority = 3
	test CanViewCanonicalURLWithSpecialCharacters {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var portalURL = PropsUtil.get("portal.url");

		task ("Given that the configuration is set and anonymous read is anable") {
			Questions.openToConfigInSystemSettings(portlet = "Questions");

			SystemSettings.editTextAreaSetting(
				settingName = "Set Base Path for History Router",
				settingValue = "/questions-page");

			SystemSettings.saveConfiguration();

			Questions.enableAnonymousRead();
		}

		task ("And there are a category and a question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Category",
				groupName = "Guest",
				titleField = "Question@#");
		}

		task ("When an anonymous goes to the question detail page") {
			User.logoutPG();

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question@#");
		}

		task ("Then he can see the URL with especial characters.") {
			Questions.assertCanonicalURL(
				category = "category",
				pageName = "Questions Page",
				portalURL = ${portalURL},
				title = "question-");
		}
	}

	@description = "LPS-116841 - Validate if the user can view the select filter and search field after adding a question."
	@priority = 4
	test CanViewFilterAndSearchFieldAfterAddingQuestion {
		task ("Given there is a category created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("When the user creates a question") {
			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestionWithTheTestBody",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("Then he can see the select filter and search field") {
			Questions.viewSearchField();

			Questions.viewSelectFilter();
		}
	}

	@description = "LPS-122831 - Validate if the user can view the activity default after delete all the responses."
	@priority = 4
	@refactordone
	test CanViewMyActivityDeletions {
		task ("Given there is a question created with an answer and a comment") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestionText",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "This is my answer",
				threadSubject = "Title AddQuestion",
				titleField = "Title AddQuestion");

			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.replyToComment(commentReply = "Body AddCommentText");
		}

		task ("When the user deletes the comment") {
			Questions.deleteComment(commentReply = "Body AddCommentText");
		}

		task ("Then he can see that the comment was deleted on Activity tab") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoTab(questionTabField = "Activity");

			AssertElementNotPresent(
				key_articleBodyContent = "Body AddCommentText",
				locator1 = "Questions#QUESTIONS_ARTICLE_BODY");
		}

		task ("When the user deletes the answer") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.deleteAnswer(
				contentField = "Body AddAnswerText",
				questionTitle = "Title AddQuestion");
		}

		task ("Then he can see that the answer was deleted on Activity tab") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoTab(questionTabField = "Activity");

			AssertElementNotPresent(
				key_articleBodyContent = "Body AddAnswerText",
				locator1 = "Questions#QUESTIONS_ARTICLE_BODY");
		}

		task ("When the user deletes the question") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.deleteQuestion(questionTitle = "Title AddQuestion");
		}

		task ("Then he can see that the question was deleted on Activity tab") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoTab(questionTabField = "Activity");

			Questions.viewMyActivityDefault();
		}
	}

	@description = "LPS-122831 - Validate if the user can view the edited responses from activity."
	@priority = 4
	@refactordone
	test CanViewMyActivityEditedResponses {
		task ("Given there is a Question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestionText",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("When the user edit a question and a answer") {
			Questions.editQuestion(
				contentFieldEdit = "Body AddQuestionTextEdit",
				questionTitle = "Title AddQuestion",
				titleFieldEdit = "Title AddQuestionEdit");

			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "This is my answer",
				threadSubject = "Title AddQuestionEdit",
				titleField = "Title AddQuestionEdit");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestionEdit");

			Questions.editAnswer(contentField = "Body AddAnswerTextEdit");
		}

		task ("Then he can see the editions from Activity tab") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoTab(questionTabField = "Activity");

			for (var articleBodyContent : list "Body AddQuestionTextEdit,Body AddAnswerTextEdit") {
				AssertElementPresent(
					key_articleBodyContent = ${articleBodyContent},
					locator1 = "Questions#QUESTIONS_ARTICLE_BODY");
			}

			Questions.openQuestionFromActivity(questionTitle = "Title AddQuestionEdit");

			Questions.viewDetailsTitle(questionTitle = "Title AddQuestionEdit");
		}
	}

	@description = "LPS-122831 - Validate if the user can view the responses from activity."
	@priority = 4
	@refactordone
	test CanViewMyActivityResponses {
		task ("Given there is a Question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestionText",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");
		}

		task ("When the user creates a answer and a comment") {
			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "Body AddAnswerText",
				threadSubject = "Title AddQuestion",
				titleField = "Title AddQuestion");

			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.replyToComment(commentReply = "Body AddCommentText");
		}

		task ("Then he can see the responses on Activity tab") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.gotoTab(questionTabField = "Activity");

			for (var articleBodyContent : list "Body AddQuestionText,Body AddAnswerText,Body AddCommentText") {
				AssertElementPresent(
					key_articleBodyContent = ${articleBodyContent},
					locator1 = "Questions#QUESTIONS_ARTICLE_BODY");
			}
		}
	}

	@description = "LPS-115724 - Validate if the user can view the question after changing the subtopic using the breadcrumb filter."
	@priority = 3
	@refactordone
	test CanViewQuestionAfterChangingSubTopic {
		task ("Given there are a category and subcategories created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category1",
				userEmailAddress = "test@liferay.com");

			var parentCategoryId = JSONMBMessage.getCategoryIdByName(
				categoryName = "Questions Test Category1",
				groupName = "Guest");

			JSONMBMessage.addCategory(
				categoryDescription = "MB Subcategory Description",
				categoryName = "Questions Test Category2",
				groupName = "Guest",
				parentCategoryId = ${parentCategoryId},
				userEmailAddress = "test@liferay.com");

			var parentCategoryId = JSONMBMessage.getCategoryIdByName(
				categoryName = "Questions Test Category2",
				groupName = "Guest");

			JSONMBMessage.addCategory(
				categoryDescription = "MB Subcategory Description",
				categoryName = "Questions Test Category3",
				groupName = "Guest",
				parentCategoryId = ${parentCategoryId},
				userEmailAddress = "test@liferay.com");
		}

		task ("And a question is created") {
			JSONQuestions.addQuestion(
				bodyField = "Question Body 2",
				categoryName = "Questions Test Category2",
				groupName = "Guest",
				titleField = "Question 2");
		}

		task ("When the user do to the main category and change topic to 'Questions Test Category2'") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category1");

			Questions.changeTopic(
				parentTopicName = "Questions Test Category1",
				subTopicName = "Questions Test Category2");

			Questions.changeTopic(
				parentTopicName = "Questions Test Category2",
				subTopicName = "Questions Test Category3");

			Questions.changeTopic(
				gotoParentTopic = "Questions Test Category2",
				multipleSubTopics = "true");

			Questions.viewNoBreadcrumbEllipsis();
		}

		task ("Then he can see the question created") {
			Questions.viewList(listedQuestions = "Question 2");
		}
	}

	@description = "LPS-117752 - Validate if the user can filter by votes."
	@priority = 4
	@refactordone
	test CanViewQuestionsAfterFilteringByVotes {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given there is a user created") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("And a category with questions created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			for (var num : list "1,2,3") {
				JSONQuestions.addQuestion(
					bodyField = "Question Body ${num}",
					categoryName = "Questions Test Category",
					groupName = "Guest",
					titleField = "Question ${num}");
			}
		}

		task ("When the user vottes on questions") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "question-1",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.voteQuestion(
				currentVotedCount = 0,
				voteUp = "true");

			Click(locator1 = "Questions#QUESTIONS_HOME_ICON");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Question 2");

			Questions.voteQuestion(
				currentVotedCount = 0,
				voteUp = "true");
		}

		task ("Then another user can see and filter questions by filters") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "question-2",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.voteQuestion(
				currentVotedCount = 1,
				voteUp = "true");

			Click(locator1 = "Questions#QUESTIONS_HOME_ICON");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.viewVotedResult(
				questionTitle = "Question 1",
				votedCount = 1);

			Questions.viewVotedResult(
				questionTitle = "Question 2",
				votedCount = 2);

			Questions.viewVotedResult(
				questionTitle = "Question 3",
				votedCount = 0);

			Questions.clickFilterAndOrderBy(option = "Most Frequent");

			Questions.viewFilterResults(
				lastQuestionTitle = "Question 1",
				questionTitle = "Question 2");
		}
	}

	@description = "LPS-115724 - Validate if the users can view the questions from different topics via the breadcrumb."
	@priority = 4
	@refactordone
	test CanViewQuestionsFromDifferentSubTopics {
		task ("Given there are categories and questions created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Content Question3",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Question 3");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			for (var num : list "1,2") {
				var parentCategoryId = JSONMBMessage.getCategoryIdByName(
					categoryName = "Questions Test Category",
					groupName = "Guest");

				JSONMBMessage.addCategory(
					categoryDescription = "MB Subcategory Description",
					categoryName = "Questions Subcategory${num}",
					groupName = "Guest",
					parentCategoryId = ${parentCategoryId},
					userEmailAddress = "test@liferay.com");
			}

			for (var num : list "1,2") {
				JSONQuestions.addQuestion(
					bodyField = "Question Body ${num}",
					categoryName = "Questions Subcategory${num}",
					groupName = "Guest",
					titleField = "Question ${num}");
			}
		}

		task ("When the user goes the topic page") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("And change topic through breadcrumb then he can see the question created in each category") {
			Questions.changeTopic(
				parentTopicName = "Questions Test Category",
				subTopicName = "Questions Subcategory1");

			Questions.viewList(
				listedQuestions = "Question 1",
				unlistedQuestions = "Question 2,Question 3");

			Questions.changeTopic(
				parentTopicName = "Questions Test Category",
				subTopicName = "Questions Subcategory2");

			Questions.viewList(
				listedQuestions = "Question 2",
				unlistedQuestions = "Question 1,Question 3");

			Questions.changeTopic(
				parentTopicName = "Questions Subcategory2",
				subTopicName = "All Questions");

			Questions.viewList(listedQuestions = "Question 1,Question 2,Question 3");
		}
	}

	@description = "LPS-112029 - Validate if the user can select the filter and view the related results."
	@priority = 4
	@refactordone
	test CanViewQuestionsWithConfiguredFilter {
		task ("Given there are a category and questions created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			for (var num : list "1,2") {
				JSONQuestions.addQuestion(
					bodyField = "Question Body ${num}",
					categoryName = "Questions Test Category",
					groupName = "Guest",
					titleField = "Question ${num}");
			}
		}

		task ("And the user edits a question") {
			MessageboardsThread.openToEditThread(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				siteURLKey = "guest",
				threadSubject = "Question 1");

			MessageboardsThread.editCP(
				skipNavigation = "true",
				threadBodyEdit = "Question Body 1 Edit",
				threadSubjectEdit = "Question 1 Edit");

			PortletEntry.publish();
		}

		task ("When the user select the filter 'No Answer'") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.clickFilterAndOrderBy(option = "No Answer");
		}

		task ("Then he can see questions that had been No Answer") {
			Questions.viewFilterResults(
				lastQuestionTitle = "Question 2",
				questionTitle = "Question 1 Edit");
		}

		task ("When the user select another kind of filters then he can see the expected results") {
			Questions.clickFilterAndOrderBy(option = "Most Frequent");

			Questions.viewFilterResults(
				lastQuestionTitle = "Question 1 Edit",
				questionTitle = "Question 2");
		}
	}

	@description = "LPS-125810 - Validate if the user can create the second answer to a question, it also covers LPS-125810."
	@priority = 3
	@refactordone
	test CanViewSecondAnswer {
		task ("Given that there are a question and a add created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Questions AddQuestion");

			JSONQuestions.addAnswer(
				categoryName = "Questions Test Category",
				groupName = "Guest",
				replyBody = "This is my answer",
				threadSubject = "Questions AddQuestion",
				titleField = "Questions AddQuestion");
		}

		task ("When the user goes to question details page") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "questions-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category22");
		}

		task ("Then the user can creates a second answer") {
			Questions.answerQuestion(contentField = "This is my second answer");
		}
	}

	@description = "LPS-113665 - Validate if the user can view a topic."
	@priority = 5
	@refactordone
	@uitest
	test CanViewTopic {
		property portal.acceptance = "true";

		task ("Given there is a category created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Question Description",
				categoryName = "question AddQuestionCategory",
				userEmailAddress = "test@liferay.com");
		}

		task ("When user goes to Questions Page") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "question AddQuestionCategory");
		}

		task ("Then the User can view a Topic Default") {
			Questions.viewTopicDefault();
		}
	}

	@description = "LPS-115725 - Validate if the user can view a topic on home page after navigation via home icon."
	@priority = 4
	test CanViewTopicOnHomePage {
		task ("Given there is a category created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Question Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("And the user goes to topic page") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("When the user clicks on the home icon") {
			Questions.viewTopicOnHomePage(topicNameList = "Questions Test Category");

			Refresh();
		}

		task ("Then he can see the topic name on home page through the home icon a") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.viewTopicOnHomePage(topicNameList = "Questions Test Category");
		}
	}

	@description = "LPS-122810 - Validate if the user can view the voting style from the answers list."
	@priority = 4
	@refactordone
	test CanViewVotingStyleFromAnswersList {
		task ("Given there is a categoy and a question with an answer created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestionWithTheTestBody",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.answerQuestion(contentField = "This is my answer for voting");
		}

		task ("When the user votes in answers") {
			Questions.voteAnswer(
				currentVotedCount = 0,
				voteUp = "true");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestion");

			Questions.voteAnswer(
				currentVotedCount = 1,
				voteDown = "true");

			Questions.voteAnswer(
				currentVotedCount = 0,
				voteDown = "true");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestion");

			Questions.voteAnswer(
				currentVotedCount = "-1",
				voteUp = "true");
		}

		task ("Then he can see the voting style from the answers list") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestion");

			Questions.viewVotedResult(
				answersList = "true",
				votedCount = 0);
		}
	}

	@description = "LPS-122810 - Validate if the user can view the voting style from the questions list."
	@priority = 4
	@refactordone
	test CanViewVotingStyleFromQuestionsList {
		task ("Given there is a categoy and a question with an answer created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestionWithTheTestBody",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");

			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "title-addquestion",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("When the user votes in a question") {
			Questions.voteQuestion(
				currentVotedCount = 0,
				voteUp = "true");

			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");

			Questions.viewVotedResult(
				votedCaret = "top",
				votedCount = 1);

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestion");

			Questions.voteQuestion(
				currentVotedCount = 1,
				voteDown = "true");

			Questions.voteQuestion(
				currentVotedCount = 0,
				voteDown = "true");
		}

		task ("Then the user can see the votes results on questions list") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.viewVotedResult(
				votedCaret = "bottom",
				votedCount = "-1");
		}

		task ("When the user change the vote") {
			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestion");

			Questions.voteQuestion(
				currentVotedCount = "-1",
				voteUp = "true");
		}

		task ("Then the user can see the votes results on questions list") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.viewVotedResult(
				votedCaret = "top",
				votedCount = 0);
		}
	}

	@description = "LPS-112174 - Validate if the user can view the statistics."
	@priority = 3
	@refactordone
	test CreatorStatisticsCanBeViewedInDetails {
		task ("Givem there is a category and question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Question Title");
		}

		task ("When the user goes to details") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "question-title",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("Then He can see statistics in details") {
			Questions.viewStatistics(
				headerName = "Youngling",
				itemNameList = "Posts,Join Date,Last Post Date",
				userName = "Test Test");
		}
	}

	@description = "LPS-131941 - Validate if a user can view question details when using history router."
	@priority = 4
	test DetailsCanbeViewedWithHistoryRouter {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the router configutation is set") {
			Questions.openToConfigInSystemSettings(portlet = "Questions");

			SystemSettings.editTextAreaSetting(
				settingName = "Set Base Path for History Router",
				settingValue = "/questions-page");

			SystemSettings.saveConfiguration();
		}

		task ("And a question is created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Title AddQuestion");
		}

		task ("When the user goes to details page using history router") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.gotoDetails(
				questionTabField = "Questions",
				questionTitle = "Title AddQuestion");
		}

		task ("Then he can see the details URL") {
			AssertLocation(value1 = "http://localhost:8080/web/guest/questions-page/questions/questions-test-category/title-addquestion");
		}
	}

	@description = "LPS-110458 - Validate if the Activity tab appears"
	@priority = 4
	@refactordone
	test MyActivityCanBeViewedInTopic {
		task ("Given there is a category created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("WHen the user goes to topic page") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("Then he can see Activity tab") {
			AssertElementPresent(
				key_questionTabField = "Activity",
				locator1 = "Questions#QUESTIONS_LIST_TAB_FIELD");
		}
	}

	@description = "Validate if the user can view a question via an edited topic."
	@priority = 5
	@refactordone
	test QuestionCanBeViewedAfterEditingTopic {
		task ("Given there are a category and a question created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestion(
				bodyField = "Body AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				titleField = "Question Title");
		}

		task ("When the user edit a topic") {
			Questions.editRootTopic(
				categoryName = "Questions Test Category",
				categoryNameEdit = "Edit Questions Test Category",
				groupName = "Guest",
				siteURLKey = "guest");
		}

		task ("Then he can see the topic edited") {
			Questions.openToQuestionDetails(
				layoutName = "questions-page",
				questionsTitle = "question-title",
				siteURLKey = "guest",
				topicName = "edit-questions-test-category");
		}
	}

	@description = "LPS-113676 - Validate if the pagination will appear and works when we have more than 4 questions."
	@priority = 3
	@refactordone
	test QuestionsPaginationCanBeViewedInTopic {
		task ("Given there are a category and some questions created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			for (var num : list "1,2,3,4,5,6,7,8,9,10") {
				JSONQuestions.addQuestion(
					bodyField = "Body AddQuestion ${num}",
					categoryName = "Questions Test Category",
					groupName = "Guest",
					titleField = "Question ${num}");
			}
		}

		task ("When the user goest to topic page") {
			Questions.openToQuestionsTopic(
				layoutName = "questions-page",
				siteURLKey = "guest",
				topicName = "questions-test-category");
		}

		task ("Then he can see the pagination") {
			Questions.viewPaginationResults(results = "Showing 1 to 10 of 10");
		}

		task ("And can change and navigate through the pagination") {
			Questions.changePagination(itemsPerPage = "4 items");

			Questions.viewPaginationResults(results = "Showing 1 to 4 of 10");

			Click(locator1 = "Questions#PAGINATION_NEXT_LINK");

			Questions.viewPaginationResults(results = "Showing 5 to 8 of 10");

			Click(locator1 = "Questions#PAGINATION_NEXT_LINK");

			Questions.viewPaginationResults(results = "Showing 9 to 10 of 10");
		}
	}

	@description = "This test checks that the javascript in the user name will not be executed when viewing a question on page."
	@priority = 3
	test XSSIsNotExecutedWhenViewingUsernameInQuestion {
		task ("Given there is a catergory created") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("When the user configurates the user informations") {
			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			User.editUserInformation(userLastNameEdit = '''Test<script>alert('hello!')</script>''');
		}

		task ("And add a question") {
			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Content AddQuestion",
				layoutName = "questions-page",
				siteURLKey = "guest",
				titleField = "Title AddQuestion",
				topicName = "questions-test-category");
		}

		task ("Then the script is not executed") {
			AssertAlertNotPresent();
		}
	}

}