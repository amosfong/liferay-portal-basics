@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8351 | Test Summary: Check that page profile audience card displays only known individuals in the segmented/unsegmented graph"
	@priority = 5
	test ShowsKnownAnonymousIndividualsAsWellAsSegmentedUnsegmentedIndividuals {
		var usernameList = "ac,liferay";
		var emailList = "ac@liferay.com,liferay@liferay.com";

		for (var name : list ${usernameList}) {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = ${name},
				userLastName = ${name},
				userScreenName = ${name});
		}

		task ("Add page and Blog for interaction with the AC") {
			ACUtils.addSiteAndPage();
		}

		task ("Add users and interact with the page to get data from known and unsegmented users") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACUtils.navigateToSitePageWithUser(
				actionType = "View WC",
				documentTitleList = "1,2,3,4",
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Clear local storage") {
			ACUtils.clearLocalStorage();
		}

		task ("Interact whith the page to get data from anonymous user") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				documentTitleList = "1,2,3,4",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC and create segment for the user") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});

			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "Static Segment Test");

			ACSegments.addStaticMember(tableMember = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Navigate to Pages tab in Sites") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		task ("Set time filter use 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Navigate to page report entry") {
			var dataSourceName = StringUtil.extractFirst(${assignedPropertyName}, " ");

			ACNavigation.openItem(itemName = "AC Page - Site Name - ${dataSourceName}");
		}

		task ("Assert that Known, Anonymous, Segmented and Unsegmented Individuals are displayed") {
			ACUtils.assertAudienceCard(
				index = 1,
				percentageList = "66.67%,33.33%");

			ACUtils.assertAudienceCard(
				index = 2,
				percentageList = "50%,50%");
		}
	}

}