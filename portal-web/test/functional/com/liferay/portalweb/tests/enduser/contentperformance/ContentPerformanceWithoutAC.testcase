@component-name = "portal-ab-test"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Content Performance";

	setUp {
		task ("Go to DXP portal, login and create site") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();

			Navigator.openURL();

			HeadlessSite.addSite(siteName = "Test Site Name");
		}
	}

	@description = "LPS-137279 Given the Content Performance Panel When the users leave the page because the session expires or s/he does log out Then they find the panel closed"
	@priority = 3
	test ContentPerformanceClosed {
		task ("Open Content Performance panel") {
			ContentPerformance.openContentPerformance();
		}

		task ("Logout and login") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Check if panel is closed") {
			AssertNotVisible(locator1 = "ContentPerformance#SIDEBAR");
		}
	}

	@description = "LPS-108856: When user clicks on Dont show me this again button, the Content Performance panel disappears"
	@priority = 5
	test HideContentPerformancePanel {
		task ("Open Content Performance") {
			ContentPerformance.openContentPerformance();
		}

		task ("Click on the button") {
			ContentPerformance.clickDoNotShowMeThisAgain();
		}

		task ("Assert that the Content Performance panel button disappears") {
			AssertElementNotPresent(locator1 = "ContentPerformance#CONTENT_PERFORMANCE_BUTTON");
		}
	}

	@description = "LPS-108856: When user opens Content Performance panel and AC is connected but not synced, the Content Performance panel displays instructions to sync to AC (Dont show me this again button and the message is not displayed)"
	@priority = 3
	test NotSyncedPanel {
		task ("Launch AC and get Token") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Navigate to DXP") {
			ACUtils.launchDXP();
		}

		task ("Connect DXP to AC") {
			ACDXPSettings.goToInstanceSettingsAC();

			ACDXPSettings.connectAnalyticsCloud();

			ACDXPSettings.assertSuccessfulConnection();
		}

		task ("Open Content Performance") {
			Navigator.openURL();

			ContentPerformance.openContentPerformance();
		}

		task ("Assert if button is not present and instructions are present") {
			AssertElementNotPresent(
				key_textValue = "Do not show me this again",
				locator1 = "Sidebar#LINK");

			AssertElementPresent(locator1 = "ContentPerformance#INSTRUCTIONS_SYNC_AC");
		}

		task ("End connection with Analytics Cloud") {
			ACDXPSettings.disconnectDXPFromAnalyticsCloud();
		}
	}

}