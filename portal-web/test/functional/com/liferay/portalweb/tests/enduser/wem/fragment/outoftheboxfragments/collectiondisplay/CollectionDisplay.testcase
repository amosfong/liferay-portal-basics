@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragment Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	@description = "This is a test for LPS-163440. The page creator could define Flex Column, Align Items and Justify Content of a Collection Display."
	@priority = 5
	test ConfigureFlexColumnCollectionDisplayStyles {
		property portal.acceptance = "true";

		task ("Given a page creator has an empty Collection Display on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("When the page creator chooses the Flex Column style display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets",
				styleDisplay = "Flex Column");
		}

		task ("Then the page creator sees the empty message shown in Collection Display") {
			AssertVisible(
				key_infoMessage = "The collection is empty. To display your items, add them to the collection or choose a different collection.",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When the page creator adds the Heading and Image fragments into Collection Display with collection items") {
			for (var n : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}

			Refresh();

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title 3",
				fragmentName = "Heading");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Heading");
		}

		task ("Then the page creator sees the Heading and Image fragments displayed as list inside Collection Display") {
			AssertElementNotPresent(
				key_flexWrap = "wrap",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_FLEX_WRAP");

			AssertElementNotPresent(
				key_alignItems = "",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_ALIGN_ITEMS");

			AssertElementNotPresent(
				key_justifyContent = "",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_JUSTIFY_CONTENT");

			PageEditor.clickConfigurableField(fragmentName = "Collection Display");

			PageEditor.gotoTab(tabName = "Browser");

			AssertSelectedLabel(
				key_fieldLabel = "Flex Wrap",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "No Wrap");

			AssertSelectedLabel(
				key_fieldLabel = "Align Items",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Stretch");

			AssertSelectedLabel(
				key_fieldLabel = "Justify Content",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Start");

			var blockWidth = selenium.getElementWidth("//div[contains(@class,'page-editor__collection__block')]");
			var collectionDisplayWidth = selenium.getElementWidth("//div[@data-name='Collection Display']//div[contains(@class,'page-editor__topper__content')]");

			StringUtil.assertEquals(${collectionDisplayWidth}, ${blockWidth});
		}

		task ("When the page creator changes the align items to End") {
			PageEditor.editCollectionDisplay(
				alignItems = "End",
				fragmentName = "Collection Display",
				selectedName = "Highest Rated Assets");
		}

		task ("Then the page creator sees the Heading and Image fragments aligned horizontally with the right of Collection Display") {
			AssertElementNotPresent(
				key_flexWrap = "wrap",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_FLEX_WRAP");

			AssertElementNotPresent(
				key_justifyContent = "",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_JUSTIFY_CONTENT");

			PageEditor.viewCollectionDisplayStyle(
				alignItems = "end",
				position = 1);

			var blockWidth = selenium.getElementWidth("//div[contains(@class,'page-editor__collection__block')]");
			var collectionDisplayWidth = selenium.getElementWidth("//div[@data-name='Collection Display']//div[contains(@class,'page-editor__topper__content')]");

			TestUtils.isLessThan(
				actual = ${blockWidth},
				expected = ${collectionDisplayWidth});
		}
	}

	@description = "This is a test for LPS-163440. The page creator could define Flex Row, Flex Wrap, Align Items and Justify Content of a Collection Display."
	@priority = 5
	test ConfigureFlexRowCollectionDisplayStyles {
		property portal.acceptance = "true";

		task ("Given a page creator has an empty Collection Display on a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("When the page creator chooses the Flex Row style display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets",
				styleDisplay = "Flex Row");
		}

		task ("Then the page creator sees the empty message shown in Collection Display") {
			AssertVisible(
				key_infoMessage = "The collection is empty. To display your items, add them to the collection or choose a different collection.",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("When the page creator adds the Button and Paragraph fragments into Collection Display with collection items") {
			for (var n : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}

			Refresh();

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title 3",
				fragmentName = "Button");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Button");
		}

		task ("Then the page creator sees the Button and Paragraph fragments displayed as line inside Collection Display") {
			AssertElementNotPresent(
				key_flexWrap = "wrap",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_FLEX_WRAP");

			AssertElementNotPresent(
				key_alignItems = "",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_ALIGN_ITEMS");

			AssertElementNotPresent(
				key_justifyContent = "",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_JUSTIFY_CONTENT");

			PageEditor.clickConfigurableField(fragmentName = "Collection Display");

			PageEditor.gotoTab(tabName = "Browser");

			AssertSelectedLabel(
				key_fieldLabel = "Flex Wrap",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "No Wrap");

			AssertSelectedLabel(
				key_fieldLabel = "Align Items",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Stretch");

			AssertSelectedLabel(
				key_fieldLabel = "Justify Content",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Start");
		}

		task ("When the page creator changes the Justify Content to Center") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				justifyContent = "Center",
				selectedName = "Highest Rated Assets");
		}

		task ("Then the page creator sees the Button and Paragraph fragments aligned horizontally with center of Collection Display") {
			AssertElementNotPresent(
				key_flexWrap = "wrap",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_FLEX_WRAP");

			AssertElementNotPresent(
				key_alignItems = "",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_ALIGN_ITEMS");

			PageEditor.viewCollectionDisplayStyle(
				justifyContent = "center",
				position = 1);
		}

		task ("When the page creator changes the Flex Wrap to Wrap") {
			PageEditor.editCollectionDisplay(
				flexWrap = "Wrap",
				fragmentName = "Collection Display",
				selectedName = "Highest Rated Assets");
		}

		task ("Then the page creator sees the Button and Paragraph fragments displayed as list inside Collection Display") {
			AssertElementNotPresent(
				key_alignItems = "",
				key_position = 1,
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_ALIGN_ITEMS");

			PageEditor.viewCollectionDisplayStyle(
				flexWrap = "wrap",
				justifyContent = "center",
				position = 1);
		}
	}

	@description = "This is a use case for LPS-146171. Check the behaviors when user define different Maximum Number of Pages to Display."
	@priority = 4
	test ConfigureMaximumNumberOfPagesToDisplay {
		task ("Given a page creator has a content page with Collection Display fragment then select a dynamic collection") {
			task ("Add 6 web contents") {
				var i = 1;

				while (${i} != 7) {
					JSONWebcontent.addWebContent(
						content = "Web Content Content ${i}",
						groupName = "Test Site Name",
						title = "Web Content Title ${i}");

					var i = ${i} + 1;
				}
			}

			task ("Add a dynamic collection for All Types") {
				JSONAssetlist.addDynamicAssetListEntryWithItemType(
					groupName = "Test Site Name",
					itemType = "All Types",
					title = "Dynamic Collection");
			}

			task ("Add a Collection Display to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Collection Display");
			}

			task ("Select the dynamic collection in Collection Display") {
				PageEditor.editCollectionDisplay(
					assetListName = "Dynamic Collection",
					fragmentName = "Collection Display");
			}
		}

		task ("When the page creator changes the Maximum Number of Items per Page to 1") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = 1,
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view 6 pages shown in Collection Display") {
			for (var pageNumber : list "1,2,3,...,6") {
				AssertVisible(
					key_pageNumber = ${pageNumber},
					locator1 = "Pagination#ANY_PAGE");
			}
		}

		task ("When the page creator unchecks the Display All Pages") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Display All Pages",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Then the page creator could view the Maximum Number of Pages to Display is 5") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = 5);

			for (var pageNumber : list "1,2,3,4,5") {
				AssertVisible(
					key_pageNumber = ${pageNumber},
					locator1 = "Pagination#ANY_PAGE");
			}

			AssertElementNotPresent(
				key_pageNumber = 6,
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("When the page creator changes the Maximum Number of Pages to Display is 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfPagesToDisplay = 6,
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view the page 6 shown in pagination bar") {
			for (var pageNumber : list "1,2,3,...,6") {
				AssertVisible(
					key_pageNumber = ${pageNumber},
					locator1 = "Pagination#ANY_PAGE");
			}
		}

		task ("When the page creator changes the Maximum Number of Pages to Display is 7") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfPagesToDisplay = 7,
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could only view 6 pages shown in Collection Display") {
			for (var pageNumber : list "1,2,3,...,6") {
				AssertVisible(
					key_pageNumber = ${pageNumber},
					locator1 = "Pagination#ANY_PAGE");
			}

			AssertElementNotPresent(
				key_pageNumber = 7,
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("When the page creator tries to type 0 in the Maximum Number of Pages to Display field") {
			TripleClick(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD");

			Type.sendKeys(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = 0);
		}

		task ("Then the Maximum Number of Pages to Display field should be empty") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "");
		}

		task ("When the page creator tries to type non-digit characters in the Maximum Number of Pages to Display field") {
			Type.sendKeys(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "dxp");
		}

		task ("Then the Maximum Number of Pages to Display field should be empty") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "");
		}

		task ("When the page creator triggers auto save after leave the Maximum Number of Pages to Display field empty") {
			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
		}

		task ("Then the value of Maximum Number of Pages to Display becomes to 1") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = 1);

			AssertVisible(
				key_pageNumber = 1,
				locator1 = "Pagination#ANY_PAGE");

			AssertElementNotPresent(
				key_pageNumber = 2,
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("When the page creator triggers auto save after typing negative number to the Maximum Number of Pages to Display field") {
			TripleClick(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD");

			Type.sendKeys(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "-2");

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
		}

		task ("Then the negative character should be removed") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = 2);

			for (var pageNumber : list "1,2") {
				AssertVisible(
					key_pageNumber = ${pageNumber},
					locator1 = "Pagination#ANY_PAGE");
			}
		}
	}

	@description = "This is a use case for LPS-166039. The page creator can filter the categories."
	@priority = 4
	test PrefilterCollectionOnItemWithSameCategories {
		task ("Given a page creator has a Collection Display with Item With Same Categories on a content page") {
			for (var vocabularyName : list "Release Date,Company,Engine") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = ${vocabularyName});
			}

			var firstId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = 2020,
				vocabularyName = "Release Date");
			var secondId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = 2021,
				vocabularyName = "Release Date");
			var thirdId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = 2022,
				vocabularyName = "Release Date");
			var teslaId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Tesla",
				vocabularyName = "Company");
			var gacId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "GAC Group",
				vocabularyName = "Company");
			var hybridId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Hybrid",
				vocabularyName = "Engine");
			var electricId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Electric",
				vocabularyName = "Engine");
			var petrolId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Petrol",
				vocabularyName = "Engine");

			JSONWebcontent.addWebContent(
				assetCategoryIds = "${thirdId},${teslaId},${electricId}",
				content = "Model 3",
				groupName = "Test Site Name",
				title = "Model 3");

			JSONWebcontent.addWebContent(
				assetCategoryIds = "${firstId},${gacId},${petrolId}",
				content = "GA8",
				groupName = "Test Site Name",
				title = "GA8");

			HeadlessBlog.addBlogEntry(
				assetCategoryIds = ${teslaId},
				content = "Telsa Motors Club",
				groupName = "Test Site Name",
				title = "Telsa Motors Club");

			HeadlessBlog.addBlogEntry(
				assetCategoryIds = ${gacId},
				content = "GA8 Intelligent System",
				groupName = "Test Site Name",
				title = "GA8 Intelligent System");

			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = ${thirdId},
				dmDocumentTitle = "Model 3 Interior",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");

			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = ${firstId},
				dmDocumentTitle = "GA8 Interior",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");

			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Automobile");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				assetListName = "Automobile",
				fragmentName = "Collection Display");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Model 3",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = 2,
				infoItemRelatedListProviderName = "Items With Same Categories");
		}

		task ("When the page designer prefilters collection by Document") {
			PageEditor.editCollectionDisplay(
				filterCollection = "true",
				fragmentName = "Collection Display",
				index = 2,
				itemTypeList = "Document",
				selectedName = "Items With Same Categories");
		}

		task ("Then the page designer sees the documents on inner Collection Display") {
			AssertVisible(
				key_colPosition = 1,
				key_entryTitle = "GA8 Interior",
				key_fragmentName = "Collection Display",
				key_rowPosition = 1,
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = 1,
				key_entryTitle = "GA8 Intelligent System",
				key_fragmentName = "Collection Display",
				key_rowPosition = 2,
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertVisible(
				key_colPosition = 1,
				key_entryTitle = "Model 3 Interior",
				key_fragmentName = "Collection Display",
				key_rowPosition = 1,
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = 1,
				key_entryTitle = "Telsa Motors Club",
				key_fragmentName = "Collection Display",
				key_rowPosition = 2,
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
		}

		task ("When the page designer prefilters collection by Web Content Article") {
			PageEditor.editCollectionDisplay(
				filterCollection = "true",
				fragmentName = "Collection Display",
				index = 2,
				itemTypeList = "Web Content Article",
				selectedName = "Items With Same Categories");
		}

		task ("Then the page designer sees the empty results on inner Collection Display") {
			AssertVisible(
				key_infoMessage = "The collection is empty. To display your items, add them to the collection or choose a different collection.",
				locator1 = "Message#INFO_SPECIFIC");
		}
	}

	@description = "This is a test for LPS-111561. The grid layout of Collection Display defined in Desktop viewport should be propagated to other viewports."
	@priority = 4
	test PropagateGridLayoutDefinedInDesktopToOtherViewports {
		task ("Given the user has created a collection page, added a Collection Display Fragment and a Collection with several items") {
			task ("Add five web contents") {
				for (var i : list "1,2,3,4,5") {
					JSONWebcontent.addWebContent(
						content = "Web Content Content ${i}",
						groupName = "Test Site Name",
						title = "Web Content Title ${i}");
				}
			}

			task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
				JSONAssetlist.addDynamicAssetListEntryWithItemType(
					groupName = "Test Site Name",
					itemSubtype = "Basic Web Content",
					itemType = "Web Content Article",
					title = "Dynamic Collection");
			}

			task ("Add a collection page based on the dynamic collection") {
				PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

				ContentPages.addCollectionPage(
					collectionName = "Dynamic Collection",
					pageName = "Test Page Name",
					tabName = "Collections");
			}
		}

		task ("When the user changes to Tablet viewport") {
			PageEditor.viewCollectionDisplayStyle(
				columnCount = 1,
				layout = 12,
				position = 1);

			PageEditor.switchViewport(deviceType = "Tablet");
		}

		task ("Then the user could see the grid layout same with default value in Desktop viewport") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewCollectionDisplayStyle(
				columnCount = 1,
				layout = 12,
				position = 1);

			SelectFrame(value1 = "relative=top");
		}

		task ("When the user configures the grid layout of the Collection Display in Desktop viewport then changes to Tablet viewport") {
			PageEditor.switchViewport(deviceType = "Desktop");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				layout = "4 Columns",
				selectedName = "Dynamic Collection",
				spaceBetweenColumns = "false");
		}

		task ("Then the user could see the grid layout defined in Desktop viewport") {
			PageEditor.switchViewport(deviceType = "Tablet");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewCollectionDisplayStyle(
				columnCount = 4,
				layout = 3,
				position = 1,
				spaceBetweenColumns = "false");
		}
	}

	@description = "This is a use case for LPS-146171. Check the default settings of Collection Display after selecting collection or collection provider."
	@priority = 5
	test ViewDefaultSettingsOfCollectionDisplayWithCollection {
		property portal.acceptance = "true";

		var groupId = JSONGroupSetter.setGroupId(groupName = "Test Site Name");

		task ("Given a page creator has a content page with Collection Display fragment") {
			task ("Add 21 web contents") {
				var i = 1;

				while ((${i} != 22) && (maxIterations = "25")) {
					JSONWebcontent.addWebContent(
						content = "Web Content Content ${i}",
						groupId = ${groupId},
						title = "Web Content Title ${i}");

					var i = ${i} + 1;
				}
			}

			task ("Add a dynamic collection for All Types") {
				AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

				AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Collection");

				AssetListsAdmin.configureItemTypeInDynamicCollection(itemType = "All Types");
			}

			task ("Add a Collection Display to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Collection Display");
			}
		}

		task ("When the page creator selects a dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Then the page creator could view the default settings of Collection Display") {
			task ("View the pagination of Collection Display is Numeric") {
				for (var pageNumber : list "1,2") {
					AssertVisible(
						key_pageNumber = ${pageNumber},
						locator1 = "Pagination#ANY_PAGE");
				}
			}

			task ("View the Display All Pages is checked") {
				AssertChecked.assertCheckedNotVisible(
					checkboxName = "Display All Pages",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("View the Maximum Number of Items per Page is 20") {
				InputField.viewText(
					fieldLabel = "Maximum Number of Items per Page",
					text = 20);
			}
		}

		task ("When the page creator changes the Maximum Number of Items per Page to 21") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = 21,
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view warning message on the bottom of Collection Display") {
			AssertVisible(
				key_alertInfo = "In edit mode, the number of elements displayed is limited to 20 due to performance.",
				key_fragmentName = "Collection Display",
				locator1 = "Fragment#ALERT_INFO");
		}
	}

	@description = "This is a use case for LPS-146171.2 Check the default settings of Collection Display with None pagination."
	@priority = 4
	test ViewDefaultSettingsOfCollectionDisplayWithNonePagination {
		task ("Given a page creator has a content page with Collection Display fragment then select a dynamic collection") {
			task ("Add a web content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "Web Content Title");
			}

			task ("Add a dynamic collection for All Types") {
				JSONAssetlist.addDynamicAssetListEntryWithItemType(
					groupName = "Test Site Name",
					itemType = "All Types",
					title = "Dynamic Collection");
			}

			task ("Add a Collection Display to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Collection Display");
			}

			task ("Select the dynamic collection in Collection Display") {
				PageEditor.editCollectionDisplay(
					assetListName = "Dynamic Collection",
					fragmentName = "Collection Display");
			}
		}

		task ("When the page creator changes the pagination to None") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				pagination = "None",
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view the default settings of Collection Display") {
			task ("View the page number, next and previous buttons not shown in Collection Display") {
				AssertElementNotPresent(
					key_pageNumber = 1,
					locator1 = "Pagination#ANY_PAGE");

				AssertElementNotPresent(
					locator1 = "Pagination#ICON",
					type = "angle-left");

				AssertElementNotPresent(
					locator1 = "Pagination#ICON",
					type = "angle-right");
			}

			task ("View the Display All Collection Items is unchecked") {
				AssertNotChecked.assertNotCheckedNotVisible(
					checkboxName = "Display All Collection Items",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("View the Maximum Number of Items to Display is 5") {
				AssertTextEquals(
					key_fieldLabel = "Maximum Number of Items to Display",
					locator1 = "FormFields#NUMBER_FIELD",
					value1 = 5);
			}

			task ("View warning message shown below the Maximum Number of Items to Display field") {
				AssertTextEquals(
					fieldLabel = "Maximum Number of Items to Display",
					locator1 = "Message#WARNING_WITH_LABEL",
					value1 = "This collection has 1 items.");
			}
		}
	}

}