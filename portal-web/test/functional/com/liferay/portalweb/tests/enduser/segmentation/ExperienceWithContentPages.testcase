@component-name = "portal-segmentation"
definition {

	property ci.retries.disabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Create an user using JSONWS") {
			JSONUser.addUser(
				jobTitle = "Test Engineer1",
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");
		}

		HeadlessSite.addSite(siteName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Experience Content Page",
			type = "content");
	}

	@description = "LPS-130344: Segment member preview count shows the correct number of users when segments are combined"
	@priority = 5
	test AddNewExperienceBasedOtherSegmentsSegment {
		property portal.acceptance = "true";

		task ("Add user via JSONWS") {
			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Add two segments via JSONWS") {
			var segmentId1 = JSONSegmentsentry.addSegment(
				fieldName = "Last Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User1",
				text = "userln1");
			var segmentId2 = JSONSegmentsentry.addSegment(
				fieldName = "Last Name",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment With User2",
				text = "userln2");
		}

		task ("Add a segment with two conditions via JSONWS") {
			JSONSegmentsentry.addSegment(
				conditionType = "Segments",
				fieldName = "Segment",
				firstSegmentId = ${segmentId1},
				groupName = "Test Site Name",
				operator = "Or",
				secondSegmentId = ${segmentId2},
				segmentName = "Segment Title");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a experience to page") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Segment Title");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "User1 and User2 will see this heading");
		}

		task ("Priotitize the experience created") {
			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.publish();
		}

		task ("Log in with both users and check the experience dispalyed") {
			for (var num : list "1,2") {
				User.logoutAndLoginPG(
					freeLogin = "true",
					userLoginEmailAddress = "userea${num}@liferay.com",
					userLoginFullName = "userfn${num} userln${num}");

				Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

				AssertTextEquals(
					locator1 = "Experience#FRAGMENT_HEADING",
					value1 = "User1 and User2 will see this heading");
			}
		}
	}

	@description = "LPS-163095 Bug: SegmentRequestContentContributor are not propertly registered"
	@priority = 4
	test AddNewExperienceSessionIPGeocoderCountry {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add a session IP Geocoder Country segment") {
			JSONSegmentsentry.addSegment(
				conditionType = "Session",
				fieldName = "IP Geocoder Country",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "IP Geocoder Country Segment",
				selectedOption = "Spain");
		}

		task ("Navigate to page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");
		}

		task ("Add a heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Default");

			Button.clickPublish();
		}

		task ("Add a experience to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addExperience(
				experienceName = "IP Geocoder Country Experience",
				segmentName = "IP Geocoder Country Segment");
		}

		task ("Modify the experience created") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Spanish Segment Heading");
		}

		task ("Priotitize the experience created") {
			PageEditor.prioritizeExperience(experienceName = "IP Geocoder Country Experience");

			Button.clickPublish();
		}

		task ("Check that correct experience is displayed using an spanish IP address") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page?mockIPGeocoderRemoteAddr=57.78.128.0");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Spanish Segment Heading");
		}
	}

	@description = "LPS-125710 When a user, that Belongs To two or more different segments with experiences for them and these experiences are below of any other Anyone-targeted experience, lands on the page, the Anyone-targeted experience labeled as active will be shown"
	@priority = 3
	@uitest
	test AddTwoExperiencesBelowDefault {
		property portal.acceptance = "true";

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment Screen Name",
				text = "usersn1");
		}

		task ("Add another segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Email Address",
				text = "userea1@liferay.com");
		}

		task ("Go to the Content Page and add a new experience for the first segment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "Screen Name Experience",
				segmentName = "Segment Screen Name");
		}

		task ("Edit the experience created and leave it below the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Screen Name experience for you");
		}

		task ("Go to the Content Page and add a new experience for the second segment") {
			PageEditor.addExperience(
				experienceName = "Email Address Experience",
				segmentName = "Segment Email Address");
		}

		task ("Edit the experience created and leave it below the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Email Address Experience for you");

			PageEditor.publish();
		}

		task ("Login with the user and check that the correct experience is shown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "Heading Example");
		}
	}

	@description = "LPS-125710 When a user, that Belongs To two or more different segments with experiences for them and these experiences are above the all other Anyone-targeted experiences, lands on the page, the experience with the higher position will be shown"
	@priority = 3
	@uitest
	test AddTwoExperiencesOverDefault {
		property portal.acceptance = "true";

		task ("Add segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Screen Name",
				groupName = "Test Site Name",
				operator = "contains",
				segmentName = "Segment Screen Name",
				text = "usersn1");
		}

		task ("Add another segment for the user created") {
			JSONSegmentsentry.addSegment(
				fieldName = "Email Address",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Segment Email Address",
				text = "userea1@liferay.com");
		}

		task ("Go to the Content Page and add a new experience for the first segment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "Screen Name Experience",
				segmentName = "Segment Screen Name");
		}

		task ("Edit the experience created and prioritize it over the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Screen Name experience for you");

			PageEditor.prioritizeExperience(experienceName = "Screen Name Experience");
		}

		task ("Go to the Content Page and add a new experience for the second segment") {
			PageEditor.addExperience(
				experienceName = "Email Address Experience",
				segmentName = "Segment Email Address");
		}

		task ("Edit the experience created and prioritize it over the Default experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "This is a new Email Address Experience for you");

			PageEditor.prioritizeExperience(experienceName = "Email Address Experience");

			PageEditor.publish();
		}

		task ("Login with the user and check that the correct experience is shown") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/experience-content-page");

			AssertTextEquals(
				locator1 = "Experience#FRAGMENT_HEADING",
				value1 = "This is a new Screen Name experience for you");
		}
	}

	@description = "LPS-90588: Validate the interaction with once the user is creating the new Segment, when the user closes segments edition"
	@priority = 3
	test ExperienceDropdownAddNewSegmentCancelInputs {
		task ("Go to New Experience Editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.openNewExperienceEditor();
		}

		task ("Check that values are default") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");
		}

		task ("Start to create segment and cancel it") {
			Click(
				key_text = "New Segment",
				locator1 = "Button#ANY");

			Segmentation.addProperties(propertyOption = "First Name");

			Segmentation.fillTitle(titleField = "Segment First Name Test");

			Segmentation.fillProperty(propertyField = "userfn");

			Button.clickNoError(button = "Cancel");

			AssertConfirm.waitForConfirmation(value1 = "There are unsaved changes. Are you sure you want to exit?");
		}

		task ("Check that Experience editor still has same data") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "");

			AssertSelectedLabel(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = "Anyone");
		}
	}

}