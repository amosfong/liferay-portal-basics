@component-name = "portal-publications"
definition {

	property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
	property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
	property osgi.module.configurations = "enabled=B\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@priority = 4
	test AssertDependenciesMovePublicationsWithParentChange {
		task ("Enable dynamic and manual selection") {
			AssetPublisherPortlet.enableDynamicAndManualSelection();
		}

		task ("Add 2 different publications") {
			JSONPublications.addPublication(publicationName = "Publication 1 Name");

			JSONPublications.addPublication(publicationName = "Publication 2 Name");
		}

		task ("Select Publication 2 and add a new site with a new page containing an Asset Publisher widget") {
			JSONPublications.selectPublication(publicationName = "Publication 2 Name");

			HeadlessSite.addSite(siteName = "Test Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page",
				widgetName = "Asset Publisher");
		}

		task ("Move the site addition change from Publication 2 to Publication 1") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 2 Name");

			PublicationsChanges.gotoMoveChangeToAnotherPublication(
				changeCategory = "Site",
				changeTitle = "Test Site Name",
				targetPublicationName = "Publication 1 Name");

			PublicationsChanges.moveChangeToAnotherPublication();
		}

		task ("Select Publication 1 and assert that the page addition change is present in its change list") {
			JSONPublications.selectPublication(publicationName = "Publication 1 Name");

			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 1 Name");

			PublicationsChanges.viewChanges(
				changeCategory = "Page",
				changeSite = "Test Site Name",
				changeTitle = "Test Page",
				changeType = "Added",
				changeUser = "Test Test");
		}

		task ("Open Test Site Name in Publication 1 and assert the Asset Publisher widget is present") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Test Site Name");

			AssertTextEquals(
				locator1 = "AppBuilder#WIDGET_DEPLOYED",
				value1 = "Asset Publisher");
		}
	}

	@priority = 3
	test CancelPublicationCreation {
		Publications.cancelPublicationCreation(publicationName = "Publication Name");

		AssertElementNotPresent(
			locator1 = "Publications#PUBLICATION_NAME_VIEW",
			value1 = "Publication Name");
	}

	@priority = 5
	test CanMoveChangeBetweenPublications {
		task ("Add 1 web content and 2 different publications") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Site Name",
				title = "WC WebContent Title");

			JSONPublications.addPublication(publicationName = "Publication 1 Name");

			JSONPublications.addPublication(publicationName = "Publication 2 Name");
		}

		task ("Select Publication 2 and edit the title of the web content") {
			JSONPublications.selectPublication(publicationName = "Publication 2 Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.editCP(
				webContentContentEdit = "Edited in Publication 2 Name",
				webContentTitle = "Test Web Content",
				webContentTitleEdit = "Edited in Publication 2 Name");
		}

		task ("Review the changes in Publication 2") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 2 Name");
		}

		task ("Assert the changes are listed when moving the change to Publication 1 Name") {
			PublicationsChanges.gotoMoveChangeToAnotherPublication(
				changeCategory = "Web Content Article",
				changeTitle = "Edited in Publication 2 Name",
				submit = "false",
				targetPublicationName = "Publication 1 Name");

			AssertElementPresent(
				key_changeCategory = "Asset",
				key_changeOrder = 1,
				key_changeTitle = "Edited in Publication 2 Name",
				locator1 = "PublicationsChanges#REVIEW_CHANGE_LISTING");

			AssertElementPresent(
				key_changeCategory = "Web Content Article",
				key_changeOrder = 1,
				key_changeTitle = "Edited in Publication 2 Name",
				locator1 = "PublicationsChanges#REVIEW_CHANGE_LISTING");

			AssertElementPresent(
				key_changeCategory = "Web Content Translation",
				key_changeOrder = 1,
				key_changeTitle = "Edited in Publication 2 Name",
				locator1 = "PublicationsChanges#REVIEW_CHANGE_LISTING");

			PublicationsChanges.moveChangeToAnotherPublication();
		}

		task ("Assert that there are no changes remaining in Publication 2 Name") {
			AssertElementPresent(locator1 = "PublicationsChanges#MESSAGE_NO_CHANGES");
		}

		task ("Assert that the changes are now present when reviewing Publication 1 Name's changes") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 1 Name");

			PublicationsChanges.viewChanges(
				changeCategory = "Web Content Article",
				changeSite = "Site Name",
				changeTitle = "Edited in Publication 2 Name",
				changeType = "Added",
				changeUser = "Test Test");

			PublicationsChanges.viewChanges(
				changeCategory = "Web Content Translation",
				changeSite = "Site Name",
				changeTitle = "Edited in Publication 2 Name",
				changeType = "Added",
				changeUser = "Test Test");
		}
	}

	@priority = 4
	test CannotMoveChangesBetweenPublicationsIfConflictsArePresent {
		task ("Add 1 web content and 2 different publications") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Site Name",
				title = "WC WebContent Title");

			JSONPublications.addPublication(publicationName = "Publication 1 Name");

			JSONPublications.addPublication(publicationName = "Publication 2 Name");
		}

		task ("Make an edit to the web content title in each publication") {
			JSONPublications.selectPublication(publicationName = "Publication 1 Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.editCP(
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title 1 Edit");

			JSONPublications.selectPublication(publicationName = "Publication 2 Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.editCP(
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title 2 Edit");
		}

		task ("Review the changes made to Publication 2 Name") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 2 Name");
		}

		task ("Attempt to move the change to Publication 1 Name and assert an alert is shown for conflicting changes") {
			PublicationsChanges.gotoMoveChangeToAnotherPublication(
				changeCategory = "Web Content Article",
				changeTitle = "WC WebContent Title 2 Edit",
				targetPublicationName = "Publication 1 Name");

			PublicationsChanges.moveChangeToAnotherPublication(moveFailed = "true");
		}

		task ("Assert that both publications retain their original edits") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 2 Name");

			PublicationsChanges.viewChanges(
				changeCategory = "Web Content Article",
				changeSite = "Site Name",
				changeTitle = "WC WebContent Title 2 Edit",
				changeType = "Added",
				changeUser = "Test Test");

			PublicationsChanges.viewChanges(
				changeCategory = "Web Content Translation",
				changeSite = "Site Name",
				changeTitle = "WC WebContent Title 2 Edit",
				changeType = "Added",
				changeUser = "Test Test");

			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 1 Name");

			PublicationsChanges.viewChanges(
				changeCategory = "Web Content Article",
				changeSite = "Site Name",
				changeTitle = "WC WebContent Title 1 Edit",
				changeType = "Added",
				changeUser = "Test Test");

			PublicationsChanges.viewChanges(
				changeCategory = "Web Content Translation",
				changeSite = "Site Name",
				changeTitle = "WC WebContent Title 1 Edit",
				changeType = "Added",
				changeUser = "Test Test");
		}
	}

	@description = "This is a use case for LPS-182679"
	@priority = 3
	test CannotMoveTheChangeWithoutParentsChange {
		task ("Add 2 new publications") {
			JSONPublications.addPublication(publicationName = "Publication 1 Name");

			JSONPublications.addPublication(publicationName = "Publication 2 Name");
		}

		task ("Under Publication 2, add a structure, template, and web content utilizing that structure") {
			JSONPublications.selectPublication(publicationName = "Publication 2 Name");

			HeadlessSite.addSite(siteName = "Site Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "Test Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "Test Structure Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "Test Structure Name",
				templateDescription = "Test Template Description",
				templateFieldNames = "Text",
				templateName = "Test Template Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "Test Structure Name");

			WebContent.addWithStructureCP(
				structureName = "Test Structure Name",
				templateName = "Test Template Name",
				webContentTitle = "Test WebContent Title");

			PortletEntry.publish();
		}

		task ("Assert that the web content change cannot move to Publication 1 without its parent changes") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 2 Name");

			PublicationsChanges.gotoMoveChangeToAnotherPublication(
				changeCategory = "Web Content Article",
				changeTitle = "Test WebContent Title",
				targetPublicationName = "Publication 1 Name");

			PublicationsChanges.moveChangeToAnotherPublication(moveFailed = "true");
		}
	}

	@description = "This is a use case for LPS-194056 - As a publication user, I would like to prevent system changes from being moved."
	@priority = 3
	test CanPreventSystemChangesFromBeingMoved {
		task ("Create 2 Publications and select one of them") {
			JSONPublications.addPublication(publicationName = "Publication 1 Name");

			JSONPublications.addPublication(publicationName = "Publication 2 Name");

			JSONPublications.selectPublication(publicationName = "Publication 1 Name");
		}

		task ("Create new site and new Web Content inside it") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Site Name",
				title = "WC WebContent Title");
		}

		task ("Assert the move changes option is visible for the Web Content Change in Publication 1 Name") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 1 Name");

			PublicationsChanges.viewChanges(
				changeCategory = "Web Content Article",
				changeSite = "Site Name",
				changeTitle = "WC WebContent Title",
				changeType = "Added",
				changeUser = "Test Test");

			PublicationsNavigator.gotoViewChangeDetails(
				changeCategory = "Web Content Article",
				changeTitle = "WC WebContent Title");

			Click(locator1 = "PublicationsChanges#REVIEW_CHANGE_DROPDOWN");

			AssertElementPresent(
				key_menuItem = "Move Changes",
				locator1 = "PublicationsChanges#REVIEW_CHANGE_DROPDOWN_ITEM");
		}

		task ("Assert the move changes option is not visible for Web Content System change in Publication 1 Name") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication 1 Name");

			PublicationsChanges.viewChanges(
				changeCategory = "Asset",
				changeSite = "Site Name",
				changeTitle = "WC WebContent Title",
				changeType = "Added",
				changeUser = "Test Test",
				showSystemChanges = "true");

			PublicationsNavigator.gotoViewChangeDetails(
				changeCategory = "Asset",
				changeTitle = "WC WebContent Title");

			Click(locator1 = "PublicationsChanges#REVIEW_CHANGE_DROPDOWN");

			AssertElementNotPresent(
				key_menuItem = "Move Changes",
				locator1 = "PublicationsChanges#REVIEW_CHANGE_DROPDOWN_ITEM");
		}
	}

	@description = "This is a use case for LPS-184911 - Saving Publications settings when it is disabled causes PrincipalException."
	@priority = 3
	test CanSavePublicationsSettingsWhenItIsDisabled {
		property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
		property osgi.module.configurations = "enabled=B\"false\"";

		PublicationsNavigator.openPublicationsSettings();

		AssertNotChecked(
			locator1 = "Publications#ENABLE_PUBLICATIONS_TOGGLE_SWITCH",
			value1 = "disabled");

		Alert.viewWarningSpecificNotPresent(warningMessage = "Portlet is temporarily unavailable.");
	}

	@priority = 3
	test CreateNewPublicationWithLongName {
		PublicationsNavigator.openPublicationsAdmin();

		Click(locator1 = "Button#PLUS");

		Type(
			locator1 = "Publications#PUBLICATION_NAME",
			value1 = "Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphioparaomelitokatakechymenokichlepikossyphophattoperisteralektryonoptekephalliokigklopeleiolagoiosiraiobaphetraganopterygon");

		AssertElementPresent(
			key_text = "Create",
			locator1 = "Button#ANY_DISABLED");
	}

	@priority = 3
	test CreateNewPublicationWithoutName {
		PublicationsNavigator.openPublicationsAdmin();

		Click(locator1 = "Button#PLUS");

		Type(
			locator1 = "Publications#PUBLICATION_NAME",
			value1 = "");

		Button.click(button = "Create");

		Alert.viewRequiredField();
	}

	@priority = 5
	test DeletePublication {
		property portal.acceptance = "true";

		Publications.createNewPublication(
			gotoPublicationsAdmin = "true",
			publicationDescription = "Publication Description",
			publicationName = "Publication Name");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Test Page Name");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Publications.deletePublication(publicationName = "Publication Name");

		AssertElementNotPresent(
			key_publicationName = "Publication Name",
			locator1 = "Publications#PUBLICATION_NAME_VIEW");

		AssertTextPresent(
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = "Production");

		Navigator.openURL();

		Page.viewNoPG(pageName = "Test Page");
	}

	@priority = 4
	test SwitchPublication {
		Publications.createNewPublication(publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 1",
			webContentTitle = "Web Content Title 1");

		PortletEntry.publish();

		Publications.createNewPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication 2 Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 2",
			webContentTitle = "Web Content Title 2");

		PortletEntry.publish();

		Publications.selectPublication(publicationName = "Publication Name");

		AssertElementPresent(
			key_webContentTitle = "Web Content Title 1",
			locator1 = "WC#ENTRY_LIST_TITLE");

		AssertElementNotPresent(
			key_webContentTitle = "Web Content Title 2",
			locator1 = "WC#ENTRY_LIST_TITLE");

		Publications.selectPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication 2 Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		AssertElementPresent(
			key_webContentTitle = "Web Content Title 2",
			locator1 = "WC#ENTRY_LIST_TITLE");

		AssertElementNotPresent(
			key_webContentTitle = "Web Content Title 1",
			locator1 = "WC#ENTRY_LIST_TITLE");

		Publications.workOnProduction();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

}