@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			CustomFields.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8570 | Test Summary: Add segment with custom fields for organizations"
	@priority = 4
	test CanAddSegmentWithCustomFieldsForOrganizations {
		property test.run.type = "single";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new organization and assign to the user") {
			JSONOrganization.addOrganization(organizationName = "Organization CF");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization CF",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Add Custom Fields for organization") {
			CustomFields.openCustomFieldAdmin();

			CustomFields.addCP(
				customFieldName = "Org Custom Field",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				resourceName = "Organization",
				startingValue = "Hey AC Team");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new added user") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View WC",
				documentTitleList = "1,2,3,4,5",
				emailList = "ac@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add a new dynamic segment using Organization Custom Fields") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Organization CF");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "org custom field");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectAutocompleteOption(
				autocompleteText = "Hey AC Team",
				criteriaName = "org custom field");
		}

		task ("View the user showns on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");

			ACUtils.closeModal();
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("Check that the segment is created") {
			ACNavigation.goToSegments();

			ACUtils.viewNameList(nameList = "Dynamic Segment Organization CF");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8548 | Test Summary: Add segment using an organization property 'date modified'"
	@ignore = "true"
	@priority = 4
	test CanCreateSegmentUsingOrganizationPropertyDateModified {

		// AC Refactor: Team not sure of which steps should be done to assert Date modified
		// AC Refactor ticket: LRAC-9277

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}

		task ("Add a new segment using the organization property date modified") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Date Modified");

			ACSegments.saveSegment();
		}

		task ("Assert Date Modified is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Date Modified");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8549 | Test Summary: Add segment using an organization property 'name'"
	@ignore = "true"
	@priority = 4
	test CanCreateSegmentUsingOrganizationPropertyName {

		// AC Refactor: Team not sure of which steps should be done to assert property Name, please check steps and update if necessary
		// AC Refactor ticket: LRAC-9278

		task ("Add users") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name 1");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name 1",
				userEmailAddress = "userea1@liferay.com");

			JSONOrganization.addOrganization(organizationName = "Organization Name 2");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name 2",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Add blog") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interact with DXP with user1") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}

		task ("Add a new segment using the organization roperty Name for Organization Name 1") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test 1");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Name");

			ACSegments.addOrganizationName(organizationName = "Organization Name 1");

			ACSegments.saveSegment();
		}

		task ("Assert Name is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Name");
		}

		task ("Assert Test Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization Name 1");
		}

		task ("Add a new segment using the organization roperty Name for Organization Name 2") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test 2");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Name");

			ACSegments.addOrganizationName(organizationName = "Organization Name 2");

			ACSegments.saveSegment();
		}

		task ("Assert Name is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Name");
		}

		task ("Assert Test Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization Name 2");
		}

		task ("Assert that informations are shown correctly") {
			ACNavigation.goToSegments();

			ACSegments.assertMembershipValue(
				membership = 1,
				segmentName = "Dynamic Segment Test 1");

			ACSegments.assertTotalActivitiesValue(
				segmentName = "Dynamic Segment Test 1",
				totalActivities = 1);

			ACSegments.assertMembershipValue(
				membership = 0,
				segmentName = "Dynamic Segment Test 2");

			ACSegments.assertTotalActivitiesValue(
				segmentName = "Dynamic Segment Test 2",
				totalActivities = 0);
		}
	}

}