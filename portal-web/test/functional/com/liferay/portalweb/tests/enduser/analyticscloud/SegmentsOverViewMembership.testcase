@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8490 | Test Summary: Order a Dynamic Segment's Membership Preview Modal"
	@priority = 3
	test OrderDynamicSegmentMembershipPreview {
		property test.run.type = "single";

		var usernameList = "user1,user2,user3";
		var emailList = "user1@liferay.com,user2@liferay.com,user3@liferay.com";

		task ("Add 3 new users in DXP") {
			for (var name : list ${usernameList}) {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = ${name},
					userLastName = ${name},
					userScreenName = ${name});

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add a criteria") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "givenName");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "user");

			ACSegments.saveSegment();
		}

		task ("Edit the segment") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View members in Preview mode and order by name descending") {
			ACSegments.previewSegmentMembership();

			ACSegments.filterKnownSegmentMembersList();

			ACUtils.viewNameListInOrder(
				index = 1,
				name = "user3 user3");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "user2 user2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "user1 user1");
		}
	}

}