@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}
	}

	@description = "This is a use case for LPS-107776. Only can add specific type collection items in a collection page based on manual collection with single item type."
	@priority = 4
	test AddCollectionItemsInCollectionPageBasedOnManualCollection {
		task ("Add a manual collection with Web Content Article item type") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = ${randomSiteName},
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection");
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Test Collection Page Name",
				tabName = "Collections");
		}

		task ("View there is no collection items shown in Collection Display") {
			PageEditor.viewCollectionItem(assetTitle = "Manual Collection");

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(0 Items)");
		}

		task ("Add a web content article based on Basic Web Content in collection page") {
			ContentPages.addCollectionItemInCollectionPage(title = "New Basic Web Content");

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View the web content article is shown in Collection Display") {
			PageEditor.viewCollectionItem(assetTitle = "Web Content Title");

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(1 Items)");
		}
	}

	@description = "This is a test for LPS-107775. Can add new collections when add a collection page from pages admin."
	@priority = 5
	@uitest
	test AddCollectionViaAddingCollectionPage {
		property portal.acceptance = "true";

		task ("Add a manual collection when adding a collection page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection Name",
				menuItem = "Manual Collection",
				pageName = "Manual Collection Page Name",
				selectedAsset = "All Types",
				tabName = "Collections");

			PageEditor.publish();
		}

		task ("Add a dynamic collection when adding a collection page") {
			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection Name",
				menuItem = "Dynamic Collection",
				pageName = "Dynamic Collection Page Name",
				selectedAsset = "All Types",
				tabName = "Collections");

			PageEditor.publish();
		}

		task ("View collection pages are shown in pages admin") {
			for (var collectionType : list "Manual,Dynamic") {
				PagesAdmin.viewPageItemPresent(pageName = "${collectionType} Collection Page Name");
			}
		}
	}

	@description = "This is a test for LPS-194263. If the page has more than one Experience, the page template created is from the Default experience."
	@priority = 2
	test CreatePageTemplateFromContentPageWithExperiencesViaPagesAdmin {
		task ("Given a page creator has a contenge page with experiences") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Set");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Welcome to Liferay");

			PageEditor.publish();
		}

		task ("When the page creator navigates to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});
		}

		task ("Then the page creator could convert the content page to content page template based on the Default experience") {
			PagesAdmin.createPageTemplate(
				collectionName = "Page Template Set",
				pageName = "Test Page Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			Navigator.gotoNavNested(navNested = "Page Template Set");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Test Page Name - Page Template");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Test Page Name - Page Template",
				workflowStatus = "Draft");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Test Page Name - Page Template");

			PageEditor.viewFragment(fragmentName = "Heading");
		}
	}

	@description = "This is a test for LPS-172658. The page creator could preview page template during page creation."
	@priority = 4
	test PreviewPageTemplateDuringPageCreation {
		task ("Given a page creator has a page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Set");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Set",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Page Template Name");

			Portlet.addPG(portletName = "Web Content Display");
		}

		task ("When the page creator creates a page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			LexiconEntry.gotoAddMenuItem(menuItem = "Page");

			Navigator.gotoNavNested(navNested = "Page Template Set");
		}

		task ("Then the page creator could preview page template") {
			MouseOver.javaScriptFocus(
				key_cardTitle = "Page Template Name",
				locator1 = "Icon#EYE_PREVIEW_SPECIFIC");

			AssertVisible(
				key_content = "Preview Page Template",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

			PagesAdmin.previewPageTemplate(pageTemplateName = "Page Template Name");

			Portlet.viewPG(
				portletBody = "Configure this application and place it where desired on the page.",
				portletName = "Web Content Display");

			IFrame.closeFrame();
		}

		task ("When the page creator focuses on the eye icon via keyboard") {
			KeyPress(
				locator1 = "//*[contains(@class,'card-type-asset')][contains(.,'Page Template Name')]",
				value1 = "\TAB");
		}

		task ("Then the page creator could open the preview page template modal via Enter key") {
			KeyPress(
				key_cardTitle = "Page Template Name",
				locator1 = "Icon#EYE_PREVIEW_SPECIFIC",
				value1 = "\ENTER");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "Preview Page Template");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Portlet.viewPG(
				portletBody = "Configure this application and place it where desired on the page.",
				portletName = "Web Content Display");

			SelectFrameTop();
		}

		task ("When the page creator clicks the create page from this template") {
			Button.click(button = "Create Page from This Template");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Test Page Name");

			Button.click(button = "Add");

			SelectFrameTop();

			Alert.viewSuccessMessage();
		}

		task ("Then the page creator could create page based on selected template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Portlet.viewPG(
				portletBody = "This application is not visible to users yet.",
				portletName = "Web Content Display");
		}
	}

	@description = "This is a test for LPS-172658. The page creator could switch page templates on preview page template modal."
	@priority = 4
	test SwitchPageTemplatesOnPreviewPageTemplateModal {
		task ("Given a page creator has page templates") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Set");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Set",
				layoutPageTemplateEntryName = "Widget Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Widget Page Template Name");

			Portlet.addPG(portletName = "Web Content Display");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Set",
				layoutPageTemplateEntryName = "Content Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Content Page Template Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("When the page creator opens the preview page template modal") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			LexiconEntry.gotoAddMenuItem(menuItem = "Page");

			Navigator.gotoNavNested(navNested = "Page Template Set");

			PagesAdmin.previewPageTemplate(pageTemplateName = "Widget Page Template Name");
		}

		task ("Then the page creator could switch page templates") {
			Portlet.viewPG(
				portletBody = "Configure this application and place it where desired on the page.",
				portletName = "Web Content Display");

			SelectFrameTop();

			Click(
				key_text = "angle-left",
				locator1 = "Modal#MODAL_ICON");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			SelectFrameTop();

			KeyPress(
				key_text = "angle-left",
				locator1 = "Modal#MODAL_ICON",
				value1 = "\ENTER");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Portlet.viewPG(
				portletBody = "Configure this application and place it where desired on the page.",
				portletName = "Web Content Display");
		}
	}

	@description = "This is a test for LPS-110183. Can access to edition and display page of collection items in Collection Items modal."
	@priority = 4
	test ViewCollectionItemsModal {
		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Web Content DPT",
				groupName = ${randomSiteName},
				statusKey = "APPROVED",
				subType = "Basic Web Content");

			JSONLayoutpagetemplate.publishLayout(
				displayPageTemplateEntryName = "Web Content DPT",
				groupName = ${randomSiteName});

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = ${randomSiteName},
				layoutPageTemplateEntryName = "Web Content DPT",
				type = "Display Page Template");
		}

		task ("Add multiple web content") {
			for (var n : list "5,4,3,2,1") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = ${randomSiteName},
					title = "Web Content Title ${n}");
			}
		}

		task ("Add a collection page based on recent content collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addCollectionPage(
				collectionName = "Recent Content",
				pageName = "Test Collection Page Name",
				tabName = "Collection Providers");
		}

		task ("View four web contents are shown in collecion items") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View Collection Items",
				pageName = "Test Collection Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Pagination.changePagination(itemsPerPage = 4);

			var i = 1;

			for (var rowNumber : list "1,2,3,4") {
				Page.viewCollectionItem(
					itemName = "Web Content Title ${rowNumber}",
					key_rowNumber = ${i});

				var i = ${i} + 1;
			}

			LexiconTable.viewTableEntryNotPresent(tableEntry = "Web Content Title 5");
		}

		task ("View assets can be editable via collection items in pages admin") {
			Page.gotoCollectionEntryEllipsisItem(
				item = "View Display Page",
				tableEntry = "Web Content Title 1");

			SelectFrameTop();

			PageEditor.clickBack();
		}

		task ("View assets can be aditable via collection items in pages admin") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View Collection Items",
				pageName = "Test Collection Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Page.gotoCollectionEntryEllipsisItem(
				item = "Edit Content",
				tableEntry = "Web Content Title 1");

			ControlMenu.viewHeaderTitle(headerTitle = "Web Content Title 1");

			Navigator.gotoBack();
		}

		task ("View assets can be aditable via collection items in page tree") {
			PagesFinder.goToPagesFinder();

			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesFinder.gotoPageEllipsisItem(
				item = "View Collection Items",
				pageName = "Test Collection Page Name*");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Page.gotoCollectionEntryEllipsisItem(
				item = "Edit Content",
				tableEntry = "Web Content Title 1");

			ControlMenu.viewHeaderTitle(headerTitle = "Web Content Title 1");
		}
	}

	@description = "This is a test for LPS-177031. Page option Copy Page with Permissions works in content page and widget page for available roles to normal site"
	@priority = 4
	test ViewCopyPageWithPermissionsForAvailableRolesToNormalSite {
		var randomRoleKey = StringUtil.randomString(8);

		var randomRoleKey = StringUtil.toLowerCase(${randomRoleKey});

		task ("Given a content page and a widget page without view permissions for Guest and Site Member") {
			JSONRole.addRegularRole(
				roleKey = ${randomRoleKey},
				roleTitle = ${randomRoleKey});

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.publish();

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Test Content Page Name");

			IFrame.selectPermissionsFrame();

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Guest");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Site Member");

			Role.definePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = ${randomRoleKey});
		}

		task ("When we copy these pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Make a Copy",
				pageName = "Test Content Page Name");

			DropdownMenuItem.click(menuItem = "Page With Permissions");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Copy Content Page Name");

			Button.click(button = "Add");

			SelectFrame.selectFrameTop();

			Alert.viewSuccessMessage();

			PagesAdmin.viewPageStatus(
				pageName = "Copy Content Page Name",
				status = "Draft");

			PermissionsInline.gotoPagePG(
				pageName = "Copy Content Page Name",
				site = ${randomSiteName});

			for (var roleTitle : list "Guest,Site Member") {
				Role.viewPermissionPG(
					permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
					permissionFlagged = "false",
					roleTitle = ${roleTitle});
			}

			Role.viewPermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				permissionFlagged = "true",
				roleTitle = ${randomRoleKey});
		}

		task ("Then the permissions must be the same as on the original pages") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Widget Page Name");

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Test Widget Page Name");

			IFrame.selectPermissionsFrame();

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Guest");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Site Member");

			Role.definePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = ${randomRoleKey});

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Make a Copy",
				pageName = "Test Widget Page Name");

			DropdownMenuItem.click(menuItem = "Page With Permissions");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Copy Widget Page Name");

			Button.click(button = "Add");

			SelectFrame.selectFrameTop();

			Alert.viewSuccessMessage();

			PermissionsInline.gotoPagePG(
				pageName = "Copy Widget Page Name",
				site = ${randomSiteName});

			for (var roleTitle : list "Guest,Site Member") {
				Role.viewPermissionPG(
					permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
					permissionFlagged = "false",
					roleTitle = ${roleTitle});
			}

			Role.viewPermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				permissionFlagged = "true",
				roleTitle = ${randomRoleKey});
		}
	}

	@description = "This is a test for LPS-177031. Page option Copy Page with Permissions works in content page and widget page for available roles to organization site"
	@priority = 3
	test ViewCopyPageWithPermissionsForAvailableRolesToOrganizationSite {
		var organizationName = StringUtil.randomString(8);

		task ("Given a content page and a widget page with view permissions for new organization role and new regular role") {
			JSONOrganization.addOrganization(
				organizationName = ${organizationName},
				organizationSite = "true");

			JSONLayout.addPublicLayout(
				groupName = ${organizationName},
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${organizationName});

			PageEditor.publish();

			PagesAdmin.openPagesAdmin(siteURLKey = ${organizationName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Test Content Page Name");

			IFrame.selectPermissionsFrame();

			Role.definePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Organization User");
		}

		task ("When we copy these pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${organizationName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Make a Copy",
				pageName = "Test Content Page Name");

			DropdownMenuItem.click(menuItem = "Page With Permissions");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Copy Content Page Name");

			Button.click(button = "Add");

			SelectFrame.selectFrameTop();

			Alert.viewSuccessMessage();

			PagesAdmin.viewPageStatus(
				pageName = "Copy Content Page Name",
				status = "Draft");

			PermissionsInline.gotoPagePG(
				pageName = "Copy Content Page Name",
				site = ${organizationName});

			Role.viewPermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				permissionFlagged = "true",
				roleTitle = "Organization User");
		}

		task ("Then the permissions must be the same as on the original pages") {
			JSONLayout.addPublicLayout(
				groupName = ${organizationName},
				layoutName = "Test Widget Page Name");

			PagesAdmin.openPagesAdmin(siteURLKey = ${organizationName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Test Widget Page Name");

			IFrame.selectPermissionsFrame();

			Role.definePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Organization User");

			PagesAdmin.openPagesAdmin(siteURLKey = ${organizationName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Make a Copy",
				pageName = "Test Widget Page Name");

			DropdownMenuItem.click(menuItem = "Page With Permissions");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Copy Widget Page Name");

			Button.click(button = "Add");

			SelectFrame.selectFrameTop();

			Alert.viewSuccessMessage();

			PermissionsInline.gotoPagePG(
				pageName = "Copy Widget Page Name",
				site = ${organizationName});

			Role.viewPermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				permissionFlagged = "true",
				roleTitle = "Organization User");
		}
	}

}