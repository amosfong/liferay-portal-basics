@component-name = "portal-content-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	@description = "This is a use case for LPS-82492."
	@priority = 5
	test AddCreatedStructureForImportedTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		HeadlessSite.addSite(siteName = "Site Name 2");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-2");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			templateDescription = "Content List Display Description",
			templateFile = "content_list_display_template.ftl",
			templateName = "Content List Display");

		WebContentTemplates.addCP(
			templateDescription = "Thumbnail Display Description",
			templateFile = "thumbnail_display_template.ftl",
			templateName = "Thumbnail Display");

		WebContentTemplates.addCP(
			templateDescription = "Carousel Display Description",
			templateFile = "carousel_display_template.ftl",
			templateName = "Carousel Display");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-2");

		LAR.exportPortlet(larFileName = "content-display-templates.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "Content List");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		DataEngine.editFieldTip(
			fieldFieldLabel = "Web Content",
			fieldHelp = "Choose as many content pieces as you would like to feature.");

		DataEngine.toggleFieldRepeatable(fieldFieldLabel = "Web Content");

		WebContentStructures.saveCP(structureName = "Content List");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		LAR.importPortlet(larFileName = "content-display-templates.lar");

		Refresh();

		NavItem.gotoTemplates();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		for (var templateName : list "Carousel Display,Thumbnail Display,Content List Display") {
			WebContentNavigator.gotoViewTemplate(templateName = ${templateName});

			WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

			WebContentTemplates.inputTemplateAddScreenFields(structureName = "Content List");

			PortletEntry.save();
		}

		for (var templateName : list "Carousel Display,Thumbnail Display,Content List Display") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavItem(navItem = "Templates");

			WebContentTemplates.viewCP(
				structureName = "Content List",
				templateDescription = "${templateName} Description",
				templateName = ${templateName});
		}
	}

	@description = "This is a use case for LPS-155637. Verify that it's possible to import exported web content structures with fieldsets."
	@priority = 3
	test CanImportExportedWCStructuresWithFieldsets {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add a new site") {
			HeadlessSite.addSite(siteName = "Site Name");
		}

		task ("And: Add a new WC structure with fields") {
			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Numeric,Text,Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("And: Add new WC structures based on fieldsets") {
			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name 2");

			DataEngine.addFieldsetToBuilder(fieldsetName = "WC Structure Name");

			WebContentStructures.saveCP();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name 3");

			DataEngine.addFieldsetToBuilder(fieldsetName = "WC Structure Name 2");

			WebContentStructures.saveCP();
		}

		task ("And: Export the LAR file with structures") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			LAR.exportPortlet(larFileName = "WebContent_portlet_structures.lar");
		}

		task ("When: Import the exported LAR file to another site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LAR.importPortlet(larFileName = "WebContent_portlet_structures.lar");
		}

		task ("Then: Import should be successful without error message on console") {
			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.viewCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name 3");

			AssertConsoleTextNotPresent(value1 = "java.sql.BatchUpdateException");

			AssertConsoleTextNotPresent(value1 = "javax.persistence.PersistenceException");
		}
	}

	@description = "This is a use case for LPS-128693. Verify can import a LAR containing WCD between instances."
	@priority = 3
	test CanImportWCDBetweenInstances {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: new site page with a web content display is exported") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest",
				title = "WC WebContent Title");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.openSitePage(
				pageName = "Test Page Name",
				siteName = "Guest");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

			Navigator.openSitePage(
				pageName = "Test Page Name",
				siteName = "Guest");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			LAR.exportSiteCP(siteScopeName = "Guest");

			var key_larFileName = ${larFileName};
			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("When: The exported data is imported into a new virtual instance site") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "liferay.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.firstLoginPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com",
				virtualHostsURL = "http://www.able.com:8080");

			Site.openSitesAdmin(baseURL = "http://www.able.com:8080");

			Site.addBlankCP(siteName = "Site Name");

			for (var layoutUtilityPageName : list "404 Error,500 Error") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Site Name",
					layoutUtilityPageName = ${layoutUtilityPageName},
					portalInstanceName = "www.able.com",
					portalURL = "http://www.able.com:8080");
			}

			LAR.importSiteCP(
				baseURL = "http://www.able.com:8080",
				larFileName = ${larFileName},
				siteName = "Site Name");

			Navigator.openSitePage(
				baseURL = "http://www.able.com:8080",
				pageName = "Test Page Name",
				siteName = "Site Name");
		}

		task ("Then: The web content is displayed with no errors") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}

		task ("And: Assert the usage on the page with the Web Content Display widget appears in the list") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "Site Name");

			WebContent.viewTitle(webContentTitle = "WC WebContent Title");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");

			AssertTextEquals(
				locator1 = "//tr[1]/td[1]",
				value1 = "Test Page Name");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Web Content Display Widget");

			AssertConsoleTextNotPresent(value1 = "NullPointerException");
		}
	}

	@description = "This is a use case for LPS-128693. Verify can import a LAR containing WCD between instances with external reference code."
	@priority = 3
	test CanImportWCDBetweenInstancesWithExternalReferenceCode {
		property custom.properties = "feature.flag.LPD-27566=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: new site page with a web content display is exported") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest",
				title = "WC WebContent Title");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.openSitePage(
				pageName = "Test Page Name",
				siteName = "Guest");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

			Navigator.openSitePage(
				pageName = "Test Page Name",
				siteName = "Guest");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			LAR.exportSiteCP(siteScopeName = "Guest");

			var key_larFileName = ${larFileName};
			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("When: The exported data is imported into a new virtual instance site") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "liferay.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.firstLoginPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com",
				virtualHostsURL = "http://www.able.com:8080");

			Site.openSitesAdmin(baseURL = "http://www.able.com:8080");

			Site.addBlankCP(siteName = "Site Name");

			for (var layoutUtilityPageName : list "404 Error,500 Error") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Site Name",
					layoutUtilityPageName = ${layoutUtilityPageName},
					portalInstanceName = "www.able.com",
					portalURL = "http://www.able.com:8080");
			}

			LAR.importSiteCP(
				baseURL = "http://www.able.com:8080",
				larFileName = ${larFileName},
				siteName = "Site Name");

			Navigator.openSitePage(
				baseURL = "http://www.able.com:8080",
				pageName = "Test Page Name",
				siteName = "Site Name");
		}

		task ("Then: The web content is displayed with no errors") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}

		task ("And: Assert the usage on the page with the Web Content Display widget appears in the list") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "Site Name");

			WebContent.viewTitle(webContentTitle = "WC WebContent Title");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");

			AssertTextEquals(
				locator1 = "//tr[1]/td[1]",
				value1 = "Test Page Name");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Web Content Display Widget");

			AssertConsoleTextNotPresent(value1 = "NullPointerException");
		}
	}

	@description = "This is a test for LPS-114230. Verify that can show exported image global structures between instances."
	@priority = 3
	test CanShowExportedGlobalStructuresImageBetweenInstances {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: new web content with WC structure with an image field is exported") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "global");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_1.png",
				dmDocumentTitle = "Document Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Image",
				templateName = "WC Template Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				imageFileName = "Document Title",
				navTab = "Documents and Media",
				structureName = "WC Structure Name",
				webContentImage = "Document Title",
				webContentTitle = "WC Title");

			PortletEntry.publish();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			LAR.exportPortlet(
				contentLastRange = "Last",
				larFileName = "WebContent_portlet_structures.lar");
		}

		task ("When: The exported data is imported into a new virtual instance site") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.firstLoginPG(
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");

			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global");

			LAR.importPortlet(larFileName = "WebContent_portlet_structures.lar");
		}

		task ("Then: Assert that the imported web content shows the image") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global");

			WebContent.viewWithStructureCP(
				webContentImage = "Document Title",
				webContentTitle = "WC Title");
		}
	}

	@description = "This is a use case for LPS-162626. Verify order is preserved in repeatable web content fields when staging."
	@priority = 3
	test ContentWillDisplayInOrderInRepeatableWCFields {
		property osgi.module.configuration.file.names = "configuration.override.com.liferay.journal.configuration.JournalServiceConfiguration_journalArticleExportImportProcessorCacheEnabled=B\"false\"";

		var groupId = JSONGroupSetter.setGroupId(groupName = "Test Site Name");

		task ("Enable dynamic and manual selection") {
			AssetPublisherPortlet.enableDynamicAndManualSelection();
		}

		task ("Given a Web Content Structure with a repeatable fields group is created") {
			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(structureName = "STR_KV");

			DataEngine.addField(
				fieldFieldLabel = "Key",
				fieldName = "Text",
				fieldReference = "Key");

			DataEngine.addFieldNested(
				fieldFieldLabel = "Value",
				fieldName = "Web Content",
				fieldReference = "Value",
				targetFieldLabel = "Key");

			DataEngine.editFieldReference(
				assertFieldReference = "Fieldset",
				fieldReference = "Fieldset",
				fieldsGroupLabel = "Fields Group");

			DataEngine.toggleFieldRepeatable(fieldsGroupLabel = "Fields Group");

			WebContentStructures.saveCP();
		}

		task ("And given a template is created for the structure to display keys and web content values") {
			var templateScript = '''
<#if Fieldset.getSiblings()?has_content>
	<#list Fieldset.getSiblings() as cur_Key>
	    Key -> 
		<#if (cur_Key.Key.getData())??>
			${cur_Key.Key.getData()}
		</#if>		
		<br>
        Value ->
        <#if (cur_Key.Value.getData())?? && (cur_Key.Value.getFriendlyUrl())??>
            <#assign
	        	webContentData = jsonFactoryUtil.createJSONObject(cur_Key.Value.getData())
	        />
        	${webContentData.title?if_exists}
        </#if>   
        </p>
	</#list>
</#if>
			''';

			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "STR_KV");

			WebContentTemplates.addCP(
				templateName = "STR_KV Template",
				templateScript = ${templateScript});
		}

		task ("When Web Content is created using a structure with repeatable fields") {
			JSONWebcontent.addWebContent(
				content = "Basic WC",
				groupId = ${groupId},
				title = "WC_BASIC");

			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "STR_KV");

			WebContent.addWithStructureCP(
				templateName = "STR_KV Template",
				webContentTitle = "WC_KV");

			DataEngine.addRepeatableField(fieldLabel = "Fields Group");

			DataEngine.addRepeatableField(fieldLabel = "Fields Group");

			WebContent.editFieldValue(
				fieldFieldLabel = "Key",
				index = 1,
				value = "1. No");

			WebContent.editFieldValue(
				fieldFieldLabel = "Key",
				index = 2,
				value = "2. No");

			WebContent.editFieldValue(
				fieldFieldLabel = "Key",
				index = 3,
				value = "3. Yes");

			Click(
				key_fieldLabel = "Value",
				key_index = 3,
				locator1 = "DataEngineRenderer#SELECTOR_INPUT_INDEXED");

			SelectFrame(
				key_title = "Web Content",
				locator1 = "IFrame#MODAL_ANY");

			LexiconEntry.gotoEntry(rowEntry = "WC_BASIC");

			SelectFrame(value1 = "relative=top");

			PortletEntry.publish();
		}

		task ("And when a page is created with an Asset Publisher to display the Web Content and then staged") {
			JSONLayout.addPublicLayout(
				groupId = ${groupId},
				layoutName = "PAGE_KV");

			JSONLayout.addWidgetToPublicLayout(
				groupId = ${groupId},
				layoutName = "PAGE_KV",
				widgetName = "Asset Publisher");

			Navigator.openSitePage(
				pageName = "PAGE_KV",
				siteName = "Test Site Name");

			Portlet.gotoPortletOptions(
				portletName = "Asset Publisher",
				portletOption = "Configuration");

			AssetPublisherPortlet.configureDisplayTemplatePG(displayTemplate = "Full Content");

			Navigator.gotoSitePage(
				pageName = "PAGE_KV",
				siteName = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Staging");

			Staging.activateStagingCP(siteName = "Test Site Name");
		}

		task ("Then the Web Content will be displayed in the order they were entered on the staged site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name-staging");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "PAGE_KV");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
				value1 = "Key -> 1. No Value -> Key -> 2. No Value -> Key -> 3. Yes Value -> WC_BASIC");
		}
	}

	@priority = 4
	test ExportLARWithNestedWebContent {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.addFieldNested(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content",
			targetFieldLabel = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Basic Web Content");

		WebContent.addWithStructureCP(
			structureName = "Basic Web Content",
			templateName = "Basic Web Content",
			webContentTitle = "Basic WebContent Title");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title",
			webContentWebContent = "Basic WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");
	}

	@description = "This is a use case for LPS-95441."
	@priority = 3
	test ExportWebContentWithEditedStructure {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Structure Description",
			structureName = "Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "Structure Name");

		WebContentStructures.viewCP(
			structureDescription = "Structure Description",
			structureName = "Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Structure Name");

		WebContent.addWithStructureCP(
			description = "WC WebContent 1 Description",
			fieldName = "TestName",
			webContentTitle = "WC WebContent 1 Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent 1 Title");

		NavItem.gotoStructures();

		WebContentNavigator.gotoEditStructure(structureName = "Structure Name");

		DataEngine.delete(fieldFieldLabel = "Text");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		WebContentStructures.saveCP(structureName = "Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");
	}

	@priority = 5
	test ImportAndUseGlobalStructureAndTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		HeadlessSite.addSite(siteName = "Site Name 2");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-2");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "3 Column with Images Description",
			structureName = "3 Column with Images");

		DataEngine.addField(
			fieldFieldLabel = "Title",
			fieldName = "Text",
			fieldType = "Multiple Lines");

		for (var count : list "1,2,3") {
			DataEngine.addField(
				fieldFieldLabel = "Image ${count}",
				fieldName = "Image");

			DataEngine.addField(
				fieldFieldLabel = "Heading ${count}",
				fieldName = "Text",
				fieldType = "Multiple Lines");

			DataEngine.addField(
				fieldFieldLabel = "Content ${count}",
				fieldName = "Text",
				fieldType = "Multiple Lines");
		}

		WebContentStructures.saveCP();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-2");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "3 Column with Images",
			templateDescription = "Frontpage 3 Column with Images Template Description",
			templateFile = "frontpage_3_column_with_images_template.ftl",
			templateName = "Frontpage 3 Column with Images Template");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-2");

		LAR.exportPortlet(larFileName = "structure-templates.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

		LAR.importPortlet(larFileName = "structure-templates.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "3 Column with Images");

		WebContent.addWithStructureCP(
			fieldType = "Multiple Lines",
			webContentText = "Green Waste",
			webContentTextFieldLabel = "Title",
			webContentTitle = "Agricultural Science Front Page");

		var count = 1;

		for (var webContentText : list "Mowed Lawns,Mulched Branches,Compost Bin") {
			WebContent.addWithStructureCP(
				fieldType = "Multiple Lines",
				webContentText = ${webContentText},
				webContentTextFieldLabel = "Heading ${count}");

			var count = ${count} + 1;
		}

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Agricultural Science Front Page");

		WebContent.viewWithStructureCP(
			fieldType = "Multiple Lines",
			webContentText = "Green Waste",
			webContentTextFieldLabel = "Title",
			webContentTitle = "Agricultural Science Front Page");

		var count = 1;

		for (var webContentText : list "Mowed Lawns,Mulched Branches,Compost Bin") {
			AssertTextEquals(
				key_fieldFieldLabel = "Heading ${count}",
				locator1 = "DDMField#MULTIPLE_LINES",
				value1 = ${webContentText});

			var count = ${count} + 1;
		}
	}

	@priority = 4
	test ImportLAR {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "WC Structure Name");

		DataEngine.addField(fieldName = "Text");

		WebContentStructures.saveCP();

		WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

		WebContentTemplates.addCP(
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			templateName = "WC Template Name",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		LAR.exportPortlet(larFileName = "WebContent_portlet2.lar");

		JSONGroup.deleteGroupByName(groupName = "Test Site Name");

		HeadlessSite.addSite(siteName = "Test Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		LAR.importPortlet(larFileName = "WebContent_portlet2.lar");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.viewCP(structureName = "WC Structure Name");

		LexiconEntry.gotoEntry(rowEntry = "WC Structure Name");

		DataEngine.viewField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		Navigator.gotoNavItem(navItem = "Templates");

		WebContentTemplates.viewCP(templateName = "WC Template Name");
	}

	@priority = 4
	test ImportLARLinkToPageValidation {
		property testray.component.names = "Web Content Administration";

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Test Structure Description",
			structureName = "Test Structure");

		DataEngine.addField(
			fieldFieldLabel = "Link to Page",
			fieldName = "Link to Page");

		WebContentStructures.saveCP(structureName = "Test Structure");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "Test Structure",
			templateDescription = "Test Template Description",
			templateName = "Test Template");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Test Structure");

		WebContent.addWithStructureCP(
			structureName = "Test Structure",
			templateName = "Test Template",
			webContentLinkToPage = "Test Page",
			webContentTitle = "WC Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC Title");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

		HeadlessSite.addSite(siteName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		LAR.importPortlet(
			larFileName = "WebContent_portlet.lar",
			siteName = "Site Name");
	}

	@description = "This is a use case for LPS-88893."
	@priority = 3
	test ImportLARWithTheSameTitle {
		property testray.component.names = "Training";

		HeadlessSite.addSite(siteName = "Site Name 1");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name 1",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-1");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

		HeadlessSite.addSite(siteName = "Site Name 2");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name 2",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-2");

		LAR.importPortlet(larFileName = "WebContent_portlet.lar");

		AssertConsoleTextNotPresent(value1 = "DuplicateFriendlyURLEntryException");
	}

	@description = "This is a test for LPS-96545. Cancel reset and reset the default values when edit default values in imported web content structure."
	@priority = 4
	test ResetImportedStructureDefaultValues {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.importStructure(
				structureName = "WC Structure Name",
				uploadFileName = "Structure_All_Fields.json");
		}

		task ("Edit the default values of new structure") {
			NavItem.gotoStructures();

			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = 1,
				row = 1,
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = 9,
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "Enter Text Here",
				webContentWebContent = "WC Title");

			PortletEntry.save();
		}

		task ("Export the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LAR.exportPortlet(larFileName = "WebContentPortlet.lar");
		}

		task ("Add a new site") {
			HeadlessSite.addSite(siteName = "Site Name");
		}

		task ("Import the web content in new site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			LAR.importPortlet(larFileName = "WebContentPortlet.lar");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Site Name",
				title = "Blogs Entry Title");
		}

		task ("Edit the default values of imported web content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoStructures();

			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			RelatedAssets.selectAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");
		}

		task ("Cancel reset the default values") {
			WebContentStructures.resetStructureDefaultValuesCP(
				assetTitle = "Blogs Entry Title",
				cancel = "true");

			WebContent.viewWithStructureCP(
				column = 1,
				predefinedValue = "true",
				row = 1,
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = 9,
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "Enter Text Here",
				webContentWebContent = "WC Title");
		}

		task ("Reset the default values") {
			WebContentStructures.resetStructureDefaultValuesCP(assetTitle = "Blogs Entry Title");

			WebContent.viewWithStructureCP(
				column = 1,
				predefinedValue = "true",
				row = 1,
				webContentColor = 000000,
				webContentDate = "__/__/____",
				webContentGrid = "false",
				webContentNumeric = "",
				webContentRichText = "",
				webContentSelectFromList = "Choose an Option",
				webContentText = "",
				webContentWebContent = "");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_fieldFieldLabel = "Single Selection",
				key_optionValue = "Option 3",
				locator1 = "WCEditWebContent#SELECTION_OPTION");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_fieldFieldLabel = "Multiple Selection",
				key_optionValue = "Option 1",
				locator1 = "WCEditWebContent#SELECTION_OPTION");
		}
	}

}