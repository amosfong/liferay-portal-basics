@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8356 | Test Summary: 180 Days time period filter in Path Analysis"
	@ignore = "true"
	@priority = 3
	test CanTimeFilterUse180DaysPathAnalysis {

		// AC Refactor: Need past data
		// AC Refactor ticket: LRAC-8874

		task ("Switch to new property in AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}

		task ("Go to Pages tab in Sites") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		// Can't assert that the filter is working correctly without past data

		task ("Assert 'Last 180 days' time filter") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast180Days();

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Last 180 days");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8358 | Test Summary: Custom Range time period filter in Path Analysis"
	@ignore = "true"
	@priority = 5
	test CanTimeFilterUseCustomRangeInPathAnalysis {

		// AC Refactor: Need past data
		// AC Refactor ticket: LRAC-8878

		task ("Switch to new property in AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}

		task ("Go to Pages tab in Sites") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		// Can't assert that the custom filter is working correctly without past data

		task ("Assert custom time filter") {
			ACTimeFilter.setCustomRange(
				endDay = 13,
				endMonth = "July",
				endYear = 2020,
				startDay = 1,
				startMonth = "July",
				startYear = 2020);

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Jul 1, 2020 - Jul 13, 2020");
		}
	}

	@description = "Feature ID: LRAC-14836 | Automation ID: LRAC-15060 | Test Summary: The dropdown is updated when a segment is deleted"
	@priority = 4
	test DeleteSegmentDropdownUpdated {
		property test.run.type = "single";

		task ("Create a site and a blog and add to a page") {
			ACUtils.addSiteAndPage();

			ACUtils.createBlogsAndAddToPage(entryTitle = "Blog test");
		}

		task ("Connect AC to DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the page, then close the sessions") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blog test,Blog test,Blog test,Blog test",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an email field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "email");

			ACSegments.selectOperator(operator = "is known");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("Navigate to Pages tab") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		task ("Set time filter use 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Navigate to page report entry") {
			var dataSourceName = StringUtil.extractFirst(${assignedPropertyName}, " ");

			ACNavigation.openItem(itemName = "Blog test - Site Name - ${dataSourceName}");
		}

		task ("Go to the Path tab") {
			ACNavigation.switchTab(tabName = "Path");

			ACUtils.waitForLoading();
		}

		task ("Click Filter button") {
			Button.click(button = "Filter");
		}

		task ("Search for segment on the list") {
			ACPagePath.searchSegmentFilterBar(searchItem = "Dynamic Segment Test");

			ACPagePath.viewSegmentDropdown(nameList = "Dynamic Segment Test");
		}

		task ("Delete dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.deleteSegment(searchTerm = "Dynamic Segment Test");
		}

		task ("Navigate to Pages tab") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		task ("Set time filter use 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Navigate to page report entry") {
			ACNavigation.openItem(itemName = "Blog test - Site Name - ${dataSourceName}");
		}

		task ("Go to the Path tab") {
			ACNavigation.switchTab(tabName = "Path");

			ACUtils.waitForLoading();
		}

		task ("Click Filter button") {
			Button.click(button = "Filter");
		}

		task ("Search for segment not on list") {
			ACPagePath.searchSegmentFilterBar(searchItem = "Dynamic Segment Test");

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no segments.");
		}
	}

	@description = "Feature ID: LRAC-14836 | Automation ID: LRAC-15061 | Test Summary: The filter shows all segments"
	@priority = 5
	test ViewSegmentDropdownList {
		property test.run.type = "single";

		task ("Create a site and a blog and add to a page") {
			ACUtils.addSiteAndPage();

			ACUtils.createBlogsAndAddToPage(entryTitle = "Blog test");
		}

		task ("Connect AC to DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the page, then close the sessions") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blog test,Blog test,Blog test,Blog test,Blog test",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Create four static segments") {
			for (var n : list "1,2,3,4") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = "Static Segment Test ${n}");

				ACSegments.addStaticMember(tableMember = "Test Test");

				ACSegments.saveSegment();
			}
		}

		task ("Navigate to Pages tab") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		task ("Set time filter use 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Navigate to page report entry") {
			var dataSourceName = StringUtil.extractFirst(${assignedPropertyName}, " ");

			ACNavigation.openItem(itemName = "Blog test - Site Name - ${dataSourceName}");
		}

		task ("Go to the Path tab") {
			ACNavigation.switchTab(tabName = "Path");

			ACUtils.waitForLoading();
		}

		task ("Click Filter button") {
			Button.click(button = "Filter");
		}

		task ("View segments on the list") {
			ACPagePath.viewSegmentDropdown(nameList = "Static Segment Test 1,Static Segment Test 2,Static Segment Test 3,Static Segment Test 4");
		}
	}

}