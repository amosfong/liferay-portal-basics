@component-name = "portal-segmentation"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Segmentation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-198108. Can add properties items to a segment via keyboard."
	@priority = 4
	test AddPropertiesViaKeyboard {
		task ("Given a segment designer accesses to the Segments admin") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("When the segment designer adds a segment") {
			LexiconEntry.gotoAdd();

			WaitForVisible(locator1 = "Segmentation#ADD_FIELD_POSITION");
		}

		task ("Then the segment designer could add properties via keyboard") {
			var panelWidth = selenium.getElementWidth("//div[contains(@class,'criteria-sidebar')]//div[contains(@class,'panel-body')]");
			var subtitleWidth = selenium.getElementWidth("//div[contains(@class,'criteria-sidebar')]//div[contains(@class,'panel-body')]//p[contains(.,'Inherited attributes are not taken into account to include members in segments.')]");

			StringUtil.assertEquals(${panelWidth}, ${subtitleWidth});

			KeyPress(
				ariaLabel = "Search Properties",
				locator1 = "Button#ANY_WITH_ARIA_LABEL",
				value1 = "\TAB");

			AssertElementFocused(
				key_panel = "User",
				locator1 = "Panel#PANEL_HEADER");

			KeyPress(
				key_panel = "User",
				locator1 = "Panel#PANEL_HEADER",
				value1 = "\DOWN");

			AssertElementFocused(
				key_propertyOption = "Category",
				locator1 = "Segmentation#ADD_FIELD_TYPE");

			for (var borderRadius : list "border-bottom-left-radius,border-bottom-right-radius,border-top-left-radius,border-top-right-radius") {
				AssertCssValue(
					key_propertyOption = "Category",
					locator1 = "Segmentation#ADD_FIELD_TYPE",
					locator2 = ${borderRadius},
					value1 = "4px");
			}

			KeyPress(
				key_propertyOption = "User Name",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\DOWN");

			KeyPress(
				key_panel = "Organization",
				locator1 = "Panel#PANEL_HEADER",
				value1 = "\ENTER");

			KeyPress(
				key_panel = "Organization",
				locator1 = "Panel#PANEL_HEADER",
				value1 = "\DOWN");

			KeyPress(
				locator1 = "xpath=(//li[contains(@class, 'criteria-sidebar-item-root')][normalize-space()='Category'])[2]",
				value1 = "\ENTER");

			AssertVisible(locator1 = "Segmentation#EMPTY_DROP_ZONE_TARGET");

			KeyPress(
				locator1 = "xpath=(//li[contains(@class, 'criteria-sidebar-item-root')][normalize-space()='Category'])[2]",
				value1 = "\ENTER");

			AssertVisible(
				locator1 = "Segmentation#CONDITIONS_PROPERTY_NAME",
				propertyName = "Category");

			KeyPress(
				locator1 = "xpath=(//li[contains(@class, 'criteria-sidebar-item-root')][normalize-space()='Category'])[2]",
				value1 = "\DOWN");

			AssertElementFocused(
				key_propertyOption = "Country",
				locator1 = "Segmentation#ADD_FIELD_TYPE");

			KeyPress(
				key_propertyOption = "Country",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");

			AssertVisible(locator1 = "Segmentation#KEYBOARD_MOVEMENT_PREVIEW");

			KeyPress(
				key_propertyOption = "Country",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\UP");

			KeyPress(
				key_propertyOption = "Country",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\UP");

			KeyPress(
				key_propertyOption = "Country",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");

			AssertVisible(
				locator1 = "Segmentation#CONDITIONS_PROPERTY_NAME",
				propertyName = "Country");

			KeyPress(
				key_propertyOption = "Name",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\DOWN");

			KeyPress(
				key_propertyOption = "Organization",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");

			KeyPress(
				key_propertyOption = "Organization",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");

			AssertVisible(
				locator1 = "Segmentation#CONDITIONS_PROPERTY_NAME",
				propertyName = "Organization");

			var i = 1;

			for (var propertyName : list "Country,Category,Organization") {
				AssertVisible(
					index = ${i},
					locator1 = "Segmentation#CONDITIONS_PROPERTY_NAME_BY_INDEX",
					propertyName = ${propertyName});

				var i = ${i} + 1;
			}

			KeyPress(
				key_text = "And",
				locator1 = "Button#ANY",
				value1 = "\TAB");

			AssertElementFocused(
				locator1 = "Segmentation#CRITERION_DRAG_ICON",
				propertyName = "Category");

			KeyPress(
				locator1 = "Segmentation#CRITERION_DRAG_ICON",
				propertyName = "Category",
				value1 = "\ENTER");

			AssertVisible(locator1 = "Segmentation#KEYBOARD_MOVEMENT_PREVIEW");

			KeyPress(
				locator1 = "Segmentation#CRITERION_DRAG_ICON",
				propertyName = "Category",
				value1 = "\DOWN");

			KeyPress(
				locator1 = "Segmentation#CRITERION_DRAG_ICON",
				propertyName = "Category",
				value1 = "\DOWN");

			KeyPress(
				locator1 = "Segmentation#CRITERION_DRAG_ICON",
				propertyName = "Category",
				value1 = "\ENTER");

			var i = 1;

			for (var propertyName : list "Country,Organization,Category") {
				AssertVisible(
					index = ${i},
					locator1 = "Segmentation#CONDITIONS_PROPERTY_NAME_BY_INDEX",
					propertyName = ${propertyName});

				var i = ${i} + 1;
			}

			KeyPress(
				locator1 = "xpath=(//li[contains(@class, 'criteria-sidebar-item-root')][normalize-space()='Tag'])[2]",
				value1 = "\DOWN");

			KeyPress(
				key_propertyOption = "Type",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");

			AssertVisible(locator1 = "Segmentation#KEYBOARD_MOVEMENT_PREVIEW");

			KeyPress(
				key_propertyOption = "Type",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ESCAPE");

			AssertElementFocused(
				key_propertyOption = "Type",
				locator1 = "Segmentation#ADD_FIELD_TYPE");

			AssertElementNotPresent(
				locator1 = "Segmentation#CONDITIONS_PROPERTY_NAME",
				propertyName = "Type");

			var i = 1;

			for (var propertyName : list "Country,Organization,Category") {
				AssertVisible(
					index = ${i},
					locator1 = "Segmentation#CONDITIONS_PROPERTY_NAME_BY_INDEX",
					propertyName = ${propertyName});

				var i = ${i} + 1;
			}
		}
	}

	@description = "This is a test for LPS-198108. Can understand the actions of keyboard from screen reader."
	@priority = 3
	test ViewAccessibilityOfKeyboardActions {
		task ("Given a segment designer accesses to the segment editor") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAdd();

			WaitForVisible(locator1 = "Segmentation#ADD_FIELD_POSITION");
		}

		task ("When the segment designer focuses on the sidebar item via keyboard") {
			KeyPress(
				ariaLabel = "Search Properties",
				locator1 = "Button#ANY_WITH_ARIA_LABEL",
				value1 = "\TAB");

			KeyPress(
				key_panel = "User",
				locator1 = "Panel#PANEL_HEADER",
				value1 = "\DOWN");
		}

		task ("Then the screen reader should announce correct message") {
			AssertAttributeValue(
				key_propertyOption = "Category",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "aria-label",
				value2 = "Drag Category");
		}

		task ("When the segment designer drags the sidebar item via keyboard") {
			KeyPress(
				key_propertyOption = "Category",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");
		}

		task ("Then the screen reader should announce correct message") {
			AssertElementPresent(
				key_assertive = "Use up and down arrows to move the item and press enter to place it in desired position. Currently targeting middle of item 0 group root.",
				locator1 = "Segmentation#ASSERTIVE");
		}

		task ("When the segment designer drops the item via keyboard") {
			KeyPress(
				key_propertyOption = "Category",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");
		}

		task ("Then the screen reader should announce correct message") {
			AssertElementPresent(
				key_assertive = "Category placed on middle of item 0 of group root.",
				locator1 = "Segmentation#ASSERTIVE");
		}

		task ("When the segment designer drags another sidebar item via keyboard") {
			KeyPress(
				key_propertyOption = "Team",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\DOWN");

			KeyPress(
				key_propertyOption = "User",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");
		}

		task ("Then the screen reader should announce correct message") {
			AssertElementPresent(
				key_assertive = "Use up and down arrows to move the item and press enter to place it in desired position. Currently targeting bottom of item 0 group 1.",
				locator1 = "Segmentation#ASSERTIVE");
		}

		task ("When the segment designer moves the item up via keyboard") {
			KeyPress(
				key_propertyOption = "User",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\UP");
		}

		task ("Then the screen reader should announce correct message") {
			AssertElementPresent(
				key_assertive = "Targeting middle of item 0 of group 1.",
				locator1 = "Segmentation#ASSERTIVE");
		}

		task ("When the segment designer moves the item up via keyboard") {
			KeyPress(
				key_propertyOption = "User",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\UP");
		}

		task ("Then the screen reader should announce correct message") {
			AssertElementPresent(
				key_assertive = "Targeting top of item 0 of group 1.",
				locator1 = "Segmentation#ASSERTIVE");
		}

		task ("When the segment designer drops the item via keyboard") {
			KeyPress(
				key_propertyOption = "User",
				locator1 = "Segmentation#ADD_FIELD_TYPE",
				value1 = "\ENTER");
		}

		task ("Then the screen reader should announce correct message") {
			AssertElementPresent(
				key_assertive = "User placed on top of item 0 of group 1.",
				locator1 = "Segmentation#ASSERTIVE");
		}
	}

	@description = "This is a test for LPS-177714. When accessing the back button via keyboard navigation the tooltip is Go to Segments in the page editor of Segments."
	@priority = 2
	test ViewBackButtonTooltipForSegmentsAdminViaKeyboard {
		task ("Given a site administrator adds a segment") {
			Segmentation.openSegmentsAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoAdd();

			WaitForVisible(locator1 = "Segmentation#ADD_FIELD_POSITION");
		}

		task ("When the site administrator hovers over the back button via keyboard") {
			KeyPress(
				locator1 = "ProductMenu#TOGGLE",
				value1 = "\TAB");

			AssertElementFocused(locator1 = "Icon#BACK");
		}

		task ("Then the site administrator could see the tooltip message") {
			AssertVisible(
				key_content = "Go to Segments",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("Given a site administrator edits the segment") {
			JSONSegmentsentry.addSegment(
				fieldName = "Regular Role",
				groupName = "Test Site Name",
				operator = "equals",
				segmentName = "Test Segment Name",
				selectedOption = "Power User");

			Navigator.gotoBack();

			Segmentation.editSegment(entry = "Test Segment Name");

			WaitForElementPresent(locator1 = "Segmentation#CRITERION_INPUT_ANY");
		}

		task ("When the site administrator hovers over the back button via keyboard") {
			KeyPress(
				locator1 = "ProductMenu#TOGGLE",
				value1 = "\TAB");

			AssertElementFocused(locator1 = "Icon#BACK");
		}

		task ("Then the site administrator could see the tooltip message") {
			AssertVisible(
				key_content = "Go to Segments",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-177714. When adding a segment to a new experience and accessing the back button via keyboard, the tooltip of the back button is Go to [pageName] where [pageName] is the name of the page in the Page Editor view."
	@priority = 2
	test ViewBackButtonTooltipOfNewSegmentFromNewExperienceViaKeyboard {
		task ("Given a site administrator accesses to the segment editor from new experience") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.openNewExperienceEditor();

			Click(
				key_text = "New Segment",
				locator1 = "Button#ANY");

			WaitForVisible(locator1 = "Segmentation#ADD_FIELD_POSITION");
		}

		task ("When the site administrator hovers over the back button via keyboard") {
			KeyPress(
				locator1 = "ProductMenu#TOGGLE",
				value1 = "\TAB");

			AssertElementFocused(locator1 = "Icon#BACK");
		}

		task ("Then the site administrator could see the tooltip message") {
			AssertVisible(
				key_content = "Go to Test Page Name",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

}