@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8323 | Test Summary: A user lost access to a given property (because the admin removed the user's access or someone deleted the property of the system)"
	@priority = 4
	test UserLostAccess {
		task ("AC launch and go to the porpreties menu") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Create property 1, check if it was created and add an admin user") {
			ACProperties.addNewProperty(propertyName = "Property Name 1");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 1");

			ACProperties.addUserProperty(emailAddress = "corbin.murakami@faro.io");
		}

		task ("Log in as the user corbin.murakami@faro.io and go to the properties menu") {
			ACWorkspace.signOut();

			ACUtils.launchAC(emailAddress = "corbin.murakami@faro.io");

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Checks if only property 2 and property 3 are present") {
			ACProperties.assertPropertyTitleList(propertyName = "Property Name 1");
		}

		task ("Log in as the user test@liferay.com, go to the properties menu and delete all properties") {
			ACWorkspace.signOut();

			ACUtils.launchAC(emailAddress = "test@liferay.com");

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACSettings.deleteAllProperties();
		}

		task ("Log in as the user corbin.murakami@faro.io, go to the properties menu and checks if the property has been deleted for the user") {
			ACWorkspace.signOut();

			ACUtils.launchAC(emailAddress = "corbin.murakami@faro.io");

			ACNavigation.goToSettings();

			ACSettings.goToProperties();

			ACProperties.assertPropertyNotPresent(propertyName = "Property Name 1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8322 | Test Summary: A user (independent of user role) should only see the properties they are invited to by the AC admin or the properties which the user is owner"
	@priority = 4
	test UserShouldOnlySeePropertiesAreInvitedByACAdminOrPropertiesWhichUserOwner {
		task ("AC launch and go to the porpreties menu") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Create property 1, check if it was created and add an admin user") {
			ACProperties.addNewProperty(propertyName = "Property Name 1");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 1");

			ACProperties.addUserProperty(emailAddress = "bryan.cheung@faro.io");
		}

		task ("Go back to the properties menu, create property 2, check if it was created and add an admin user") {
			ACSettings.goToProperties();

			ACProperties.addNewProperty(propertyName = "Property Name 2");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 2");

			ACProperties.addUserProperty(emailAddress = "corbin.murakami@faro.io");
		}

		task ("Go back to the properties menu, create property 3, check if it was created and select all users as admin") {
			ACSettings.goToProperties();

			ACProperties.addNewProperty(propertyName = "Property Name 3");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 3");

			ACSettings.goToProperties();
		}

		task ("Log in as the user corbin.murakami@faro.io and go to the properties menu") {
			ACWorkspace.signOut();

			ACUtils.launchAC(emailAddress = "corbin.murakami@faro.io");

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Checks if only property 2 and property 3 are present") {
			ACProperties.assertPropertyNotPresent(propertyName = "Property Name 1");

			ACUtils.searchBar(searchItem = "Property Name");

			ACProperties.assertPropertyTitleList(propertyName = "Property Name 2");

			ACProperties.assertPropertyTitleList(propertyName = "Property Name 3");
		}
	}

}