@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Search for specific segment"
	@priority = 5
	test CanSearchForSegment {
		property test.run.type = "single";

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Create two dynamic segments") {
			for (var n : list "1,2") {
				ACNavigation.goToSegments();

				ACSegments.createDynamicSegment();

				ACUtils.setItemName(itemName = "Dynamic Segment Test ${n}");

				ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

				ACSegments.addSegmentField(segmentField = "email");

				ACSegments.editTextCriterion(textInput = "test@liferay.com");

				ACSegments.saveSegment();
			}
		}

		task ("Go to segment list") {
			ACNavigation.goToSegments();
		}

		task ("Search for a segment and check that only it appears in the list") {
			ACUtils.searchBar(searchItem = "Dynamic Segment Test 1");

			ACUtils.viewNameList(nameList = "Dynamic Segment Test 1");

			ACUtils.viewNameListIsNotPresent(nameList = "Dynamic Segment Test 2");
		}

		task ("Search for a segment that does not exist and check that nothing appears in the list") {
			ACUtils.searchBar(searchItem = "Dynamic Segment Test 3");

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no results found.");
		}
	}

	@description = "Segment list shows a list of segments"
	@priority = 5
	test CanShowSegmentList {
		property test.run.type = "single";

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Create two dynamic segments") {
			for (var n : list "1,2") {
				ACNavigation.goToSegments();

				ACSegments.createDynamicSegment();

				ACUtils.setItemName(itemName = "Dynamic Segment Test ${n}");

				ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

				ACSegments.addSegmentField(segmentField = "email");

				ACSegments.editTextCriterion(textInput = "test@liferay.com");

				ACSegments.saveSegment();
			}
		}

		task ("Go to segment list") {
			ACNavigation.goToSegments();
		}

		task ("Check that existing segments appear in the list") {
			ACUtils.viewNameList(nameList = "Dynamic Segment Test 1,Dynamic Segment Test 2");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8460 | Test Summary: Order the Segment List By Name"
	@priority = 4
	test OrderSegmentListByName {
		property test.run.type = "single";

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			var fullName = "userfn userln";

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = ${fullName});

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add 3 new Dynamic Segments") {
			for (var segmentName : list "Dynamic Segment Test1,Dynamic Segment Test2,Dynamic Segment Test3") {
				task ("Add a new dynamic segment") {
					ACNavigation.goToSegments();

					ACSegments.createDynamicSegment();

					ACUtils.setItemName(itemName = ${segmentName});
				}

				task ("Add an email field") {
					ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

					ACSegments.addSegmentField(segmentField = "email");

					ACSegments.editTextCriterion(textInput = "userea@liferay.com");
				}

				task ("Save the segment") {
					ACSegments.saveSegment();
				}
			}
		}

		task ("Go to Segments and Sort by 'Name'") {
			ACNavigation.goToSegments();

			ACSegments.filterAndOrderForSegLists(filterName = "Name");
		}

		task ("Assert 3 segments sorted by name display") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Dynamic Segment Test1");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Dynamic Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Dynamic Segment Test3");
		}

		task ("Go to Segments and Sort by descending order of 'Name'") {
			ACUtils.orderArrow(type = "descending");
		}

		task ("Assert 3 segments sorted by name display") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Dynamic Segment Test3");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Dynamic Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Dynamic Segment Test1");
		}

		task ("Sort by 'Last Modified'") {
			ACSegments.filterAndOrderForSegLists(filterName = "Last Modified");
		}

		task ("Assert 3 segments sorted by Last Modified") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Dynamic Segment Test1");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Dynamic Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Dynamic Segment Test3");
		}

		task ("Sort by descending order of 'Last Modified'") {
			ACUtils.orderArrow(type = "descending");
		}

		task ("Assert 3 segments sorted by Last Modified") {
			ACUtils.viewNameListInOrder(
				index = 1,
				name = "Dynamic Segment Test3");

			ACUtils.viewNameListInOrder(
				index = 2,
				name = "Dynamic Segment Test2");

			ACUtils.viewNameListInOrder(
				index = 3,
				name = "Dynamic Segment Test1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8461 | Test Summary: Paginate Segment list"
	@priority = 3
	test PaginateSegmentList {
		property test.run.type = "single";

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			var fullName = "userfn userln";

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = ${fullName});

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Add 5 new Static Segments") {
			for (var segmentName : list "Dynamic Segment Test1,Dynamic Segment Test2,Dynamic Segment Test3,Dynamic Segment Test4,Dynamic Segment Test5") {
				task ("Add a new dynamic segment") {
					ACNavigation.goToSegments();

					ACSegments.createDynamicSegment();

					ACUtils.setItemName(itemName = ${segmentName});
				}

				task ("Add an email field") {
					ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

					ACSegments.addSegmentField(segmentField = "email");

					ACSegments.editTextCriterion(textInput = "userea@liferay.com");
				}

				task ("Save the segment") {
					ACSegments.saveSegment();
				}
			}
		}

		task ("Assert 5 segments display") {
			ACNavigation.goToSegments();

			for (var segmentName : list "Dynamic Segment Test1,Dynamic Segment Test2,Dynamic Segment Test3,Dynamic Segment Test4,Dynamic Segment Test5") {
				ACSegments.assertSegmentPresent(segmentName = ${segmentName});
			}
		}

		task ("Assert default pagination display '20 Items' message and page number") {
			AssertTextEquals.assertText(
				locator1 = "ACUtils#PAGINATION_ITEMS_PER_PAGE_SELECT",
				value1 = "20 Items");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 5 entries.");

			ACUtils.viewResultsPages(pageNumber = 1);
		}

		task ("Change the pagination to "4"") {
			ACUtils.changePagination(itemsPerPage = 4);

			for (var segmentName : list "Dynamic Segment Test1,Dynamic Segment Test2,Dynamic Segment Test3,Dynamic Segment Test4") {
				ACSegments.assertSegmentPresent(segmentName = ${segmentName});
			}

			ACUtils.viewResultsMessage(results = "Showing 1 to 4 of 5 entries.");

			ACUtils.viewResultsPages(pageNumber = 1);

			ACUtils.viewResultsPages(pageNumber = 2);
		}

		task ("Go to the second page and check if only one segment appears") {
			ACUtils.checkPreviousNextButton(nextButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 5 to 5 of 5 entries.");

			ACSegments.assertSegmentPresent(segmentName = "Dynamic Segment Test5");
		}

		task ("Previous to the first page and check that only 4 segments appear") {
			ACUtils.checkPreviousNextButton(previousButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 1 to 4 of 5 entries.");
		}
	}

}