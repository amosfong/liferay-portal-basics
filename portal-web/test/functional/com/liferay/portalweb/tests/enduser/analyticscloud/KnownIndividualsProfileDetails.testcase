@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				birthdayDay = 10,
				birthdayMonth = 10,
				birthdayYear = 2020,
				jobTitle = "lawyer",
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8938 | Test Summary: All attributes of the individual appear in a list"
	@priority = 5
	test AllIndividualAttributesAppearInList {
		task ("Sign in as new user to view the site page") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View WC",
				documentTitleList = "1,2,3,4,5",
				emailList = "user1@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Go to the Individual > KnownIndividual > Details") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "user1 user1");

			ACNavigation.switchTab(tabName = "Details");
		}

		task ("Assert attributes appear in list and assert some attribute values") {
			for (var individualAttribute : list "birthDate,classPK,contactId,createDate,email,familyName,givenName,groupIds,jobTitle,modifiedDate,organizationIds,roleIds,teamIds,timeZoneId,userGroupIds,userId,uuid") {
				ACIndividualsDashboard.assertIndividualAttribute(key_individualAttribute = ${individualAttribute});
			}

			var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = "user1@liferay.com");

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "birthDate",
				individualAttributeValue = "2020-11-10T00:00:00.000Z");

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "classPK",
				individualAttributeValue = ${userId});

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "email",
				individualAttributeValue = "user1@liferay.com");

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "familyName",
				individualAttributeValue = "user1");

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "givenName",
				individualAttributeValue = "user1");

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "jobTitle",
				individualAttributeValue = "lawyer");

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "timeZoneId",
				individualAttributeValue = "UTC");

			ACIndividualsDashboard.assertIndividualAttributeValue(
				individualAttribute = "userId",
				individualAttributeValue = ${userId});
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8938 | Test Summary: Order an Individual's Details"
	@priority = 3
	test OrderIndividualDetails {
		task ("Sign in as new user to view the site page") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View WC",
				documentTitleList = "1,2,3,4",
				emailList = "user1@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Go to the Individual > Known Individual > Details") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "user1 user1");

			ACNavigation.switchTab(tabName = "Details");
		}

		task ("Sort the table by the Attribute column header in descending order") {
			ACIndividualsDashboard.filterKnownIndividualList(
				desc = "true",
				rowName = "Attribute");

			ACIndividualsDashboard.viewKnownIndividualDetailsSpecificOrder(itemName = "uuid,userId,userGroupIds,timeZoneId,teamIds,roleIds,organizationIds,modifiedDate,jobTitle,groupIds,givenName,familyName,email,createDate,contactId,classPK,birthDate");
		}

		task ("Sort the table by the Attribute column header in ascending order") {
			ACIndividualsDashboard.filterKnownIndividualList(rowName = "Attribute");

			ACIndividualsDashboard.viewKnownIndividualDetailsSpecificOrder(itemName = "birthDate,classPK,contactId,createDate,email,familyName,givenName,groupIds,jobTitle,modifiedDate,organizationIds,roleIds,teamIds,timeZoneId,userGroupIds,userId,uuid");
		}

		task ("Sort the table by the Source Name column header in ascending order") {
			ACIndividualsDashboard.filterKnownIndividualList(rowName = "Source Name");

			ACIndividualsDashboard.viewKnownIndividualDetailsSpecificOrder(itemName = "birthDate,classPK,contactId,createDate,email,givenName,groupIds,jobTitle,familyName,modifiedDate,organizationIds,roleIds,teamIds,timeZoneId,userGroupIds,userId,uuid");
		}

		task ("Sort the table by the Source Name column header in descending order") {
			ACIndividualsDashboard.filterKnownIndividualList(
				desc = "true",
				rowName = "Source Name");

			ACIndividualsDashboard.viewKnownIndividualDetailsSpecificOrder(itemName = "uuid,userId,userGroupIds,timeZoneId,teamIds,roleIds,organizationIds,modifiedDate,familyName,jobTitle,groupIds,givenName,email,createDate,contactId,classPK,birthDate");
		}
	}

}