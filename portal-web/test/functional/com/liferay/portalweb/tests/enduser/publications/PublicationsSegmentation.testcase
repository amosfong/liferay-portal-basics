@component-name = "portal-publications"
definition {

	property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
	property osgi.module.configurations = "enabled=B\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Segmentation";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@description = "Assert we can publish a publication with an edited Segment."
	@priority = 4
	test CanPublishEditedSegment {
		HeadlessSite.addSite(siteName = "Site Name");

		Segmentation.openSegmentsAdmin(siteURLKey = "site-name");

		LexiconEntry.gotoAdd();

		Segmentation.addProperties(propertyOption = "Regular Role");

		Segmentation.fillTitle(titleField = "Segment Title");

		Segmentation.changeCriterionInput(criterionInputOption = "Equals");

		Segmentation.fillProperty(selectCheckbox = "Administrator");

		Button.clickSave();

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		Segmentation.editSegment(entry = "Segment Title");

		Segmentation.fillTitle(titleField = "Edited Segment Title");

		Button.clickSave();

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Segmentation.openSegmentsAdmin(siteURLKey = "site-name");

		AssertElementPresent(
			key_tableEntry = "Edited Segment Title",
			locator1 = "LexiconTable#TABLE_ENTRY");
	}

	@description = "Assert we can publish a publication with a Segment and Page Experience."
	@priority = 4
	test CanPublishWithSegmentAndPageExperience {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		HeadlessSite.addSite(siteName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Experience Content Page",
			type = "content");

		Segmentation.openSegmentsAdmin(siteURLKey = "site-name");

		LexiconEntry.gotoAdd();

		Segmentation.addProperties(propertyOption = "Regular Role");

		Segmentation.fillTitle(titleField = "Segment Title");

		Segmentation.changeCriterionInput(criterionInputOption = "Equals");

		Segmentation.fillProperty(selectCheckbox = "Administrator");

		Button.clickSave();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/experience-content-page");

		ContentPages.gotoPageEditor();

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "New Experience",
			segmentName = "Segment Title");

		Button.clickPublish();

		ContentPages.gotoPageEditor();

		PageEditor.changeExperience(newExperience = "New Experience");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "This experience is for Administrators only.");

		PageEditor.prioritizeExperience(experienceName = "New Experience");

		PageEditor.publish();

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/experience-content-page");

		AssertTextEquals(
			locator1 = "Experience#FRAGMENT_HEADING",
			value1 = "This experience is for Administrators only.");
	}

	@description = "Segment should support locales in review changes."
	@priority = 3
	test CanReviewChangeForSegmentWithLocalization {
		task ("Create new Publication and new site") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");

			HeadlessSite.addSite(siteName = "Site Name");
		}

		task ("Create new segment in the new site") {
			Segmentation.openSegmentsAdmin(siteURLKey = "site-name");

			LexiconEntry.gotoAdd();

			Segmentation.addProperties(propertyOption = "Email Address");

			Segmentation.fillTitle(titleField = "New Segment Title");

			Segmentation.changeCriterionInput(criterionInputOption = "Equals");

			Segmentation.fillProperty(propertyField = "liferay");

			Segmentation.changeLocale(locale = "de-DE");

			Segmentation.fillTitle(titleField = "Neue Segment Titel");

			Button.clickSave();
		}

		task ("Go to review changes and assert the segment with default and localized name") {
			PublicationsNavigator.gotoReviewChanges();

			PublicationsChanges.viewChanges(
				changeCategory = "Segments Entry",
				changeSite = "Site Name",
				changeTitle = "New Segment Title",
				changeType = "Added",
				changeUser = "Test Test");

			PublicationsNavigator.gotoViewChangeDetails(
				changeCategory = "Segments Entry",
				changeTitle = "New Segment Title");

			PublicationsChangeDetails.viewChangeDetailsInData(
				changeType = "Added",
				columnName = "Name",
				columnValueInPublication = "New Segment Title",
				publicationName = "Publication Name");

			Click(
				key_currentLocale = StringUtil.lowerCase("en-US"),
				locator1 = "Button#TRANSLATIONS_LOCALIZATION");

			Click(
				key_locale = "de_DE",
				locator1 = "Translation#DROPDOWN_MENU_ITEM");

			PublicationsChangeDetails.viewChangeDetailsInData(
				changeType = "Added",
				columnName = "Name",
				columnValueInPublication = "Neue Segment Titel",
				publicationName = "Publication Name");
		}
	}

}