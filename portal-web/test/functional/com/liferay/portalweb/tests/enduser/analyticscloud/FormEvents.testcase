@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Forms to page and display a form") {
			ACUtils.createFormAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8691 | Test Summary: Check formSubmitted triggers after submitting a form and check its properties (see reference document in comments)"
	@priority = 5
	test CheckFormSubmittedAfterSubmittingForm {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdminNavigator.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});
		}

		task ("Get the DXP Instance ID in AC") {
			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = ${assignedPropertyName});
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the published form") {
			Navigator.openSpecificURL(url = ${publishedFormURL});
		}

		task ("Navigate to the published form page and submit the form") {
			FormPortlet.waitFormRenderer(text = "Submit");

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "First Record");

			FormPortlet.submitLocalizedSuccessfully(buttonName = "Submit");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("formSubmitted");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("View the formId of formSubmitted event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formSubmitted",
				property = "formId",
				value = ${formId});
		}

		task ("View the title of formSubmitted event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formSubmitted",
				property = "title",
				value = "Created Form Name");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = ${expectedChannelId},
				expectedDataSourceId = ${expectedDataSourceId});
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8682 | Test Summary: Check formViewed triggers and check its properties (see reference document in comments)"
	@priority = 5
	test CheckFormViewedProperties {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdminNavigator.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});
		}

		task ("Get the DXP Instance ID in AC") {
			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = ${assignedPropertyName});
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("formViewed");
		}

		task ("Navigate to the published form") {
			Navigator.openSpecificURL(url = ${publishedFormURL});
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("View the formId of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "formId",
				value = ${formId});
		}

		task ("View the title of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "title",
				value = "Created Form Name");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = ${expectedChannelId},
				expectedDataSourceId = ${expectedDataSourceId});
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8692 | Test Summary: Check pageViewed is triggered with formViewed"
	@ignore = "true"
	@priority = 4
	test CheckPageViewedIsTriggeredWithFormViewed {

		// AC Bug: Unable to search using special characters
		// AC Bug ticket: LRAC-13715

		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdminNavigator.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst(${assignedPropertyName}, "Combined");

			var dataSourceName = StringUtil.trim(${dataSourceName});

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = ${dataSourceName});
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageViewed");
		}

		task ("Navigate to the published form") {
			Navigator.openSpecificURL(url = ${publishedFormURL});
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("View the formId of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "formId",
				value = ${formId});
		}

		task ("View the title of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "title",
				value = "Created Form Name");
		}

		task ("View the formId of pageViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "formId",
				value = ${formId});
		}

		task ("View the page of pageViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "page",
				value = 0);
		}

		task ("View the title of pageViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "title",
				value = "");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = ${expectedChannelId},
				expectedDataSourceId = ${expectedDataSourceId});
		}
	}

}