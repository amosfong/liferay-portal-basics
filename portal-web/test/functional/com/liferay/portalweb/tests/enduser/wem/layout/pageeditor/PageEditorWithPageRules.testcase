@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property custom.properties = "feature.flag.LPS-169837=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-196462. The New Rule Modal allows the user to create conditions and actions."
	@priority = 4
	test AddConditionsAndActions {
		task ("Given a page designer has fragments on a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");
		}

		task ("When the page designer opens the New Rule modal") {
			PageEditor.gotoTab(tabName = "Page Rules");

			Button.click(button = "New Rule");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "New Rule");
		}

		task ("Then the page designer could add conditions and actions") {
			AssertElementNotPresent(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "User");

			AssertElementNotPresent(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "Is the User");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "test");

			Button.click(button = "Add Condition");

			AssertElementNotPresent(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "User");

			AssertElementNotPresent(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "Has the Role Of");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "Power User");

			AssertElementNotPresent(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Hide");

			AssertElementNotPresent(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Fragment");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Button");

			Button.click(button = "Add Action");

			AssertElementNotPresent(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Hide");

			AssertElementNotPresent(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Fragment");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Heading");

			for (var index : list "1,2") {
				AssertVisible(
					index = ${index},
					locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION");

				AssertVisible(
					index = ${index},
					locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION");
			}
		}
	}

	@description = "This is a test for LPS-196462. More rules can be added to the page and the input Rule is filled by default."
	@priority = 3
	test AddPageRulesWithDefaultName {
		task ("Given a page designer has fragments on a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("When the page designer navigates to the Page Rules panel") {
			PageEditor.gotoTab(tabName = "Page Rules");
		}

		task ("Then the page designer could add page rules with default name") {
			for (var fragmentName : list "Button,Heading,Paragraph") {
				PageEditor.addPageRule(
					selectAction = "Hide",
					selectActionValue = ${fragmentName},
					selectCondition = "Is the User",
					selectConditionValue = "test",
					selectItemForTheAction = "Fragment",
					selectItemForTheCondition = "User");
			}

			AssertVisible(
				key_rule = "RuleIfUserIs the UsertestHideFragmentButton",
				key_ruleName = "Rule",
				locator1 = "PageEditor#PAGE_RULE_LIST_ITEM");

			AssertVisible(
				key_rule = "Rule 1IfUserIs the UsertestHideFragmentHeading",
				key_ruleName = "Rule 1",
				locator1 = "PageEditor#PAGE_RULE_LIST_ITEM");

			AssertVisible(
				key_rule = "Rule 2IfUserIs the UsertestHideFragmentParagraph",
				key_ruleName = "Rule 2",
				locator1 = "PageEditor#PAGE_RULE_LIST_ITEM");
		}
	}

	@description = "This is a test for LPS-200332. Apply a page rule with Has the Role Of condition."
	@priority = 4
	test ApplyPageRuleWithHasTheRoleOfCondition {
		task ("Given a page designer has a Button fragment on a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("When the page designer adds a page rule with Has the Role Of condition") {
			PageEditor.gotoTab(tabName = "Page Rules");

			PageEditor.addPageRule(
				selectAction = "Hide",
				selectActionValue = "Button",
				selectCondition = "Has the Role Of",
				selectConditionValue = "Power User",
				selectItemForTheAction = "Fragment",
				selectItemForTheCondition = "User");
		}

		task ("Then the page designer could see the Button fragment in page editor") {
			PageEditor.viewFragmentEditableText(
				editableText = "Go Somewhere",
				fragmentName = "Button",
				id = "link");
		}

		task ("When the page designer navigates to the content page at view mode") {
			PageEditor.publish();
		}

		task ("Then the page designer cannot see the Button fragment") {
			ContentPages.viewFragmentNotPresent(fragmentName = "Button");
		}

		task ("When the page designer changes the action to Show Fragment Button") {
			ContentPages.gotoPageEditor();

			PageEditor.gotoTab(tabName = "Page Rules");

			PageEditor.editPageRule(
				ruleName = "Rule",
				selectAction = "Show",
				selectActionValue = "Button");

			PageEditor.publish();
		}

		task ("Then the page designer could see the Button fragment at view mode") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}
	}

	@description = "This is a test for LPS-196462. The New Rule Modal requires at least one condition and one action to complete the rule."
	@priority = 4
	test CannotAddPageRuleWithoutConditionOrAction {
		task ("Given a page designer has a Button on a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("When the page designer opens the New Rule modal") {
			PageEditor.gotoTab(tabName = "Page Rules");

			Button.click(button = "New Rule");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "New Rule");
		}

		task ("Then the page designer cannot add page rule without condition or action") {
			AssertTextEquals(
				index = 1,
				locator1 = "Modal#BODY_MESSAGE",
				value1 = "Add at least one condition and one action to complete the rule.");

			Click(
				key_text = "Save",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");

			AssertTextEquals.assertPartialText(
				locator1 = "Modal#MODAL_ERROR",
				value1 = "The rule is incomplete. Please check that the conditions and actions are completed before saving.");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "User");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "Is the User");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "test");

			Click(
				key_text = "Save",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");

			AssertTextEquals.assertPartialText(
				locator1 = "Modal#MODAL_ERROR",
				value1 = "The rule is incomplete. Please check that the conditions and actions are completed before saving.");

			PageEditor.deletePageRuleCondition();

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Hide");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Fragment");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Button");

			Click(
				key_text = "Save",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");

			AssertTextEquals.assertPartialText(
				locator1 = "Modal#MODAL_ERROR",
				value1 = "The rule is incomplete. Please check that the conditions and actions are completed before saving.");
		}
	}

	@description = "This is a test for LPS-196462. The New Rule Modal allows the user to delete conditions and actions."
	@priority = 4
	test DeleteConditionsAndActions {
		task ("Given a page designer has fragments on a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");
		}

		task ("When the page designer adds conditions and actions on the New Rule modal") {
			PageEditor.gotoTab(tabName = "Page Rules");

			Button.click(button = "New Rule");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "New Rule");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "User");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "Is the User");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "test");

			Button.click(button = "Add Condition");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "User");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "Has the Role Of");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = "Power User");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Hide");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Fragment");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Button");

			Button.click(button = "Add Action");

			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Hide");

			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Fragment");

			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = "Heading");
		}

		task ("Then the page designer could delete conditions and actions") {
			for (var index : list "2,1") {
				PageEditor.deletePageRuleAction(index = ${index});

				PageEditor.deletePageRuleCondition(index = ${index});
			}

			AssertElementNotPresent(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION");

			AssertElementNotPresent(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION");

			AssertVisible(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION");

			AssertVisible(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION");

			AssertTextEquals(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM",
				value1 = "Select");

			AssertTextEquals(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM",
				value1 = "Select");
		}
	}

}