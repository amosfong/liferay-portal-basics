@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Page Templates";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add an object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Purchase Order",
				objectName = "PurchaseOrder",
				pluralLabelName = "Purchase Orders");
		}
	}

	@description = "This is a test for LPS-192722. Default object changes automatically when changing the content type between objects."
	@priority = 3
	test ChangeContentTypeBetweenObjects {
		task ("Given a site administrator has a display page template for object") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Department",
				objectName = "Department",
				pluralLabelName = "Departments");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Count",
				fieldName = "count",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "Department");

			ObjectAdmin.publishObjectViaAPI(objectName = "Department");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.publish();
		}

		task ("When the site administrator changes the content type to another object") {
			LexiconCard.viewCardSubtitle(
				card = "Display Page Name",
				cardSubtitle = "Purchase Order");

			DisplayPageTemplatesAdmin.changeContentType(
				contentType = "Department",
				displayPageName = "Display Page Name");
		}

		task ("Then the site administrator could see the Form Container mapped to that object") {
			LexiconCard.viewCardSubtitle(
				card = "Display Page Name",
				cardSubtitle = "Department");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.viewInputStyle(
				label = "Count",
				showLabel = "true",
				type = "numeric");

			PageEditor.viewFragmentEditableText(
				className = "button",
				editableText = "Submit",
				fragmentName = "Form Button",
				id = "submit-button");

			PageEditor.gotoConfiguration(fragmentName = "Form Container");

			AssertSelectedLabel(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Department (Default)");
		}
	}

	@description = "This is a test for LPS-192722. Can change object content type to Web Content Article content type in display page template."
	@priority = 4
	test ChangeContentTypeFromObjectToWebContentArticle {
		task ("Given a site administrator has a display page template for object") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "PurchaseOrder",
				value = "LeBron");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.publish();

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Display Page Name",
				navItem = "Purchase Orders");

			PageEditor.publish();

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("When the site administrator navigates to the Display Page Templates admin") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});
		}

		task ("Then the site administrator could change content type to Web Content Article") {
			LexiconCard.viewCardSubtitle(
				card = "Display Page Name",
				cardSubtitle = "Purchase Order");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Change Content Type");

			AssertTextEquals.assertPartialText(
				locator1 = "Modal#MODAL_WARNING",
				value1 = "Changing the content type may cause some elements of the display page template to lose their previous mapping.");

			DisplayPageTemplatesAdmin._selectMappingTypes(
				contentType = "Web Content Article",
				subType = "Basic Web Content");

			PortletEntry.save();

			LexiconCard.viewCardSubtitle(
				card = "Display Page Name",
				cardSubtitle = "Web Content Article - Basic Web Content");
		}

		task ("When the site administrator accesses to the Mapping panel of Heading fragment in display page template") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Then the site administrator sees unmapped field") {
			AssertSelectedLabel(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "-- Unmapped --");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Content");

			PageEditor.waitForAutoSave();

			PageEditor.publish();
		}

		task ("When the site administrator accesses to the Link panel of Button fragment in content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");
		}

		task ("Then the site administrator sees unmapped field") {
			AssertSelectedLabel(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "-- Unmapped --");
		}

		task ("When the site administrator maps the display page template for Web Content Article") {
			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Display Page Name",
				navItem = "Web Content");

			PageEditor.publish();
		}

		task ("Then the site administrator could see mapped content on associated display page") {
			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = "Web Content Title");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Web Content Content");
		}
	}

	@description = "This is a test for LPS-191554. The administrator could display related object entries inside of form on associated display page."
	@priority = 4
	test DisplayRelatedObjectEntiresInsideFormOnAssociatedDisplayPage {
		task ("Given a site administrator has two objects with one to many relationship") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Epic Name",
				fieldName = "epicName",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "epicName",
				objectName = "PurchaseOrder",
				value = "Update/View Object entries using Page Builder");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Customer",
				objectName = "Customer",
				pluralLabelName = "Customers");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Story Name",
				fieldName = "storyName",
				fieldType = "String",
				isRequired = "false",
				objectName = "Customer");

			ObjectAdmin.publishObjectViaAPI(objectName = "Customer");

			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "Customers");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "PurchaseOrder",
				objectName_2 = "Customer",
				relationshipLabel = "Related Stories",
				relationshipName = "relatedStories",
				relationshipType = "oneToMany");

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				ObjectAdmin.addObjectEntryViaAPI(
					fieldNameList = "storyName,r_relatedStories_c_purchaseOrderId",
					objectName = "Customer",
					valueList = "${storyName},${objectEntryId}");
			}
		}

		task ("When the site administrator adds a Form Container to a display page template for the first object") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");
		}

		task ("Then the site administrator could display related object entires inside Form") {
			PageEditor.addFragmentToFormContainer(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				targetFragmentName = "Text");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Related Stories");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Related Stories",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Story Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				AssertVisible(
					key_text = ${storyName},
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

	@description = "This is a test for LPS-191554. The administrator could display related object entries outside of form on associated display page."
	@priority = 4
	test DisplayRelatedObjectEntiresOutsideFormOnAssociatedDisplayPage {
		task ("Given a site administrator has two objects with one to many relationship") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Epic Name",
				fieldName = "epicName",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "epicName",
				objectName = "PurchaseOrder",
				value = "Update/View Object entries using Page Builder");
			var labelName = StringUtil.randomString(8);

			ObjectAdmin.addObjectViaAPI(
				labelName = "Customer",
				objectName = "Customer",
				pluralLabelName = "Customers");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Story Name",
				fieldName = "storyName",
				fieldType = "String",
				isRequired = "false",
				objectName = "Customer");

			ObjectAdmin.publishObjectViaAPI(objectName = "Customer");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "PurchaseOrder",
				objectName_2 = "Customer",
				relationshipLabel = "Related Stories",
				relationshipName = "relatedStories",
				relationshipType = "oneToMany");

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				ObjectAdmin.addObjectEntryViaAPI(
					fieldNameList = "storyName,r_relatedStories_c_purchaseOrderId",
					objectName = "Customer",
					valueList = "${storyName},${objectEntryId}");
			}
		}

		task ("When the site administrator adds a Form Container to a display page template for the first object") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");
		}

		task ("Then the site administrator could display related object entires outside Form") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				targetFragmentName = "Form Container");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Related Stories");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Related Stories",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Story Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				AssertVisible(
					key_text = ${storyName},
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

	@description = "This is a test for LPS-191312. The administrator could edit date and time field of object entry via associated display page."
	@priority = 4
	test EditDateAndTimeFieldOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with date and time field") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "DateTime",
				fieldLabelName = "Clock",
				fieldName = "clock",
				fieldType = "DateTime",
				isRequired = "false",
				objectName = "PurchaseOrder",
				timeStorageOption = "useInputAsEntered");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "clock",
				objectName = "PurchaseOrder",
				value = "2022-10-10T10:10:00.000");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should see the value of date and time field from object entry shown on Date and Time fragment") {
			InputField.viewText(
				fieldLabel = "Clock",
				text = "2022-10-10T10:10");
		}

		task ("When the site administrater types a different value in date and time field then submit") {
			Type.typeKeys(
				key_text = "Clock",
				locator1 = "TextInput#ANY",
				value1 = "08/18/2023");

			Type.typeKeys(
				key_text = "Clock",
				locator1 = "TextInput#ANY",
				value1 = "keys=ARROW_RIGHT");

			Type.typeKeys(
				key_text = "Clock",
				locator1 = "TextInput#ANY",
				value1 = "03:10PM");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of date and time field from object entry should be updated") {
			ObjectAdmin.goToCustomObject(objectName = "PurchaseOrder");

			ObjectPortlet.viewEntry(entry = "Aug 18, 2023, 3:10 PM");
		}
	}

	@description = "This is a test for LPS-191362. The administrator could edit multiple picklist field of object entry via associated display page."
	@priority = 4
	test EditMultipleselectPicklistFieldOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with multipleselect picklist field") {
			Picklist.addPicklistViaAPI(picklistName = "Fruits");

			for (var fruit : list "Apple,Banana,Peach,Lemon,Pineapple,Watermelon") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${fruit},
					itemName = ${fruit},
					picklistName = "Fruits");
			}

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "MultiselectPicklist",
				fieldLabelName = "Favorite",
				fieldName = "favorite",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder",
				picklistName = "Fruits");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "favorite",
				fieldType = "MultiselectPicklist",
				objectName = "PurchaseOrder",
				valueList = "Apple,Peach");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should see the value of multipleselect picklist field from object entry shown on Multiselect List fragment") {
			Button.click(button = "Show All");

			for (var fruit : list "Apple,Peach") {
				AssertChecked.assertCheckedNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}

			for (var fruit : list "Banana,Lemon,Pineapple,Watermelon") {
				AssertNotChecked.assertNotCheckedNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}
		}

		task ("When the site administrater select different options in multipleselect picklist field then submit") {
			for (var fruit : list "Apple,Peach") {
				Uncheck.uncheckNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}

			for (var fruit : list "Banana,Watermelon") {
				Check.checkNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of multipleselect picklist field from object entry should be updated") {
			ObjectAdmin.goToCustomObject(objectName = "PurchaseOrder");

			ObjectPortlet.viewEntry(entry = "Banana, Watermelon");
		}
	}

	@description = "This is a test for LPS-191275. The administrator could edit picklist field of object entry via associated display page."
	@priority = 4
	test EditPicklistFieldOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with picklist field") {
			Picklist.addPicklistViaAPI(picklistName = "Fruits");

			for (var fruit : list "Apple,Banana,Peach,Lemon,Pineapple,Watermelon") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${fruit},
					itemName = ${fruit},
					picklistName = "Fruits");
			}

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Type",
				fieldName = "type",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder",
				picklistName = "Fruits");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			ObjectAdmin.goToCustomObject(objectName = "PurchaseOrder");

			ObjectAdmin.addObjectPicklistFieldEntryViaUI(
				labelName = "Type",
				picklistOption = "Apple");

			Navigator.gotoBack();

			ObjectPortlet.viewEntry(entry = "Apple");

			var objectEntryId = selenium.getText("ObjectPortlet#ENTRY_ID");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should see the value of picklist field from object entry shown on Multiselect List fragment") {
			AssertTextEquals(
				index = 1,
				locator1 = "Fragment#INPUT_FIELD",
				type = "select",
				value1 = "Apple");
		}

		task ("When the site administrater select different options in picklist field then submit") {
			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select");

			MenuItem.click(menuItem = "Pineapple");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of picklist field from object entry should be updated") {
			ObjectAdmin.goToCustomObject(objectName = "PurchaseOrder");

			ObjectPortlet.viewEntry(entry = "Pineapple");
		}
	}

	@description = "This is a use case for LPS-182999. The page designer could see mapped image from attachment field on associated display page template."
	@priority = 4
	test MapPreviewURLOfImageAttachmentToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page designer has an object entry with an image attachment") {
			ObjectAdmin.addObjectViaAPI(
				labelName = ${labelName},
				objectName = ${objectName},
				pluralLabelName = "${labelName}s");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Upload",
				fieldName = "upload",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = ${objectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${objectName});

			ObjectAdmin.goToCustomObject(objectName = ${objectName});

			ObjectAutoGenerated.addAttachment(fileName = "Document_1.jpg");

			ObjectAutoGenerated.viewFilePresentOnAttachment(fileOnAttachment = "Document_1.jpg");

			PortletEntry.save();

			Navigator.gotoBack();

			WaitForElementPresent(
				key_name = "Document_1.jpg",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			var objectEntryId = selenium.getText("ObjectPortlet#ENTRY_ID");
		}

		task ("When the page designer maps the Preview URL of image to the Image fragment on display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${labelName},
				displayPageName = "Display Page Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");

			PageEditorMapping.mapEditableTextToField(
				field = "Preview URL",
				fragmentName = "Image",
				id = "image-square");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name 1");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Default",
				navItem = "${labelName}s");

			PageEditor.publish();
		}

		task ("Then the page designer should see the mapped image shown on associated display page template") {
			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");
		}
	}

	@description = "This is a test for LPS-165556. The page designer could map a standalone action from current object to Button fragment in display page template."
	@priority = 4
	test MapStandaloneActionFromCurrentObjectToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator has a display page template with a Button fragment") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("When the page creator navigates to the Action panel of Button fragment") {
			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			AssertSelectedLabel(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "${labelName}2 (Default)");
		}

		task ("Then the page creator could map the standalone action to Button fragment") {
			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name 1");
		}

		task ("When the page creator navigates to the assoicated display page template") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Default",
				navItem = "${labelName}2s");

			PageEditor.publish();
		}

		task ("Then the page creator could trigger the standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a test for LPS-165556. The page designer could map a standalone action from current object to Button fragment inside Colllection Display in display page template."
	@priority = 4
	test MapStandaloneActionFromCurrentObjectToFragmentInsideCollectionDisplay {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator has a display page template with a Button fragment inside Collection Display") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name 1");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${labelName}2s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Liferay",
				fragmentName = "Button");
		}

		task ("When the page creator navigates to the Action panel of Button fragment") {
			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");
		}

		task ("Then the page creator could map the standalone action to Button fragment") {
			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name 1");
		}

		task ("When the page creator navigates to the assoicated display page template") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Default",
				navItem = "${labelName}2s");

			PageEditor.publish();
		}

		task ("Then the page creator could trigger the standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a test for LPS-165556. The page designer could map a standalone action from a specific object entry to Button fragment in display page template."
	@priority = 4
	test MapStandaloneActionFromSpecificObjectEntryToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator has a display page template with a Button fragment") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId1 = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}1",
				value = "Google");
			var objectEntryId2 = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}1",
				displayPageName = "Display Page Name 1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("When the page creator navigates to the Action panel of Button fragment") {
			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");
		}

		task ("Then the page creator could map the standalone action from the second object entry to Button fragment") {
			Select(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Specific Content");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${objectEntryId2},
				navItem = "${labelName}2s",
				rowItem = "//*[@data-qa-id='row'][contains(.,'${objectEntryId2}')]");

			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name 1");
		}

		task ("When the page creator navigates to the assoicated display page template") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId1},
				field = "Default",
				navItem = "${labelName}1s");

			PageEditor.publish();
		}

		task ("Then the page creator could trigger the standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId1});

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a test for LPS-191389. The administrator could only update value of object entry’s field displayed on associated display page."
	@priority = 4
	test OnlyUpdateFieldOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with fields") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Region",
				fieldName = "region",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongText",
				fieldLabelName = "Address",
				fieldName = "address",
				fieldType = "Clob",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectEntryViaAPI(
				fieldNameList = "region,address",
				objectName = "PurchaseOrder",
				valueList = "Dalian,Huangpu Rd 537");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.removeFragment(fragmentName = "Text");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should only see the Textarea fragment on associated display page") {
			FormFields.viewTextAreaValue(
				fieldName = "address",
				fieldValue = "Huangpu Rd 537");

			AssertElementNotPresent(
				key_text = "Region",
				locator1 = "TextInput#ANY");
		}

		task ("When the site administrater update the value in Long Text field then submit") {
			FormFields.editTextArea(
				fieldName = "address",
				fieldValue = "Taide Building");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of Long Text field from object entry should be updated but Text field not") {
			ObjectAdmin.goToCustomObject(objectName = "PurchaseOrder");

			ObjectPortlet.viewEntry(entry = "Dalian");

			ObjectPortlet.viewEntry(entry = "Taide Building");
		}
	}

	@description = "This is a test for LPS-191389. The administrator could only update value of object entry’s mandatory field displayed on associated display page."
	@priority = 4
	test OnlyUpdateMandatoryFieldOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with mandatory fields") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Region",
				fieldName = "region",
				fieldType = "String",
				isRequired = "true",
				objectName = "PurchaseOrder");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongText",
				fieldLabelName = "Address",
				fieldName = "address",
				fieldType = "Clob",
				isRequired = "true",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectEntryViaAPI(
				fieldNameList = "region,address",
				objectName = "PurchaseOrder",
				valueList = "Dalian,Huangpu Rd 537");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.removeFragment(fragmentName = "Text");

			PageEditor.publish(objectName = "Purchase Order");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should only see the Textarea fragment on associated display page") {
			FormFields.viewTextAreaValue(
				fieldName = "address",
				fieldValue = "Huangpu Rd 537");

			AssertElementNotPresent(
				key_text = "Region",
				locator1 = "TextInput#ANY");
		}

		task ("When the site administrater update the value in Long Text field then submit") {
			FormFields.editTextArea(
				fieldName = "address",
				fieldValue = "Taide Building");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of Long Text field from object entry should be updated but Text field not") {
			ObjectAdmin.goToCustomObject(objectName = "PurchaseOrder");

			ObjectPortlet.viewEntry(entry = "Dalian");

			ObjectPortlet.viewEntry(entry = "Taide Building");
		}
	}

	@description = "This is a test for LPS-191532. The administrator could submit form on associated display page of another object."
	@priority = 4
	test SubmitFormOnAssociatedDisplayPageOfAnotherObject {
		task ("Given a site administrater has a display page template for Object with two forms") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Address",
				fieldName = "address",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "address",
				objectName = "PurchaseOrder",
				value = "Dalian, China");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Customer",
				objectName = "Customer",
				pluralLabelName = "Customers");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongText",
				fieldLabelName = "Feature Request",
				fieldName = "featurerequest",
				fieldType = "Clob",
				isRequired = "false",
				objectName = "Customer");

			ObjectAdmin.publishObjectViaAPI(objectName = "Customer");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container",
				targetFragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(
				contentType = "Customer",
				index = 2);

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Purchase Orders");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Purchase Orders",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});
		}

		task ("Then the site administrater could submit form of another object") {
			FormFields.editTextArea(
				fieldName = "featurerequest",
				fieldValue = "Possibility to add two form containers inside the same DPT.");

			Click(
				key_indexNumber = 2,
				key_text = "Submit",
				locator1 = "Button#ANY_N");

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ObjectAdmin.goToCustomObject(objectName = "Customer");

			ObjectPortlet.viewEntry(entry = "Possibility to add two form containers inside the same DPT.");
		}
	}

	@description = "This is a test for LPS-198511. View Multiselect List fragment display success in a Display Page when entry field is empty."
	@priority = 5
	test ViewMultiselectListWithEntryFieldEmptyOnAssociatedDisplayPageTemplate {
		task ("Given a content page with a Multiselect From List fragment mapped to an object") {
			Picklist.addPicklistViaAPI(picklistName = "Fruits");

			for (var fruit : list "Apple,Banana") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${fruit},
					itemName = ${fruit},
					picklistName = "Fruits");
			}

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "MultiselectPicklist",
				fieldLabelName = "Favorite Fruit",
				fieldName = "favoriteFruit",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder",
				picklistName = "Fruits");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.publish();

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order");

			PageEditor.editFormContainer(
				displayPageName = "Display Page Name",
				successMessage = "Go to Entry Display Page");

			PageEditor.publish();
		}

		task ("When a new submission is created with a entry field empty") {
			Button.clickSubmitButton();
		}

		task ("Then the Success Interaction will be completed") {
			var objectEntryId = JSONObject.getObjectEntryId(
				entryValue = "",
				fieldName = "favoriteFruit",
				objectName = "PurchaseOrder");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			PageEditor.viewInputStyle(
				label = "Favorite Fruit",
				showLabel = "true",
				type = "multiselect");
		}
	}

	@description = "This is a test for LPS-192722. View select content type modal when edit display page template without content type."
	@priority = 4
	test ViewSelectContentTypeModalWhenEditDisplayPageTemplateWithoutContentType {
		task ("Given a site administrator has a display page template without content type") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.publish();

			ObjectAdmin.deleteObjectViaAPI(objectName = "PurchaseOrder");
		}

		task ("When the site administrator edits the display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			LexiconCard.viewCardSubtitle(
				card = "Display Page Name",
				cardSubtitle = "-");

			AssertElementNotPresent(
				key_card = "Display Page Name",
				locator1 = "Card#CARD_TITLE_LINK");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Edit");
		}

		task ("Then the site administrator sees select content type modal") {
			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "Select Content Type");

			AssertTextEquals(
				index = 1,
				locator1 = "Modal#BODY_MESSAGE",
				value1 = "This display page template does not have any content type assigned, you must select one to edit it.");

			AssertSelectedLabel(
				locator1 = "//div[contains(.,'Content Type')]/select",
				value1 = "-- Not Selected --");
		}
	}

	@description = "This is a test for LPS-199013. View Select From List fragment display success in a Display Page when entry field is empty."
	@priority = 5
	test ViewSelectFromListWithEntryFieldEmptyOnAssociatedDisplayPageTemplate {
		task ("Given a content page with a Select From List fragment mapped to an object") {
			Picklist.addPicklistViaAPI(picklistName = "Fruits");

			for (var fruit : list "Apple,Banana") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${fruit},
					itemName = ${fruit},
					picklistName = "Fruits");
			}

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Favorite Fruit",
				fieldName = "favoriteFruit",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder",
				picklistName = "Fruits");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Purchase Order",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order (Default)");

			PageEditor.publish();

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order");

			PageEditor.editFormContainer(
				displayPageName = "Display Page Name",
				successMessage = "Go to Entry Display Page");

			PageEditor.publish();
		}

		task ("When a new submission is created with a entry field empty") {
			Button.clickSubmitButton();
		}

		task ("Then the Success Interaction will be completed") {
			var objectEntryId = JSONObject.getObjectEntryIdByIndex(objectName = "PurchaseOrder");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			PageEditor.viewInputStyle(
				placeholder = "Choose an Option",
				type = "select");
		}
	}

}