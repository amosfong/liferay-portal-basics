@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Automation ID: LRAC-8890 | Test Summary: Able to change retention period"
	@priority = 4
	test CanChangeRetentionPeriod {
		property test.run.type = "single";

		task ("Launch AC and go to Settings") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();
		}

		task ("Go to Data Control And Privacy") {
			ACSettings.goToDataControlAndPrivacy();
		}

		task ("Assert Retetion Period Presence") {
			AssertElementPresent(
				key_messageValue = "Retention Period",
				locator1 = "ACSettings#PROPERTIES_DEFAULT_SECONDARY_DESCRIPTION");
		}

		task ("Change Retention Period to 7 Months") {
			ACSettings.changeRetentionPeriodTo7Months();
		}

		task ("Assert that Retention Period changed") {
			AssertElementPresent(
				locator1 = "ACSettings#RETENTION_PERIOD",
				value1 = "7 Months");
		}
	}

	@description = "Automation ID: LRAC-8119 | Test Summary: Create Access Request"
	@priority = 5
	test CanCreateAccessRequest {
		property test.run.type = "single";

		var userEmail = "dcp1@liferay.com";
		var userName = "dcp1";

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = ${userEmail},
				userFirstName = ${userName},
				userLastName = ${userName},
				userScreenName = ${userName});

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = ${userEmail});
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = ${userEmail},
				userLoginFullName = "${userName} ${userName}");
		}

		task ("Go to the Home Page") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				documentTitleList = "1,2,3,4,5",
				pageName = "Home",
				siteName = "guest");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});

			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACUtils.viewNameList(nameList = "${userName} ${userName}");
		}

		task ("Create Access Request") {
			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				email = ${userEmail},
				jobType = "Access");
		}

		task ("Assert that Access Request was created and is on the list") {
			ACSettings.goToProperties();

			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Request Log",
				optionValue = "Manage");

			ACSettings.assertRequestLog(
				key_emailAdress = ${userEmail},
				key_jobType = "Access");
		}
	}

	@description = "Automation ID: LRAC-8117 | Test Summary: Create Delete Request"
	@priority = 5
	test CanCreateDeleteRequest {
		property test.run.type = "single";

		var userEmail = "dcp2@liferay.com";
		var userName = "dcp2";

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = ${userEmail},
				userFirstName = ${userName},
				userLastName = ${userName},
				userScreenName = ${userName});

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = ${userEmail});
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = ${userEmail},
				userLoginFullName = "${userName} ${userName}");
		}

		task ("Go to the Home Page") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				documentTitleList = "1,2,3,4,5",
				pageName = "Home",
				siteName = "guest");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});

			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACUtils.viewNameList(nameList = "${userName} ${userName}");
		}

		task ("Create Delete Request") {
			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				email = ${userEmail},
				jobType = "Delete");
		}

		task ("Assert that Delete Request was created and is on the list") {
			ACSettings.goToProperties();

			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Request Log",
				optionValue = "Manage");

			ACSettings.assertRequestLog(
				key_emailAdress = ${userEmail},
				key_jobType = "Delete");
		}
	}

	@description = "Automation ID: LRAC-8109 | Test Summary: Create Suppress Request"
	@priority = 5
	test CanCreateSuppressRequest {
		property test.run.type = "single";

		var userEmail = "dcp3@liferay.com";
		var userName = "dcp3";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = ${userEmail},
				userFirstName = ${userName},
				userLastName = ${userName},
				userScreenName = ${userName});

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = ${userEmail});
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = ${userEmail},
				userLoginFullName = ${userName});
		}

		task ("Go to Site Page") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				documentTitleList = "1,2,3,4,5",
				pageName = "Home",
				siteName = "guest");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC > Settings > Create a suppress request") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});

			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACUtils.viewNameList(nameList = "${userName} ${userName}");

			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				email = ${userEmail},
				jobType = "Suppress");
		}

		task ("Assert that the suppress request was created") {
			ACSettings.goToProperties();

			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Request Log",
				optionValue = "Manage");

			ACSettings.assertRequestLog(
				key_emailAdress = ${userEmail},
				key_jobType = "Suppress");
		}
	}

}