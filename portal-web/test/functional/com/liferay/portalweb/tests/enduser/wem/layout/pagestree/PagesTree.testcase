@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}
	}

	@description = "This is a test for LPS-103104 and LPS-102544. Can add a child page via page tree panel."
	@priority = 5
	@uitest
	test AddChildPage {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");
		}

		task ("Add a child page via page tree") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			PagesFinder.addChildPage(
				childPageName = "Test Child Page",
				parentPageName = "Test Page Name");
		}

		task ("Navigate to child page via page tree") {

			// Workaround until LPS-168565 resolved

			Portlet.expandTree();

			PagesFinder.navigateToChildPage(
				childPageName = "Test Child Page",
				parentPageName = "Test Page Name");
		}
	}

	@description = "This is a test for LPS-107774. Can create a Collection Page based on Collections or Collection Providers in Pages Tree panel."
	@priority = 5
	@uitest
	test AddCollectionPage {
		property portal.acceptance = "true";

		task ("Add three web contents based on Basic Web Content") {
			for (var n : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = ${randomSiteName},
					title = "Web Content Title ${n}");
			}
		}

		task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = ${randomSiteName},
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection via page tree") {
			ApplicationsMenu.gotoSite(site = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			PagesFinder.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Test Collection Page Name 1",
				tabName = "Collections");
		}

		task ("View the page name is shown on control menu") {
			ControlMenu.viewHeaderDraftTitle(headerTitle = "Test Collection Page Name 1");
		}

		task ("View the collection name shown in Heading fragment") {
			AssertVisible(
				key_elementHeader = "//div[contains(.,'Dynamic Collection') and contains(@id,'fragment-')]",
				key_position = 1,
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("View web contents are shown in Collection Display") {
			var i = 1;

			for (var n : list "3,2,1") {
				AssertVisible(
					key_colPosition = 1,
					key_entryTitle = "Web Content Title ${n}",
					key_fragmentName = "Collection Display",
					key_rowPosition = ${i},
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var i = ${i} + 1;
			}
		}

		task ("View the collection name as draft in the page tree") {
			PagesFinder.goToPagesFinder();

			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Collection Page Name 1*");
		}

		task ("Add a collection page based on Highest Rated Assets via page tree") {
			PagesFinder.addCollectionPage(
				collectionName = "Highest Rated Assets",
				pageName = "Test Collection Page Name 2",
				tabName = "Collection Providers");
		}

		task ("View the page name is shown on control menu") {
			ControlMenu.viewHeaderDraftTitle(headerTitle = "Test Collection Page Name 2");
		}

		task ("View the collection name shown in Heading fragment") {
			AssertVisible(
				key_elementHeader = "//div[contains(.,'Highest Rated Assets') and contains(@id,'fragment-')]",
				key_position = 1,
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("View web contents are shown in Collection Display") {
			var i = 1;

			for (var n : list "3,2,1") {
				AssertVisible(
					key_colPosition = 1,
					key_entryTitle = "Web Content Title ${n}",
					key_fragmentName = "Collection Display",
					key_rowPosition = ${i},
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var i = ${i} + 1;
			}
		}

		task ("View the draft collection page name in the page tree") {
			PagesFinder.goToPagesFinder();

			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Collection Page Name 1*");
		}
	}

	@description = "This is a test for LPS-168856. Load more button is working while editing a page"
	@priority = 3
	test LoadMoreResultsInPageTreeWhenEditContentPage {
		task ("Given a site administrator has a site with more than 20 pages") {
			for (var i : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Content Page Name ${i}",
					type = "content");
			}
		}

		task ("When the site administrator goes into the page editor and open the Page Tree") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();
		}

		task ("Then the site administrator could display all pages via clicking Load More Results") {
			Button.click(button = "Load More Results");

			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Content Page Name 22*");
		}
	}

	@description = "This is a test for LPS-102544. Can navigate to both public and private pages from pages finder."
	@priority = 5
	test NavigateToBothPageTypes {
		property portal.acceptance = "true";

		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Add a public and private pages") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Public Page");

			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Private Page");
		}

		task ("Navigate to public page via page tree") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Public Pages");

			PagesFinder.navigateToPage(pageName = "Test Public Page");
		}

		task ("Navigate to private page via page tree") {
			PagesFinder.selectPageType(optionValue = "Private Pages");

			PagesFinder.navigateToPage(pageName = "Test Private Page");
		}
	}

	@description = "This is a test for LPS-139064. Users can see the preview draft when the content page at draft status."
	@priority = 5
	test PreviewDraftWhenContentPageAtDraftStatus {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Access to the Page Tree") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();
		}

		task ("Preview draft via Page Tree") {
			PagesFinder.gotoPageEllipsisItem(
				item = "Preview Draft",
				pageName = "Test Page Name*");

			SelectWindow.selectPopUp(value1 = "null");

			ControlMenu.viewHeaderDraftTitle(headerTitle = "Test Page Name");
		}

		task ("Close the new tab and select the original tab") {
			Navigator.closeWindow();
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Discard the draft in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.discardDraft(pageName = "Test Page Name");
		}

		task ("Access to the Page Tree") {
			ProductMenu.gotoHomePage();
		}

		task ("Preview draft via Page Tree") {
			PagesFinder.gotoPageEllipsisItem(
				item = "Preview Draft",
				pageName = "Test Page Name*");

			SelectWindow.selectPopUp(value1 = "null");

			ControlMenu.viewHeaderDraftTitle(headerTitle = "Test Page Name");
		}

		task ("Close the new tab and select the original tab") {
			Navigator.closeWindow();
		}

		task ("Add a Heading fragment to page then pubilsh") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.publish();
		}

		task ("Access to the Page Tree") {
			PagesFinder.goToPagesFinder();
		}

		task ("View the page name doesn't have asterisk icon in Page Tree") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Page Name");
		}

		task ("View the Preview Draft action not shown") {
			MouseOver(
				key_pageName = "Test Page Name",
				locator1 = "PagesFinder#PAGE_NAME");

			Click.clickNoMouseOver(
				key_pageName = "Test Page Name",
				locator1 = "PagesFinder#PAGE_ELLIPSIS_ICON");

			MenuItem.viewNotPresent(menuItem = "Preview Draft");
		}
	}

	@description = "This is a test for LPS-116428. Can reorganize the pages via Page Tree panel."
	@priority = 4
	test ReorganizePages {
		task ("Access to Page Tree panel in Test Site Name") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Portlet Page",
				type = "portlet");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Embedded Page",
				type = "embedded");

			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();
		}

		task ("Assert the order of Pages in Page Tree panel") {
			var n = 1;

			for (var pageName : list "Test Portlet Page,Test Content Page*,Test Embedded Page") {
				AssertVisible(
					key_index = ${n},
					key_pageName = ${pageName},
					locator1 = "PagesFinder#TREE_NODE_ITEM");

				var n = ${n} + 1;
			}
		}

		task ("Reorganize the order of Pages in Page Tree panel") {
			DragAndDrop.javaScriptDragAndDropToUp(
				locator1 = "//ul[contains(@class,'treeview-group')]//div[contains(@role,'treeitem')][normalize-space()='Test Content Page*']",
				locator2 = "//ul[contains(@class,'treeview-group')]//div[contains(@role,'treeitem')][normalize-space()='Test Portlet Page']");
		}

		task ("Assert the order of Pages in Page Tree panel") {
			var n = 1;

			for (var pageName : list "Test Content Page*,Test Portlet Page,Test Embedded Page") {
				AssertVisible(
					key_index = ${n},
					key_pageName = ${pageName},
					locator1 = "PagesFinder#TREE_NODE_ITEM");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-90363. Assert that all page types can be found and counted in the pages finder."
	@priority = 5
	test SearchAllPageTypes {
		property portal.acceptance = "true";

		task ("Add different types of pages") {
			var i = 1;

			for (var pageType : list "portlet,content,embedded,full_page_application,panel") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Page Name ${i}",
					type = ${pageType});

				var i = ${i} + 1;
			}

			for (var i : list "6,7,8,9,10,11") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Access to the Page Tree ") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();
		}

		task ("Type search term") {
			PagesFinder.inputPageSearch(keyword = "Test");
		}

		task ("Assert all 11 pages shown in Pages Administration") {
			PagesFinder.viewInPagesAdministration();

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "11 Results Found for \"Test\"");
		}
	}

	@description = "This is a test for LPS-184551. The user could show multiple child pages on Page Tree."
	@priority = 3
	test ShowChildPages {
		task ("Given a user has pages with child pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Page Name ${i}");

				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Child Page Name ${i}",
					parentLayoutName = "Test Page Name ${i}");
			}
		}

		task ("When the user shows child pages in Page Tree") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			Portlet.expandTree();
		}

		task ("Then the user sees child pages in Page Tree") {
			AssertElementPresent(
				key_nodeName = "Test Page Name 1",
				locator1 = "Treeview#NODE_SELECTED");

			for (var i : list "1,2") {
				PagesFinder.viewPageNameInPagesFinder(pageName = "Child Page Name ${i}");
			}
		}
	}

	@description = "This is a test for LPS-133709. The user can switch site navigation menus via page type selector in Page Tree."
	@priority = 4
	test SwitchNavigationMenusViaPageTypeSelector {
		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Add two public pages") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Public Page ${n}");
			}
		}

		task ("Add two private pages") {
			for (var n : list "1,2") {
				JSONLayout.addPrivateLayout(
					groupName = ${randomSiteName},
					layoutName = "Test Private Page ${n}");
			}
		}

		task ("Add the first navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = ${randomSiteName},
				siteNavigationMenuName = "Navigation Menu Name 1");
		}

		task ("Add two public pages to the first navigation menu") {
			for (var n : list "1,2") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = ${randomSiteName},
					privateLayout = "false",
					siteNavigationMenuItemName = "Test Public Page ${n}",
					siteNavigationMenuName = "Navigation Menu Name 1",
					type = "layout");
			}
		}

		task ("Add the second navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = ${randomSiteName},
				siteNavigationMenuName = "Navigation Menu Name 2");
		}

		task ("Add two private pages to the second navigation menu") {
			for (var n : list "1,2") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = ${randomSiteName},
					privateLayout = "true",
					siteNavigationMenuItemName = "Test Private Page ${n}",
					siteNavigationMenuName = "Navigation Menu Name 2",
					type = "layout");
			}
		}

		task ("Select the first navigation menu in page type selctor of Page Tree") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Navigation Menu Name 1");
		}

		task ("Navigate to each page via Page Tree") {
			for (var pageName : list "Test Public Page 1,Test Public Page 2") {
				PagesFinder.navigateToPage(pageName = ${pageName});
			}
		}

		task ("Select the second navigation menu in page type selctor of Page Tree") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Navigation Menu Name 2");
		}

		task ("Navigate to each page via Page Tree") {
			for (var pageName : list "Test Private Page 1,Test Private Page 2") {
				PagesFinder.navigateToPage(pageName = ${pageName});
			}
		}
	}

	@description = "This is a test for LPS-152360. View behaviors after deleting a page with and without siblings from page tree."
	@priority = 4
	test ViewBehaviorsAfterDeletingAPageWithAndWithoutSiblings {
		task ("Given adding some content pages") {
			for (var i : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "P${i}",
					type = "content");

				JSONLayout.publishLayout(
					groupName = ${randomSiteName},
					layoutName = "P${i}");
			}
		}

		task ("When user goes to the fragments admin") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = ${siteURLKey});
		}

		task ("Then view behaviors after deleting a page with and without sibling from page tree") {
			task ("Scenario 1") {
				PagesFinder.goToPagesFinder();

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P1");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertElementPresent(
					key_card = "Account Selector",
					locator1 = "Card#CARD_TITLE");

				PagesFinder.navigateToPage(pageName = "P2");

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P3");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "P2");

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P2");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "Pages");
			}

			task ("Scenario 2") {
				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "P1",
					type = "content");

				JSONLayout.publishLayout(
					groupName = ${randomSiteName},
					layoutName = "P1");

				for (var i : list "1,2,3") {
					JSONLayout.addPublicLayout(
						groupName = ${randomSiteName},
						layoutName = "P1.${i}",
						parentLayoutName = "P1",
						type = "content");

					JSONLayout.publishLayout(
						groupName = ${randomSiteName},
						layoutName = "P1.${i}");
				}

				for (var i : list "1,2") {
					JSONLayout.addPublicLayout(
						groupName = ${randomSiteName},
						layoutName = "P1.1.${i}",
						parentLayoutName = "P1.1",
						type = "content");

					JSONLayout.publishLayout(
						groupName = ${randomSiteName},
						layoutName = "P1.1.${i}");
				}

				ContentPagesNavigator.openViewContentPage(
					pageName = "P1.1.2",
					siteName = ${randomSiteName});

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P1.1.2");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "P1.1.1");

				JSONLayout.addPublicLayout(
					groupName = ${randomSiteName},
					layoutName = "P1.1.2",
					parentLayoutName = "P1",
					type = "content");

				JSONLayout.publishLayout(
					groupName = ${randomSiteName},
					layoutName = "P1.1.2");

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P1.1.1");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "P1.1");

				PagesFinder.navigateToPage(pageName = "P1.3");

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P1.3");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "P1.2");

				PagesFinder.navigateToPage(pageName = "P1.1");

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P1.1");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "P1");

				PagesFinder.navigateToPage(pageName = "P1.2");

				PagesFinder.gotoPageEllipsisItem(
					item = "Delete",
					pageName = "P1.2");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertTextEquals(
					locator1 = "ControlMenu#HEADING",
					value1 = "P1");
			}
		}
	}

	@description = "This is a test for LPS-152360. There are Copy Page, Permissions, Delete options in page tree and no Permission ellipsis button and Permissions option in configuration view."
	@priority = 4
	test ViewEllipsisOptionsInPageTreeAndNoPermissionEllipsisInConfigurationView {
		task ("Given a published content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			JSONLayout.publishLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");
		}

		task ("When user goes to the page tree") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PagesFinder.goToPagesFinder();
		}

		task ("Then there are Copy Page, Permissions, Delete options") {
			PagesFinder.gotoPageEllipsisItem(
				item = "Copy Page",
				pageName = "Test Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Copy Test Page Name");

			Button.clickAdd();

			SelectFrameTop();

			PagesFinder.viewPageNameInPagesFinder(pageName = "Copy Test Page Name*");

			PagesFinder.gotoPageEllipsisItem(
				item = "Permissions",
				pageName = "Test Page Name");

			IFrame.selectPermissionsFrame();

			Check.checkNotVisible(
				key_roleTitle = "publications-user",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			PortletEntry.save();

			IFrame.closeFrame();

			PagesFinder.gotoPageEllipsisItem(
				item = "Permissions",
				pageName = "Test Page Name");

			IFrame.selectPermissionsFrame();

			AssertChecked.assertCheckedNotVisible(
				key_roleTitle = "publications-user",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			IFrame.closeFrame();

			PagesFinder.gotoPageEllipsisItem(
				item = "Delete",
				pageName = "Copy Test Page Name*");

			AssertTextEquals(
				locator1 = "Modal#BODY",
				value1 = "Are you sure you want to delete the page \"Copy Test Page Name\"? It will be removed immediately.");

			Click(
				key_text = "Delete",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");

			Alert.viewSuccessMessage();
		}

		task ("And Then assert no Permission ellipsis button on the top right with permission option") {
			PagesFinder.gotoPageEllipsisItem(
				item = "Configure",
				pageName = "Test Page Name");

			AssertElementNotPresent(locator1 = "Icon#CONTROL_MENU_VERTICAL_ELLIPSIS");
		}
	}

}