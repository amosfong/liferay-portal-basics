@component-name = "portal-questions"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Questions";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Questions Page");

		JSONLayout.addWidgetToPublicLayout(
			column = 2,
			groupName = "Guest",
			layoutName = "Questions Page",
			widgetName = "Questions");
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Message Boards");

			if (IsElementPresent(locator1 = "Questions#QUESTIONS_LIST")) {
				Questions.tearDown();
			}

			PagesAdmin.tearDownCP();
		}
	}

	@description = "Validate if the user can create a question with the maximum of 5 tags with unexisting tag"
	@priority = 3
	@refactordone
	test CanAddQuestionWithTheMaximumTags {
		task ("Given a Questions category") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("When a Question is added with the maximum 5 tags") {
			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Body AddQuestionWithTheMaximumTags",
				layoutName = "questions-page",
				siteURLKey = "guest",
				tagLocatorList = "Tag1,Tag2,Tag3,Tag4,Tag5",
				titleField = "Title AddQuestionWithTheMaximumTags",
				topicName = "questions-test-category");
		}

		task ("Then the Question should be created") {
			Questions.viewList(listedQuestions = "Title AddQuestionWithTheMaximumTags");
		}
	}

	@description = "Validate if the user can not create a question with the maximum of 6 tags with unexisting tag"
	@priority = 2
	@refactordone
	test CannotAddQuestionWithMoreThanTheMaximumTags {
		task ("Given a Questions category") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");
		}

		task ("When a Question is added with more than the maximum of 5 tags") {
			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Body AddQuestionWithMoreThanTheMaximumTags",
				layoutName = "questions-page",
				siteURLKey = "guest",
				tagLocatorList = "Tag1,Tag2,Tag3,Tag4,Tag5,Tag6",
				titleField = "Title AddQuestionWithMoreThanTheMaximumTags",
				topicName = "questions-test-category");
		}

		task ("Then an error message should be displayed saying that the 6th tag is invalid") {
			AssertElementPresent(
				key_errorMessage = "This is an invalid tag.",
				locator1 = "Questions#ASK_QUESTION_ERROR_MESSAGE");
		}
	}

	@description = "Validate that the user cannot post a question with a tag containing Java Script. It also covers LPS-137561 and LPS-137633."
	@priority = 4
	test CannotPostQuestionWithTagContainingJavaScript {
		task ("Given a Questions category with JavaScript that is displayed on a page") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "Questions Page");

			ScrollWebElementIntoView(
				key_text = "New Topic",
				locator1 = "Button#ANY");

			Button.click(button = "New Topic");

			Questions.addRootTopic(
				invalidCharacters = "Topic",
				rootTopicDescription = '''<script>alert(123);</script>''',
				rootTopicName = '''<script>alert(123);</script>''');

			Questions.viewDefault();

			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");
		}

		task ("When a Question that contains JavaScirpt is added") {
			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Body AddQuestionWithMoreText",
				invalidCharacters = "Tag",
				tagLocatorList = '''<script>alert(123);</script>''',
				titleField = "Title AddQuestion",
				topicName = "questions-test-category");
		}

		task ("Then the JavaScript alert should not pop up") {
			AssertAlertNotPresent();
		}
	}

	@description = "Validate if the user can subscribe from the tag."
	@priority = 4
	test CanSubscribeFromTag {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a new user with an Administrator role") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("and a Question category and question with a tag") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestionWithTag(
				bodyField = "Content AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				tagField = "tag",
				titleField = "Title AddQuestion");
		}

		task ("and the user is subscribed to the tag") {
			Questions.openToTagsTab(
				layoutName = "questions-page",
				siteURLKey = "guest");

			Questions.subscribeFromTag();
		}

		task ("When the default user adds a Qeustion with the subscribed tag") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Questions.askQuestionFillingTheMandatoryFields(
				contentField = "Content AddQuestion New",
				layoutName = "questions-page",
				siteURLKey = "guest",
				tagLocatorList = "tag",
				titleField = "Title AddQuestion New",
				topicName = "questions-test-category");
		}

		task ("Then the new user gets a notification that a new content was added on the subscribed tag") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Notifications.viewBadgeCount(notificationCount = 1);

			Notifications.gotoNotifications();

			Notifications.viewNewContent(
				assetType = "message boards message",
				contentBody = "Title AddQuestion New",
				user = "userfn userln");

			Notifications.navigateToContent(contentBody = "Title AddQuestion New");

			Questions.viewDetailsTitle(questionTitle = "Title AddQuestion New");
		}
	}

	@description = "Validate if the user can unsubscribe from the tag."
	@priority = 4
	test CanUnsubscribeFromTag {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property solutions.acceptance = "true";

		task ("Given a new user with the Administrator role") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("and a Question category and question with a tag") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestionWithTag(
				bodyField = "Content AddQuestion",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				tagField = "tag",
				titleField = "Title AddQuestion");
		}

		task ("and the user is subscribed to the tag") {
			Questions.openToTagsTab(
				layoutName = "questions-page",
				siteURLKey = "guest");

			Questions.subscribeFromTag();
		}

		task ("When the user unsubscribes from the tag") {
			Questions.unsubscribeFromTag();
		}

		task ("and when a new content is added with the tag") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			JSONQuestions.addQuestionWithTag(
				bodyField = "Content AddQuestion New",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				tagField = "tag",
				titleField = "Title AddQuestion New",
				userEmailAddress = "userea@liferay.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Then there should be no notifications about the unsubscribed tag") {
			Notifications.viewBadgeCount(notificationCount = 0);
		}
	}

	@description = "Validate if when the user click in the tag of the Tags tab, the user is redirected to the questions that use this tag"
	@priority = 3
	@refactordone
	test CanViewQuestionViaTag {
		task ("Given a Question with a tag") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			JSONQuestions.addQuestionWithTag(
				bodyField = "Body TagCardRedirectTheUserToTheQuestionsThatAreUsingThisTag",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				tagField = "tag1",
				titleField = "Title TagCardRedirectTheUserToTheQuestionsThatAreUsingThisTag");
		}

		task ("When the user views the tag") {
			Questions.openToTagsTab(
				layoutName = "questions-page",
				siteURLKey = "guest");
		}

		task ("Then the tagged Question can be viewed") {
			Questions.viewQuestionViaTag(
				questionTitle = "Title TagCardRedirectTheUserToTheQuestionsThatAreUsingThisTag",
				tagName = "tag1");
		}
	}

	@description = "Validate if the user can sort the tags."
	@priority = 4
	@refactordone
	@uitest
	test QuestionsTagsCanBeSortedInTagsTab {
		task ("Give a category and Questions with tags") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Questions Test Category",
				userEmailAddress = "test@liferay.com");

			for (var num : list "1,2") {
				JSONQuestions.addQuestionWithTag(
					bodyField = "Question Body ${num}",
					categoryName = "Questions Test Category",
					groupName = "Guest",
					tagField = "tag1",
					titleField = "Question ${num}");
			}

			JSONQuestions.addQuestionWithTag(
				bodyField = "Question Body 3",
				categoryName = "Questions Test Category",
				groupName = "Guest",
				tagField = "tag2",
				titleField = "Question 3");
		}

		task ("When the Tags are sorted by Latest Created date or Number of usages, Then the tags should be displayed accordingly") {
			Navigator.gotoPage(pageName = "Questions Page");

			Questions.gotoCategory(categoryName = "Questions Test Category");

			Questions.gotoTab(questionTabField = "Tags");

			Questions.viewTagsFilterResults(
				position = 1,
				tagName = "tag1",
				usedTimes = "Used 2 Times");

			Questions.viewTagsFilterResults(
				position = 2,
				tagName = "tag2",
				usedTimes = "Used 1 Times");

			Questions.configureTagsFilter(filterBy = "Latest Created");

			Questions.viewTagsFilterResults(
				position = 1,
				tagName = "tag2");

			Questions.viewTagsFilterResults(
				position = 2,
				tagName = "tag1");

			Questions.configureTagsFilter(filterBy = "Number of Usages");

			Questions.viewTagsFilterResults(
				position = 1,
				tagName = "tag1",
				usedTimes = "Used 2 Times");

			Questions.viewTagsFilterResults(
				position = 2,
				tagName = "tag2",
				usedTimes = "Used 1 Times");
		}
	}

	@description = "Validate if the Tags tab of the question portlet, the tags are ordered by occurrences"
	@priority = 4
	@refactordone
	test QuestionTagsCanBeOrderedByOccurrenceInTagsTab {
		task ("Given categories and Questions with tags") {
			for (var num : list "1,2") {
				JSONMBMessage.addCategory(
					categoryDescription = "Description",
					categoryName = "Question ValidateTagsOccurrences${num}",
					userEmailAddress = "test@liferay.com");
			}

			for (var num : list "1,2") {
				JSONQuestions.addQuestionWithTag(
					bodyField = "Question Body ${num}",
					categoryName = "Question ValidateTagsOccurrences1",
					groupName = "Guest",
					tagField = "tag1",
					titleField = "Question ${num}");
			}
		}

		task ("and tags are viewable by usage") {
			Questions.openToTagsTab(
				layoutName = "questions-page",
				siteURLKey = "guest");

			Questions.viewTags(
				amountOfUsedTimes = 2,
				tagName = "tag1");
		}

		task ("When a new Question with a tag is added") {
			JSONQuestions.addQuestionWithTag(
				bodyField = "Question Body 3",
				categoryName = "Question ValidateTagsOccurrences2",
				groupName = "Guest",
				tagField = "tag1",
				titleField = "Question 3");
		}

		task ("Then the number of times the tag is used is displayed") {
			Questions.openToTagsTab(
				layoutName = "questions-page",
				siteURLKey = "guest");

			Questions.viewTags(
				amountOfUsedTimes = 3,
				tagName = "tag1");
		}
	}

	@description = "This test covers LPS-119780. It ensures that the user can search by tags in the tags search field."
	@priority = 4
	@refactordone
	test QuestionTagsCanBeSearchedInTagsTab {
		task ("Given a category and Questions") {
			JSONMBMessage.addCategory(
				categoryDescription = "Description",
				categoryName = "Question ValidateSearchByQuestionTags",
				userEmailAddress = "test@liferay.com");

			for (var num : list "1,2,3") {
				JSONQuestions.addQuestionWithTag(
					bodyField = "Question Body ${num}",
					categoryName = "Question ValidateSearchByQuestionTags",
					groupName = "Guest",
					tagField = "tag${num}",
					titleField = "Question ${num}");
			}
		}

		task ("When a tag is searched") {
			Questions.openToTagsTab(
				layoutName = "questions-page",
				siteURLKey = "guest");

			Questions.search(
				searchKey = "tag1",
				searchTag = "true");

			WaitForElementNotPresent(
				key_tagName = "tag2",
				locator1 = "Questions#TAGS_LIST_TAB_NAMES");
		}

		task ("Then only the matching tag is displayed") {
			Questions.viewTags(tagName = "tag1");

			Questions.search(
				searchKey = "tag1",
				searchTag = "true");

			Questions.viewNoTags(tagsList = "tag2,tag3");

			Click(
				ariaLabel = "Clear",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			for (var tagName : list "tag1,tag2,tag3") {
				Questions.viewTags(tagName = ${tagName});
			}

			Questions.configureTagsFilter(filterBy = "Latest Created");

			Questions.search(
				searchKey = "tag2",
				searchTag = "true");

			Questions.viewTags(tagName = "tag2");

			Questions.viewNoTags(tagsList = "tag1,tag3");

			Click(
				ariaLabel = "Clear",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			for (var tagName : list "tag1,tag2,tag3") {
				Questions.viewTags(tagName = ${tagName});
			}
		}
	}

}