@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Create a Document And Media") {
			ACUtils.createDMAndAddToPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONGroup.deleteGroupByName(groupName = "AC Test");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-10999 | Automation ID: LRAC-11308 | Test Summary: Delete browser storage changes userid and anonymous user appears"
	@priority = 3
	test CheckDeleteBrowserStorageChangesUserId {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title,DM AC Title,DM AC Title,DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Clear local storage") {
			ACUtils.clearLocalStorage();
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title,DM AC Title,DM AC Title,DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are different") {
			TestUtils.assertNotEquals(
				actual = ${localStorageItem2},
				expected = ${localStorageItem1});
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACCards.viewTotalCount(
				cardName = "Anonymous",
				count = 1);

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACNavigation.openItem(itemName = "user1 user1");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			ACUtils.assertPageTitle(pageTitle = "documentPreviewed");
		}

		task ("Check that the event generated by anonymous user does not appear for user1") {
			ACUtils.assertPageTitleNotPresent(pageTitle = "documentDownloaded");
		}

		task ("Navigate to Documents and Media tab in Asset dashboard") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Documents and Media");
		}

		task ("Change the time filter to Last 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Navigate to the overview tab in document report entry") {
			ACNavigation.openItem(itemName = "DM AC Title");
		}

		task ("Check the number of downloads made by the anonymous user") {
			ACCards.viewIfVisitorsBehaviorMetricIsBetweenCorrectRange(
				maxMetricValue = 5,
				metricTitle = "Downloads",
				minMetricValue = 0);
		}
	}

	@description = "Feature ID: LRAC-11127 | Automation ID: LRAC-12154 | Test Summary: Check if the identity event is sent when the user interacts with sites that have different channels ids"
	@priority = 3
	test CheckEventSentWhenUserInteractsWithSitesWithDifferentChannelId {
		property proxy.server.enabled = "true";

		var sitePageName = "AC Test";

		task ("Add a new site with a public page") {
			ACUtils.addSiteAndPage(
				layoutName = ${sitePageName},
				siteName = ${sitePageName});
		}

		task ("Create another property and sync the second site") {
			ACDXPSettings.navToSyncedSitesMenu();

			ACDXPSettings.syncSites(
				newPropertyName = "${sitePageName} Property",
				siteName = ${sitePageName});
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Go to the first site and interact with it") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the channelID of the first identity event sent") {
			var identityLastUpdateDate1 = ACUtils.getLocalStorageItem(keyName = "ac_client_channel_id");
		}

		task ("Go to the second site and interact with it") {
			ACUtils.navigateToSitePage(
				pageName = ${sitePageName},
				siteName = ${sitePageName});
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the channelID of the second identity event sent") {
			var identityLastUpdateDate2 = ACUtils.getLocalStorageItem(keyName = "ac_client_channel_id");
		}

		task ("Check that the channelID is different and this indicates that a new identity event was sent") {
			TestUtils.assertNotEquals(
				actual = ${identityLastUpdateDate2},
				expected = ${identityLastUpdateDate1});
		}
	}

	@description = "Story: LRAC-10998 | Automation ID: LRAC-11380 | Test Summary: Check that the Identify event is not sent every time the user interacts with the site"
	@priority = 3
	test CheckIdentityEventNotTriggeredAlwaysUserInteractsWithSite {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Navigate to the connected site") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the identityID of the identity event") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_identity");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the identityID of the identity event") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_identity");
		}

		task ("Check that the identityID has not changed after a new interaction with the site") {
			TestUtils.assertEquals(
				actual = ${localStorageItem2},
				expected = ${localStorageItem1});
		}

		task ("Get the userID of the identity event") {
			var localStorageItem3 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Navigate to the connected site") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the userID of the identity event") {
			var localStorageItem4 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Check that the userID has not changed after a new interaction with the site") {
			TestUtils.assertEquals(
				actual = ${localStorageItem4},
				expected = ${localStorageItem3});
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8713 | Test Summary: Check Identity triggers upon logging in and check its properties (see reference document in comments)"
	@priority = 5
	test CheckIdentityUponLogin {
		property proxy.server.enabled = "true";

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});
		}

		task ("Get the DXP Instance ID in AC") {
			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = ${assignedPropertyName});
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in new site") {
			var portalURL = PropsUtil.get("portal.url");

			User.firstLoginUI(
				specificURL = "${portalURL}/web/site-name/ac-page",
				userEmailAddress = "test@liferay.com",
				userPassword = PropsUtil.get("default.admin.password"));
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("View the identity request properties value") {
			ACUtils.assertIdentityRequestPropertiesValue(expectedDataSourceId = ${expectedDataSourceId});
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = ${expectedChannelId},
				expectedDataSourceId = ${expectedDataSourceId});
		}
	}

	@description = "Feature ID: LRAC-11127 | Automation ID: LRAC-12153 | Test Summary: Check if identity is sent after the first visit with an anonymous user and check if it is sent again after the login with the same user but as a known individual"
	@priority = 5
	test CheckIfEventSentAgainAfterLoginAndIfUserClassifiedAsKnownIndividual {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the userId number of the identity event") {
			var userId = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "userId");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = ${userId},
				expected = ${localStorageItem1});
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Navigate to the Overview on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToOverviewTab();
		}

		task ("View the number of Total Individuals and Anonymous") {
			ACCards.viewTotalCount(
				cardName = "Total Individuals",
				count = 1);

			ACCards.viewTotalCount(
				cardName = "Anonymous",
				count = 1);
		}

		task ("Go to DXP") {
			ACUtils.launchDXP();
		}

		task ("Visit the document as new user") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				emailList = "user1@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the emailAddressHashed number of the identity event") {
			var emailAddressHashed = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "emailAddressHashed");
		}

		task ("Check that the emailAddressHashed is not empty") {
			TestUtils.assertNotEquals(
				actual = ${emailAddressHashed},
				expected = "");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title,DM AC Title,DM AC Title,DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Navigate to the Overview on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToOverviewTab();
		}

		task ("View the number of Total Individuals, Known and Anonymous") {
			ACCards.viewTotalCount(
				cardName = "Total Individuals",
				count = 1);

			ACCards.viewTotalCount(
				cardName = "Known",
				count = 1);

			ACCards.viewTotalCount(
				cardName = "Anonymous",
				count = 0);
		}
	}

	@description = "Feature ID: LRAC-10999 | Automation ID: LRAC-11310 | Test Summary: Login as same user keeps userid"
	@priority = 3
	test CheckLoginSameUserKeepUserId {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the userId number of the identity event") {
			var userId = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "userId");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = ${userId},
				expected = ${localStorageItem1});
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = ${localStorageItem2},
				expected = ${localStorageItem1});
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem3 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = ${localStorageItem3},
				expected = ${localStorageItem2});
		}
	}

	@description = "Feature ID: LRAC-10999 | Automation ID: LRAC-11307 | Test Summary: Logout continues to track user"
	@priority = 4
	test CheckLogoutContinuesToTrackUserWithSameUserId {
		property proxy.server.enabled = "true";

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the userId number of the identity event") {
			var userId = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "userId");
		}

		task ("Get userId number from local storage") {
			var localStorageItem1 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = ${userId},
				expected = ${localStorageItem1});
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Download the document") {
			ACUtils.navigateToSitePage(
				actionType = "Download DM",
				documentTitleList = "DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get userId number from local storage") {
			var localStorageItem2 = ACUtils.getLocalStorageItem(keyName = "ac_client_user_id");
		}

		task ("Compare userId numbers to check if they are the same") {
			TestUtils.assertEquals(
				actual = ${localStorageItem2},
				expected = ${localStorageItem1});
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACNavigation.openItem(itemName = "user1 user1");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			for (var eventName : list "documentPreviewed,documentDownloaded") {
				ACUtils.assertPageTitle(pageTitle = ${eventName});
			}
		}
	}

	@description = "Feature ID: LRAC-11127 | Automation ID: LRAC-12155 | Test Summary: New user changes emailAddressHashed"
	@priority = 5
	test NewUserChangeEmailAddressHashed {
		property proxy.server.enabled = "true";

		var usernameList = "user1,user2";

		task ("Add two new users") {
			for (var username : list ${usernameList}) {
				JSONUser.addUser(
					userEmailAddress = "${username}@liferay.com",
					userFirstName = ${username},
					userLastName = ${username},
					userScreenName = ${username});

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${username}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userLoginFullName = "user1 user1");
		}

		task ("Visit the AC Page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the emailAddressHashed number of the identity event") {
			var emailAddressHashed1 = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "emailAddressHashed");
		}

		task ("Check that the emailAddressHashed is not empty") {
			TestUtils.assertNotEquals(
				actual = ${emailAddressHashed1},
				expected = "");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user2@liferay.com",
				userLoginFullName = "user2 user2");
		}

		task ("Visit the AC Page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			ACUtils.waitForSendingRequest();
		}

		task ("Get the emailAddressHashed number of the identity event") {
			var emailAddressHashed2 = ACUtils.getPageRefRequestPropertyValue(
				pageRef = "identity",
				property = "emailAddressHashed");
		}

		task ("Check if the emailAddressHashed was modified") {
			TestUtils.assertNotEquals(
				actual = ${emailAddressHashed2},
				expected = ${emailAddressHashed1});
		}
	}

}