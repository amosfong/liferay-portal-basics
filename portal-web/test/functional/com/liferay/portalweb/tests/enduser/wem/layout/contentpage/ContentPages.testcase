@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Enable dynamic and manual selection") {
			AssetPublisherPortlet.enableDynamicAndManualSelection();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	@description = "This is a test for LPS-154530. The page designer can add negative values on spacing from style books."
	@priority = 4
	test AddNegativeValueOnSpacing {
		task ("Given a page designer has a content page with selected custom style books") {
			task ("Add a style book") {
				StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = ${siteURLKey});

				StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
			}

			task ("Add negative value on Spacing") {
				StyleBooks.selectForm(formName = "Spacing");

				StyleBooks.expandSection(sectionName = "Spacing");

				StyleBooks.configureUnit(
					fieldLabel = "Spacer 1",
					unit = "PX");

				Type(
					ariaLabel = "Spacer 1",
					locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
					value1 = "-32");

				StyleBooks.clickManagementBar();

				StyleBooks.waitForAutoSave();

				StyleBooks.clickPublish();
			}

			task ("Add a Button fragment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Content Page Name",
					siteName = ${randomSiteName});

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Button");
			}

			task ("Apply the new style book to content page") {
				PageEditor.gotoTab(tabName = "Page Design Options");

				StyleBooks.selectStyleBookViaPageDesignOptions(styleBookName = "Test Style Book Name");
			}
		}

		task ("When the page designer selects a negative value on spacing") {
			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(marginTop = 1);
		}

		task ("Then the page designer can see negative style on button fragment at edit mode") {
			AssertCssValue(
				index = 1,
				key_fragmentName = "Button",
				locator1 = "Fragment#FRAGMENT_LABEL",
				locator2 = "margin-top",
				value1 = "-32px");
		}

		task ("When the page designer accesses published content page at view mode") {
			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Then the page designer can see negative style on button fragment at view mode") {
			AssertCssValue(
				fragmentName = "layout-content",
				index = 1,
				locator1 = "PageEditor#COMMON_STYLES_CLASS",
				locator2 = "margin-top",
				value1 = "-32px");
		}
	}

	@description = "This is a test for LPS-153383. The page creator cannot resize editor sidebar to an invalid size."
	@priority = 4
	test CannotResizeLeftSidebarPanelBeyoundLimitation {
		task ("Given a page creator accesses to the page editor") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("When the page creator accesses to the left sidebar panel") {
			AssertVisible(
				key_sidebarButton = "Fragments and Widgets",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
		}

		task ("Then the page creator cannot resize the left sidebar panel more than 500px or less than 280px") {
			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "220,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "500px");

			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "100,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "500px");

			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "-220,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "280px");

			DragAndDrop.dragAndDrop(
				locator1 = "PageEditor#SIDEBAR_RESIZER",
				value1 = "-100,0");

			AssertCssValue(
				locator1 = "Sidebar#PANEL_OPEN",
				locator2 = "width",
				value1 = "280px");
		}
	}

	@description = "This is a test for LPS-125985. The Page Creater can configure configuration template of widget in page editor."
	@priority = 5
	test ConfigureConfigurationTemplateOfAssetPublisherInPageEditor {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("Add an Asset Publisher widget to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("View the web content shown in Asset Publisher") {
			AssertVisible(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			AssertTextEquals(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Web Content Content");
		}

		task ("View the rating star not shown in Asset Publisher") {
			AssertElementNotPresent(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertElementNotPresent(locator1 = "Ratings#AVERAGE_STAR");
		}

		task ("Enable the Ratings in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Ratings");

			IFrame.closeFrame();
		}

		task ("View the rating star shown in Asset Publisher") {
			AssertVisible(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertVisible(locator1 = "Ratings#AVERAGE_STAR");
		}

		task ("Save the current configuration as template") {
			AssetPublisherPortlet.saveConfigurationTemplatePG(configurationName = "Asset Publisher Configuration Template");

			IFrame.closeFrame();
		}

		task ("Remove the Asset Publisher") {
			PageEditor.removeFragment(fragmentName = "Asset Publisher");
		}

		task ("Add an Asset Publisher widget to page") {
			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("View the web content shown in Asset Publisher") {
			AssertVisible(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			AssertTextEquals(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
				value1 = "Web Content Content");
		}

		task ("View the rating star not shown in Asset Publisher") {
			AssertElementNotPresent(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertElementNotPresent(locator1 = "Ratings#AVERAGE_STAR");
		}

		task ("Apply the new configure template") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.restoreConfigurationTemplatePG(configurationName = "Asset Publisher Configuration Template");

			IFrame.closeFrame();
		}

		task ("View the rating star shown in Asset Publisher") {
			AssertVisible(locator1 = "Ratings#YOUR_RATING_STAR");

			AssertVisible(locator1 = "Ratings#AVERAGE_STAR");
		}
	}

	@description = "This is a test for LPS-106813. Can set permissions for widgets in content page."
	@priority = 5
	test ConfigurePermissionsOfAssetPublisher {
		property portal.acceptance = "true";

		task ("Add an Asset Publisher widget to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Configure permissions of Asset Publisher") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			AssertVisible(
				key_menuItem = "Permissions",
				locator1 = "MenuItem#ANY_MENU_ITEM");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked.assertCheckedNotVisible(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Uncheck.uncheckNotVisible(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			IFrame.closeFrame();
		}

		task ("Publish the content page") {
			PageEditor.publish();
		}

		task ("Assert the ellipsis button of Asset Publisher is unavailable in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			AssertElementNotPresent(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
		}
	}

	@description = "This is a test for LPS-158746. Could add and remove fragment to Favorites session on content page in card view."
	@priority = 3
	test CouldAddAndRemoveFragmentInCardView {
		task ("Given go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("When switch to card view") {
			Click(
				key_switchTo = "card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		task ("Then assert could add and remove fragment to Favorites session") {
			MouseOver(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			MouseOver(
				ariaLabel = "Mark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertTextEquals(
				locator1 = "Tooltip#GENERIC_TOOLTIP",
				value1 = "Mark Button as Favorite");

			Click.clickNoMouseOver(
				ariaLabel = "Mark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			AssertElementPresent(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			AssertElementPresent(
				index = 1,
				key_panel = "Favorites",
				locator1 = "Panel#PANEL_BY_INDEX");

			MouseOver(
				ariaLabel = "Unmark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertTextEquals(
				locator1 = "Tooltip#GENERIC_TOOLTIP",
				value1 = "Unmark Button as Favorite");

			Click.clickNoMouseOver(
				ariaLabel = "Unmark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");

			AssertElementNotPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");

			AssertElementPresent(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM");
		}
	}

	@description = "This is a test for LPS-158746. Could add and remove fragment to Favorites session and widget to Highlighted session on content page."
	@priority = 5
	test CouldAddAndRemoveFragmentToFavoritesSessionAndWidgetToHighlightedSessionOnReleaseBundle {
		task ("When go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("Then could add and remove fragment to Favorites session and widget to Highlighted session") {
			task ("Go to add and remove favorite fragment") {
				MouseOver(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				MouseOver(
					ariaLabel = "Mark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertTextEquals(
					locator1 = "Tooltip#GENERIC_TOOLTIP",
					value1 = "Mark Button as Favorite");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					index = 1,
					key_panel = "Favorites",
					locator1 = "Panel#PANEL_BY_INDEX");

				MouseOver(
					ariaLabel = "Unmark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertTextEquals(
					locator1 = "Tooltip#GENERIC_TOOLTIP",
					value1 = "Unmark Button as Favorite");

				Click.clickNoMouseOver(
					ariaLabel = "Unmark Button as Favorite",
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementNotPresent(
					key_collectionName = "Favorites",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Basic Components",
					key_fragmentName = "Button",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}

			task ("Go to add and remove favorite widget") {
				Navigator.gotoNavTab(navTab = "Widgets");

				PageEditor.expandWidgetCategory(categoryName = "Collaboration");

				MouseOver(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Mark Calendar as Favorite",
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementPresent(
					key_collectionName = "Highlighted",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				Click.clickNoMouseOver(
					ariaLabel = "Unmark Calendar as Favorite",
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

				AssertElementNotPresent(
					key_collectionName = "Highlighted",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

				AssertElementPresent(
					key_collectionName = "Collaboration",
					key_fragmentName = "Calendar",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
			}
		}
	}

	@description = "This is a test for LPS-78726 and LPS-168168. Discarding a draft will revert a content page back to its most recent published version."
	@priority = 5
	test DiscardContentPageDraft {
		property portal.acceptance = "true";

		task ("Given a page designer has a draft content page without any content") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});
		}

		task ("When the page designer accesses to the page editor") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Content Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Then the page designer see the Discard Draft button is disabled but the Publish button is enabled") {
			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("When the page designer accesses to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			WaitForPageLoad();
		}

		task ("Then the page designer cannot see the Discard Draft action on dropdown menu of page item") {
			PagesAdmin.openPageEllipsisMenu(pageName = "Test Content Page Name");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}

		task ("When the page designer makes some changes in page editor") {
			MenuItem.click(menuItem = "Edit");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Then the page designer could discard draft in page editor") {
			PageEditor.discardDraft();

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Content Page Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Heading");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("When the page designer makes some changes in page editor") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Then the page designer could discard draft in the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.discardDraft(pageName = "Test Content Page Name");

			PagesAdmin.viewPageStatus(
				index = 1,
				pageName = "Test Content Page Name",
				status = "Draft");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Content Page Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Heading");

			AssertVisible(
				key_text = "Publish",
				locator1 = "Button#ANY_ENABLED");

			AssertVisible(
				key_text = "Discard Draft",
				locator1 = "Button#ANY_DISABLED");

			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			WaitForPageLoad();

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Content Page Name");

			MenuItem.viewNotPresent(menuItem = "Discard Draft");
		}
	}

	@description = "This is a test for LPS-134844 and LPS-106776. Fragments can be hidden and shown. Could add widget to react page editor."
	@priority = 5
	@uitest
	test FragmentsCanBeHiddenAndShown {
		property portal.acceptance = "true";

		task ("Add a widgets to the page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Blogs");
		}

		task ("Add fragments to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Blogs");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML",
				targetFragmentName = "Heading");
		}

		task ("Hide Blogs from topper options") {
			PageEditor.hideFragmentViaHeader(fragmentName = "Blogs");
		}

		task ("Hide Button fragment from fragment options") {
			PageEditor.hideFragmentViaPageStyles(fragmentName = "Button");
		}

		task ("Hide Heading fragment from the sidebar fragment tree") {
			PageEditor.hideFragmentViaPageStructure(fragmentName = "Heading");
		}

		task ("Open the Preview modal") {
			PageEditor.previewInANewTab();
		}

		task ("Assert only html fragment is shown") {
			AssertTextNotPresent(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No entries were found.");

			AssertNotVisible(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			AssertNotVisible(
				fragmentName = "button",
				id = "link",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			ContentPages.viewFragmentText(
				fragmentName = "html",
				id = "element-html",
				text = "HTML Example A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}

		task ("Publish and enter view mode") {
			Close.closeWindow();

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert only html fragment is shown") {
			AssertTextNotPresent(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No entries were found.");

			AssertNotVisible(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			AssertNotVisible(
				fragmentName = "button",
				id = "link",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			ContentPages.viewFragmentText(
				fragmentName = "html",
				id = "element-html",
				text = "HTML Example A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}

		task ("Edit the page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Unhide Blogs from the sidebar fragment tree") {
			PageEditor.unhideFragmentViaPageStructure(fragmentName = "Blogs");
		}

		task ("Unhide Heading from fragment options") {
			PageEditor.unhideFragmentViaPageStyles(fragmentName = "Heading");
		}

		task ("Unhide Button from sidebar fragment tree") {
			PageEditor.unhideFragmentViaPageStructure(fragmentName = "Button");
		}

		task ("Publish and enter view mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert the four fragments are shown") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No entries were found.");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			ContentPages.viewFragmentText(
				fragmentName = "html",
				id = "element-html",
				text = "HTML Example A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");
		}
	}

	@description = "This is a test for LPS-134844. Groups of fragments can be hidden and shown and Fragments added to a fragment with nested hidden fragment should be shown."
	@priority = 4
	@uitest
	test GroupsOfFragmentsCanBeHiddenAndShown {
		task ("Add a Container and 4 elements inside") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.addElementToContainer(
				navTab = "Widgets",
				portletName = "Blogs");

			for (var fragmentName : list "HTML,Button,Heading") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = ${fragmentName},
					height = "Tall",
					navTab = "Fragments",
					ratio = "11 / 10",
					targetElementName = "Blogs");
			}
		}

		task ("Hide Blogs and HTML") {
			for (var elementName : list "Blogs,HTML") {
				PageEditor.hideFragmentViaPageStructure(fragmentName = ${elementName});
			}
		}

		task ("View Blogs widget and HTML fragment are not shown") {
			for (var elementName : list "Blogs,HTML") {
				PageEditor.viewFragmentNotVisible(fragmentName = ${elementName});
			}
		}

		task ("View Button and Heading are shown") {
			for (var fragmentName : list "Button,Heading") {
				PageEditor.viewFragment(fragmentName = ${fragmentName});
			}
		}

		task ("Hide the container") {
			PageEditor.hideFragmentViaPageStructure(fragmentName = "Container");
		}

		task ("View elements are not shown") {
			AssertVisible(locator1 = "PageEditor#NO_FRAGMENTS_MESSAGE");
		}

		task ("Unhide the Container and HTML ") {
			for (var fragmentName : list "Container,HTML") {
				PageEditor.unhideFragmentViaPageStructure(fragmentName = ${fragmentName});
			}
		}

		task ("Hide the Button and Heading fragment") {
			for (var fragmentName : list "Button,Heading") {
				PageEditor.hideFragmentViaPageStructure(fragmentName = ${fragmentName});
			}
		}

		task ("View Blogs, Button and Heading are not shown") {
			for (var elementName : list "Blogs,Button,Heading") {
				PageEditor.viewFragmentNotVisible(fragmentName = ${elementName});
			}
		}

		task ("View HTML fragment is shown") {
			PageEditor.viewFragment(fragmentName = "HTML");
		}

		task ("Hide the container") {
			PageEditor.hideFragmentViaPageStructure(fragmentName = "Container");
		}

		task ("View elements are not shown") {
			AssertVisible(locator1 = "PageEditor#NO_FRAGMENTS_MESSAGE");
		}

		task ("Unhide the container") {
			PageEditor.unhideFragmentViaPageStructure(fragmentName = "Container");
		}

		task ("Assert only HTML fragments is shown") {
			for (var elementName : list "Blogs,Button,Heading") {
				PageEditor.viewFragmentNotVisible(fragmentName = ${elementName});
			}

			PageEditor.viewFragmentEditableText(
				editableText = "HTML Example A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.",
				fragmentName = "HTML",
				id = "element-html");
		}

		task ("Add fragment and check it's shown") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				dropTarget = "Up",
				fragmentName = "Paragraph",
				navTab = "Fragments",
				targetElementName = "HTML");

			PageEditor.viewFragmentEditableText(
				editableText = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.",
				fragmentName = "Paragraph",
				id = "element-text");
		}
	}

	@description = "This is a use case for LPS-106776. Reorganize fragments in page editor."
	@priority = 5
	@uitest
	test ReorganizeFragmentsInPageEditor {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.publish();
		}

		task ("Navigate to the content page in Edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("View Heading frgament is on top of Button fragment") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = 1);

			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = 2);
		}

		task ("Move the fragment") {
			PageEditor.clickConfigurableField(fragmentName = "Button");

			PageEditor.gotoTab(tabName = "Browser");

			DragAndDrop.javaScriptDragAndDropToUp(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				key_dragFragmentName = "Button",
				locator1 = "Fragment#FRAGMENT_HEADER_DRAG_HANDLER",
				locator2 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the Button fragment is on top of Heading frgament") {
			PageEditor.viewFragmentOrder(
				fragmentName = "Button",
				position = 1);

			PageEditor.viewFragmentOrder(
				fragmentName = "Heading",
				position = 2);
		}
	}

	@description = "This is a test for LPS-133933. The user can resize the displayed image via image editor on Page Content panel."
	@priority = 5
	test ResizeDisplayedImageViaImageEditor {
		property portal.acceptance = "true";

		task ("Add an Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Directly select an image in editable field") {
			PageEditor.editFragmentImage(
				fileName = "analytics-cloud-hero-image.png",
				fragmentName = "Image",
				id = "image-square");
		}

		task ("View the selected image is shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "analytics-cloud-hero-image");
		}

		task ("Take down the naturalWidth and naturalHeight of image") {
			var naturalWidth = selenium.getAttribute("//img[contains(@data-lfr-editable-id,'image-square') and contains(@src,'analytics-cloud-hero-image')]@naturalWidth");
			var naturalHeight = selenium.getAttribute("//img[contains(@data-lfr-editable-id,'image-square') and contains(@src,'analytics-cloud-hero-image')]@naturalHeight");
		}

		task ("Edit the image via the image editor on Page Content panel") {
			PageEditor.gotoEllipsisMenuItemInPageContentPanel(
				itemName = "analytics-cloud-hero-image.png",
				menuItem = "Edit Image");

			ImageEditor.resizeImage(dimension = "16:9");

			ImageEditor.saveChanges();
		}

		task ("Take down the new naturalWidth and naturalHeight of image") {
			PageEditor.gotoTab(tabName = "Browser");

			WaitForElementPresent(
				key_resolutionLabel = "Width",
				locator1 = "PageEditor#IMAGE_RESOLUTION_LABEL");

			var editedNaturalWidth = selenium.getAttribute("//img[contains(@data-lfr-editable-id,'image-square') and contains(@src,'analytics-cloud-hero-image')]@naturalWidth");
			var editedNaturalHeight = selenium.getAttribute("//img[contains(@data-lfr-editable-id,'image-square') and contains(@src,'analytics-cloud-hero-image')]@naturalHeight");
		}

		task ("View the naturalWidth doesn't change") {
			StringUtil.assertEquals(${naturalWidth}, ${editedNaturalWidth});
		}

		task ("View the naturalHeight becomes smaller") {
			TestUtils.isGreaterThan(
				actual = ${naturalHeight},
				expected = ${editedNaturalHeight});

			PageEditor.publish();
		}

		task ("Take down the new naturalWidth and naturalHeight of image at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "analytics-cloud-hero-image");

			var editedNaturalWidth = selenium.getAttribute("//img[contains(@data-lfr-editable-id,'image-square') and contains(@src,'analytics-cloud-hero-image')]@naturalWidth");
			var editedNaturalHeight = selenium.getAttribute("//img[contains(@data-lfr-editable-id,'image-square') and contains(@src,'analytics-cloud-hero-image')]@naturalHeight");
		}

		task ("View the naturalWidth doesn't change") {
			StringUtil.assertEquals(${naturalWidth}, ${editedNaturalWidth});
		}

		task ("View the naturalHeight becomes smaller") {
			TestUtils.isGreaterThan(
				actual = ${naturalHeight},
				expected = ${editedNaturalHeight});
		}
	}

	@description = "This is a test for LPS-133933. The user can rotate the displayed image via image editor on Page Content panel."
	@priority = 5
	test RotateDisplayedImageViaImageEditor {
		property portal.acceptance = "true";

		task ("Add a Banner Center fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Map the Preview Image of an image to background image editable field") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				entryTitle = "analytics-cloud-hero-image.png",
				fieldName = "Preview Image",
				navItem = "Documents and Media",
				panel = "Styles",
				uploadFileName = "analytics-cloud-hero-image.png");
		}

		task ("View the mapped image is shown in Banner Center fragment") {
			PageEditor.viewContainerStyle(backgroundImage = "analytics-cloud-hero-image\.png");
		}

		task ("View the version of mapped image") {
			AssertVisible(
				backgroundImageStyle = "version\=1\.0",
				locator1 = "Fragment#BACKGROUND_IMAGE_STYLE",
				position = 1);
		}

		task ("Edit the image via the image editor on Page Content panel") {
			PageEditor.gotoEllipsisMenuItemInPageContentPanel(
				itemName = "analytics-cloud-hero-image.png",
				menuItem = "Edit Image");

			ImageEditor.rotateImage();

			ImageEditor.saveChanges();
		}

		task ("View the version of mapped image") {
			PageEditor.gotoTab(tabName = "Browser");

			WaitForElementPresent(
				key_resolutionLabel = "Width",
				locator1 = "PageEditor#IMAGE_RESOLUTION_LABEL");

			AssertVisible(
				backgroundImageStyle = "version\=2\.0",
				locator1 = "Fragment#BACKGROUND_IMAGE_STYLE",
				position = 1);

			PageEditor.publish();
		}

		task ("View the version of mapped image at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Banner Title Example");

			AssertVisible(
				backgroundImageStyle = "version=2.0",
				locator1 = "Fragment#BACKGROUND_IMAGE_STYLE",
				position = 1);
		}
	}

	@description = "This is a test for LPS-122396. The outline of editable field should be dashed when hover on mapped assets in Page Content panel."
	@priority = 5
	test ViewDashedOutlineOfMappedEditableFieldWhenHoverOnAssets {
		property portal.acceptance = "true";

		task ("Add a web content, a blogs entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = ${randomSiteName},
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Banner Center to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Map the Title of web content to title editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Map the Title of blogs entry to link editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Button",
				id = "link");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Blogs Entry Title",
				navItem = "Blogs");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Map the Preview Image of document to background image editable field") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				entryTitle = "Document Title",
				fieldName = "Preview Image",
				navItem = "Documents and Media",
				panel = "Styles");

			PageEditor.clickManagementBar();
		}

		task ("View the dashed outline of mapped editable field when hover on assets") {
			PageEditor.gotoTab(tabName = "Page Content");

			MouseOver(
				key_itemName = "Web Content Title",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertCssValue(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "outline-style",
				value1 = "dashed");

			MouseOver(
				key_sidebarButton = "Page Content",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			MouseOver(
				key_itemName = "Blogs Entry Title",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertCssValue(
				fragmentName = "button",
				id = "link",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "outline-style",
				value1 = "dashed");

			MouseOver(
				key_sidebarButton = "Page Content",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			MouseOver(
				key_itemName = "Document Title",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			var backgroundImageOutlineStyle = Css.getPseudoElementCssValue(
				attribute = "outline-style",
				element = "//div[contains(@class,'page-editor__topper')][@draggable][.//div[contains(@style,'Document_1\\.jpg')]]",
				pseudo = ":after");

			StringUtil.assertEquals("dashed", ${backgroundImageOutlineStyle});
		}
	}

	@description = "This is a test for LPS-175136. View no alert for draft when design changes on content page being published in page editor."
	@priority = 3
	test ViewDesignChangesSavedInDraftViaPageDesignOptions {
		task ("Given a page creator accesses to the configuration page of a content page via Page Design Options") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();
		}

		task ("When the page creator changes the current theme") {
			Theme.configureLookAndFeelSpecificLook();

			Theme.changeCurrentTheme(themeName = "Speedwell");

			PortletEntry.save();
		}

		task ("Then the page creator sees the design changes saved in draft message") {
			PagesAdmin.viewCurrentTheme(themeName = "Speedwell");

			Alert.viewInfoMessageSpecific(infoMessage = "These design configurations are now saved in a draft. To fully apply them, the page needs to be published.");

			Alert.viewInfoMessageSpecific(infoMessage = "See current published configuration here.");

			Navigator.viewNavTab(navTab = "Design Draft");
		}

		task ("When the page creator clicks the link of See current published configuration here") {
			Click(
				key_text = "See current published configuration here.",
				locator1 = "Link#ANY");
		}

		task ("Then the page creator sees the published configuration") {
			PagesAdmin.viewCurrentTheme(themeName = "Classic");

			AssertNotEditable(
				key_text = "Change Current Theme",
				locator1 = "Button#ANY");

			Navigator.viewNoNavTab(navTab = "Design");

			Button.viewNotPresent(button = "Save");

			Button.viewNotPresent(button = "Cancel");
		}

		task ("When the page creator publishes the content page") {
			Navigator.gotoBack();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Then the page creator cannot see the design changes saved in draft message") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			PagesAdmin.viewCurrentTheme(themeName = "Speedwell");

			AssertElementNotPresent(
				key_infoMessage = "These design configurations are now saved in a draft. To fully apply them, the page needs to be published.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertElementNotPresent(
				key_infoMessage = "See current published configuration here.",
				locator1 = "Message#INFO_SPECIFIC");

			Navigator.viewNoNavTab(navTab = "Design Draft");
		}
	}

	@description = "This is a test for LPS-175136. View no alert for draft when design changes on content page being published in page admin."
	@priority = 3
	test ViewDesignChangesSavedInDraftViaPagesAdmin {
		task ("Given a page creator accesses to the configuration page of a content page via Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Content Page Name");

			Navigator.gotoNavTab(navTab = "Design");
		}

		task ("When the page creator changes the current theme") {
			Theme.configureLookAndFeelSpecificLook();

			Theme.changeCurrentTheme(themeName = "Speedwell");

			PortletEntry.save();
		}

		task ("Then the page creator sees the design changes saved in draft message") {
			PagesAdmin.viewCurrentTheme(themeName = "Speedwell");

			Alert.viewInfoMessageSpecific(infoMessage = "These design configurations are now saved in a draft. To fully apply them, the page needs to be published.");

			Alert.viewInfoMessageSpecific(infoMessage = "See current published configuration here.");

			Navigator.viewNavTab(navTab = "Design Draft");
		}

		task ("When the page creator clicks the link of See current published configuration here") {
			Click(
				key_text = "See current published configuration here.",
				locator1 = "Link#ANY");
		}

		task ("Then the page creator sees the published configuration") {
			PagesAdmin.viewCurrentTheme(themeName = "Classic");

			AssertNotEditable(
				key_text = "Change Current Theme",
				locator1 = "Button#ANY");

			Navigator.viewNoNavTab(navTab = "Design");

			Button.viewNotPresent(button = "Save");

			Button.viewNotPresent(button = "Cancel");
		}

		task ("When the page creator publishes the content page") {
			Navigator.gotoBack();

			Navigator.gotoBack();

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Content Page Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Then the page creator cannot see the design changes saved in draft message") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Content Page Name");

			Navigator.gotoNavTab(navTab = "Design");

			PagesAdmin.viewCurrentTheme(themeName = "Speedwell");

			AssertElementNotPresent(
				key_infoMessage = "These design configurations are now saved in a draft. To fully apply them, the page needs to be published.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertElementNotPresent(
				key_infoMessage = "See current published configuration here.",
				locator1 = "Message#INFO_SPECIFIC");

			Navigator.viewNoNavTab(navTab = "Design Draft");
		}
	}

	@description = "This is a test for LPS-81870. In edit mode the page should still show the elements of the page that are not from the page itself, like the header, footer, or elements defined by the theme."
	@priority = 5
	@uitest
	test ViewEditModeHeaderFooterTheme {
		property portal.acceptance = "true";

		task ("Add a widget page to the site") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Widget Page Name");
		}

		task ("Assert the header and footer are disabled") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");
		}

		task ("Assert the header and footer contain the elements that are part of the header and footer") {
			AssertVisible(locator1 = "Home#DEFAULT_LOGO");

			AssertTextEquals(
				locator1 = "Home#SITE_NAME",
				value1 = ${randomSiteName});

			AssertVisible(
				key_infoMessage = "This search bar is not visible to users yet.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertVisible(locator1 = "UserBar#USER_AVATAR_IMAGE");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER",
				value1 = "Powered By Liferay");
		}

		task ("Assert the navigation menu widget with the previously created widget page also displays in the disabled part of the header") {
			AssertVisible(
				key_pageName = "Test Widget Page Name",
				locator1 = "Home#PAGE");
		}

		task ("Assert clicking on the disabled header will cause a popover message explaining that the header is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the header") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}

		task ("Assert clicking on the disabled footer will cause a popover message explaining that the footer is disabled") {
			Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_FOOTER");

			AssertVisible(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");

			AssertTextEquals(
				locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER",
				value1 = "This area is defined by the theme. You can change the theme settings by clicking More in the Page Design Options panel on the sidebar.");
		}

		task ("Assert the popover goes away after clicking away from the footer") {
			Click(locator1 = "PageEditor#FRAGMENT_DROP_TARGET");

			AssertElementNotPresent(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_POPOVER");
		}
	}

	@description = "This is a test for LPS-130083 and LPS-106776. View the ellipsis button on the topper of fragment when the fragment is inside a nested Grid."
	@priority = 4
	@uitest
	test ViewEllipsisButtonOnTheTopperOfFragmentInsideNestedGrid {
		task ("Add a Grid element to the content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a second Grid to the second module of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = 2,
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Add a Heading fragment to the first module of inner Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = 1,
				fragmentName = "Heading",
				navTab = "Fragments",
				position = 2);
		}

		task ("Add a Button fragment to the second module of inner Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = 2,
				fragmentName = "Button",
				navTab = "Fragments",
				position = 2);
		}

		task ("Add a Paragraph fragment to the third module of inner Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = 3,
				fragmentName = "Paragraph",
				navTab = "Fragments",
				position = 2);
		}

		task ("View the ellipsis button is visible on topper of fragments inside inner Grid") {
			for (var fragmentName : list "Heading,Button,Paragraph") {
				PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

				PageEditor.gotoTab(tabName = "Browser");

				AssertVisible(
					key_fragmentName = ${fragmentName},
					locator1 = "Fragment#FRAGMENT_HEADER_ELLIPSIS");
			}
		}
	}

	@description = "This is a test for LPS-167430. Fragment Menu difficult to Display"
	@priority = 3
	test ViewEllipsisIconWhenHoverOnBodyOfWidget {
		task ("Given a content page with a Search Results widget") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Search Results");
		}

		task ("When the mouse passes over the fragment") {
			MouseOver(
				fragmentName = "Search",
				index = 1,
				locator1 = "Fragment#FRAGMENT_BODY");
		}

		task ("Then you should easily see the ellipsis icon") {
			AssertVisible(locator1 = "Portlet#OPTIONS_ICON");
		}
	}

	@description = "This is a test for LPS-158746. The favorite fragment is hidden if it is not allowed on master page."
	@priority = 3
	test ViewFavoriteFragmentIsHiddenWhenItIsNotAllowedOnMasterPage {
		task ("Given go to edit content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("And choose Button and Card fragment as Favorites") {
			MouseOver(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			Click.clickNoMouseOver(
				ariaLabel = "Mark Button as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			MouseOver(
				key_collectionName = "Basic Components",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			Click.clickNoMouseOver(
				ariaLabel = "Mark Card as Favorite",
				key_collectionName = "Basic Components",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
		}

		task ("When not allow Button fragment on master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = ${randomSiteName},
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = ${siteURLKey});

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			AssertClick(
				locator1 = "Button#CONFIGURE_ALLOWED_FRAGMENTS",
				value1 = "Configure Allowed Fragments");

			SelectFrame(value1 = "relative=top");

			Uncheck.uncheckToggleSwitch(
				key_fragmentName = "Button",
				locator1 = "Checkbox#ALLOWED_FRAGMENT");

			Button.clickSave();

			Button.clickNoError(button = "Publish Master");

			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Page Name 2");

			PageEditor.publish();
		}

		task ("Then Button fragment is hidden on conetent page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 2",
				siteName = ${randomSiteName});

			AssertElementNotPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Button",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");

			AssertElementPresent(
				key_collectionName = "Favorites",
				key_fragmentName = "Card",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT");
		}
	}

	@description = "This is a test for LPS-104629. The header of fragment selected can reach the border of the management toolbar."
	@priority = 5
	@uitest
	test ViewHeaderOfFragmentMoveInsideBodyWhenReachTheManagementToolbar {
		property portal.acceptance = "true";

		task ("Add Image, Slider, Card and HTML fragments to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "HTML");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Slider",
				targetFragmentName = "Card");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image",
				targetFragmentName = "Slider");
		}

		task ("Assert Header of Card is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				index = 1,
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_LABEL");

			PageEditor.clickConfigurableField(fragmentName = "Card");

			PageEditor.gotoTab(tabName = "Browser");

			AssertElementNotPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Card moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				index = 1,
				key_fragmentName = "Image",
				locator1 = "Fragment#FRAGMENT_LABEL");

			AssertElementPresent(
				key_fragmentName = "Card",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

	@description = "This is a test for LPS-104629. The header of widget selected can reach the border of the management toolbar."
	@priority = 4
	@uitest
	test ViewHeaderOfWidgetMoveInsideBodyWhenReachTheManagementToolbar {
		task ("Add My Sites, Documents and Media, Blogs and Asset Publisher widgets to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Asset Publisher");

			PageEditor.addWidget(
				portletName = "Blogs",
				targetFragmentName = "Asset Publisher");

			PageEditor.addWidget(
				portletName = "Documents and Media",
				targetFragmentName = "Blogs");

			PageEditor.addWidget(
				portletName = "My Sites",
				targetFragmentName = "Documents and Media");
		}

		task ("Assert Header of Blogs is shown over body when doesn't reach the management toolbar") {
			ScrollWebElementIntoView(
				index = 1,
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_LABEL");

			PageEditor.clickConfigurableField(fragmentName = "Blogs");

			PageEditor.gotoTab(tabName = "Browser");

			AssertElementNotPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}

		task ("Assert Header of Blogs moves inside body when reach the management toolbar") {
			ScrollWebElementIntoView(
				index = 1,
				key_fragmentName = "My Sites",
				locator1 = "Fragment#FRAGMENT_LABEL");

			AssertElementPresent(
				key_fragmentName = "Blogs",
				locator1 = "Fragment#FRAGMENT_HEADER_INSET_STYLE");
		}
	}

	@description = "This is for LPS-106813. Widgets inherited from custom master will inherit permissions set in custom master."
	@priority = 4
	test ViewPermissionsOfAssetPublisherInheritedFromMasterPageTemplate {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = ${randomSiteName},
				title = "WC WebContent Title");
		}

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = ${randomSiteName},
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = ${siteURLKey});
		}

		task ("Add an Asset Publisher widget to the master page template") {
			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addWidget(
				dropTarget = "Header",
				portletName = "Asset Publisher",
				scope = "Master");
		}

		task ("Configure the permissions of Asset Publisher") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			AssertVisible(
				key_menuItem = "Permissions",
				locator1 = "MenuItem#ANY_MENU_ITEM");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked.assertCheckedNotVisible(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Uncheck.uncheckNotVisible(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			MastersPageTemplates.publishMaster();
		}

		task ("Apply the master page template to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.gotoTab(tabName = "Page Design Options");

			MastersPageTemplates.selectMasterViaPageDesignOptions(masterLayoutName = "Custom Masters Page Template");

			AssertVisible(
				key_assetTitle = "WC WebContent Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			PageEditor.publish();
		}

		task ("Assert the Asset Publisher is invisible to Guest") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			User.logoutPG();

			Navigator.openSiteURL(siteName = ${randomSiteName});

			AssertElementNotPresent(
				key_assetTitle = "WC WebContent Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE");

			Alert.viewErrorMessage(errorMessage = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "This is a test for LPS-154530. View custom values matches in spacing on page editor."
	@priority = 4
	test ViewValuesMatchesInSpacingOnPageEditor {
		task ("Given a page designer has a content page with default and custom style books") {
			task ("Add a style book") {
				StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = ${siteURLKey});

				StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
			}

			task ("Add unit values on Spacing") {
				StyleBooks.selectForm(formName = "Spacing");

				StyleBooks.expandSection(sectionName = "Spacing");

				StyleBooks.configureUnit(
					fieldLabel = "Spacer 1",
					unit = "EM");

				var i = 0;

				for (var tokenValue : list "1,2,3") {
					StyleBooks.configureUnit(
						fieldLabel = "Spacer ${i}",
						unit = "EM");

					Type(
						ariaLabel = "Spacer ${i}",
						locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
						value1 = ${tokenValue});

					StyleBooks.clickManagementBar();

					StyleBooks.waitForAutoSave();

					var i = ${i} + 1;
				}

				StyleBooks.configureUnit(
					fieldLabel = "Spacer 3",
					unit = "CUSTOM");

				Type(
					ariaLabel = "Spacer 3",
					locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
					value1 = "Auto");

				StyleBooks.clickManagementBar();

				StyleBooks.waitForAutoSave();

				StyleBooks.clickPublish();
			}

			task ("Add a Heading fragment to content page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Content Page Name",
					siteName = ${randomSiteName});

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Heading");
			}
		}

		task ("When the page designer selects dropdown menu of spacing on styles") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			Click(
				ariaLabel = "Margin Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		task ("Then the page designer can see default values on dropdown menu") {
			var i = 0;

			for (var tokenValue : list "0,0.25rem,0.5rem,1rem") {
				AssertTextEquals(
					key_tokenName = "Spacer ${i}",
					locator1 = "MenuItem#SPACING_VALUE",
					value1 = ${tokenValue});

				var i = ${i} + 1;
			}
		}

		task ("When the page designer applies the new style book to content page") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			StyleBooks.selectStyleBookViaPageDesignOptions(styleBookName = "Test Style Book Name");
		}

		task ("Then the page designer can see custom values on dropdown menu of spacing") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			Click(
				ariaLabel = "Margin Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			var i = 0;

			for (var tokenValue : list "1em,2em,3em,Auto") {
				AssertTextEquals(
					key_tokenName = "Spacer ${i}",
					locator1 = "MenuItem#SPACING_VALUE",
					value1 = ${tokenValue});

				var i = ${i} + 1;
			}
		}

		task ("When the page designer selects Auto in spacing") {
			DropdownMenuItem.click(menuItem = "Spacer 3");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page designer can see auto style on heading fragment at edit mode") {
			AssertCssValue(
				index = 1,
				key_fragmentName = "Heading",
				locator1 = "Fragment#FRAGMENT_LABEL",
				locator2 = "margin-top",
				value1 = "0px");
		}

		task ("When the page designer opens the dropdown menu of marging top on spacing") {
			Click(
				ariaLabel = "Margin Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		task ("Then te page designer can see Spacer 3 is shown as selected") {
			AssertCssValue(
				ariaLabel = "Set Margin Top to 3",
				locator1 = "Button#ANY_WITH_ARIA_LABEL",
				locator2 = "background-color",
				value1 = "rgba(240, 245, 255, 1)");
		}

		task ("When the page designer accesses published content page at view mode") {
			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Then the page designer can see auto style on heading fragment at view mode") {
			AssertCssValue(
				fragmentName = "layout-content",
				index = 1,
				locator1 = "PageEditor#COMMON_STYLES_CLASS",
				locator2 = "margin-top",
				value1 = "0px");
		}
	}

	@description = "LPS-147400. Collection Display and Collection Filter have width and display configuration."
	@priority = 3
	test ViewWidthAndHideOfCollectionFilterAndCollectionDisplayAndCollectionFilterCanBeHidden {
		task ("Go to edit page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Add Collection Display and Collection Filter frgaments to page") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Filter",
				targetFragmentName = "Collection Display");
		}

		task ("View Collection Filter frgaments width and height options") {
			PageEditor.gotoConfiguration(fragmentName = "Collection Filter");

			AssertVisible(
				key_text = "Height",
				locator1 = "TextInput#ANY_SPECIFIC");

			AssertVisible(
				key_text = "Width",
				locator1 = "TextInput#ANY_SPECIFIC");
		}

		task ("Hide Collection Display and Collection Filter frgaments from fragment options") {
			PageEditor.hideFragmentViaPageStyles(fragmentName = "Collection Display");

			PageEditor.hideFragmentViaPageStyles(fragmentName = "Collection Filter");
		}
	}

}