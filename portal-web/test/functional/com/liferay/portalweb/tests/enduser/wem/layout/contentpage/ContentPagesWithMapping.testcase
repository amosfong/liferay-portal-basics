@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Enable dynamic and manual selection") {
			AssetPublisherPortlet.enableDynamicAndManualSelection();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Content Page Name",
				type = "content");
		}
	}

	@description = "This is a test for LPS-195827. Validation error on object action does not redirect to the Display Page Template."
	@priority = 4
	test CannotGoToEntryDisplayPageWhenStandaloneActionValidationFailure {
		task ("Given a page creator has a content page with a Button fragment mapped to a standalone action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Student",
				objectName = "Student",
				pluralLabelName = "Students");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "Student");

			ObjectAdmin.publishObjectViaAPI(objectName = "Student");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Teacher",
				objectName = "Teacher",
				pluralLabelName = "Teachers");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Age",
				fieldName = "age",
				fieldType = "Integer",
				isRequired = "false",
				objectName = "Teacher");

			ObjectAdmin.publishObjectViaAPI(objectName = "Teacher");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Student");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "The Age should be an integer.",
				fieldName = "Age",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "Teacher",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "Student",
				value = "Jack");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Student",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Student (Default)");

			PageEditor.publish();
		}

		task ("When the page creator selects the Go to Entry Display Page as success interaction") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${objectEntryId},
				navItem = "Students",
				rowItem = "//*[@data-qa-id='row'][contains(.,'${objectEntryId}')]");

			PageEditor.configureFragment(
				action = "Vote",
				displayPage = "Display Page Name",
				successInteraction = "Go to Entry Display Page");
		}

		task ("Then the page creator could select the Show Notification as error interaction") {
			PageEditor.configureFragment(errorInteraction = "Show Notification");

			PageEditor.publish();
		}

		task ("When the page creator triggers the standalone action") {
			Button.click(button = "Go Somewhere");
		}

		task ("Then the page creator should not be redirected but see a validation error message") {
			Alert.viewErrorMessage(errorMessage = "The Age should be an integer.");

			Page.viewCurrentPage(pageName = "Content Page Name");
		}
	}

	@description = "This is a test for LPS-195827. Success object action redirects to the Display Page Template."
	@priority = 4
	test GoToEntryDisplayPageViaStandaloneAction {
		task ("Given a page creator has a standalone action") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Student",
				objectName = "Student",
				pluralLabelName = "Students");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = "Student");

			ObjectAdmin.publishObjectViaAPI(objectName = "Student");

			ObjectAdmin.addObjectViaAPI(
				labelName = "Teacher",
				objectName = "Teacher",
				pluralLabelName = "Teachers");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Subject",
				fieldName = "subject",
				fieldType = "String",
				isRequired = "false",
				objectName = "Teacher");

			ObjectAdmin.publishObjectViaAPI(objectName = "Teacher");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Student");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Subject",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "Teacher",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "Student",
				value = "Jack");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "Student",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Student (Default)");

			PageEditor.publish();
		}

		task ("When the page creator maps the standalone action to Button fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");
		}

		task ("Then the page creator could select the Go to Entry Display Page as success interaction") {
			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${objectEntryId},
				navItem = "Students",
				rowItem = "//*[@data-qa-id='row'][contains(.,'${objectEntryId}')]");

			PageEditor.configureFragment(
				action = "Vote",
				displayPage = "Display Page Name",
				successInteraction = "Go to Entry Display Page");

			PageEditor.publish();
		}

		task ("When the page creator triggers the standalone action") {
			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();
		}

		task ("Then the page creator should be redirected to entry display page") {
			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			InputField.viewText(
				fieldLabel = "Name",
				text = "Jack");
		}
	}

	@description = "This is a use case for LPS-120198. Link public and private pages to fragments."
	@priority = 4
	test MapPageToImageFragment {
		task ("Enable private pages") {
			PagesAdmin.enablePrivatePages();
		}

		task ("Add a public widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Public Page Name");
		}

		task ("Add a private widget page") {
			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Private Page Name");
		}

		task ("Add an Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map the public widget page to editable field of Image") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Image",
				id = "image-square",
				navItem = "Public Pages",
				pageName = "Test Public Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Public Page Name");
		}

		task ("View selected page is linked to Button fragment") {
			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/web/${siteURLKey}/test-public-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Navigate to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert redirect to public widget page") {
			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/web/${siteURLKey}/test-public-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Public Page Name");

			AssertLocation.assertPartialLocation(value1 = "web/${siteURLKey}/test-public-page-name");
		}

		task ("Navigate to content page in edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Map the private widget page to editable field of Image") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Image",
				id = "image-square",
				navItem = "Private Pages",
				pageName = "Test Private Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Private Page Name");
		}

		task ("View selected page is linked to Image fragment") {
			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/group/${siteURLKey}/test-private-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Navigate to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert redirect to private widget page") {
			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "/group/${siteURLKey}/test-private-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Private Page Name");

			AssertLocation.assertPartialLocation(value1 = "group/${siteURLKey}/test-private-page-name");
		}
	}

	@description = "This is a use case for LPS-182999. The page designer could see mapped image from attachment field on content page."
	@priority = 4
	test MapPreviewURLOfImageAttachmentToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page designer has an object entry with an image attachment") {
			ObjectAdmin.addObjectViaAPI(
				labelName = ${labelName},
				objectName = ${objectName},
				pluralLabelName = "${labelName}s");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Upload",
				fieldName = "upload",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = ${objectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${objectName});

			ObjectAdmin.goToCustomObject(objectName = ${objectName});

			ObjectAutoGenerated.addAttachment(fileName = "Document_1.jpg");

			ObjectAutoGenerated.viewFilePresentOnAttachment(fileOnAttachment = "Document_1.jpg");

			PortletEntry.save();

			Navigator.gotoBack();

			WaitForElementPresent(
				key_name = "Document_1.jpg",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			var objectEntryId = selenium.getText("ObjectPortlet#ENTRY_ID");
		}

		task ("When the page designer maps the Preview URL of image to the Image fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${objectEntryId},
				navItem = "${labelName}s",
				rowItem = "//*[@data-qa-id='row'][contains(.,'${objectEntryId}')]");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Preview URL");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page designer should see the mapped image shown on Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");
		}
	}

	@description = "This is a use case for LPS-182999. The page designer should see blank space when mapped attachment isn’t an image."
	@priority = 4
	test MapPreviewURLOfNonImageAttachmentToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page designer has an object entry with a pdf attachment") {
			ObjectAdmin.addObjectViaAPI(
				labelName = ${labelName},
				objectName = ${objectName},
				pluralLabelName = "${labelName}s");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Upload",
				fieldName = "upload",
				fieldType = "Long",
				fileSource = "userComputer",
				isRequired = "false",
				objectName = ${objectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${objectName});

			ObjectAdmin.goToCustomObject(objectName = ${objectName});

			ObjectAutoGenerated.addAttachment(fileName = "Document_1.pdf");

			ObjectAutoGenerated.viewFilePresentOnAttachment(fileOnAttachment = "Document_1.pdf");

			PortletEntry.save();

			Navigator.gotoBack();

			WaitForElementPresent(
				key_name = "Document_1.pdf",
				locator1 = "ObjectAdmin#TABLE_LIST_TITLE");

			var objectEntryId = selenium.getText("ObjectPortlet#ENTRY_ID");
		}

		task ("When the page designer maps the Preview URL of pdf to the Image fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");

			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${objectEntryId},
				navItem = "${labelName}s",
				rowItem = "//*[@data-qa-id='row'][contains(.,'${objectEntryId}')]");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Preview URL");

			PageEditor.waitForAutoSave();
		}

		task ("Then the page designer should see the blank space shown on Image fragment") {
			AssertCssValue(
				id = "image-square",
				key_image = "Document_1.pdf",
				key_imageDescription = "",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES",
				locator2 = "height",
				value1 = "16px");
		}
	}

	@description = "This is a test for LPS-184193 and LPS-191986. View rel added to mapped fragment."
	@priority = 4
	test MapSpecificDisplayPageTemplateToFragment {
		var portalURL = PropsUtil.get("portal.url");
		var assetTypeId = JSONClassname._getClassNameId(value = "com.liferay.journal.model.JournalArticle");

		task ("Given a user has a default display page template and a normal display page template") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name 1",
				groupName = ${randomSiteName},
				statusKey = "APPROVED",
				subType = "Basic Web Content");

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = ${randomSiteName},
				layoutPageTemplateEntryName = "Display Page Name 1",
				type = "Display Page Template");

			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name 2",
				groupName = ${randomSiteName},
				statusKey = "APPROVED",
				subType = "Basic Web Content");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			var assetId = JSONWebcontent.getResourcePrimKeyByURLTitle(
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("When the user maps the default display page template as specific to a Button fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Display Page Name 1",
				navItem = "Web Content");
		}

		task ("Then the nofollow is added to Button") {
			InputField.viewText(
				fieldLabel = "URL",
				text = "${portalURL}/web/${siteURLKey}/e/display-page-name-1/${assetTypeId}/${assetId}");

			AssertAttributeValue(
				fragmentName = "button",
				id = "link",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "rel",
				value2 = "nofollow");

			PageEditor.publish();
		}

		task ("When the guest user accesses to the associated display page") {
			UserBar.signOut();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");
		}

		task ("Then the canonical is added to an link element") {
			AssertAttributeValue(
				locator1 = "//link[contains(@href,'${siteURLKey}/w/web-content-title')]",
				value1 = "rel",
				value2 = "canonical");
		}

		task ("When the user maps the normal display page template as specific to a Button fragment") {
			User.loginPG();

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Display Page Name 2");
		}

		task ("Then the nofollow is added to Button") {
			InputField.viewText(
				fieldLabel = "URL",
				text = "${portalURL}/web/${siteURLKey}/e/display-page-name-2/${assetTypeId}/${assetId}");

			AssertAttributeValue(
				fragmentName = "button",
				id = "link",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "rel",
				value2 = "nofollow");
		}
	}

	@description = "This is a use case for LPS-116975. Map single tag from asset entry to editable field."
	@priority = 5
	test MapTagFromAssetToEditableField {
		property portal.acceptance = "true";

		task ("Add a blogs entry with a tag") {
			HeadlessBlog.addBlogEntry(
				assetTagNames = "tagname1",
				content = "Blogs Entry Content",
				groupName = ${randomSiteName},
				title = "Blogs Entry Title");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map the Tags field to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Blogs Entry Title",
				navItem = "Blogs");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Tags (Repeatable)");

			PageEditor.waitForAutoSave();
		}

		task ("View mapped content") {
			PageEditor.viewFragmentEditableText(
				editableText = "tagname1",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to image editable field."
	@priority = 4
	test MapWebContentFieldWithURLToImageFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Map Text field with URL to Image") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Image",
				id = "image-square");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "//img[contains(@src,'data:image/png')]",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to link editable field for Content Pages."
	@priority = 4
	test MapWebContentFieldWithURLToLinkFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map Text field with URL to Button") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "liferay.com");
		}
	}

	@description = "This is a test for LPS-98031. Map web content field with URL to text editable field."
	@priority = 4
	test MapWebContentFieldWithURLToTextFragment {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "https://www.liferay.com",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Map Text field with URL to Heading") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = "Web Content Title",
				field = "Text",
				navItem = "Web Content");

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Assert mapped URL work in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			AssertVisible(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			Click(
				key_append = "[normalize-space(text())='Heading Example']",
				key_url = "https://www.liferay.com",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertLocation.assertPartialLocation(value1 = "liferay.com");
		}
	}

	@description = "This is a test for LPS-125933. Preview a Content Page with a Fragment Mapped to WC, a WCD, and an Assert Publisher."
	@priority = 3
	test PreviewContentPageWithMappedAndInlineContent {
		task ("Add two web contents based on Basic Web Content") {
			for (var n : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = ${randomSiteName},
					title = "Web Content Title ${n}");
			}
		}

		task ("Add an Asset Publisher and an Web Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Asset Publisher");

			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Asset Publisher");
		}

		task ("Display the Web Content Title 1 in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title 1");

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(webContentContent = "Web Content Content 1");
		}

		task ("Add a Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments",
				targetFragmentName = "Web Content Display");
		}

		task ("Map Title field of web content to Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title 1",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Open the Preview modal") {
			PageEditor.previewInANewTab();
		}

		task ("Assert the web content in Preview Modal") {
			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Web Content Title 1");

			AssertVisible(
				key_content = "[contains(.,'Web Content Content 1')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}
		}
	}

	@description = "This is a test for LPS-110462. The value of editable field should be reset when the mapped content is missing"
	@priority = 3
	test ViewEditableFieldValueWhenMappedContentMissing {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");
		}

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Map Title field of web content to Heading") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = "Web Content Title",
				navItem = "Web Content");

			WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

			Select(
				locator1 = "PageEditorEditableLink#FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the title of web content is shown in Heading") {
			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Move the web content to the Recycle Bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContent.moveToRecycleBinCP(webContentTitle = "Web Content Title");
		}

		task ("Assert the default value is shown in Heading") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a use case for LPS-120198. The link information is still kept when the linked page is deleted."
	@priority = 4
	test ViewMapInformationAfterDeleteMappedPage {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Widget Page Name");
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Map the widget page to editable field of Button") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Button",
				id = "link",
				pageName = "Test Widget Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Widget Page Name");
		}

		task ("View selected page is linked to Button fragment") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "/web/${siteURLKey}/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.publish();
		}

		task ("Delete the widget page") {
			JSONLayout.deletePublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Widget Page Name");
		}

		task ("Navigate to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = ${randomSiteName});
		}

		task ("View selected page is still linked to Button fragment") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "/web/${siteURLKey}/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("Assert Not Found is shown") {
			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "/web/${siteURLKey}/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Page Not Found");
		}
	}

	@description = "This is a test for LPS-164269. The page creator could view a tooltip with the page URL when mapping a fragment on sites and libraries."
	@priority = 4
	test ViewPageURLOnTooltipWhenSelectPageItem {
		task ("Given a page creator opens the link to page modal") {
			task ("Get the guest site name") {
				Navigator.openURL();

				var defaultSiteName = selenium.getText("Home#SITE_NAME");
			}

			task ("Publish content page") {
				JSONLayout.publishLayout(
					groupName = ${randomSiteName},
					layoutName = "Content Page Name");
			}

			task ("Add a Button fragment to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Content Page Name",
					siteName = ${randomSiteName});

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Button");
			}

			task ("Map Link field with to Page") {
				PageEditorEditableLink.gotoEditableFieldLink(
					fragmentName = "Button",
					id = "link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Page");
			}

			task ("Open the Select modal of Page Link") {
				Click(
					key_fieldLabel = "Page",
					key_text = "plus",
					locator1 = "Icon#ANY_ITEM_SELECTOR");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Portlet.expandTree();
			}
		}

		task ("When the page creator hovers on the content page item") {
			MouseOver.javaScriptFocus(
				key_nodeName = "Content Page Name",
				locator1 = "Treeview#NODE_ITEM");

			MouseOver.javaScriptFocus(
				key_nodeName = "Content Page Name",
				locator1 = "Treeview#NODE_ITEM");
		}

		task ("Then the page creator could view a tooltip with the page url") {
			AssertVisible(
				key_content = "/web/${siteURLKey}/content-page-name",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("When the page creator hovers on the content page item from another site on Sites and Libraries") {
			Click(
				key_breadcrumbName = "Sites and Libraries",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY");

			LexiconCard.clickCardTitle(card = ${defaultSiteName});

			Portlet.expandTree();

			MouseOver.javaScriptFocus(
				key_nodeName = "Home",
				locator1 = "Treeview#NODE_ITEM");

			MouseOver.javaScriptFocus(
				key_nodeName = "Home",
				locator1 = "Treeview#NODE_ITEM");
		}

		task ("Then the page creator could view a tooltip with the page url") {
			AssertVisible(
				key_content = "/home",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-146373. New prefixes for email,phone and none options can be used on Content Pages."
	@priority = 4
	test ViewPrefixesForEmailAndPhoneAndNoneOptionsOnContentPage {
		var siteName = StringUtil.randomString(8);

		var siteURLKey = StringUtil.toLowerCase(${siteName});

		task ("Given a site created from Welcome site template") {
			HeadlessSite.addSite(
				siteName = ${siteName},
				templateName = "Welcome",
				templateType = "Site Initializer");
		}

		task ("When adding a web content with email and telephone") {
			task ("Create a web content structure") {
				WebContentStructures.openWebContentStructuresAdmin(siteURLKey = ${siteURLKey});

				WebContentStructures.importStructure(
					structureName = "Contact Information",
					uploadFileName = "Structure_Contact_Information_Fields.json");
			}

			task ("Create a Web Content from Contact Information") {
				NavItem.gotoWebContent();

				WebContentNavigator.gotoAddWithStructureCP(structureName = "Contact Information");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "John Smith",
					webContentTextFieldLabel = "Name",
					webContentTitle = "Web Content Title");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "john.smith@liferay.com",
					webContentTextFieldLabel = "Email");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = 1112223333,
					webContentTextFieldLabel = "Phone");

				WebContent.addWithStructureCP(
					fieldType = "Text",
					webContentText = "https://www.liferay.com",
					webContentTextFieldLabel = "Personal Web");

				PortletEntry.publish();
			}

			task ("Create a content page") {
				JSONLayout.addPublicLayout(
					groupName = ${siteName},
					layoutName = "Contact",
					type = "content");
			}

			task ("Add a Container to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Contact",
					siteName = ${siteName});

				PageEditor.addFragment(
					collectionName = "Layout Elements",
					fragmentName = "Container");
			}

			task ("Add a Heading fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Heading",
					navTab = "Fragments");
			}

			task ("Map Email field of web content to Heading") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Heading",
					id = "element-text");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Email");

				PageEditor.waitForAutoSave();

				Select(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Email");

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Email");
			}

			task ("Add an Image fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Image",
					navTab = "Fragments",
					targetElementName = "Heading");
			}

			task ("Map Phone field of web content to Image") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Image",
					id = "image-square");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Phone");

				PageEditor.waitForAutoSave();

				Select(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Phone");

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Prefix",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Phone");
			}

			task ("Add a Button fragment to Container") {
				PageEditor.addElementToContainer(
					collectionName = "Basic Components",
					fragmentName = "Button",
					height = "Tall",
					navTab = "Fragments",
					ratio = "9 / 8",
					targetElementName = "Image");
			}

			task ("Map Personal Web field of web content to Button") {
				PageEditorMapping.gotoEditableFieldMapping(
					fragmentName = "Button",
					id = "link");

				Navigator.gotoNavTab(navTab = "Link");

				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Mapped URL");

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = "Web Content Title",
					navItem = "Web Content");

				WaitForEditable(locator1 = "PageEditorEditableLink#FIELD");

				Select(
					locator1 = "PageEditorEditableLink#FIELD",
					value1 = "Personal Web");

				PageEditor.waitForAutoSave();
			}
		}

		task ("Then user is able to view email and telephone on content page") {
			task ("Open Preview Draft") {
				PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

				PagesAdmin.gotoPageEllipsisMenuItem(
					menuItem = "Preview Draft",
					pageName = "Contact");
			}

			task ("View editable fields' link") {
				SelectWindow.selectPopUp(value1 = "null");

				AssertVisible(
					key_append = "[normalize-space(text())='Heading Example']",
					key_url = "mailto:john.smith@liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "/*[contains(@data-lfr-editable-id,'image')]",
					key_url = "tel:1112223333",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "[contains(@class,'btn')]",
					key_url = "https://www.liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");

				Navigator.closeWindow();
			}

			task ("Publish the page and view it") {
				JSONLayout.publishLayout(
					groupName = ${siteName},
					layoutName = "Contact");

				ContentPagesNavigator.openViewContentPage(
					pageName = "Contact",
					siteName = ${siteName});
			}

			task ("View editable fields' link") {
				AssertVisible(
					key_append = "[normalize-space(text())='Heading Example']",
					key_url = "mailto:john.smith@liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "/*[contains(@data-lfr-editable-id,'image')]",
					key_url = "tel:1112223333",
					locator1 = "Fragment#FRAGMENT_LINK");

				AssertVisible(
					key_append = "[contains(@class,'btn')]",
					key_url = "https://www.liferay.com",
					locator1 = "Fragment#FRAGMENT_LINK");
			}
		}
	}

}