@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	@description = "This is a use case for LPS-102207. Can not export a master page template when it doesn't has published version."
	@priority = 5
	test CannotExportMastersPageTemplateWithoutPublishedVersion {
		property portal.acceptance = "true";

		task ("Add a custom master but not publish") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Assert custom master has a Draft label") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			LexiconCard.viewCardLabel(
				card = "Custom Masters Page Template",
				cardLabel = "Draft");
		}

		task ("Assert Export action is disabled") {
			Click.waitForMenuToggleJSClick(
				key_card = "Custom Masters Page Template",
				locator1 = "Card#CARD_ELLIPSIS");

			AssertVisible(
				key_menuItem = "Export",
				locator1 = "MenuItem#DISABLED_MENU_ITEM");
		}

		task ("Assert Export button is disabled") {
			MastersPageTemplatesAdmin.selectMasters(masterLayoutName = "Custom Masters Page Template");

			AssertElementPresent(
				key_text = "upload",
				locator1 = "Icon#ANY_DISABLED");
		}
	}

	@description = "This is a use case for LPS-106212. Can not export multiple selected page templates if one of them is widget page template."
	@priority = 4
	test CannotExportMultipleWhenOneOfSelectedIsWidgetPageTemplate {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Heading fragment then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Widget Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("Assert workflow status of both and select them") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			for (var entry : list "Page Template Name,Widget Page Template Name") {
				PageTemplatesAdmin.viewEntryWorkflowStatus(
					entry = ${entry},
					workflowStatus = "Approved");

				PageTemplatesAdmin.selectPageTemplate(pageTemplateName = ${entry});
			}
		}

		task ("Assert Export button is disabled") {
			AssertElementPresent(
				key_text = "upload",
				locator1 = "Icon#ANY_DISABLED");
		}
	}

	@description = "This is a use case for LPS-106212. Can not export multiple selected content page templates when one of them doesn't has published version."
	@priority = 4
	test CannotExportMultipleWhenOneOfSelectedWithoutPublishedVersion {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Heading fragment then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.publish();
		}

		task ("Add a second content page template but not publish") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Second Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Second Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Assert workflow status of both and select them") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Second Page Template Name",
				workflowStatus = "Draft");

			for (var entry : list "Page Template Name,Second Page Template Name") {
				PageTemplatesAdmin.selectPageTemplate(pageTemplateName = ${entry});
			}
		}

		task ("Assert Export button is disabled") {
			AssertElementPresent(
				key_text = "upload",
				locator1 = "Icon#ANY_DISABLED");
		}
	}

	@description = "This is a use case for LPS-106212. Can export a content page template based on custom master and import."
	@priority = 4
	@uitest
	test ExportImportContentPageTemplateBasedOnCustomMaster {
		task ("Add a custom master with Heading then Publish") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Heading",
				scope = "Master");

			MastersPageTemplates.publishMaster();
		}

		task ("Add a content page template based on custom master") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template",
				masterLayoutEntryName = "Custom Masters Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			AssertVisible(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			PageEditor.publish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Add a custom master have the same name in a new site") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Button",
				scope = "Master");

			MastersPageTemplates.publishMaster();
		}

		task ("Import content page template in new site") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert only the reference of custom master is exported and imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			AssertElementNotPresent(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			AssertVisible(
				key_fragmentName = "button",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			AssertTextEquals(
				locator1 = "PagesAdmin#MASTER_LAYOUT_NAME",
				value1 = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-107748. Can export a content page template with custom fragments and import."
	@priority = 4
	test ExportImportContentPageTemplateWithCustomFragment {
		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Title");
		}

		task ("Edit content of new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Title",
				item = "Edit");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.css");

			PortletEntry.publish();
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add the new fragment to content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Lorem ipsum dolor sit amet",
				fragmentName = "Title");

			PageEditor.publish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Export new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.exportCollection(collectionName = "Collection Name");

			DownloadTempFile();
		}

		task ("Import new fragment to a new site") {
			HeadlessSite.addSite(siteName = "Site Name");

			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdmin.importCollectionFromTempFolder();

			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.viewEntryPresent(entry = "Title");
		}

		task ("Import content page template to the new site") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");
		}

		task ("Assert new fragment is shown in content page template") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Lorem ipsum dolor sit amet",
				fragmentName = "Title");
		}
	}

	@description = "This is a use case for LPS-106212. Can export a content page template with the custom Look and Feel and import."
	@priority = 4
	test ExportImportContentPageTemplateWithCustomLookAndFeel {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Set up Look and Feel") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Theme.configureLookAndFeelSpecificLook();

			Theme.configureLookAndFeelShowFooter(showFooter = "false");

			Theme.configureLookAndFeelShowHeader(showHeader = "false");

			Theme.configureLookAndFeelShowHeaderSearch(showHeaderSearch = "false");

			Theme.configureLookAndFeelShowMaxMinAppLinks(showMaxMinAppLinks = "true");

			Theme.configureLookAndFeelWrapWidgetPageContent(wrapWidgetPageContent = "false");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.publish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Import content page template in a new site") {
			HeadlessSite.addSite(siteName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert the Look and Feel Setting is imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			WaitForPageLoad();

			AssertChecked.assertCheckedNotVisible(locator1 = "Radio#SPECIFIC_LOOK");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Show Footer",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Show Header",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Show Header Search",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Show Maximize/Minimize Application Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Wrap Widget Page Content",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "This is a use case for LPS-106815. The Team Role permission settings of widgets will be exported and imported with content page template."
	@priority = 4
	test ExportImportContentPageTemplateWithTeamRolePermissionSettingsOfWidgets {
		task ("Add a Team in site") {
			Site.openSiteTeamsAdmin(siteURLKey = "test-site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Sites Directory portlet to content page template") {
			PageEditor.addWidget(portletName = "Sites Directory");
		}

		task ("Configure Team Role permission settings of Sites Directory") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			Team.definePermissionPG(
				permissionDefinitionKey = "ACTION_VIEW",
				teamName = "Site Team Name");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			PageEditor.publish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Export Team") {
			Site.openSiteTeamsAdmin(siteURLKey = "test-site-name");

			LAR.exportTeam(larFileName = "Site_Team_Name.lar");
		}

		task ("Import Team in a new site") {
			HeadlessSite.addSite(siteName = "Site Name");

			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			LAR.importTeam(larFileName = "Site_Team_Name.lar");
		}

		task ("Import content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert Team Role permission settings of widgets are imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			WaitForLiferayEvent.initializeLiferayEventLog();

			MouseOver.mouseOverNotVisible(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked.assertCheckedNotVisible(locator1 = "//tr[contains(.,'Site Team Name')]/td//input[contains(@id,'ACTION_VIEW')]");
		}
	}

	@description = "This is a use case for LPS-86193. Can export display page template based on custom master and import."
	@priority = 3
	test ExportImportDisplayPageTemplateBasedOnCustomMaster {
		var siteName = StringUtil.randomString(8);

		var siteURLKey = StringUtil.toLowerCase(${siteName});

		task ("Add a custom master with Header and Footer element") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Navigation Bars",
				dropTarget = "Header",
				fragmentName = "Header Dark",
				scope = "Master");

			PageEditor.addFragment(
				collectionName = "Footers",
				dropTarget = "Footer",
				fragmentName = "Footer Nav Dark",
				scope = "Master");

			MastersPageTemplates.publishMaster();
		}

		task ("Add a display page template based on custom master") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				masterLayoutEntryName = "Custom Masters Page Template",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#NAVIGATION_BARS");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#FOOTERS");

			PageEditor.publish();
		}

		task ("Export display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			HeadlessSite.addSite(siteName = ${siteName});

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = ${siteURLKey});

			MastersPageTemplatesAdmin.importMastersFromTempFolder();

			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");
		}

		task ("Import display page template in a new site") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "Display Page Name");
		}

		task ("Assert display page template is based on custom master") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#NAVIGATION_BARS");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#FOOTERS");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			AssertTextEquals(
				locator1 = "PagesAdmin#MASTER_LAYOUT_NAME",
				value1 = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-86193. The Collection Display with mapping content should be exported and imported with display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithCollectionDisplayContainingMappingContent {
		var siteName = StringUtil.randomString(8);

		var siteURLKey = StringUtil.toLowerCase(${siteName});

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = ${entryTitle});
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a display page template with Web Content Article type and Basic Web Content subtype") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Collection Display to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Assert the title of three Web Content Articles are respectively shown in each cell") {
			var n = 1;

			for (var title : list "Third,Second,First") {
				AssertVisible(
					key_colPosition = 1,
					key_entryTitle = "${title} Web Content",
					key_fragmentName = "Collection Display",
					key_rowPosition = ${n},
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			PageEditor.publish();
		}

		task ("Export display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();
		}

		task ("Import display page template in a new site") {
			HeadlessSite.addSite(siteName = ${siteName});

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "Display Page Name");
		}

		task ("Assert the Collection Display containing mapping content is imported") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.clickConfigurableField(fragmentName = "Collection Display");

			PageEditor.gotoTab(tabName = "Browser");

			var n = 1;

			for (var title : list "Third,Second,First") {
				AssertVisible(
					key_colPosition = 1,
					key_entryTitle = "${title} Web Content",
					key_fragmentName = "Collection Display",
					key_rowPosition = ${n},
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-165556. The page designer should keep mapped standalone action from current object to Button fragment after import the display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithMappedStandaloneActionFromCurrentObjectToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator exports a display page template with a Button fragment mapped to a standalone action") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Default",
				navItem = "${labelName}2s");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();

			DisplayPageTemplatesAdmin.deleteDisplayPage(
				defaultDisplayPageTemplate = "true",
				displayPageName = "Display Page Name");
		}

		task ("When the page creator import the display page template") {
			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Then the page creator could trigger the mapped standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a test for LPS-165556. The page designer should keep mapped standalone action from current object to Button fragment inside Collection Display after import the display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithMappedStandaloneActionFromCurrentObjectToFragmentInsideCollectionDisplay {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator exports a display page template with a Button fragment mapped to a standalone action inside Collection Display") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${labelName}2s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Liferay",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Default",
				navItem = "${labelName}2s");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();

			DisplayPageTemplatesAdmin.deleteDisplayPage(
				defaultDisplayPageTemplate = "true",
				displayPageName = "Display Page Name");
		}

		task ("When the page creator import the display page template") {
			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Then the page creator could trigger the mapped standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a test for LPS-165556. The page designer should keep mapped standalone action from a specific object entry to Button fragment after import the display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithMappedStandaloneActionFromSpecificObjectEntryToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator exports a display page template with a Button fragment mapped to a standalone action from a specific object entry") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			Select(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Specific Content");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${objectEntryId},
				navItem = "${labelName}2s",
				rowItem = "//*[@data-qa-id='row'][contains(.,'${objectEntryId}')]");

			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Default",
				navItem = "${labelName}2s");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();

			DisplayPageTemplatesAdmin.deleteDisplayPage(
				defaultDisplayPageTemplate = "true",
				displayPageName = "Display Page Name");
		}

		task ("When the page creator import the display page template") {
			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Then the page creator could trigger the mapped standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a use case for LPS-106815. The Organization Role permission settings of widgets will be exported and imported with master page template."
	@priority = 4
	test ExportImportMastersPageTemplateWithOrganizationRolePermissionSettingsOfWidgets {
		task ("Add a organization and organization site") {
			JSONOrganization.addOrganization(
				organizationName = "Organization Name 1",
				organizationSite = "true");
		}

		task ("Add a custom master in organization site") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Organization Name 1 LFR_ORGANIZATION",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add a Categories Navigation portlet to master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "organization-name-1");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addWidget(
				dropTarget = "Header",
				portletName = "Category Filter",
				scope = "Master");
		}

		task ("Configure Organization Role permission settings of Categories Navigation") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			WaitForLiferayEvent.initializeLiferayEventLog();

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			Check.checkNotVisible(
				key_roleTitle = "account-manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			MastersPageTemplates.publishMaster();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "organization-name-1");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new organization site") {
			JSONOrganization.addOrganization(
				organizationName = "Organization Name 2",
				organizationSite = "true");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "organization-name-2");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the Organization Role permission settings of Categories Navigation are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.viewFragment(fragmentName = "Category Filter");

			MouseOver.mouseOverNotVisible(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			WaitForLiferayEvent.initializeLiferayEventLog();

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked.assertCheckedNotVisible(
				key_roleTitle = "account-manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");
		}
	}

	@description = "This is a use case for LPS-107748. Can export a content page template with custom fragments and import."
	@priority = 4
	test IgnoreFragmentNotExistInSiteWhenImportContentPageTemplate {
		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Title");
		}

		task ("Edit content of new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Title",
				item = "Edit");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.css");

			PortletEntry.publish();
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add the new fragment to content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Lorem ipsum dolor sit amet",
				fragmentName = "Title");

			PageEditor.publish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Export new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.exportCollection(collectionName = "Collection Name");

			DownloadTempFile();
		}

		task ("Import content page template to the new site") {
			HeadlessSite.addSite(siteName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			WaitForPageLoad();

			var pageTemplateZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "page-template-*.zip");

			UploadTempFile.uploadTempFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = ${pageTemplateZipFileName});

			Button.clickImport();
		}

		task ("Assert specific warning message is shown in Import popup") {
			AssertTextEquals(
				locator1 = "Message#WARNING_IMPORT",
				value1 = "1 item was imported with warnings.");

			AssertTextEquals.assertPartialText(
				itemName = "Page Template Name",
				locator1 = "Message#WARNING_IMPORT_SUBTEXT",
				value1 = "Fragment with key Title was ignored because it does not exist.");
		}

		task ("Assert new fragment is not shown in content page template") {
			Button.clickDone();

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewFragmentNotPresent(fragmentName = "Title");
		}

		task ("Import new fragment to a new site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdmin.importCollectionFromTempFolder();

			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.viewEntryPresent(entry = "Title");
		}

		task ("Assert new fragment is not shown in content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewFragmentNotPresent(fragmentName = "Title");
		}
	}

	@description = "This is a use case for LPS-106212. Can export a content page template in draft status when it has published version and only the published version is exported."
	@priority = 4
	test OnlyPublishedVersionIsExported {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Heading fragment and edit inline content then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");

			PageEditor.publish();
		}

		task ("Assert content page template has Approved label") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");
		}

		task ("Edit inline content of Heading in content page template but not publish") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Modified Text");
		}

		task ("Assert content page template has Draft label") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Draft");
		}

		task ("Export content page template") {
			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Import content page template in a new site") {
			HeadlessSite.addSite(siteName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert only published version is imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.viewFragmentEditableText(
				editableText = "New editable fragment text",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a use case for LPS-102207. The existing entry will be overwriten when import a master page template with thumbnail if check Overwrite Existing Entries."
	@priority = 4
	test OverwriteExistingEntryWithThumbnailIfCheckOverwriteExistingEntries {
		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplates.publishMaster();
		}

		task ("Change thumbnail of custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Change Thumbnail",
				masterLayoutName = "Custom Masters Page Template");

			ItemSelector.uploadFile(uploadFileName = "Document_1.png");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");

			SelectFrameTop(value1 = "relative=top");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in the current site") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder(importOption = "Overwrite Existing Items");
		}

		task ("Assert the thumbnail of custom master is imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");
		}
	}

	@description = "This is a test for LPS-173150. Assert new import content page templates works when success and error occur."
	@priority = 4
	test ShowSpecificErrorMessageWhenImportPageTemplateSetWithInvalidValue {
		task ("Given a user accesses to the Page Templates import page") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			WaitForPageLoad();
		}

		task ("When the user imports a page template set with invalid value") {
			UploadDependencyFile.uploadArchiveFile(fileName = "page-templates-with-invalid-value.zip");

			Button.clickImport();
		}

		task ("Then the user could see specific error message on the import results page") {
			AssertTextEquals(
				locator1 = "Message#SUCCESS_IMPORT",
				value1 = "1 item was imported.");

			AssertTextEquals(
				locator1 = "Message#ERROR_IMPORT",
				value1 = "1 item could not be imported.");

			AssertTextEquals.assertPartialText(
				itemName = "Content Page Template With Invalid Value",
				locator1 = "Message#ERROR_IMPORT_SUBTEXT",
				value1 = "Content Page Template With Invalid Value could not be imported because its page definition is invalid.");

			Button.clickDone();

			Navigator.gotoNavNested(navNested = "Page Template Set");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Content Page Template With Edited Inline Text");

			PageTemplatesAdmin.viewPageTemplateNotPresent(pageTemplateName = "Content Page Template With Invalid Value");
		}
	}

	@description = "This is a use case for LPS-106815. The specific message will be shown when import content page template where the widget has permission settings for a Role if it doesn't exist in site."
	@priority = 4
	test ShowSpecificWarningMessageWhenImportContentPageTemplateWithPermissionSettingsOfWidgetsToSiteWhereTheSpecificRoleNotExist {
		task ("Add a organization and organization site") {
			JSONOrganization.addOrganization(
				organizationName = "Organization Name",
				organizationSite = "true");
		}

		task ("Add a content page template to organization site") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Organization Name LFR_ORGANIZATION",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Organization Name LFR_ORGANIZATION",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "organization-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Sites Directory portlet to content page template") {
			PageEditor.addWidget(portletName = "RSS Publisher");
		}

		task ("Configure Team Role permission settings of Sites Directory") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			Check.checkNotVisible(
				key_roleTitle = "account-manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			PageEditor.publish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "organization-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Import content page template in a normal site") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			var pageTemplateZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "page-template-*.zip");

			UploadTempFile.uploadTempFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = ${pageTemplateZipFileName});

			Button.clickImport();
		}

		task ("Assert specific warning message is shown in Import popup") {
			AssertTextEquals(
				locator1 = "Message#WARNING_IMPORT",
				value1 = "1 item was imported with warnings.");

			AssertTextEquals.assertPartialText(
				itemName = "Page Template Name",
				locator1 = "Message#WARNING_IMPORT_SUBTEXT",
				value1 = "Role with key Account Manager was ignored because it does not exist.");
		}

		task ("Assert Account Manager is not shown in permissions panel of RSS Publisher") {
			Button.clickDone();

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			MouseOver.mouseOverNotVisible(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertElementNotPresent(
				key_roleName = "Account Manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_ROLE_NAME");
		}
	}

	@description = "This is a test for LPS-173150. Assert new import master page templates works."
	@priority = 5
	test UploadAnotherFile {
		property portal.acceptance = "true";

		task ("Given a user accesses to the Page Templates import page") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			WaitForPageLoad();
		}

		task ("When the user imports a master page") {
			AssertVisible(
				key_title = "Import File",
				locator1 = "Header#H2_TITLE");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUBTITLE",
				value1 = "Select a ZIP file containing one or multiple entries.Read more about exporting and importing page templates.");

			AssertVisible(
				key_href = "https://learn.liferay.com/en/w/dxp/site-building/creating-pages/adding-pages/exporting-and-importing-page-templates",
				key_text = "Read more about exporting and importing page templates.",
				locator1 = "Link#ANY_HREF");

			UploadDependencyFile.uploadArchiveFile(fileName = "master-page-with-fragments.zip");

			AssertVisible(
				key_text = "Replace File",
				locator1 = "Button#ANY");

			Button.clickImport();
		}

		task ("Then the user could upload another file on the import results page") {
			AssertVisible(locator1 = "Message#SUCCESS_IMPORT");

			Button.click(button = "Upload Another File");

			WaitForPageLoad();

			UploadDependencyFile.uploadArchiveFile(fileName = "master-page-with-widgets.zip");

			AssertVisible(
				key_text = "Replace File",
				locator1 = "Button#ANY");

			Button.clickImport();

			AssertVisible(locator1 = "Message#SUCCESS_IMPORT");

			Button.clickDone();

			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Master Page With Fragments");

			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Master Page With Widgets");
		}
	}

}