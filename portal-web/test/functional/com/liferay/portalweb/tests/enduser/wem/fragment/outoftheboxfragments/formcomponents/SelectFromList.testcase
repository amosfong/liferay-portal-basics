@component-name = "portal-page-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragment Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a new site") {
			HeadlessSite.addSite(siteName = "Test Site Name");
		}

		task ("Add three items within Object Picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Ticket Type");

			for (var ticketName : list "Reserved,Giveaways,Members") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${ticketName},
					itemName = ${ticketName},
					picklistName = "Ticket Type");
			}
		}

		task ("Add a company Object with a Picklist field") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Purchase Order",
				objectName = "PurchaseOrder",
				pluralLabelName = "Purchase Orders");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Type",
				fieldName = "type",
				fieldType = "String",
				isRequired = "false",
				objectName = "PurchaseOrder",
				picklistName = "Ticket Type");

			ObjectAdmin.publishObjectViaAPI(objectName = "PurchaseOrder");
		}
	}

	@description = "This is a test for LPS-151159. The page designer map the Select from List fragment to objects fields on content pages."
	@priority = 5
	test MapPicklistFieldOnContentPage {
		property portal.acceptance = "true";

		task ("Given a page designer has a mapped Form Container on content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");
		}

		task ("When the page designer maps Select from list fragment and views it after publishing") {
			PageEditor.editFormContainer(contentType = "Purchase Order");

			PageEditor.editInput(
				fragmentName = "Select",
				helpText = "Just one type of ticket can be selected",
				hideHelpText = "false",
				label = "Select your ticket");

			PageEditor.publish(objectName = "Purchase Order");

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the pages designer can see available options on select from list fragment at view mode") {
			PageEditor.viewInputStyle(
				helpText = "Just one type of ticket can be selected",
				label = "Select your ticket",
				showHelpText = "true",
				showLabel = "true",
				type = "select");

			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select");

			MenuItem.viewOrder(menuItemList = "Reserved,Giveaways,Members");
		}
	}

	@description = "This is a test for LPS-154568. The page designer can map a Form Container to Object field with relationship on system object"
	@priority = 5
	test MapRelationshipWithSystemObject {
		property portal.acceptance = "true";

		task ("Given a page designer has a mapped Form Container to an Object with relationship on system object") {
			task ("Add relationship with Account object") {
				ObjectAdmin.addObjectRelationshipViaAPI(
					objectName_1 = "AccountEntry",
					objectName_2 = "PurchaseOrder",
					relationshipLabel = "Account Name",
					relationshipName = "accountName",
					relationshipType = "oneToMany");
			}

			task ("Add four accounts") {
				for (var accountName : list "Assets,Equity,Expenses,Free") {
					JSONAccountEntry.addAccountEntry(
						accountEntryName = ${accountName},
						accountEntryType = "Business");
				}
			}

			task ("Add a Form Container fragment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}
		}

		task ("When the page designer maps Select from list fragment to relationship and views it after publishing") {
			PageEditor.editFormContainer(contentType = "Purchase Order");

			PageEditor.editInput(
				fragmentName = "Select",
				label = "Select your account");

			PageEditor.publish(objectName = "Purchase Order");

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Then the pages designer can see four entries on select from list dropdown menu at view mode") {
			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select");

			MenuItem.viewOrder(menuItemList = "Assets,Equity,Expenses,Free");
		}

		task ("When the page designer adds six accounts") {
			for (var accountName : list "Liabilities,Nominal,Personal,Real,Revenue,Saving") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = ${accountName},
					accountEntryType = "Business");
			}
		}

		task ("Then the pages designer can see ten entries on select from list dropdown menu at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select");

			MenuItem.viewOrder(menuItemList = "Assets,Equity,Expenses,Free,Liabilities,Nominal,Personal,Real,Revenue,Saving");

			var objectDefinitionId = ObjectDefinitionAPI.getObjectDefinitionIdByName(name = "AccountEntry");

			ObjectDefinitionAPI.deleteRelationship(objectDefinitionId = ${objectDefinitionId});
		}
	}

	@description = "This is a test for LPS-151402. The user could see error message when submit a form with invalid field."
	@priority = 4
	test ViewErrorMessageWhenSubmitFormWithInvalidField {
		task ("Given a user has a content page where a Select from List and Submit Button fragments are inside a Form Container") {
			task ("Add a Form Container fragment to content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Form Components",
					fragmentName = "Form Container");
			}

			task ("Map the Select from List fragment to Type field") {
				PageEditor.editFormContainer(contentType = "Purchase Order");

				PageEditor.publish(objectName = "Purchase Order");
			}
		}

		task ("When the user submits form with invalid field") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select");

			SetElementAttribute(
				attribute1 = "data-option-value",
				locator1 = "//li[contains(@class,'dropdown')][normalize-space(text())='Reserved']",
				value1 = "invalid");

			MenuItem.click(menuItem = "Reserved");

			Button.clickSubmitButton();
		}

		task ("Then the user should see an error message on the top of form") {
			Alert.viewErrorMessage(errorMessage = "The Type is invalid.");
		}
	}

	@description = "This is a test for LPS-194759. The user could see hidden options on dropdown menu of Select from List by vertical scrollbar."
	@priority = 4
	test ViewHiddenOptionsOnDropdownMenuByScrollbar {
		task ("Given a page designer has an object where a picklist field has 15 items") {
			Picklist.addPicklistViaAPI(picklistName = "Components");

			for (var componentName : list "Adapt Media,Analystics Cloud,Collections,Clay,Content Dashboard,Control Menu,Forms,Data Engine,Categories,Item Selector,Page Templates,Product Menu,Recycle Bin,Site Settings,Simulation Menu,OpenAI") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${componentName},
					itemName = ${componentName},
					picklistName = "Components");
			}

			ObjectAdmin.addObjectViaAPI(
				labelName = "Feature Request",
				objectName = "FeatureRequest",
				pluralLabelName = "Feature Requests");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Project Components",
				fieldName = "type",
				fieldType = "String",
				isRequired = "false",
				objectName = "FeatureRequest",
				picklistName = "Components");

			ObjectAdmin.publishObjectViaAPI(objectName = "FeatureRequest");
		}

		task ("When the page designer maps the Form Container to object") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Feature Request");

			PageEditor.publish();
		}

		task ("Then the page designer can see hidden options on the dropdown list of select from list by scrollbar at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select");

			AssertCssValue(
				locator1 = "//div[contains(@class,'dropdown-menu') and contains(@class,'show')]",
				locator2 = "height",
				value1 = "500px");

			ScrollWebElementIntoView(
				key_menuItem = "OpenAI",
				locator1 = "MenuItem#ANY_MENU_ITEM");

			MenuItem.viewVisible(menuItem = "OpenAI");
		}
	}

	@description = "This is a test for LPS-194759. The user could see more than 10 options on dropdown menu of Select from List. The user cannot see loading animation when click the toggle button of Select from List."
	@priority = 4
	test ViewMoreThan10OptionsOnDropdownMenu {
		task ("Given a page designer has an object where a picklist field has 11 items") {
			Picklist.addPicklistViaAPI(picklistName = "Components");

			for (var componentName : list "Adapt Media,Analystics Cloud,Collections,Clay,Content Dashboard,Control Menu,Forms,Data Engine,Categories,Item Selector,Page Templates") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${componentName},
					itemName = ${componentName},
					picklistName = "Components");
			}

			ObjectAdmin.addObjectViaAPI(
				labelName = "Feature Request",
				objectName = "FeatureRequest",
				pluralLabelName = "Feature Requests");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Project Components",
				fieldName = "type",
				fieldType = "String",
				isRequired = "false",
				objectName = "FeatureRequest",
				picklistName = "Components");

			ObjectAdmin.publishObjectViaAPI(objectName = "FeatureRequest");
		}

		task ("When the page designer maps the Form Container to object") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Feature Request");

			PageEditor.publish();
		}

		task ("Then the page designer can see all options on the dropdown list of select from list fragment at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(locator1 = "//div[contains(@id,'fragment-')]/div[contains(@class,'select-from-list')]//button[*[name()='svg'][contains(@class,'icon-caret-double')]]//span[contains(@class,'icon-loading')]");

			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select");

			MenuItem.viewOrder(menuItemList = "Adapt Media,Analystics Cloud,Collections,Clay,Content Dashboard,Control Menu,Forms,Data Engine,Categories,Item Selector,Page Templates");
		}
	}

	@description = "This is a test for LPS-182728. The user should see the field error below the Select from List fragment."
	@priority = 3
	test ViewSelectFromListFieldErrorMessageWhenPartialValidationFailure {
		task ("Given a user has a content page where a Select from List fragment mapped to a mandatory Select from List field") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Mandatory",
				fieldName = "mandatory",
				fieldType = "String",
				isRequired = "true",
				objectName = "PurchaseOrder",
				picklistName = "Ticket Type");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "Purchase Order");

			PageEditor.publish();
		}

		task ("When the user submits form without selection") {
			SetElementAttribute.removeElementAttribute(
				attribute1 = "required",
				locator1 = "//label[normalize-space()='Mandatory']//following-sibling::div//input[contains(@id,'select-from-list')]");

			Button.clickSubmitButton();
		}

		task ("Then the user should see a field error message below Select from List") {
			Alert.viewFieldErrorMessage(
				errorMessage = "This field is required.",
				fieldLabel = "Mandatory");
		}
	}

}