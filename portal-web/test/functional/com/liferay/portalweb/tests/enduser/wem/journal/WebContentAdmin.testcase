@component-name = "portal-content-management"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	@description = "Test that the UI for adding a WC folder works."
	@priority = 5
	test AddFolder {
		property portal.acceptance = "true";
		property testray.component.names = "Training,Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");
	}

	@description = "Test that the UI for adding a WC works."
	@priority = 4
	test AddWebContent {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@description = "Test that the UI for saving a WC as a draft works."
	@priority = 4
	test AddWebContentDraft {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addDraft(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoViewStatus(
			webContentStatus = "DRAFT",
			webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Draft",
			webContentTitle = "WC WebContent Title");
	}

	@description = "Test that the UI for adding multiple WC works."
	@priority = 3
	test AddWebContentMultiple {
		property testray.component.names = "Web Content Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 1",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 1");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 2",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 2");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content 3",
			webContentTitle = "WC WebContent Title 3");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 3");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 1");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 1",
			webContentTitle = "WC WebContent Title 1");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 2");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 2",
			webContentTitle = "WC WebContent Title 2");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title 3");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content 3",
			webContentTitle = "WC WebContent Title 3");
	}

	@description = "This is a test for LPS-202596. The content creator could filter web contents by Status type."
	@priority = 3
	test CanFilterByStatusType {
		task ("Given a site administrator has a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("When open the dropdown menu of Filter") {
			Click(locator1 = "ManagementBar#FILTER");
		}

		task ("Then View Any, Draft, Approved, Expired and Scheduled are under Filter by Status section") {
			var i = 1;

			for (var menuItem : list "Any,Draft,Approved,Expired,Scheduled") {
				AssertVisible(
					index = ${i},
					key_menuItem = ${menuItem},
					key_subheader = "Filter by Status",
					locator1 = "MenuItem#GROUPED_DROPDOWN_MENU_ITEM_BY_INDEX");

				var i = ${i} + 1;
			}
		}
	}

	@description = "This is a test for LPS-202596. The content creator could filter web contents by Versions type."
	@priority = 3
	test CanFilterByVersionsType {
		task ("Given a site administrator has a folder and a web content with three versions") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			var structuredContentId = HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title Version 1");

			for (var i : list "2,3") {
				var data = "\"title\": \"Web Content Title Version ${i}\"";

				var data = StringUtil.add(${data}, ",\"contentFields\": [{\"contentFieldValue\": {\"data\": \"<p>Web Content Content Version ${i}</p>\"},\"name\": \"content\"}]", "");

				HeadlessWebcontent.patchStructuredContent(
					data = ${data},
					structuredContentId = ${structuredContentId});
			}

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("When open the dropdown menu of Filter") {
			Click(locator1 = "ManagementBar#FILTER");
		}

		task ("Then assert can filter by versions type") {
			task ("View the search results message is 3 Results Found With Filters Type: Versions") {
				MenuItem.click(menuItem = "Versions");

				AssertTextEquals(
					locator1 = "ManagementBar#SEARCH_RESULT_SUMMARY",
					value1 = "3 Results Found With Filters");

				AssertVisible(
					key_filter = "Type: Versions",
					locator1 = "ManagementBar#SEARCH_FILTER_LABEL_X");
			}

			task ("View the web content folder is not shown") {
				LexiconList.viewListEntryNotPresent(listEntry = "WC Folder Name");
			}

			task ("View all three versions of web contents are shown") {
				for (var webContentTitle : list "Web Content Title Version 1,Web Content Title Version 2,Web Content Title Version 3") {
					LexiconList.viewListEntryTitle(listEntry = ${webContentTitle});
				}
			}

			task ("View the version labels are shown on web contents") {
				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 1",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.0");

				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 2",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.1");

				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 3",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.2");
			}

			task ("Change to the Cards view, view the web content folder is not shown") {
				ManagementBar.changeDisplayStyle(displayStyle = "Cards");

				LexiconCard.viewCardNotPresent(card = "WC Folder Name");
			}

			task ("View all three versions of web contents are shown") {
				for (var webContentTitle : list "Web Content Title Version 1,Web Content Title Version 2,Web Content Title Version 3") {
					LexiconCard.viewCardTitle(card = ${webContentTitle});
				}
			}

			task ("View the version labels are shown on web contents") {
				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 1",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.0");

				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 2",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.1");

				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 3",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.2");
			}

			task ("Change to the Table view, view the web content folder is not shown") {
				ManagementBar.changeDisplayStyle(displayStyle = "Table");

				LexiconTable.viewTableEntryNotPresent(tableEntry = "WC Folder Name");
			}

			task ("View all three versions of web contents are shown") {
				for (var webContentTitle : list "Web Content Title Version 1,Web Content Title Version 2,Web Content Title Version 3") {
					LexiconTable.viewTableEntryTitle(tableEntry = ${webContentTitle});
				}
			}

			task ("View the version labels are shown on web contents") {
				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 1",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.0");

				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 2",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.1");

				AssertTextEquals(
					key_webContentTitle = "Web Content Title Version 3",
					locator1 = "WebContentSearchResults#STATUS",
					value1 = "Version 1.2");
			}

			task ("Open the dropdown menu of the latest version and view the Edit action is shown") {
				Click.waitForMenuToggleJSClick(
					key_tableEntry = "Web Content Title Version 3",
					locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

				MenuItem.viewVisible(menuItem = "Edit");
			}

			task ("Open the dropdown menu of the previous versions and view the Edit Latest Version is shown") {
				Click.waitForMenuToggleJSClick(
					key_tableEntry = "Web Content Title Version 1",
					locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

				MenuItem.viewVisible(menuItem = "Edit Latest Version");
			}
		}
	}

	@description = "This is a test for LPS-202596. The content creator could filter assets by Web Content type in Web Content admin."
	@priority = 3
	test CanFilterByWebContentType {
		task ("Given a site administrator has a folder and web contents") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "WC Web Content Content",
				groupName = "Test Site Name",
				title = "WC Web Content Title");

			JSONWebcontent.addWebContent(
				content = "Web Content Content Draft",
				groupName = "Test Site Name",
				title = "Web Content Title Draft",
				workflowAction = "DRAFT");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitle = "WC Web Content Title",
				webContentTitleEdit = "WC Web Content Title Edit");
		}

		task ("When open the dropdown menu of Filter") {
			Click(locator1 = "ManagementBar#FILTER");
		}

		task ("Then assert can filter by web content type") {
			task ("View the Web Content is selected") {
				AssertVisible(
					key_menuItem = "Web Content",
					locator1 = "MenuItem#ANY_MENU_ITEM_SELECTED");
			}

			task ("View the folder, the latest version of published web content and draft web content are shown and the folder name and web content name have link") {
				Click(locator1 = "ManagementBar#FILTER");

				for (var webContentTitle : list "WC Folder Name,WC Web Content Title Edit,Web Content Title Draft") {
					WebContent.viewTitle(webContentTitle = ${webContentTitle});
				}

				WebContent.viewNotPresentCP(webContentTitle = "WC Web Content Title");
			}

			task ("View status labels are shown on web contents") {
				AssertTextEquals(
					key_webContentTitle = "Web Content Title Draft",
					locator1 = "WC#ENTRY_LIST_WORKFLOW_STATUS",
					value1 = "DRAFT");

				AssertTextEquals(
					key_webContentTitle = "WC Web Content Title Edit",
					locator1 = "WC#ENTRY_LIST_WORKFLOW_STATUS",
					value1 = "APPROVED");
			}

			task ("Open the dropdown menu of published web content and view all actions are available") {
				Click(
					key_webContentTitle = "WC Web Content Title Edit",
					locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

				MenuItem.viewOrder(menuItemList = "Edit,Preview,Translate,Expire,Subscribe,View History,View Usages,Make a Copy,Export for Translation,Import Translation,Move,Permissions,Delete");
			}
		}
	}

	@description = "This is a test for LPS-202596. The content creator cannot filter assets by type when Index All Article Versions disabled."
	@priority = 3
	test CanNotFilterAssetByTypeWhenDisableIndexAllArticleVersionsEnabled {
		task ("Given a site administrator disable Index All Article Versions Enabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Web Content",
				configurationScope = "Virtual Instance Scope");

			FormFields.viewCheckboxChecked(fieldName = "indexAllArticleVersionsEnabled");

			FormFields.disableCheckbox(fieldName = "indexAllArticleVersionsEnabled");

			SystemSettings.saveConfiguration();
		}

		task ("When a site administrator has a folder and a web content with two versions") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			var structuredContentId = HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title Version 1");
			var data = "\"title\": \"Web Content Title Version 2\"";

			var data = StringUtil.add(${data}, ",\"contentFields\": [{\"contentFieldValue\": {\"data\": \"<p>Web Content Content Version 2</p>\"},\"name\": \"content\"}]", "");

			HeadlessWebcontent.patchStructuredContent(
				data = ${data},
				structuredContentId = ${structuredContentId});

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("Then view Filter by Type section is not shown and view the folder and the latest version of published web content are shown") {
			Click(locator1 = "ManagementBar#FILTER");

			AssertElementNotPresent(
				locator1 = "Dropdown#DROPDOWN_SUBHEADER",
				subHeader = "Filter by Type");

			var i = 1;

			for (var menuItem : list "Web Content,Versions") {
				AssertElementNotPresent(
					index = ${i},
					key_menuItem = ${menuItem},
					key_subheader = "Filter by Type",
					locator1 = "MenuItem#GROUPED_DROPDOWN_MENU_ITEM_BY_INDEX");

				var i = ${i} + 1;
			}

			for (var webContentTitle : list "WC Folder Name,Web Content Title Version 2") {
				WebContent.viewTitle(webContentTitle = ${webContentTitle});
			}

			WebContent.viewNotPresentCP(webContentTitle = "Web Content Title Version ");
		}
	}

	@description = "This is a test for LPS-196842. When the “Recent” filter is applied, the possibility of changing the order must be disabled"
	@priority = 4
	test CannotReverseSortDirectionWhenFilterByRecent {
		task ("Given two web contents with different names") {
			JSONWebcontent.addWebContent(
				content = "EMEA Guild",
				groupName = "Test Site Name",
				title = "EMEA Guild");

			JSONWebcontent.addWebContent(
				content = "APAC Guild",
				groupName = "Test Site Name",
				title = "APAC Guild");
		}

		task ("When filter by Recent") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Search.searchCP(searchTerm = "Guild");

			ManagementBar.setFilterAndOrder(filterBy = "Recent");
		}

		task ("Then the possibility of changing the order must be disabled") {
			AssertElementNotPresent(locator1 = "ManagementBar#ORDER");
		}
	}

	@description = "This is a test for LPS-202596. The content creator could search comments associated to web contents by keywords."
	@priority = 3
	test CanSearchWebContentCommentsByKeyword {
		task ("Given a site administrator has a folder and a web content with 2 comments") {
			JSONWebcontent.addFolder(
				folderName = "Liferay",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Liferay DXP");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Liferay DXP");

			WebContentDisplayPortlet.configureSetup(metadataNameList = "Comments");

			WebContentDisplayPortlet.saveConfiguration();

			Comments.addPG(entryComment = "Welcome to Liferay DXP");

			Comments.addPG(entryComment = "Enjoy using the best DXP on Earth!");
		}

		task ("When go to web content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("Then assert can search comments by keyword") {
			task ("Search the 'Liferay' keywords") {
				Search.searchCP(searchTerm = "Liferay");
			}

			task ("View the search results message is 2 Results Found for 'Liferay'") {
				AssertTextEquals(
					locator1 = "ManagementBar#SEARCH_RESULT_SUMMARY",
					value1 = "2 Results Found for \"Liferay\"");
			}

			task ("View both folder and web content are shown") {
				for (var webContentTitle : list "Liferay,Liferay DXP") {
					WebContent.viewTitle(webContentTitle = ${webContentTitle});
				}
			}

			task ("View the selection of Search In is All Fields and change the selection to Comments") {
				Click(
					buttonId = "JournalPortlet_searchIn",
					locator1 = "Button#BUTTON_ID",
					value1 = "All Fields");

				MenuItem.click(menuItem = "Comments");
			}

			task ("View the search results message is 1 Result Found for "Liferay"") {
				AssertTextEquals(
					locator1 = "ManagementBar#SEARCH_RESULT_SUMMARY",
					value1 = "1 Result Found for \"Liferay\"");
			}

			task ("View only the comment Welcome to Liferay DXP is shown") {
				AssertVisible(
					key_webContentComment = "Welcome to Liferay DXP",
					locator1 = "WebContentSearchResults#COMMENT");
			}

			task ("Clear the search results") {
				Search.clearSearchResult();
			}

			task ("Search the 'DXP' keywords") {
				Search.searchCP(searchTerm = "DXP");
			}

			task ("View the search results message is 1 Result Found for "DXP"") {
				AssertTextEquals(
					locator1 = "ManagementBar#SEARCH_RESULT_SUMMARY",
					value1 = "1 Result Found for \"DXP\"");
			}

			task ("View only the web content is shown") {
				WebContent.viewTitle(webContentTitle = "Liferay DXP");

				WebContent.viewNotPresentCP(webContentTitle = "Liferay");
			}

			task ("Change the selection to Comments") {
				Click(
					buttonId = "JournalPortlet_searchIn",
					locator1 = "Button#BUTTON_ID",
					value1 = "All Fields");

				MenuItem.click(menuItem = "Comments");
			}

			task ("View the search results message is 2 Results Found for 'DXP'") {
				AssertTextEquals(
					locator1 = "ManagementBar#SEARCH_RESULT_SUMMARY",
					value1 = "2 Results Found for \"DXP\"");
			}

			task ("View both comments are shown") {
				for (var webContentComment : list "Welcome to Liferay DXP,Enjoy using the best DXP on Earth!") {
					AssertVisible(
						key_webContentComment = ${webContentComment},
						locator1 = "WebContentSearchResults#COMMENT");
				}
			}
		}
	}

	@description = "This is a test for LPS-197694. The user could configure notifications on the configuration page of Web Content admin in asset library."
	@priority = 4
	test ConfigureWebContentNotificationsInAssetLibrary {
		task ("Given a user accesses to the web content admin in asset library") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");
		}

		task ("When the user navigates to the configuration page") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");
		}

		task ("Then the user can configure notifications") {
			AssertVisible(
				locator1 = "MenuBar#SHEET_TERTIARY_TITLE",
				tertiaryTitle = "Notifications");

			MenuBar.click(menuBar = "Email From");

			AssertElementPresent(
				key_title = "Email From",
				locator1 = "Header#H2_TITLE");
		}
	}

	@description = "This is a test for LPS-197694. The user could configure notifications on the configuration page of Web Content admin in site."
	@priority = 4
	test ConfigureWebContentNotificationsInSite {
		task ("Given a user accesses to the web content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("When the user navigates to the configuration page") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");
		}

		task ("Then the user can configure notifications") {
			AssertVisible(
				locator1 = "MenuBar#SHEET_TERTIARY_TITLE",
				tertiaryTitle = "Notifications");

			MenuBar.click(menuBar = "Email From");

			AssertElementPresent(
				key_title = "Email From",
				locator1 = "Header#H2_TITLE");
		}
	}

	@description = "Test that the UI for editing WC localization works."
	@priority = 4
	test EditWCAddLocalization {
		property testray.component.names = "Localization,Web Content Administration";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.addCP(
			webContentContent = "WC Contenido de la web Contenido",
			webContentTitle = "WC Contenido de la web Titulo");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.changeLocale(
			locale = "es-ES",
			translated = "true");

		WebContent.viewCP(
			webContentContent = "WC Contenido de la web Contenido",
			webContentTitle = "WC Contenido de la web Titulo");
	}

	@description = "This is a test for LPS-197159. Assert could filter categories and tags filter for Web Content."
	@priority = 4
	test FilterWebContentsByCategoriesAndTags {
		task ("Given a site administrator has web contents") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Projects");

			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Commerce",
				vocabularyName = "Projects");

			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "Echo");

			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "Lima");

			JSONWebcontent.addWebContent(
				content = "Liferay DXP",
				groupName = "Test Site Name",
				title = "Liferay DXP");

			JSONWebcontent.addWebContent(
				assetCategoryIds = ${categoryId},
				content = "Liferay Commerce",
				groupName = "Test Site Name",
				title = "Liferay Commerce");

			JSONWebcontent.addWebContent(
				assetTagNames = "Echo",
				content = "Liferay LXC",
				groupName = "Test Site Name",
				title = "Liferay LXC");
		}

		task ("When the site administrator navigates to the Web Content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var title : list "Liferay DXP,Liferay Commerce,Liferay LXC") {
				WebContentAdmin.viewEntryTitle(entry = ${title});
			}
		}

		task ("Then the site administrator could filter web contents by categories and tags") {
			ManagementBar.setFilterAndOrder(filterBy = "Categories");

			AssetCategorization.selectCategories(categoryNameList = "Commerce");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "1 Result Found With Filters");

			AssertTextEquals(
				locator1 = "ContentDashboard#FILTER_TEXT",
				value1 = "Categories: Commerce");

			WebContentAdmin.viewEntryTitle(entry = "Liferay Commerce");

			for (var title : list "Liferay DXP,Liferay LXC") {
				WebContentAdmin.viewEntryNotPresent(entry = ${title});
			}

			Search.clearSearchResult();

			ManagementBar.setFilterAndOrder(filterBy = "Tags");

			AssetCategorization.selectTags(tagNameList = "Echo");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "1 Result Found With Filters");

			AssertTextEquals(
				locator1 = "ContentDashboard#FILTER_TEXT",
				value1 = "Tags: Echo");

			WebContentAdmin.viewEntryTitle(entry = "Liferay LXC");

			for (var title : list "Liferay DXP,Liferay Commerce") {
				WebContentAdmin.viewEntryNotPresent(entry = ${title});
			}

			Search.clearSearchResult();

			ManagementBar.setFilterAndOrder(filterBy = "Tags");

			AssetCategorization.selectTags(tagNameList = "Lima");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "0 Results Found With Filters");

			AssertTextEquals(
				locator1 = "ContentDashboard#FILTER_TEXT",
				value1 = "Tags: Lima");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No web content was found.");
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could manage web contents by structures."
	@priority = 4
	test ManageWebContentsByStructures {
		task ("Given a site administrator has web contents") {
			JSONWebcontent.addWebContent(
				content = "EMEA Guild",
				groupName = "Test Site Name",
				title = "EMEA Guild");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();

			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "LXC",
				webContentTitle = "LXC");

			PortletEntry.publish();
		}

		task ("When the site administrator navigates to the configuration page") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");
		}

		task ("Then the site administrator could manage web contents by structures") {
			AssertVisible(
				locator1 = "MenuBar#SHEET_TERTIARY_TITLE",
				tertiaryTitle = "Settings");

			MenuBar.viewActive(menuBar = "Structures");

			AssertElementPresent(
				key_title = "Structures",
				locator1 = "Header#H2_TITLE");

			AssertElementPresent(
				key_title = "Highlighted",
				locator1 = "Header#H3_TITLE");

			AssertTextEquals(
				locator1 = "WCConfiguration#HIGHLIGHTED_STRUCTURES_SUBTITLE",
				value1 = "No Structures Selected");

			WebContentAdmin.selectHighlightedStructures(structureNameList = "WC Structure Name");

			LexiconTable.viewTableEntryTitle(tableEntry = "WC Structure Name");

			PortletEntry.save();

			Navigator.gotoBack();

			MenuBar.viewActive(menuBar = "Content Library");

			AssertElementPresent(
				key_title = "Content Library",
				locator1 = "Header#H2_TITLE");

			for (var title : list "LXC,EMEA Guild") {
				WebContentAdmin.viewEntryTitle(entry = ${title});
			}

			MenuBar.click(menuBar = "WC Structure Name");

			AssertElementPresent(
				key_title = "WC Structure Name",
				locator1 = "Header#H2_TITLE");

			WebContentAdmin.viewEntryTitle(entry = "LXC");

			WebContentAdmin.viewEntryNotPresent(entry = "EMEA Guild");
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could manage web contents by structures in Asset Library."
	@priority = 3
	test ManageWebContentsByStructuresInAssetLibrary {
		task ("Given a site administrator has web contents in asset library") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			JSONWebcontent.addWebContent(
				content = "EMEA Guild",
				groupName = "Test Depot Name",
				site = "false",
				title = "EMEA Guild");

			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();

			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "LXC",
				webContentTitle = "LXC");

			PortletEntry.publish();
		}

		task ("When the site administrator navigates to the configuration page") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");
		}

		task ("Then the site administrator could manage web contents by structures") {
			WebContentAdmin.selectHighlightedStructures(structureNameList = "WC Structure Name");

			PortletEntry.save();

			Navigator.gotoBack();

			MenuBar.viewActive(menuBar = "Content Library");

			AssertElementPresent(
				key_title = "Content Library",
				locator1 = "Header#H2_TITLE");

			for (var title : list "LXC,EMEA Guild") {
				WebContentAdmin.viewEntryTitle(entry = ${title});
			}

			MenuBar.click(menuBar = "WC Structure Name");

			AssertElementPresent(
				key_title = "WC Structure Name",
				locator1 = "Header#H2_TITLE");

			WebContentAdmin.viewEntryTitle(entry = "LXC");

			WebContentAdmin.viewEntryNotPresent(entry = "EMEA Guild");
		}
	}

	@description = "This is a test for LPS-197163. When displaying the search results, the file path must be an interactive element."
	@priority = 4
	test NavigateByBreadcrumbInSearchResults {
		task ("Given a web content and a folder with a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content",
				groupName = "Test Site Name",
				title = "Over the Years");

			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "After many years I understood",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("When searching for a term on the web content admin page") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Search.searchCP(searchTerm = "Years");
		}

		task ("Then it is possible to access to the Home folder") {
			LexiconList.clickListEntryBreadcrumbItem(
				breadcrumbName = "Home",
				listEntry = "Over the Years");

			Breadcrumb.viewActiveEntry(breadcrumbName = "Home");
		}

		task ("When searching for a term on the web content admin page") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Search.searchCP(searchTerm = "Years");
		}

		task ("Then it is possible to access to the new folder") {
			LexiconList.clickListEntryBreadcrumbItem(
				breadcrumbName = "WC Folder Name",
				listEntry = "Web Content Title");

			Breadcrumb.viewActiveEntry(breadcrumbName = "WC Folder Name");

			WebContentAdmin.viewEntryTitle(entry = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-191927. The View More button will be shown when there are more than 10 versions on the info panel."
	@priority = 3
	test NavigateToVersionsPageViaViewMoreWhenWebContentWithMoreThan10Versions {
		task ("Given a site administrator has a web content with 11 versions") {
			var structuredContentId = HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title Version 1");

			for (var i : list "2,3,4,5,6,7,8,9,10,11") {
				var data = "\"title\": \"Web Content Title Version ${i}\"";

				var data = StringUtil.add(${data}, ",\"contentFields\": [{\"contentFieldValue\": {\"data\": \"<p>Web Content Content Version ${i}</p>\"},\"name\": \"content\"}]", "");

				HeadlessWebcontent.patchStructuredContent(
					data = ${data},
					structuredContentId = ${structuredContentId});
			}
		}

		task ("When the site administrator navigates to the Versions tab of info panel of web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LexiconList.checkListCheckbox(listEntry = "Web Content Title Version 11");

			ManagementBar.clickInfo();

			Navigator.gotoNavTab(navTab = "Versions");
		}

		task ("Then the site administrator could only see 10 versions of web content") {
			for (var i : list "1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0") {
				AssertVisible(
					key_listEntry = "Version ${i}",
					locator1 = "Sidebar#LIST_ENTRY");
			}

			AssertElementNotPresent(
				key_listEntry = "Version 1.0",
				locator1 = "Sidebar#LIST_ENTRY");
		}

		task ("When the site administrator clicks the View More button") {
			Button.click(button = "View More");
		}

		task ("Then the site administrator could see all versions of web content on versions page") {
			ControlMenu.viewHeaderTitle(headerTitle = "Web Content Title Version 11");

			for (var i : list "1,2,3,4,5,6,7,8,9,10,11") {
				LexiconTable.viewTableEntryTitle(tableEntry = "Web Content Title Version ${i}");
			}
		}
	}

	@description = "This is a test for LPS-196842. When varying filters or searching if order by is applied, the order by must be applied to the new search + filters."
	@priority = 4
	test OrderWebContentsInSearchResults {
		task ("Given two web contents with different names") {
			JSONWebcontent.addWebContent(
				content = "EMEA Guild",
				groupName = "Test Site Name",
				title = "EMEA Guild");

			JSONWebcontent.addWebContent(
				content = "APAC Guild",
				groupName = "Test Site Name",
				title = "APAC Guild");
		}

		task ("When order web contents by Title in search results") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Search.searchCP(searchTerm = "Guild");

			ManagementBar.setFilterAndOrder(orderBy = "Title");
		}

		task ("Then web contents are ordered by Title") {
			AssertTextEquals.assertPartialText(
				key_position = 1,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "APAC Guild");

			AssertTextEquals.assertPartialText(
				key_position = 2,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "EMEA Guild");
		}

		task ("When order web contents by Display Date in search results") {
			ManagementBar.setFilterAndOrder(orderBy = "Display Date");
		}

		task ("Then web contents are ordered by Display Date") {
			AssertTextEquals.assertPartialText(
				key_position = 1,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "EMEA Guild");

			AssertTextEquals.assertPartialText(
				key_position = 2,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "APAC Guild");
		}
	}

	@description = "This is a test for LPS-191927. The site administrator could preview or expire a specific version on the info panel."
	@priority = 3
	test PreviewOrExpireSpecificVersionOfWebContentOnInfoPanel {
		task ("Given a site administrator has a web content with versions") {
			var structuredContentId = HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title Version 1");

			for (var i : list "2,3") {
				var data = "\"title\": \"Web Content Title Version ${i}\"";

				var data = StringUtil.add(${data}, ",\"contentFields\": [{\"contentFieldValue\": {\"data\": \"<p>Web Content Content Version ${i}</p>\"},\"name\": \"content\"}]", "");

				HeadlessWebcontent.patchStructuredContent(
					data = ${data},
					structuredContentId = ${structuredContentId});
			}
		}

		task ("When the site administrator navigates to the Versions tab of info panel of web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LexiconList.checkListCheckbox(listEntry = "Web Content Title Version 3");

			ManagementBar.clickInfo();

			Navigator.gotoNavTab(navTab = "Versions");
		}

		task ("Then the site administrator could preview or expire specific version of web content") {
			Click.waitForMenuToggleJSClick(
				key_listEntry = "Version 1.0",
				locator1 = "Sidebar#LIST_ENTRY_ELLIPSIS");

			MenuItem.click(menuItem = "Preview");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "Web Content Title Version 1");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			WebContentDisplayPortlet.viewContent(webContentContent = "Web Content Content");

			IFrame.closeFrame();

			Click.waitForMenuToggleJSClick(
				key_listEntry = "Version 1.1",
				locator1 = "Sidebar#LIST_ENTRY_ELLIPSIS");

			MenuItem.click(menuItem = "Expire");

			LexiconList.checkListCheckbox(listEntry = "Web Content Title Version 3");

			ManagementBar.clickInfo();

			Navigator.gotoNavTab(navTab = "Versions");

			AssertTextEquals(
				key_listEntry = "Version 1.1",
				locator1 = "Sidebar#LIST_ENTRY_LABEL",
				value1 = "Expired");
		}
	}

	@description = "This is a test for LPS-196842. When searched and filtered content exists, the order must be applied to the displayed content."
	@priority = 4
	test RevertSortDirectionOfSearchResults {
		task ("Given two web contents with different names") {
			JSONWebcontent.addWebContent(
				content = "EMEA Guild",
				groupName = "Test Site Name",
				title = "EMEA Guild");

			JSONWebcontent.addWebContent(
				content = "APAC Guild",
				groupName = "Test Site Name",
				title = "APAC Guild");
		}

		task ("When order web contents by Title in search results") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Search.searchCP(searchTerm = "Guild");

			ManagementBar.setFilterAndOrder(orderBy = "Title");
		}

		task ("Then web contents are ordered by Title") {
			AssertTextEquals.assertPartialText(
				key_position = 1,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "APAC Guild");

			AssertTextEquals.assertPartialText(
				key_position = 2,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "EMEA Guild");
		}

		task ("When reverse sort direction") {
			ManagementBar.sortAssets(sortDirection = "Descending");
		}

		task ("Then the order of web content is reversed") {
			AssertTextEquals.assertPartialText(
				key_position = 1,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "EMEA Guild");

			AssertTextEquals.assertPartialText(
				key_position = 2,
				locator1 = "LexiconList#LIST_ENTRY_X",
				value1 = "APAC Guild");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "2 Results Found for \"Guild\"");

			Click(locator1 = "ManagementBar#ORDER");

			AssertVisible(
				key_menuItem = "Title",
				locator1 = "WC#DROPDOWN_MENU_ITEM_ACTIVE");
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could search web contents in Content Library sheet."
	@priority = 4
	test SearchWebContentsInContentLibrarySheet {
		task ("Given a site administrator has web contents") {
			JSONWebcontent.addWebContent(
				content = "Liferay DXP",
				groupName = "Test Site Name",
				title = "Liferay DXP");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();

			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "Liferay Commerce",
				webContentTitle = "Liferay Commerce");

			PortletEntry.publish();
		}

		task ("When the site administrator navigates to the Content Library sheet") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");

			WebContentAdmin.selectHighlightedStructures(structureNameList = "WC Structure Name");

			PortletEntry.save();

			Navigator.gotoBack();
		}

		task ("Then the site administrator could search web contents") {
			Search.searchCP(searchTerm = "Liferay");

			AssertElementPresent(
				key_title = "Search Results",
				locator1 = "Header#H2_TITLE");

			for (var title : list "Liferay Commerce,Liferay DXP") {
				WebContentAdmin.viewEntryTitle(entry = ${title});
			}
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could search web contents in specific structure sheet."
	@priority = 4
	test SearchWebContentsInHighlightedStructureSheet {
		task ("Given a site administrator has web contents") {
			JSONWebcontent.addWebContent(
				content = "Liferay DXP",
				groupName = "Test Site Name",
				title = "Liferay DXP");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();

			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "Liferay Commerce",
				webContentTitle = "Liferay Commerce");

			PortletEntry.publish();
		}

		task ("When the site administrator navigates to the highlighted structure sheet") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");

			WebContentAdmin.selectHighlightedStructures(structureNameList = "WC Structure Name");

			PortletEntry.save();

			Navigator.gotoBack();

			MenuBar.click(menuBar = "WC Structure Name");
		}

		task ("Then the site administrator could search web contents with the highlighted structure") {
			Search.searchCP(searchTerm = "Liferay");

			AssertElementPresent(
				key_title = "Search Results",
				locator1 = "Header#H2_TITLE");

			WebContentAdmin.viewEntryTitle(entry = "Liferay Commerce");

			WebContentAdmin.viewEntryNotPresent(entry = "Liferay DXP");
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could select structures from global site and asset library on modal."
	@priority = 3
	test SelectStructuresFromGlobalAndAssetLibraryAsHighlightedStrutures {
		task ("Given a site administrator has web content structure in asset library") {
			JSONDepot.addDepot(depotName = "Test Depot Name");

			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();

			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "Test Site Name");

			JSONDepot.updateStructureState(
				groupName = "Test Site Name",
				structureState = "Available");
		}

		task ("When the site administrator selects the highlighted structures in site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");

			Click(
				ariaLabel = "Select Highlighted Structures",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}

		task ("Then the site administrator could see structures from global and asset library on modal") {
			LexiconTable.viewTableEntryInfo(
				columnName = "scope",
				tableEntry = "Basic Web Content",
				tableEntryInfo = "Global");

			LexiconTable.viewTableEntryInfo(
				columnName = "scope",
				tableEntry = "WC Structure Name",
				tableEntryInfo = "Asset Library");
		}
	}

	@description = "This is a test for LPS-196839. It must be possible to select the "Results", "Location" and "Search In" fields with the keyboard and must be in compliance with WCAG 2.1 AA standard."
	@priority = 3
	test ViewAccessibilityOfDefaultOptionsWhenSearchingWebContentTitle {
		task ("Given 2 web contents and a folder with a web content") {
			JSONWebcontent.addWebContent(
				content = "Liferay DXP",
				groupName = "Test Site Name",
				title = "Over The Years");

			JSONWebcontent.addWebContent(
				content = "Liferay DXP",
				groupName = "Test Site Name",
				title = "Over The Earth");

			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "After many years I understood",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("When go to the folder and search for 'years'") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			Search.searchCP(searchTerm = "years");
		}

		task ("Then it must be possible to select the "Results", "Location" and "Search In" fields with the keyboard and must be in compliance with WCAG 2.1 AA standard.") {
			task ("Using just the keyboard, in the "Location" field select the "Everywhere" option.") {
				KeyPress(
					buttonId = "JournalPortlet_searchLocation",
					locator1 = "Button#BUTTON_ID");

				KeyPress(
					buttonId = "JournalPortlet_searchLocation",
					locator1 = "Button#BUTTON_ID",
					value1 = "\DOWN");

				KeyPress(
					buttonId = "JournalPortlet_searchLocation",
					locator1 = "Button#BUTTON_ID",
					value1 = "\ENTER");

				AssertTextEquals(
					buttonId = "JournalPortlet_searchLocation",
					locator1 = "Button#BUTTON_ID",
					value1 = "Everywhere");
			}

			task ("Check that both web contents are present.") {
				Click(
					key_title = "Search Results",
					locator1 = "Header#H3_TITLE");

				AssertTextEquals.assertPartialText(
					key_position = 1,
					locator1 = "LexiconList#LIST_ENTRY_X",
					value1 = "Over The Years");

				AssertTextEquals.assertPartialText(
					key_position = 2,
					locator1 = "LexiconList#LIST_ENTRY_X",
					value1 = "Web Content Title");
			}

			task ("View no accessibility issues found.") {
				AssertAccessible();
			}

			task ("Using just the keyboard, in the "Search In" field select the "Title Only" option.") {
				KeyPress(
					buttonId = "JournalPortlet_searchIn",
					locator1 = "Button#BUTTON_ID");

				KeyPress(
					buttonId = "JournalPortlet_searchIn",
					locator1 = "Button#BUTTON_ID",
					value1 = "\DOWN");

				KeyPress(
					buttonId = "JournalPortlet_searchIn",
					locator1 = "Button#BUTTON_ID",
					value1 = "\ENTER");

				AssertTextEquals(
					buttonId = "JournalPortlet_searchIn",
					locator1 = "Button#BUTTON_ID",
					value1 = "Title Only");
			}

			task ("Check that only web content with title "Over The Years" appears.") {
				AssertTextEquals.assertPartialText(
					key_position = 1,
					locator1 = "LexiconList#LIST_ENTRY_X",
					value1 = "Over The Years");

				AssertElementNotPresent(
					key_position = 2,
					locator1 = "LexiconList#LIST_ENTRY_X",
					value1 = "Web Content Title");
			}

			task ("View no accessibility issues found.") {
				AssertAccessible();
			}
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could add all available type items in Content Library sheet."
	@priority = 3
	test ViewAvailableTypesInContentLibrarySheet {
		task ("Given a site administrator has a web content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("When the site administrator navigates to the Content Library sheet") {
			NavItem.click(navItem = "Web Content");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");

			WebContentAdmin.selectHighlightedStructures(structureNameList = "WC Structure Name");

			PortletEntry.save();

			Navigator.gotoBack();
		}

		task ("Then the site administrator could see available types") {
			MenuBar.viewActive(menuBar = "Content Library");

			LexiconEntry.gotoAdd();

			for (var type : list "Folder,Basic Web Content,WC Structure Name") {
				MenuItem.viewVisible(menuItem = ${type});
			}
		}
	}

	@description = "This is a test for LPS-177690. The tooltip of the back button should be Go to Web Content in the View Usages page."
	@priority = 3
	test ViewBackButtonTooltipOfUsages {
		task ("Given a content creator accesses to the Usages of a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WidgetPages.addRecentContentWithoutSearch(assetTitle = "Web Content Title");

			Alert.viewSuccessMessage();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Usages");

			MenuBar.viewActive(menuBar = "All (1)");
		}

		task ("When the content creator hovers over the back button") {
			MouseOver.javaScriptFocus(locator1 = "Icon#BACK");
		}

		task ("Then the content creator could see the tooltip message") {
			AssertVisible(
				key_content = "Go to Web Content",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-177690. The tooltip of the back button should be Go to Web Content in the Versions page."
	@priority = 3
	test ViewBackButtonTooltipOfVersions {
		task ("Given a content creator accesses to the Versions of a web content") {
			var structuredContentId = HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title Version 1");
			var data = "\"title\": \"Web Content Title Version 2\"";

			var data = StringUtil.add(${data}, ",\"contentFields\": [{\"contentFieldValue\": {\"data\": \"<p>Web Content Content Version 2</p>\"},\"name\": \"content\"}]", "");

			HeadlessWebcontent.patchStructuredContent(
				data = ${data},
				structuredContentId = ${structuredContentId});

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title Version 2",
				menuItem = "View History");

			Navigator.viewActivatedNavTab(navTab = "Versions");
		}

		task ("When the content creator hovers over the back button") {
			MouseOver.javaScriptFocus(locator1 = "Icon#BACK");
		}

		task ("Then the content creator could see the tooltip message") {
			AssertVisible(
				key_content = "Go to Web Content",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}

		task ("Given a content creator compares two versions") {
			LexiconTable.clickEllipsisItem(
				item = "Compare to...",
				tableEntry = "Web Content Title Version 2");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			LexiconEntry.gotoEntry(rowEntry = "1.0");

			SelectFrameTop();

			ControlMenu.viewHeaderTitle(headerTitle = "Compare Versions");
		}

		task ("When the content creator hovers over the back button") {
			MouseOver.javaScriptFocus(locator1 = "Icon#BACK");
		}

		task ("Then the content creator could see the tooltip message") {
			AssertVisible(
				key_content = "Go to Web Content",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-177690. The tooltip of the back button should be Go to usages page in View in page."
	@priority = 3
	test ViewBackButtonTooltipOfViewInPage {
		task ("Given a content creator accesses to the View in Page from web content usages") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WidgetPages.addRecentContentWithoutSearch(assetTitle = "Web Content Title");

			Alert.viewSuccessMessage();

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Usages");

			WebContentViewUsages.viewInPage(page = "Test Page Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name");
		}

		task ("When the content creator hovers over the back button") {
			MouseOver.javaScriptFocus(locator1 = "Icon#BACK");
		}

		task ("Then the content creator could see the tooltip message") {
			AssertVisible(
				key_content = "Go to Web Content Title",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could see info panel of web contents in specific structure sheet."
	@priority = 3
	test ViewInfoPanelOfWebContentsInHighlightedStructureSheet {
		task ("Given a site administrator has web contents") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();

			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "LXC",
				webContentTitle = "LXC");

			PortletEntry.publish();
		}

		task ("When the site administrator navigates to the highlighted structure sheet") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");

			WebContentAdmin.selectHighlightedStructures(structureNameList = "WC Structure Name");

			PortletEntry.save();

			Navigator.gotoBack();

			MenuBar.click(menuBar = "WC Structure Name");
		}

		task ("Then the site administrator could see info panel of web contents in different views") {
			LexiconList.checkListCheckbox(listEntry = "LXC");

			ManagementBar.clickInfo();

			AssertTextEquals(
				locator1 = "WC#INFO_PANEL_TITLE",
				value1 = "LXC");

			AssertTextEquals(
				locator1 = "WC#INFO_PANEL_SUBTITLE",
				value1 = "WC Structure Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			MenuBar.click(menuBar = "WC Structure Name");

			LexiconEntry.changeDisplayStyle(displayStyle = "cards");

			LexiconCard.checkCardCheckbox(card = "LXC");

			ManagementBar.clickInfo();

			AssertTextEquals(
				locator1 = "WC#INFO_PANEL_TITLE",
				value1 = "LXC");

			AssertTextEquals(
				locator1 = "WC#INFO_PANEL_SUBTITLE",
				value1 = "WC Structure Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			MenuBar.click(menuBar = "WC Structure Name");

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			LexiconTable.checkTableCheckbox(tableEntry = "LXC");

			ManagementBar.clickInfo();

			AssertTextEquals(
				locator1 = "WC#INFO_PANEL_TITLE",
				value1 = "LXC");

			AssertTextEquals(
				locator1 = "WC#INFO_PANEL_SUBTITLE",
				value1 = "WC Structure Name");
		}
	}

	@description = "This is a test for LPS-153323 and LPS-155805. View kebab icon of web content visible and retainable."
	@priority = 4
	test ViewKebabIconOfWebContentVisible {
		property testray.component.names = "Web Content Administration";

		task ("Add a published web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Check kebab icon of the web content visible and retainable") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			// We need this pause to view if kebab icon of the web content exists to test LPS-155805

			Pause(value1 = 3000);

			AssertCssValue(
				locator1 = "//dd//button[contains(@class, 'dropdown-toggle')]",
				locator2 = "color",
				value1 = "rgba(107, 108, 126, 1)");
		}
	}

	@description = "This is a test for LPS-131307. View the order of web content actions."
	@priority = 5
	test ViewOrderOfWebContentActions {
		property portal.acceptance = "true";

		task ("Add a published web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "Published WebContent Title");
		}

		task ("Add a draft web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "Draft WebContent Title",
				workflowAction = "DRAFT");
		}

		task ("Add an expired web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "Expired WebContent Title");

			JSONWebcontent.updateStatus(
				groupName = "Test Site Name",
				statusKey = "EXPIRE",
				title = "Expired WebContent Title");
		}

		task ("Assert the actions order of published web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			Click(
				key_webContentTitle = "Published WebContent Title",
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

			MenuItem.viewOrder(menuItemList = "Edit,Preview,Translate,Expire,Subscribe,View History,View Usages,Copy,Export for Translation,Import Translation,Move,Permissions,Delete");

			Click(
				key_webContentTitle = "Published WebContent Title",
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");
		}

		task ("Assert the actions order of draft web content") {
			Click(
				key_webContentTitle = "Draft WebContent Title",
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

			MenuItem.viewOrder(menuItemList = "Edit,Preview Draft,Translate,Subscribe,View History,View Usages,Copy,Export for Translation,Import Translation,Move,Permissions,Delete");

			Click(
				key_webContentTitle = "Draft WebContent Title",
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");
		}

		task ("Assert the actions order of expired web content") {
			Click(
				key_webContentTitle = "Expired WebContent Title",
				locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

			MenuItem.viewOrder(menuItemList = "Edit,Preview,Translate,Subscribe,View History,View Usages,Copy,Export for Translation,Import Translation,Move,Permissions,Delete");
		}
	}

	@description = "This is a test for LPS-191927. The status and version of web content are shown on the header of info panel."
	@priority = 3
	test ViewStatusAndVersionOfWebContentOnHeaderOfInfoPanel {
		task ("Given a site administrator has a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("When the site administrator navigates to the info panel of web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LexiconList.checkListCheckbox(listEntry = "Web Content Title");

			ManagementBar.clickInfo();
		}

		task ("Then the site administrator could see status and version shown on the header of info panel") {
			AssertTextEquals(
				locator1 = "Sidebar#COMPONENT_TITLE",
				value1 = "Web Content Title");

			AssertVisible(
				key_labelName = "Version 1.0",
				locator1 = "Sidebar#HEADER_LABEL");

			AssertVisible(
				key_labelName = "Approved",
				locator1 = "Sidebar#HEADER_LABEL");
		}
	}

	@description = "This is a test for LPS-146458. View the available status filters of Web Content admin."
	@priority = 5
	test ViewStatusFiltersOfWebContentAdmin {
		property portal.acceptance = "true";

		task ("Add a published web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("View the available status filters of Web Content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(locator1 = "ManagementBar#FILTER");

			for (var filterName : list "Draft,Scheduled,Approved,Expired") {
				MenuItem.viewVisible(menuItem = ${filterName});
			}

			for (var filterName : list "Denied,Pending") {
				MenuItem.viewNotPresent(menuItem = ${filterName});
			}
		}

		task ("Enable Single Approver Workflow for Web Content Article at site level") {
			Workflow.openWorkflowAdmin(siteURLKey = "test-site-name");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("View the available status filters of Web Content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WaitForPageLoad();

			Click(locator1 = "ManagementBar#FILTER");

			for (var filterName : list "Draft,Denied,Pending,Scheduled,Approved,Expired") {
				MenuItem.viewVisible(menuItem = ${filterName});
			}
		}
	}

	@description = "This is a test for LPS-191927. The versions of web content are shown on the Versions tab of info panel."
	@priority = 3
	test ViewVersionsOfWebContentOnVersionsTabOfInfoPanel {
		task ("Given a site administrator has a web content with versions") {
			var structuredContentId = HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title Version 1");

			for (var i : list "2,3") {
				var data = "\"title\": \"Web Content Title Version ${i}\"";

				var data = StringUtil.add(${data}, ",\"contentFields\": [{\"contentFieldValue\": {\"data\": \"<p>Web Content Content Version ${i}</p>\"},\"name\": \"content\"}]", "");

				HeadlessWebcontent.patchStructuredContent(
					data = ${data},
					structuredContentId = ${structuredContentId});
			}
		}

		task ("When the site administrator navigates to the Versions tab of info panel of web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LexiconList.checkListCheckbox(listEntry = "Web Content Title Version 3");

			ManagementBar.clickInfo();

			Navigator.gotoNavTab(navTab = "Versions");
		}

		task ("Then the site administrator could see versions of web content") {
			AssertVisible(
				key_listEntry = "Version 1.2",
				locator1 = "Sidebar#LIST_ENTRY");

			AssertVisible(
				key_listEntry = "Version 1.1",
				locator1 = "Sidebar#LIST_ENTRY");

			AssertVisible(
				key_listEntry = "Version 1.0",
				locator1 = "Sidebar#LIST_ENTRY");
		}
	}

	@description = "This is a test for LPS-197978. Check the web-content-icon on the web content in table, list and card views."
	@priority = 3
	test ViewWebContentIconInWebContentAdmin {
		task ("Given a site administrator has a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("When the site administrator accesses to the Web Content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		task ("Then the site administrator could see web content icon on web content") {
			AssertVisible(
				key_listEntry = "Web Content Title",
				key_text = "web-content",
				locator1 = "LexiconList#ANY_ICON");

			LexiconEntry.changeDisplayStyle(displayStyle = "cards");

			LexiconCard.viewCardSticker(
				card = "Web Content Title",
				icon = "web-content");

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			AssertVisible(
				key_tableEntry = "Web Content Title",
				key_text = "web-content",
				locator1 = "LexiconTable#TABLE_ENTRY_ICON");
		}
	}

	@description = "This is a test for LPS-196819. The site administrator could see all web contents with specific structure on that structure sheet."
	@priority = 4
	test ViewWebContentsInHighlightedStructureSheet {
		task ("Given a site administrator has a folder and web contents") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(fieldName = "Text");

			WebContentStructures.saveCP();

			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "LXC",
				webContentTitle = "LXC");

			PortletEntry.publish();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "Commerce",
				webContentTitle = "Commerce");

			PortletEntry.publish();

			WebContent.moveToFolderCP(
				folderName = "WC Folder Name",
				webContentTitle = "Commerce");
		}

		task ("When the site administrator navigates to the highlighted structure sheet") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");

			WebContentAdmin.selectHighlightedStructures(structureNameList = "WC Structure Name");

			PortletEntry.save();

			Navigator.gotoBack();

			MenuBar.click(menuBar = "WC Structure Name");
		}

		task ("Then the site administrator could see web contents with the highlighted structure") {
			for (var title : list "LXC,Commerce") {
				WebContentAdmin.viewEntryTitle(entry = ${title});
			}

			WebContentAdmin.viewEntryNotPresent(entry = "WC Folder Name");
		}
	}

	@description = "This is a test for LPS-196839. When selecting "Search in" "Title Only", then the search should only affect to the text in the “title” field."
	@priority = 5
	test ViewWebContentWhenSearchingWithTitleOnlyAndEverywhereOptions {
		task ("Given 2 web contents and a folder with a web content") {
			JSONWebcontent.addWebContent(
				content = "Liferay DXP",
				groupName = "Test Site Name",
				title = "Over The Years");

			JSONWebcontent.addWebContent(
				content = "Liferay DXP",
				groupName = "Test Site Name",
				title = "Over The Earth");

			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "After many years I understood",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("When go to the folder and search for 'years' and select the "Title Only" option") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			Search.searchCP(searchTerm = "years");

			Click(
				buttonId = "JournalPortlet_searchIn",
				locator1 = "Button#BUTTON_ID");

			MenuItem.click(menuItem = "Title Only");
		}

		task ("Then check that only web content with title "Over The Years" appears") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No web content was found.");

			Click(
				buttonId = "JournalPortlet_searchLocation",
				locator1 = "Button#BUTTON_ID");

			MenuItem.click(menuItem = "Everywhere");

			WebContentAdmin.viewEntryTitle(entry = "Over The Years");

			WebContentAdmin.viewEntryNotPresent(entry = "Web Content Title");
		}
	}

}