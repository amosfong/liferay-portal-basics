@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8147 | Test Summary: Anonymous individuals are not counted towards usage"
	@priority = 5
	test AnonymousIndividualsDoNotCountAsIndividualsForUsage {
		ACUtils.addSiteAndPage();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = ${propertyName});

		ACNavigation.goToSettings();

		ACSettings.goToUsage();

		var currentIndividuals = ACSettings.getCurrentNumber(
			metricName = "KNOWN INDIVIDUALS",
			planLimit = "110,000");

		ACUtils.launchDXP();

		User.logoutPG();

		ACUtils.navigateToSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessions();

		ACUtils.launchAC();

		ACNavigation.goToSettings();

		ACSettings.goToUsage();

		ACSettings.assertOverviewUsage(
			current = ${currentIndividuals},
			metricName = "KNOWN INDIVIDUALS",
			planLimit = "110,000");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9183 | Test Summary: Check current plan details"
	@priority = 3
	test CheckCurrentPlanDetails {
		task ("Sign in AC") {
			ACUtils.launchAC();
		}

		task ("Navigate to Workspace Settings") {
			ACNavigation.goToSettings();

			ACSettings.goToWorkspace();
		}

		task ("Navigate to the Usage") {
			ACSettings.goToUsage();
		}

		task ("View the current plan card is expanded") {
			ACSettings.viewCurrentPlan(planName = "Enterprise");

			ACSettings.assertPlanDetails(
				individualsLimit = "100,000",
				pageViewsLimit = "60,000,000",
				planName = "Enterprise",
				usersLimit = "Unlimited");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9180 | Test Summary: Individuals and PageViews limits corresponds correctly with the plan and add-ons purchased."
	@priority = 3
	test IndividualsAndPageViewsCardShowCurrentPlanLimitAndAddOnInfo {
		task ("Sign in AC") {
			ACUtils.launchAC();
		}

		task ("Navigate to Workspace Settings") {
			ACNavigation.goToSettings();

			ACSettings.goToWorkspace();
		}

		task ("Navigate to the Usage") {
			ACSettings.goToUsage();
		}

		task ("View the individuals limit of current plan") {
			ACSettings.viewCurrentPlan(planName = "Enterprise");

			ACSettings.assertPlanDetails(
				individualsLimit = "100,000",
				pageViewsLimit = "60,000,000",
				planName = "Enterprise");
		}

		task ("View the individuals and pageViews add-ons") {
			ACSettings.assertAddonsDetails(
				individualsAddons = "10,000",
				pageViewsAddons = "15,000,000");
		}

		task ("View the individuals limit of current plan and purchased add-ons on Individuals card") {
			ACSettings.assertCurrentPlanLimitAndAddOn(
				individualsLimit = "110,000",
				pageViewsLimit = "75,000,000");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8148 | Test Summary: Individuals usage update in real time"
	@priority = 5
	test IndividualsUpdatesInRealTime {
		property portal.acceptance = "false";

		var usernameList = "user1,user2,user3";

		task ("Add a new site and widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}

		task ("Go to settings and get the individuals number") {
			ACNavigation.goToSettings();

			ACSettings.goToUsage();

			var currentIndividuals = ACSettings.getCurrentNumber(
				metricName = "KNOWN INDIVIDUALS",
				planLimit = "110,000");
		}

		task ("Add 3 new users and sync the Contact Data") {
			ACUtils.launchDXP();

			for (var name : list ${usernameList}) {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = ${name},
					userLastName = ${name},
					userScreenName = ${name});

				ACDXPSettings.syncNewContactData();
			}
		}

		task ("View the page as different users") {
			for (var name : list ${usernameList}) {
				ACUtils.navigateToSitePageWithUser(
					emailList = "${name}@liferay.com",
					pageName = "AC Page",
					siteName = "Site Name");
			}

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC and check that the number of individuals has changed") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToUsage();

			ACSettings.assertOverviewUsage(
				current = ${currentIndividuals},
				metricName = "KNOWN INDIVIDUALS",
				planLimit = "110,000");
		}
	}

}