@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "App Management";

	setUp {
		User.firstLoginUI();
	}

	tearDown {
		PagesAdmin.tearDownCP();
	}

	@description = "This test asserts that apps in App Management do not display in non default instances"
	@priority = 3
	test AppManagementAppsAreNotInDefaultInstances {
		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.firstLoginUI(
			password = PropsUtil.get("default.admin.password"),
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		for (var portlet : list "App Manager,License Manager") {
			Portlet.viewNoPortletsPresentCP(
				category = "System",
				panel = "Control Panel",
				portlet = ${portlet});
		}

		for (var portlet : list "Purchased,Store") {
			Portlet.viewNoPortletsPresentCP(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = ${portlet});
		}
	}

	@priority = 3
	test AppManagerFilterAndOrder {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AssertTextEquals.assertPartialText(
			key_rowEntry = "Independent",
			locator1 = "ContentRow#ENTRY_CONTENT_PARTIAL_TEXt",
			value1 = "Independent");

		ManagementBar.setFilterAndOrder(filterBy = "Installed");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No apps were found.");

		Click.clickNoMouseOver(locator1 = "ManagementBar#ORDER_ICON_GENERIC");

		ManagementBar.setFilterAndOrder(filterBy = "Active");

		AssertTextEquals.assertPartialText(
			key_rowEntry = "Independent",
			locator1 = "ContentRow#ENTRY_CONTENT_PARTIAL_TEXt",
			value1 = "Independent");

		Click.clickNoMouseOver(locator1 = "ManagementBar#ORDER_ICON_GENERIC");
	}

	@priority = 3
	test AppManagerLocalization {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		PortalSettings.gotoConfiguration(
			configurationCategory = "Localization",
			configurationName = "Language",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureCurrentLanguagesCP(
			currentPortalLanguages = "Spanish (Spain)",
			defaultPortalLanguage = "Spanish (Spain)");

		ApplicationsMenu.gotoPortlet(
			category = "Sistema",
			panel = "Panel de control",
			portlet = "Gestor de aplicaciones");

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Gestor de aplicaciones");
	}

	@description = "This is a test for LPS-102506."
	@ignore = "true"
	@priority = 3
	test AppsCanBeActivatedAfterUninstalling {

		// TODO LPS-102506 Unable to activate an app (lpkg) after uninstalling it via the app manager, waiting for fix

	}

	@priority = 3
	test AppShouldNotBeNestedWithinItself {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AppManager.openAppManagerAdmin();

		var key_appName = "Independent Modules";

		AssertClick(
			key_text = ${key_appName},
			locator1 = "Link#ANY",
			value1 = ${key_appName});

		AssertElementNotPresent(locator1 = "AppManager#APP_NAME");
	}

	@description = "This ensures that the Adaptive Media app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateAdaptiveMedia {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Adaptive Media";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Adaptive Media",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Adaptive Media");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Adaptive Media",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Adaptive Media");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Adaptive Media",
			appStatus = "Active");
	}

	@description = "This ensures that the Asset Libraries app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateAssetLibraries {
		property portal.acceptance = "quarantine";
		property portal.release = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Depot";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Liferay Depot Web",
			appStatus = "Active",
			searchTerm = "com.liferay.depot.web");

		AppManager.deactivateApp(appName = "com.liferay.depot.web");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Liferay Depot Web",
			appStatus = "Resolved",
			searchTerm = "com.liferay.depot.web");

		AppManager.activateApp(appName = "com.liferay.depot.web");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Liferay Depot Web",
			appStatus = "Active",
			searchTerm = "com.liferay.depot.web");
	}

	@description = "This ensures that the Blogs app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateBlogs {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Blogs";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Blogs",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Blogs");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Blogs",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Blogs");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Blogs",
			appStatus = "Active");
	}

	@description = "This ensures that the Comment app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateComment {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Content Page Review";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Comment",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Comment");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Comment",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Comment");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Comment",
			appStatus = "Active");
	}

	@description = "This ensures that the Document Library Opener app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateDocumentLibraryOpener {
		property portal.acceptance = "quarantine";
		property portal.release = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Document Management";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Liferay Document Library Opener Service",
			appStatus = "Active",
			searchTerm = "com.liferay.document.library.opener.service");

		AppManager.deactivateApp(appName = "Liferay Document Library Opener Service");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Liferay Document Library Opener Service",
			appStatus = "Resolved",
			searchTerm = "com.liferay.document.library.opener.service");

		AppManager.activateApp(appName = "Liferay Document Library Opener Service");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Liferay Document Library Opener Service",
			appStatus = "Active",
			searchTerm = "com.liferay.document.library.opener.service");
	}

	@description = "This ensures that the Knowledge Base app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateKnowledgeBase {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Knowledge Base";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Knowledge Base",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Knowledge Base");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Knowledge Base",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Knowledge Base");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Knowledge Base",
			appStatus = "Active");
	}

	@description = "This ensures that the Message Boards app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateMessageBoards {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Message Boards";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Message Boards",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Message Boards");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Message Boards",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Message Boards");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Message Boards",
			appStatus = "Active");
	}

	@description = "This ensures that the Notifications app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateNotifications {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Notifications";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Notifications",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Notifications");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Notifications",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Notifications");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Notifications",
			appStatus = "Active");
	}

	@description = "This ensures that the Questions app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateQuestions {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Questions";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Questions",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Questions");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Questions",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Questions");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Questions",
			appStatus = "Active");
	}

	@description = "This ensures that the Ratings app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateRatings {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Ratings";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Ratings",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Ratings");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Ratings",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Ratings");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Ratings",
			appStatus = "Active");
	}

	@description = "This ensures that the Sharing app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateSharing {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Asset Sharing";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Sharing",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Sharing");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Sharing",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Sharing");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Sharing",
			appStatus = "Active");
	}

	@description = "This ensures that the Translation app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateTranslation {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Translations Management";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Translation",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Translation");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Translation",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Translation");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Translation",
			appStatus = "Active");
	}

	@description = "This ensures that the Wiki app in the app manager can be deactivated and reactivated."
	@priority = 3
	test CanDeactivateAndActivateWiki {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property testray.main.component.name = "Wiki";

		AppManager.openAppManagerAdmin();

		AppManager.viewApp(
			appName = "Wiki",
			appStatus = "Active");

		AppManager.deactivateApp(appName = "Wiki");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Wiki",
			appStatus = "Resolved");

		AppManager.activateApp(appName = "Wiki");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AppManager.viewApp(
			appName = "Wiki",
			appStatus = "Active");
	}

	@description = "This test asserts that user can filter app by Category in marketplace store."
	@ignore = "true"
	@priority = 3
	test CanFilterMarketplaceStoreAppsByCategory {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given user login marketplace") {
			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Store");

			AppManager.loginMarketplaceStore();

			Navigator.openURL();
		}

		task ("When user filter by Category with value Page Layouts") {

			// Navigate the store again for filter Category failure issue

			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Store");

			WaitForPageLoad();

			AppManager.filtersApp(
				filterBy = "   Page Layouts",
				filterName = "Category");
		}

		task ("Then the results filtered by Page Layouts display properly") {
			AssertElementPresent(
				key_appCategory = "Page Layouts",
				locator1 = "AppManager#APP_CATEGORY");

			AssertElementNotPresent(
				key_appCategory = "Themes / Site Templates",
				locator1 = "AppManager#APP_CATEGORY");
		}
	}

	@description = "This test asserts that user can filter app by liferay version in marketplace store."
	@ignore = "true"
	@priority = 3
	test CanFilterMarketplaceStoreAppsByLiferayVersion {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given user login marketplace") {
			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Store");

			AppManager.loginMarketplaceStore();

			Navigator.openURL();
		}

		task ("When user filter by Liferay Version with value Liferay Portal 6.1 CE GA3") {

			// Navigate the store again for filter Liferay Version failure issue

			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Store");

			WaitForPageLoad();

			AppManager.filtersApp(
				filterBy = "Liferay Portal 6.1 CE GA3",
				filterName = "Liferay Version");
		}

		task ("Then the results filtered by Liferay Version display properly") {
			AssertElementPresent(
				key_appVersion = "Liferay Portal 6.1 CE GA3",
				locator1 = "AppManager#APP_FILTER_RESULT_LABEL");

			AssertElementNotPresent(
				key_searchName = "EE Only",
				locator1 = "AppManager#APP_TITLE_TYPE");
		}
	}

	@description = "This test asserts that user can filter app by Price in marketplace store."
	@ignore = "true"
	@priority = 3
	test CanFilterMarketplaceStoreAppsByPrice {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given user login marketplace") {
			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Store");

			AppManager.loginMarketplaceStore();

			Navigator.openURL();
		}

		task ("When user filter by Price with value Free") {

			// Navigate the store again for filter price failure issue

			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Store");

			WaitForPageLoad();

			AppManager.filtersApp(
				filterBy = "Free",
				filterName = "Price");
		}

		task ("Then the results filtered by Free display properly") {
			AssertElementPresent(
				key_searchName = "Free",
				locator1 = "AppManager#APP_TITLE_TYPE");

			AssertElementNotPresent(
				key_searchName = "EE Only",
				locator1 = "AppManager#APP_TITLE_TYPE");
		}
	}

	@priority = 3
	test InstallViaUploadIsSuccessful {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AppManager.openAppManagerAdmin();

		var appName = "test-app-portlet";

		AppManager.uploadApp(
			appName = ${appName},
			warFileName = "${appName}-7.2.0.war");

		AppManager.viewApp(
			appName = ${appName},
			appStatus = "Active");
	}

	@description = "This test attempts to install an app by uploading a file that is invalid. Error message is asserted."
	@priority = 3
	test InvalidFileShouldNotBeUploaded {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AppManager.openAppManagerAdmin();

		var key_appName = "title.zip";

		Click(locator1 = "Portlet#OPTIONS_ICON");

		MenuItem.click(menuItem = "Upload");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(locator1 = "TextInput#FILE");

		UploadDependencyFile.uploadArchiveFile(fileName = "title.zip");

		Button.clickInstall();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "Error:Please upload a file with a valid extension (JAR, LPKG, or WAR File).");
	}

	@description = "This test check search apps in marketplace store and check sign in and sign out."
	@ignore = "true"
	@priority = 3
	test SearchMarketplaceStore {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given user login marketplace store assert user login in Purchased page") {
			Navigator.openStoreURL();

			AppManager.loginMarketplaceStore();

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Purchased");

			AssertElementPresent(
				locator1 = "UserBar#USER_SIGN_OUT",
				value1 = "Sign Out");
		}

		task ("When go to marketplace store and search apps and purchase") {
			Navigator.openStoreURL();

			WaitForPageLoad();

			AppManager.searchApp(searchName = "No Robots");
		}

		task ("Then assert logout from marketplace store page also logout in Purchase page") {
			Navigator.openURL();

			Navigator.openStoreURL();

			ScrollBy(value1 = "0, 2000");

			AssertClick(
				locator1 = "UserBar#USER_SIGN_OUT",
				value1 = "Sign Out");

			AppManager.viewLogoutMarketplace();

			ApplicationsMenu.gotoPortlet(
				category = "Marketplace",
				panel = "Control Panel",
				portlet = "Purchased");

			AppManager.viewLogoutMarketplace();
		}
	}

	@priority = 3
	test UninstallAppIsSuccessful {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var appName = "test-app-portlet";

		AppManager.openAppManagerAdmin();

		AppManager.uploadApp(
			appName = ${appName},
			warFileName = "${appName}-7.2.0.war");

		AppManager.viewApp(
			appName = ${appName},
			appStatus = "Active");

		AppManager.uninstallApp(appName = ${appName});

		WaitForConsoleTextPresent(value1 = "STOPPED ${appName}");

		Search.searchCP(searchTerm = ${appName});

		AssertElementNotPresent(
			key_appName = ${appName},
			locator1 = "AppManager#APP_NAME");
	}

	@description = "This is a use case for LPS-99031."
	@priority = 3
	test ViewLicenseManager {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "Marketplace",
			panel = "Control Panel",
			portlet = "License Manager");

		LicenseManager.viewDefaultCP(tableTexts = "Server Info,Host Name,IP Addresses,Licenses Registered,Owner,Start Date");

		AssertElementNotPresent(locator1 = "Portlet#HEADER_DUPLICATE");
	}

	@description = "This test view purchased apps in marketplace purchased page."
	@ignore = "true"
	@priority = 3
	test ViewPurchasedApp {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given login marketplace store") {
			Navigator.openStoreURL();

			AppManager.loginMarketplaceStore();
		}

		task ("When purchase the Control Panel Documentation app in marketplace store") {
			Navigator.openStoreURL();

			WaitForPageLoad();

			AppManager.searchApp(searchName = "Control Panel Documentation");

			WaitForSPARefresh();

			AppManager.purchaseApp(
				searchName = "Control Panel Documentation",
				type = "Free");
		}

		task ("Then view the Control Panel Documentation app displays in Purchased portlet") {
			WaitForElementPresent(
				key_text = "See Purchased",
				locator1 = "Button#ANY");

			Click(
				key_text = "See Purchased",
				locator1 = "Button#ANY");

			WaitForPageLoad();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MARKETPLACE_PURCHASED_PORTLET_IFRAME");

			AssertElementPresent(
				key_searchName = "Control Panel Documentation",
				locator1 = "AppManager#APP_TITLE_TYPE");
		}
	}

}