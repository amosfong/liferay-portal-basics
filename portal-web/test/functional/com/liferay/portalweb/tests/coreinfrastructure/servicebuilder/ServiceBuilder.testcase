@component-name = "portal-core-infra"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Service Builder";

	setUp {
		TestCase.setUpPortalInstance();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test CanChangeBundleSymbolicNameForDSModule {
		property ci.retries.disabled = "true";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AntCommands.runCommand("build-test.xml", "update-service-builder-spring-sample-to-ds");

		var projectDir = PropsUtil.get("project.dir");

		File.regexReplace(
			content = "test.service",
			fileName = "${projectDir}/modules/util/portal-tools-service-builder-spring-sample-service/bnd.bnd",
			regex = "com.liferay.portal.tools.service.builder.spring.sample.service");

		AntCommands.runCommand("build-test.xml", "build-service -Dgradle.file.path=/modules/util/portal-tools-service-builder-spring-sample-service");

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=/modules/util/portal-tools-service-builder-spring-sample-api");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=/modules/util/portal-tools-service-builder-spring-sample-service");

		WaitForConsoleTextPresent(value1 = "STARTED test.service_");
	}

	@priority = 4
	test ExternalDataSourceSmoke {
		property ci.retries.disabled = "true";
		property databases.size = "1";
		property external.database.enabled = "true";
		property portal.upstream = "quarantine";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var liferayHome = PropsUtil.get("liferay.home.dir.name");
		var projectDir = PropsUtil.get("project.dir");
		var testServiceDir = "/modules/test/external-data-source-test-service";

		FileUtil.copyDirectory("${projectDir}/modules/test/external-data-source-test-controller-test/src/testIntegration/resources/META-INF/services", "${projectDir}/${testServiceDir}/src/main/resources/META-INF/services");

		var serviceFileExists = FileUtil.exists("${projectDir}/${testServiceDir}/src/main/resources/META-INF/services/com.liferay.portal.kernel.dao.jdbc.DataSourceProvider");

		if (${serviceFileExists} == "false") {
			fail("FAIL! The service file is not correctly copied.");
		}

		AntCommands.runCommand("build-test.xml", "build-service -Dgradle.file.path=${testServiceDir}");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=/modules/test/external-data-source-test-api");

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.external.data.source.test.api_");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=${testServiceDir}");

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.external.data.source.test.service_");

		SQL.assertTextNotInMySQLStatementResult(
			mysqlStatement = "SHOW tables in lportal",
			text = "TestEntity");

		SQL.assertTextInMySQLStatementResult(
			mysqlStatement = "SHOW tables in lportal1",
			text = "TestEntity");

		SignIn.signInTestSetup();

		Smoke.viewWelcomeContentPage();

		Smoke.runSmoke();
	}

	@priority = 4
	test RenameFinderColumn {
		property database.bare.enabled = "true";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AntCommands.runCommand("build-test.xml", "rename-finder-column");

		AntCommands.runCommand("build-test.xml", "build-service -Dgradle.file.path=/modules/util/portal-tools-service-builder-test-service");

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=/modules/util/portal-tools-service-builder-test-api");

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.portal.tools.service.builder.test.api_");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=/modules/util/portal-tools-service-builder-test-service");

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.portal.tools.service.builder.test.service_");
	}

}