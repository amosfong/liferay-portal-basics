@component-name = "portal-security"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Security";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PortalSettings.tearDownAuthenticationCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-197701. TC-4: Verify that the list consists of the Site type ID when visiting Asset Libraries control panel page."
	@priority = 3
	test AssertAssetLibrariesControlPanelResponseHeaderIncludesSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add an Asset Library") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "Test Depot Name");
		}

		task ("When: Get the Asset Libraries control panel page header info") {
			var depotId = JSONGroupAPI._getDepotIdByName(depotName = "Test Depot Name");

			var curl = '''http://localhost:8080/group/asset-library-${depotId}/~/control_panel/manage?SM_USER=test@liferay.com -I''';

			var response = JSONCurlUtil.post(${curl});
		}

		task ("Then: Verify that 5t and 4x show in the response header") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Test Depot Name",
				site = "false");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "X-Liferay-Request-Group: ${groupId} 5t 4x");
		}
	}

	@description = "This is a use case for LPS-197701. TC-5: Verify that the list consists of the Site type ID when visiting Global control panel page."
	@priority = 3
	test AssertGlobalControlPanelResponseHeaderIncludesSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When: Get the Global control panel header info") {
			var curl = '''http://localhost:8080/group/global/~/control_panel/manage?SM_USER=test@liferay.com -I''';

			var response = JSONCurlUtil.post(${curl});
		}

		task ("Then: Verify that 0t, 1x, 4x, and s show in the response header.") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Global",
				site = "true");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "X-Liferay-Request-Group: ${groupId} 0t 1x 4x s");
		}
	}

	@description = "This is a use case for LPS-197701. TC-3: Verify that the list consists of the Site type ID when visiting organization site."
	@priority = 3
	test AssertOrganizationSiteResponseHeaderIncludesSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add an organization and an organization site with a public page") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			Organization.openOrganizationsAdmin();

			Organization.addSiteCP(orgName = "Organization Name");

			PagesAdmin.openPagesAdmin(siteURLKey = "Organization Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.addPage(pageName = "Public Page");
		}

		task ("When: Get the organization site page header info") {
			var curl = '''http://localhost:8080/web/organization-name?SM_USER=test@liferay.com -I''';

			var response = JSONCurlUtil.post(${curl});
		}

		task ("Then: Verify that 3t, 9x, and s show in the response header") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Organization Name",
				site = "true");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "X-Liferay-Request-Group: ${groupId} 3t 9x s");
		}
	}

	@description = "This is a use case for LPS-197701. TC-8: Verify that the list consists of the Site type ID when visiting page template page."
	@priority = 3
	test AssertPageTemplatePageResponseHeaderIncludesSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Create a page template and add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Guest",
				layoutPageTemplateCollectionName = "Test Page Template Set");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Guest",
				layoutPageTemplateCollectionName = "Test Page Template Set",
				layoutPageTemplateEntryName = "Test Widget Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("When: Get the page template page header info") {
			var layoutPrototypeId = JSONLayoutpagetemplate.getLayoutPrototypeId(
				groupName = "Guest",
				layoutPageTemplateEntryName = "Test Widget Page Template Name",
				layoutPageTemplateType = "Widget Page Template");

			var curl = '''http://localhost:8080/group/template-${layoutPrototypeId}?SM_USER=test@liferay.com -I''';

			var response = JSONCurlUtil.post(${curl});
		}

		task ("Then: Verify that 0t and 8x show in the response header.") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Test Widget Page Template Name",
				site = "false");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "X-Liferay-Request-Group: ${groupId} 0t 8x");
		}
	}

	@description = "This is a use case for LPS-197701. TC-6: Verify that the list consists of the Site type ID when visiting Profile page and Dashboard page which are inherited from User Group."
	@priority = 3
	test AssertProfileAndDashboardPagesResponseHeadersIncludeSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Create a user group with a public page and add user to user group") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "UG UserGroup Name Description",
				userGroupName = "UG UserGroup Name");

			JSONUserGroup.addLayout(
				layoutName = "UG Public Page",
				userGroupName = "UG UserGroup Name");

			JSONUser.addUserToUserGroup(
				userEmailAddress = "test@liferay.com",
				userGroupName = "UG UserGroup Name");
		}

		task ("When: Get the My profile and My Dashboard pages header info") {
			var userGroupId = JSONUserGroupAPI._getUserGroupIdByName(userGroupName = "UG UserGroup Name");
			var dashboardCurl = '''http://localhost:8080/user/test/home?SM_USER=test@liferay.com -I''';

			var dashboardResponse = JSONCurlUtil.post(${dashboardCurl});
			var profileCurl = '''http://localhost:8080/web/test/~/${userGroupId}/ug-public-page?SM_USER=test@liferay.com -I''';

			var profileResponse = JSONCurlUtil.post(${profileCurl});
		}

		task ("Then: Verify that 0t, 10x and 6x show in the response header.") {
			var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = "test@liferay.com");

			var groupId = JSONGroupAPI._getGroupIdByGroupKey(
				groupKey = ${userId},
				site = "false");

			TestUtils.assertPartialEquals(
				actual = ${profileResponse},
				expected = "X-Liferay-Request-Group: ${groupId} 0t 10x 6x");
		}

		task ("And: Verify that 0t and 5x show in the response header.") {
			TestUtils.assertPartialEquals(
				actual = ${dashboardResponse},
				expected = "X-Liferay-Request-Group: ${groupId} 0t 5x");
		}
	}

	@description = "This is a use case for LPS-197701. TC-2: Verify that the list consists of the Site type ID when visiting restricted child site."
	@priority = 3
	test AssertRestrictedChildSiteResponseHeaderIncludesSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add a site and a restricted child site with a public page") {
			HeadlessSite.addSite(siteName = "Site Name");

			HeadlessSite.addSite(
				membershipType = "Restricted",
				parentSiteName = "Site Name",
				siteName = "Child Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Child Site Name",
				layoutName = "Test Page",
				parentGroupName = "Site Name");
		}

		task ("When: Get the child site page header info") {
			var curl = '''http://localhost:8080/web/child-site-name?SM_USER=test@liferay.com -I''';

			var response = JSONCurlUtil.post(${curl});
		}

		task ("Then: Verify that 2t, 2x, and s show in the response header") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Child Site Name",
				parentGroupName = "Site Name",
				site = "true");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "X-Liferay-Request-Group: ${groupId} 2t 2x s");
		}
	}

	@description = "This is a use case for LPS-197701. TC-7: Verify that the list consists of the Site type ID when visiting site template page."
	@priority = 3
	test AssertSiteTemplatePageResponseHeaderIncludesSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Create a site template") {
			SiteTemplates.addCP(siteTemplateName = "Site Template Name");
		}

		task ("When: Get the site template page header info") {
			var siteTemplateId = JSONSiteTemplate.getSiteTemplateIdByName(siteTemplateName = "Site Template Name");

			var curl = '''http://localhost:8080/group/${siteTemplateId}?SM_USER=test@liferay.com -I''';

			var response = JSONCurlUtil.post(${curl});
		}

		task ("Then: Verify that 0t and 7x show in the response header.") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Site Template Name",
				site = "false");

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "X-Liferay-Request-Group: ${groupId} 0t 7x");
		}
	}

	@description = "This is a use case for LPS-197701. TC-1: Verify that the list consists of the Site type ID when visiting staging site and live site."
	@priority = 3
	test AssertStagingAndLiveSiteResponseHeadersIncludeSiteTypeID {
		property custom.properties = "service.pre.action.track.theme.display=true";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.sso.token.configuration.TokenConfiguration.config";
		property osgi.module.configurations = "enabled=\"true\"${line.separator}tokenLocation=\"REQUEST\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add a site with a public page and enable local staging") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page");

			JSONStaging.enableLocalStaging(groupName = "Site Name");
		}

		task ("When: Get the staging and live sites page header info") {
			var curl = '''http://localhost:8080/web/site-name-staging?SM_USER=test@liferay.com -I''';

			var stagingSiteResponse = JSONCurlUtil.post(${curl});
			var curl = '''http://localhost:8080/web/site-name?SM_USER=test@liferay.com -I''';

			var liveSiteResponse = JSONCurlUtil.post(${curl});
		}

		task ("Then: Verify that 1t and 3x show in the response header of staging site page") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Site Name (Staging)",
				site = "false");

			TestUtils.assertPartialEquals(
				actual = ${stagingSiteResponse},
				expected = "X-Liferay-Request-Group: ${groupId} 1t 3x");
		}

		task ("And: Verify that 1t, 3x, and s show in the response header of live site page") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Site Name",
				site = "true");

			TestUtils.assertPartialEquals(
				actual = ${liveSiteResponse},
				expected = "X-Liferay-Request-Group: ${groupId} 1t 3x s");
		}
	}

	@description = "This is a use case for LPS-107017. Create user via JSONWSAPUI."
	@priority = 5
	test CreateUserViaJSONWSAPIUI {
		var portalURL = PropsUtil.get("portal.url");
		var userfn = "testfUI";
		var userln = "testlUI";
		var key_userScreenName = "testui";

		task ("Add user via JSONWSUI") {
			Navigator.openSpecificURL(url = "${portalURL}/api/jsonws?contextName=&signature=/user/add-user-31-long-boolean-java.lang.String-java.lang.String-boolean-java.lang.String-java.lang.String-long-java.lang.String-java.util.Locale-java.lang.String-java.lang.String-java.lang.String-long-long-boolean-int-int-int-java.lang.String-%5BJ-%5BJ-%5BJ-%5BJ-java.util.List-java.util.List-java.util.List-java.util.List-java.util.List-boolean-com.liferay.portal.kernel.service.ServiceContext");

			JSONUser.addUserByJSONWSUI(
				userFirstName = ${userfn},
				userLastName = ${userln});
		}

		task ("Assert message present in HTML source") {
			while (IsElementPresent(locator1 = "JSONWS#SECURITY_RESULT", value1 = "Welcome ${userfn} ${userln}!")) {
				Pause(value1 = 500);
			}
		}

		task ("Assert user created in users page") {
			User.openUsersAdmin();

			User.viewUserTableName(
				key_userScreenName = ${key_userScreenName},
				userfn = ${userfn},
				userln = ${userln});
		}
	}

	@description = "This is a use case for LPS-83566. Escape url redirect with groovy script."
	@priority = 5
	test EscapeUrlRedirectWithGroovyScript {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Escape url redirect with groovy script") {
			ServerAdministration.openServerAdmin();

			ServerAdministration.executeScript(
				language = "Groovy",
				script = '''
import com.liferay.portal.kernel.util.PortalUtil;

out.println(PortalUtil.escapeRedirect("/"));
''');
		}

		task ("Assert / as output") {
			ServerAdministration.viewOutputField(valueName = "/");
		}
	}

	@description = "This is a use case for LPS-87768. No permission from unauthorized url as power user."
	@priority = 5
	test NoPermissionFromUnauthorizedURLAsPowerUser {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Assign power user to new user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Edit user password") {
			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Logout and login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Go to my profile") {
			UserBar.gotoDropdownItem(dropdownItem = "My Profile");
		}

		task ("Assert no permission for unauthorized url") {
			WaitForSPARefresh();

			var authToken = Page.getAuthTokenFromHtmlSource();
			var plid = Page.getPlidFromHtmlSource();
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = '''${portalURL}/c/portal/update_layout?cmd=add&p_p_col_id=column-1&p_p_col_pos=0&p_p_id=com_liferay_marketplace_store_web_portlet_MarketplacePurchasedPortlet&p_auth=${authToken}&p_l_id=${plid}''');

			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "My Profile");

			Portlet.viewPortletBodyNotPresent(portletName = "Purchased");
		}
	}

	@description = "This is a use case for LPS-80905. User can access permissions window with permission from admin."
	@priority = 5
	test UserCanAccessPermissionsWindowWithPermissionFromAdmin {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var portalURL = PropsUtil.get("portal.url");

		task ("Define user permissions view control panel menu") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = 90,
				roleTitle = "User");
		}

		task ("Define user permissions") {
			for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = ${resourceActionIndex},
					resourceName = "com_liferay_site_admin_web_portlet_SiteAdminPortlet",
					roleTitle = "User");
			}
		}

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Edit user password") {
			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add calendar") {
			UserBar.gotoDropdownItem(dropdownItem = "My Profile");

			Portlet.addPG(portletName = "Calendar");
		}

		task ("Configure calendar permissions") {
			PermissionsInline.gotoConfigurationPG(portletName = "Calendar");

			Role.definePermissionPG(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_PERMISSIONS_CHECKBOX",
				roleTitle = "User");

			AssertClick(
				locator1 = "Button#SAVE",
				value1 = "Save");
		}

		task ("Logout, login and go to calendar") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.openSpecificURL(url = "${portalURL}/web/test");

			PermissionsInline.gotoConfigurationPG(portletName = "Calendar");
		}
	}

	@description = "This is a use case for LPS-68070. Validate cannot overwrite OSGi service identifier."
	@priority = 5
	test ValidateCannotOverwriteOSGiServiceIdentifier {
		property portal.acceptance = "true";

		var portalURL = JSONCompany.getPortalURL();

		var url = "${portalURL}/c/portal/json_service?serviceClassName=com.liferay.portal.kernel.service.AccountServiceUtil&serviceMethodName=getOSGiServiceIdentifier&p_auth=";

		task ("Assert JSONWS empty page") {
			Api.gotoPAuthURL(url = ${url});

			ServerAdministration.viewJSONWSSecurityEmptyPage();
		}
	}

	@description = "This is a use case for LPS-49848."
	@priority = 5
	test ValidateCannotStealAdminAccount {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var pAuth = Api.getPAuth();
		var portalURL = PropsUtil.get("portal.url");

		task ("Add new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Edit user password") {
			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Logout, login and assert forbiden error message when trying to access admin account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.openSpecificURL(url = "${portalURL}/api/jsonws/group/get-group/group-id/20126?p_auth=${pAuth}");

			ServerAdministration.viewForbiddenErrorMessageAlert();
		}
	}

	@description = "This is a use case for LRQA-14382. Validate forward url PG."
	@priority = 5
	test ValidateForwardURLPG {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,${ip.address}";
		property portal.acceptance = "true";

		task ("Go to home page") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/html/common/forward_jsp.jsp?FORWARD_URL=http://www.msn.com");

			Portlet.waitForHomePage(pageName = "Home");
		}

		task ("View welcome content page") {
			Smoke.viewWelcomeContentPage();
		}

		task ("Add public page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test");
		}

		task ("Assert test present in home page") {
			Navigator.openSpecificURL(url = '''${portalURL}/html/common/forward_jsp.jsp?FORWARD_URL=${portalURL}/web/guest/test''');

			Portlet.waitForHomePage(pageName = "Test");
		}
	}

	@description = "This is a use case for LPS-57776. Validate no LAR remote code execution."
	@priority = 5
	test ValidateNoLARRemoteCodeExecution {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Assert remote-code-execution.lar dependency is forbidden") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			LAR.importPortlet(
				failureExpected = "true",
				larFileName = "blogs-remote-code-execution.lar",
				portletName = "Blogs",
				uploadFrom = "dependencies");

			AssertConsoleTextPresent(value1 = "com.thoughtworks.xstream.security.ForbiddenClassException");

			AssertConsoleTextNotPresent(value1 = "Remote_Code_Execution_vulnerability_is_present");
		}
	}

	@description = "This is a use case for LPS-85112. Validate view permission cannot update other users password."
	@priority = 5
	test ValidateViewPermissionCanNotUpdateOtherUsersPassword {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Define user permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.User",
				roleTitle = "User");
		}

		task ("Add new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Edit user password") {
			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Logout and login") {
			User.logoutPG();

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert cannot view other organizations info message") {
			UserBar.openUserOrganizations();

			Alert.viewInfoMessageSpecific(infoMessage = "You do not belong to an organization and are not allowed to view other organizations.");
		}
	}

	@description = "This is a use case for LPS-55622. View no invoked portlet via URL."
	@priority = 5
	test ViewNoInvokedPortletViaURL {
		property portal.acceptance = "true";

		task ("Add public layout") {
			JSONLayout.addPublicLayout(
				friendlyURL = "/test-widget-page",
				groupName = "Guest",
				layoutName = "Test Widget Page");
		}

		task ("Configure page") {
			PagesAdmin.configurePage(
				columnName = "1 Column",
				pageName = "Test Widget Page",
				sitePageType = "Widget Page");
		}

		task ("Add Iframe") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Test Widget Page",
				widgetName = "IFrame");
		}

		task ("Assert test widget page not present") {
			var portalURL = JSONCompany.getPortalURL();

			Navigator.openSpecificURL(url = "${portalURL}/web/guest/test-widget-page/?p_p_id=asdf&p_p_lifecycle=0&p_p_state=maximized&_asdf_mvcPath=/html/portlet/portal_settings/edit_company.jsp");

			Portlet.viewPortletCouldNotBeFoundInfo();
		}

		task ("Delete test widget page") {
			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Test Widget Page");
		}
	}

}