@component-name = "portal-search"
definition {

	property custom.properties = "feature.flag.LPD-35013=false";
	property osgi.modules.includes = "wiki";
	property portal.release = "false";
	property portal.suite.search.engine = "solr";
	property portal.upstream = "true";
	property solr.enabled = "true";
	property testray.main.component.name = "Web Search";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		WikiPortlet.enableWiki();

		Navigator.openURL();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-89561."
	@priority = 4
	test AssertSearchURLWhenModifyingPagination {
		property custom.properties = "search.container.page.default.delta=10${line.separator}feature.flag.LPD-35013=true";

		for (var count : list "1,2,3,4,5,6,7,8,9,10,11") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		SearchResults.paginateAndViewSearchResults(
			searchAssetTitle = "WC Title 11",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		Pagination.changePagination(itemsPerPage = 4);

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains(${currentURL}, "delta=4")) || contains(${currentURL}, "start")) {
			fail("URL should preserve delta, but not contain start.");
		}

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains(${currentURL}, "delta=4")) || !(contains(${currentURL}, "start=2"))) {
			fail("URL should preserve delta and add start.");
		}

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains(${currentURL}, "delta=4")) && !(contains(${currentURL}, "start=3"))) {
			fail("URL should preserve delta and modify start.");
		}

		Pagination.changePagination(itemsPerPage = 8);

		// Workaround LPS-98391

		/*var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if ((!(contains("${currentURL}", "delta"))) && (!(contains("${currentURL}", "start")))) {
			fail("Delta and start should be removed from URL.");
		}

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if ((!(contains("${currentURL}", "delta"))) && (contains("${currentURL}", "start=2"))) {
			fail("URL should preserve abscence of delta and start should be added.");
		}

		Click(locator1 = "Pagination#PREVIOUS_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if ((!(contains("${currentURL}", "delta"))) && (contains("${currentURL}", "start=1"))) {
			fail("URL should preserve abscence of delta and modify start.");
		}*/
	}

	@description = "This is a use case for LPS-95670."
	@priority = 4
	test AssertSuggestionsCannotOfferInvalidWordsAsSuggestion {
		property custom.properties = "locales.enabled=de_DE,en_US${line.separator}locales=de_DE,en_US${line.separator}index.search.spell.checker.dictionary[de_DE]=spellchecker/dictionary_de_DE.txt${line.separator}index.search.spell.checker.supported.locales=en_US,es_ES,de_DE${line.separator}feature.flag.LPD-35013=true";
		property index.search.spell.checker.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONWebcontent.addBasicWebContentLocalized(
			contentMap = "en_US:WC Content,de_DE:ächten angreifen anmarschieren",
			groupName = "Guest",
			titleMap = "en_US:WC Title,de_DE:WC Titel");

		SearchPage.openSearchPage();

		SearchPage.addWidgets(searchPortletList = "Suggestions");

		Refresh();

		SearchPage.gotoConfigureSuggestionsOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		FormFields.enableCheckbox(fieldName = "spellCheckSuggestionEnabled");

		PortletEntry.save();

		IFrame.closeFrame();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeReindex(action = "All Spell Check Dictionaries");

		AssertConsoleTextPresent(value1 = "Finished indexing dictionary spellchecker/dictionary_de_DE.txt");

		Navigator.openURL();

		SearchPage.openSearchPage(locale = "de-DE");

		for (var searchTerm : list "ächten,angreifen,anmarschieren") {
			SearchPage.searchEmbedded(searchTerm = ${searchTerm});

			SearchResults.viewSearchResults(
				searchAssetTitle = "WC Titel",
				searchAssetType = "Webcontent, Artikel",
				searchTerm = ${searchTerm});

			AssertElementNotPresent(locator1 = "Search#SEARCH_SUGGESTED_SPELLING");
		}
	}

	@description = "This is a use case for LPS-90078."
	@priority = 4
	test ModifyPaginationPortalProperties {
		property custom.properties = "search.container.page.default.delta=2${line.separator}feature.flag.LPD-35013=true";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		SearchPage.addWidgets(
			layoutName = "Search Page",
			searchPortletList = "Search Results");

		Navigator.gotoPage(pageName = "Search Page");

		Portlet.gotoPortletOptions(
			portletName = "Search Results",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertTextEquals(
			locator1 = "SearchPage#RESULTS_PORTLET_PAGINATION_CONFIG",
			value1 = 2);

		IFrame.closeFrame();

		for (var count : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		WaitForElementPresent(
			key_searchAssetTitle = "WC Title 1",
			locator1 = "SearchPage#RESULT_TITLE");

		Portlet.gotoPortletOptions(
			portletName = "Search Results",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertTextEquals(
			locator1 = "SearchPage#RESULTS_PORTLET_PAGINATION_CONFIG",
			value1 = 2);

		IFrame.closeFrame();

		SearchResults.paginateAndViewSearchResults(
			searchAssetTitle = "WC Title 3",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");
	}

	@description = "This is a use case for LPS-112599."
	@priority = 3
	test NavigateToAssetEditPageViaSearchResults {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPage.searchEmbedded(searchTerm = "WC");

		SearchPage.gotoResultDetails(searchAssetTitle = "WC Title");

		SearchPage.viewResultDetails(searchAssetTitle = "WC Title");

		Click(locator1 = "SearchPage#ASSET_DETAILS_EDIT_BUTTON");

		AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

		SelectFrame.selectFrameNoLoading(
			key_fieldLabel = "Content",
			locator1 = "CKEditor#BODY_FIELD_IFRAME_WEB_CONTENT_ARTICLE");

		AssertTextEquals.assertPartialText(
			locator1 = "CKEditor#BODY",
			value1 = "WC Content");
	}

	@priority = 4
	test NavigateToSearchResultsViaURL {
		JSONBlog.addEntry(
			entryContent = "This is a blog about Potatoes",
			entryTitle = "Potato Blog");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		SearchPage.addWidgets(
			layoutName = "Search Page",
			searchPortletList = "Type Facet,Search Results,Search Bar");

		Navigator.gotoPage(pageName = "Search Page");

		SearchPage.configureSearchBarWidget(
			keywordsParameterName = "keywordparameter",
			scopeParameterName = "scopeparameter");

		SearchPage.configureSearchBarWidget(searchScope = "Let the User Choose");

		SearchPage.chooseWidgetScope(searchScope = "Everything");

		SearchPage.searchWidget(searchTerm = "Potato");

		SearchFacets.checkFacetTerm(
			facetName = "Type Facet",
			facetTerm = "Blogs Entry");

		var portalURL = PropsUtil.get("portal.url");

		AssertLocation(value1 = "${portalURL}/web/guest/search-page?keywordparameter=Potato&scopeparameter=everything&type=com.liferay.blogs.model.BlogsEntry");

		var searchURL = selenium.getCurrentUrl();

		Navigator.openURL();

		Navigator.openSpecificURL(url = ${searchURL});

		AssertTextEquals(
			locator1 = "Search#SEARCH_BAR_WIDGET",
			value1 = "Potato");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Potato Blog",
			searchAssetType = "Blogs Entry");

		FormFields.viewCheckboxChecked(fieldName = "Blogs Entry");
	}

	@description = "This is a use case for LPS-95798."
	@priority = 3
	test SearchAfterViewingResultDetails {
		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Guest",
			title = "First WC");

		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Guest",
			title = "Second WC");

		SearchPage.searchEmbedded(searchTerm = "First");

		SearchPage.gotoResultDetails(searchAssetTitle = "First WC");

		SearchPage.viewResultDetails(searchAssetTitle = "First WC");

		SearchPage.searchEmbedded(searchTerm = "Second");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Second WC",
			searchAssetType = "Web Content Article",
			searchTerm = "Second");
	}

	@priority = 4
	test SearchBlogsEntry {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		SearchPage.searchEmbedded(searchTerm = "Blogs Entry Title");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Blogs Entry Content");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Blogs Title");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Blogs Content");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Blogs");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Entry");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Content");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Title");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");
	}

	@priority = 4
	test SearchBlogsEntryCategory {
		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Vocabulary Name");

		var categoryId = JSONCategory.addCategory(
			groupName = "Guest",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONBlog.addEntry(
			assetCategoryIds = ${categoryId},
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		SearchPage.searchEmbedded(searchTerm = "Category Name");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Category");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Name");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "Category1");

		SearchResults.viewNoSearchResults(searchTerm = "Category1");

		SearchPage.searchEmbedded(searchTerm = "Name1");

		SearchResults.viewNoSearchResults(searchTerm = "Name1");
	}

	@priority = 4
	test SearchBlogsEntryCategoryQuotes {
		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Vocabulary Name");

		var categoryId = JSONCategory.addCategory(
			groupName = "Guest",
			title = "Category Name",
			vocabularyName = "Vocabulary Name");

		JSONBlog.addEntry(
			assetCategoryIds = ${categoryId},
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		SearchPage.searchEmbedded(searchTerm = "\"Category Name\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Category\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Name\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Category Name1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Category Name1\"");

		SearchPage.searchEmbedded(searchTerm = "\"Category1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Category1\"");

		SearchPage.searchEmbedded(searchTerm = "\"Name1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Name1\"");
	}

	@priority = 4
	test SearchBlogsEntryQuotes {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs Entry Title\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Entry Title\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Title\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs Entry Content\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs Entry\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Entry Content\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Entry\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Content\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs Content\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Blogs Content\"");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Blogs1\"");

		SearchPage.searchEmbedded(searchTerm = "\"Entry1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Entry1\"");

		SearchPage.searchEmbedded(searchTerm = "\"Title1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Title1\"");

		SearchPage.searchEmbedded(searchTerm = "\"Content1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Content1\"");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs Entry Title1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Blogs Entry Title1\"");

		SearchPage.searchEmbedded(searchTerm = "\"Blogs Entry Content1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"Blogs Entry Content1\"");
	}

	@priority = 4
	test SearchBlogsEntryTag {
		JSONBlog.addEntry(
			assetTagNames = "tag name",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		SearchPage.searchEmbedded(searchTerm = "tag name");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "tag");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "name");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "tag1");

		SearchResults.viewNoSearchResults(searchTerm = "tag1");

		SearchPage.searchEmbedded(searchTerm = "name1");

		SearchResults.viewNoSearchResults(searchTerm = "name1");
	}

	@priority = 4
	test SearchBlogsEntryTagQuotes {
		JSONBlog.addEntry(
			assetTagNames = "tag name",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		SearchPage.searchEmbedded(searchTerm = "\"tag name\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"tag\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"name\"");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPage.searchEmbedded(searchTerm = "\"tag name1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"tag name1\"");

		SearchPage.searchEmbedded(searchTerm = "\"tag1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"tag1\"");

		SearchPage.searchEmbedded(searchTerm = "\"name1\"");

		SearchResults.viewNoSearchResults(searchTerm = "\"name1\"");
	}

	@priority = 3
	test SearchBlogsScopedToPage {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = 1,
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.selectScopePG(
			portletName = "Blogs",
			scope = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Entry Content",
			entryTitle = "Entry Title");

		SearchPage.searchEmbedded(searchTerm = "Entry Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Entry Title",
			searchAssetType = "Blogs Entry",
			searchTerm = "Entry Title");
	}

	@priority = 4
	test SearchContentPagesSmoke {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Site Name");

		PageEditor.addWidget(portletName = "Search Bar");

		Refresh();

		PageEditor.addWidget(
			collectionName = "Search",
			portletName = "Search Results",
			targetFragmentName = "Search Bar");

		PageEditor.publish();

		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Site Name",
			title = "WC Title");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Site Name");

		SearchPage.searchWidget(searchTerm = "WC Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");
	}

	@priority = 4
	test SearchDeletedWebContent {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC Title");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No results were found that matched the keywords");
	}

	@description = "This test will set up a search page and search on a newly added site. It will also use different scopes to assert search results for assets from multiple sites"
	@priority = 4
	test SearchDifferentScopesViaNewSite {
		HeadlessSite.addSite(siteName = "Site Name 1");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "Apple");

		HeadlessSite.addSite(siteName = "Site Name 2");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Apple",
			groupName = "Site Name 2",
			mimeType = "application/docx",
			sourceFileName = "Document_1.docx");

		HeadlessSite.addSite(siteName = "Site Name 3");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Apple",
			groupName = "Site Name 3");

		JSONLayout.addPublicLayout(
			groupName = "Site Name 3",
			layoutName = "Site 3 Home Page");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name-3");

		PagesAdmin.addPage(
			inheritChanges = "disable",
			pageName = "Search Page",
			pageTemplateName = "Search");

		// Workaround for LPS-80521

		Navigator.gotoSitePage(
			pageName = "Search Page",
			siteName = "Site Name 3");

		Navigator.gotoSitePage(
			pageName = "Site 3 Home Page",
			siteName = "Site Name 3");

		SearchPage.configureEmbeddedSearchBar(destinationPage = "Search Page");

		SearchPage.configureEmbeddedSearchBar(searchScope = "Let the User Choose");

		SearchPage.chooseEmbeddedScope(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewMultipleSearchResults(
			resultsList = "Apple/Web Content Article,Apple/Document,Apple/Blogs Entry",
			searchTerm = "Apple");

		SearchPage.chooseEmbeddedScope(searchScope = "This Site");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Blogs Entry",
			searchTerm = "Apple");

		SearchResults.viewMultipleSearchResultsNotPresent(noResultsList = "Apple/Web Content Article,Apple/Document");
	}

	@description = "This test will assert that configurations set within the Embedded search bar will be used when searching via the Widget search bar"
	@priority = 4
	test SearchDifferentScopesViaSearchWidget {
		property custom.properties = "company.default.time.zone=America/Los_Angeles${line.separator}feature.flag.LPD-35013=true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Potato Document",
			groupName = "Guest",
			mimeType = "application/docx",
			sourceFileName = "Document_1.docx");

		HeadlessSite.addSite(siteName = "Test Site");

		JSONBlog.addEntry(
			entryContent = "This is a blog about Potatoes",
			entryTitle = "Potato Blog",
			groupName = "Test Site");

		SearchPage.openSearchPage();

		SearchPage.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPage.searchWidget(searchTerm = "Potato");

		SearchResults.viewSearchResults(
			searchAssetSummary = "This is a blog about Potatoes",
			searchAssetTitle = "Potato Blog",
			searchAssetType = "Blogs Entry",
			searchTerm = "Potato");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Potato Document",
			searchAssetType = "Document",
			searchTerm = "Potato");

		SearchPage.configureEmbeddedSearchBar(searchScope = "This Site");

		SearchPage.searchWidget(searchTerm = "Potato");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Potato Document",
			searchAssetType = "Document",
			searchTerm = "Potato");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Potato Blog",
			searchAssetType = "Blogs Entry");
	}

	@priority = 5
	test SearchDocumentsAndMediaDocument {
		JSONDocument.addFileWithUploadedFile(
			assetTagNames = "moon rocks",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/txt",
			sourceFileName = "Document_1.txt");

		SearchPage.searchEmbedded(searchTerm = "DM Document Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "DM");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "Document");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "DM Document");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "DM Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "Document Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "moon rocks");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchFacets.checkFacetTerm(
			facetName = "Tag Facet",
			facetTerm = "moon rocks");

		SearchResults.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPage.searchEmbedded(searchTerm = "DM1");

		SearchResults.viewNoSearchResults(searchTerm = "DM1");

		SearchPage.searchEmbedded(searchTerm = "Document1");

		SearchResults.viewNoSearchResults(searchTerm = "Document1");

		SearchPage.searchEmbedded(searchTerm = "Title1");

		SearchResults.viewNoSearchResults(searchTerm = "Title1");
	}

	@description = "This is a use case for LPS-81931"
	@priority = 5
	test SearchGlobalTemplateSmoke {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry 1 Content",
			entryTitle = "Blogs Entry 1 Title",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Home");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		PagesAdmin.addPage(
			inheritChanges = "disable",
			pageName = "Search Global Template Page",
			pageTemplateName = "Search");

		Navigator.gotoSitePage(
			pageName = "Search Global Template Page",
			siteName = "Site Name");

		SearchPage.configureEmbeddedSearchBar(destinationPage = "Search Global Template Page");

		for (var portlet : list "Category Facet,Folder Facet,Modified Facet,Search Bar,Search Options,Search Results,Tag Facet,Type Facet,User Facet") {
			AssertElementPresent(
				key_portletName = ${portlet},
				locator1 = "Portlet#BODY");
		}

		Portlet.deletePG(portletName = "Search Options");

		for (var portlet : list "Category Facet,Folder Facet,Modified Facet,Search Bar,Search Results,Tag Facet,Type Facet,User Facet") {
			AssertElementPresent(
				key_portletName = ${portlet},
				locator1 = "Portlet#BODY");
		}

		Navigator.gotoSitePage(
			pageName = "Home",
			siteName = "Site Name");

		SearchPage.searchEmbedded(searchTerm = "Blogs");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Blogs Entry 1 Title",
			searchAssetType = "Blogs Entry",
			searchTerm = "Blogs");
	}

	@priority = 4
	test SearchUser {
		var siteName = TestCase.getSiteName(siteName = ${siteName});

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Site.openSiteSettingsAdmin(siteURLKey = "guest");

		Site.manageMembershipOptions(allowManualMembershipManagement = "true");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = ${siteName},
			userScreenName = "usersn");

		Navigator.gotoBack();

		Search.searchCP(searchTerm = "userfn");

		User.viewUserTableName(
			key_userScreenName = "usersn",
			userfn = "userfn",
			userln = "userln");

		Search.searchCP(searchTerm = "userln");

		User.viewUserTableName(
			key_userScreenName = "usersn",
			userfn = "userfn",
			userln = "userln");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "userfn userln");

		SearchResults.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPage.searchEmbedded(searchTerm = "userfn");

		SearchResults.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPage.searchEmbedded(searchTerm = "userln");

		SearchResults.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPage.searchEmbedded(searchTerm = "usersn");

		SearchResults.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPage.searchEmbedded(searchTerm = "userfn1");

		SearchResults.viewNoSearchResults(searchTerm = "userfn1");

		SearchPage.searchEmbedded(searchTerm = "userln1");

		SearchResults.viewNoSearchResults(searchTerm = "userln1");

		SearchPage.searchEmbedded(searchTerm = "usersn1");

		SearchResults.viewNoSearchResults(searchTerm = "usersn1");
	}

	@priority = 4
	test SearchUserWildcard {
		var siteName = TestCase.getSiteName(siteName = ${siteName});

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Site.openSiteSettingsAdmin(siteURLKey = "guest");

		Site.manageMembershipOptions(allowManualMembershipManagement = "true");

		User.openUsersAdmin();

		User.editUserSiteCP(
			siteName = ${siteName},
			userScreenName = "usersn");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "users*");

		SearchResults.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPage.searchEmbedded(searchTerm = "userf*");

		SearchResults.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");
	}

	@priority = 4
	test SearchWebContent {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "WC WebContent Title");

		SearchResults.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "WC WebContent Content");

		SearchResults.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "WC");

		SearchResults.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "WebContent");

		SearchResults.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "Title");

		SearchResults.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "Content");

		SearchResults.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPage.searchEmbedded(searchTerm = "WC1");

		SearchResults.viewNoSearchResults(searchTerm = "WC1");

		SearchPage.searchEmbedded(searchTerm = "WebContent1");

		SearchResults.viewNoSearchResults(searchTerm = "WebContent1");

		SearchPage.searchEmbedded(searchTerm = "Title1");

		SearchResults.viewNoSearchResults(searchTerm = "Title1");

		SearchPage.searchEmbedded(searchTerm = "Content1");

		SearchResults.viewNoSearchResults(searchTerm = "Content1");
	}

	@priority = 4
	test SearchWikiPage {
		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Wiki Test Page");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.addPG(portletName = "Wiki");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiNavigator.gotoAllPagesPG();

		WikiPage.addPG(
			pageName = "Wiki Test Page",
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Wiki Page Title");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPage.searchEmbedded(searchTerm = "Wiki Page Content");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPage.searchEmbedded(searchTerm = "Wiki");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPage.searchEmbedded(searchTerm = "Page");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPage.searchEmbedded(searchTerm = "Title");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPage.searchEmbedded(searchTerm = "Content");

		SearchResults.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");
	}

	@priority = 4
	test SearchXSSAsset {
		JSONWiki.addWikiPage(
			groupName = "Guest",
			wikiNodeName = "Main",
			wikiPageContent = "<script>alert(123);</script>",
			wikiPageName = "Wiki Title");

		SearchPage.searchEmbedded(searchTerm = "Title");

		AssertAlertNotPresent();

		SearchResults.viewSearchResults(
			searchAssetSummary = '''<script>alert(123);</script>''',
			searchAssetTitle = "Wiki Title",
			searchAssetType = "Wiki Page");

		var actualScript = '''<script>alert(123);</script>''';
		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = ${actualScript});

		AssertHTMLSourceTextPresent(value1 = ${escapedScript});

		SearchResults.configureSearchResults(disableHighlighting = "true");

		Refresh();

		AssertAlertNotPresent();

		AssertHTMLSourceTextNotPresent(value1 = ${actualScript});

		AssertHTMLSourceTextPresent(value1 = ${escapedScript});
	}

	@description = "This is a use case for LPS-84035."
	@priority = 5
	test ViewCreatedSearchPagePermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		var webContentServiceContext = '''{"addGuestPermissions": "true", "assetTagNames": ["tag"]}''';

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			serviceContext = ${webContentServiceContext},
			title = "WC Title");

		SearchPage.addWidgets(
			layoutName = "Search Page",
			searchPortletList = "Custom Filter,Suggestions,Search Results,Search Bar");

		Navigator.gotoPage(pageName = "Search Page");

		SearchPage.addWidgetsOnWidgetPageViaUI(searchPortletList = "Sort");

		PermissionsInline.gotoConfigurationPG(portletName = "Search Results");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Site Member");

		IFrame.closeFrame();

		SearchPage.configureEmbeddedSearchBar(destinationPage = "Search Page");

		User.logoutPG();

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		for (var portlet : list "Custom Filter,Sort,Search Results,Search Bar") {
			AssertElementPresent(
				key_portletName = ${portlet},
				locator1 = "Portlet#BODY");
		}

		User.loginPG(userEmailAddress = "userea@liferay.com");

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		for (var portlet : list "Custom Filter,Sort,Search Results,Search Bar") {
			AssertElementPresent(
				key_portletName = ${portlet},
				locator1 = "Portlet#BODY");
		}
	}

	@description = "This is a use case for LPS-84035."
	@priority = 5
	test ViewDefaultSearchPagePermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		var webContentServiceContext = '''{"addGuestPermissions": "true", "assetTagNames": ["tag"]}''';

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			serviceContext = ${webContentServiceContext},
			title = "WC Title");

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		PermissionsInline.gotoConfigurationPG(portletName = "Search Results");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Site Member");

		IFrame.closeFrame();

		User.logoutPG();

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		AssertElementPresent(locator1 = "Search#SEARCH_BAR_WIDGET");

		for (var portlet : list "Last Modified,Tag,Type,User") {
			AssertElementPresent(
				key_portletName = ${portlet},
				locator1 = "Portlet#BODY");
		}

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		User.loginPG(userEmailAddress = "userea@liferay.com");

		SearchPage.searchEmbedded(searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		AssertElementPresent(locator1 = "Search#SEARCH_BAR_WIDGET");

		for (var portlet : list "Last Modified,Tag,Type,User") {
			AssertElementPresent(
				key_portletName = ${portlet},
				locator1 = "Portlet#BODY");
		}

		SearchResults.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");
	}

	@priority = 5
	test ViewSearchResultDetails {
		property app.server.types = "tomcat";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		SearchAdministration.executeReindex();

		Navigator.openURL();

		SearchPage.searchEmbedded(searchTerm = "Test Test");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Test Test",
			searchAssetType = "User");

		SearchPage.gotoResultDetails(searchAssetTitle = "Test Test");

		SearchPage.viewUserResultDetails(
			pageName = "My Profile",
			userName = "Test Test");
	}

	@priority = 3
	test ViewSortedSearchResults {
		JSONWebcontent.addWebContent(
			content = "Content",
			groupName = "Guest",
			title = "Apple");

		JSONWebcontent.addWebContent(
			content = "Content",
			groupName = "Guest",
			title = "Banana");

		JSONWebcontent.addWebContent(
			content = "Content",
			groupName = "Guest",
			title = "Cantaloupe");

		SearchPage.searchEmbedded(searchTerm = "Content");

		SearchPage.addWidgetsOnWidgetPageViaUI(searchPortletList = "Sort");

		Refresh();

		SearchPage.chooseSortOption(sortOption = "Title");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Apple,Banana,Cantaloupe");

		SearchPage.chooseSortOption(sortOption = "Created");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Cantaloupe,Banana,Apple");

		SearchPage.chooseSortOption(sortOption = "Created (oldest first)");

		SearchResults.viewSearchResultsSpecificOrder(resultsList = "Apple,Banana,Cantaloupe");
	}

	@priority = 4
	test ViewStagedAndLiveContentInSearchResults {
		HeadlessSite.addSite(siteName = "Site Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "Site Name");

		PagesAdmin.addPage(
			inheritChanges = "disable",
			pageName = "search",
			pageTemplateName = "Search");

		Navigator.openSiteURL(siteName = "Site Name");

		SearchPage.configureEmbeddedSearchBar(searchScope = "Let the User Choose");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContent.addArticleCP(
			webContentContent = "WC Content",
			webContentTitle = "Apple");

		Navigator.openStagingSiteURL(siteName = "Site Name");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		ProductMenu.gotoLiveSite(site = "Site Name");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		SearchPage.chooseEmbeddedScope(searchScope = "Everything");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContent.deleteCP(
			siteURLKey = "site-name-staging",
			webContentTitle = "Apple");

		Navigator.openStagingSiteURL(siteName = "Site Name");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResultNotPresent(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		ProductMenu.gotoLiveSite(site = "Site Name");

		SearchPage.searchEmbedded(searchTerm = "Apple");

		SearchResults.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");
	}

}