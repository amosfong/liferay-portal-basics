@component-name = "portal-db-infrastructure"
definition {

	property app.server.types = "tomcat";
	property ci.retries.disabled = "true";
	property database.partition.enabled = "true";
	property database.types = "mysql";
	property liferay.online.properties = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "true";
	property test.liferay.virtual.instance = "false";
	property test.run.environment = "EE";
	property test.run.type = "single";
	property testray.main.component.name = "Database Partitioning";

	@priority = 5
	test CanAutoUpgradeLargePartitionedDatabase7413 {
		property custom.properties = "upgrade.report.enabled=true";
		property custom.startup.timeout = "540";
		property data.archive.type = "data-archive-portal-partition-large";
		property database.auto.upgrade.enabled = "true";
		property minimum.slave.ram = "24";
		property portal.release = "false";
		property portal.upstream = "false";
		property portal.version = "2024.q2.3";
		property skip.upgrade-legacy-database = "true";
		property test.assert.warning.exceptions = "false";

		task ("Print the upgrade execution time") {
			UpgradeReport.printUpgradeExecutionTime(upgradeType = "auto");
		}

		User.firstLoginUI(
			password = 1234,
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");
	}

	@priority = 5
	test CanAutoUpgradeLargePartitionedDatabase7413Benchmark {
		property custom.properties = "upgrade.report.enabled=true";
		property data.archive.type = "data-archive-portal-partition-large";
		property database.auto.upgrade.enabled = "true";
		property minimum.slave.ram = "24";
		property portal.release = "false";
		property portal.upstream = "false";
		property portal.version = "2024.q2.3";
		property skip.upgrade-legacy-database = "true";
		property test.assert.warning.exceptions = "false";

		task ("Print the upgrade execution time") {
			UpgradeReport.printUpgradeExecutionTime(upgradeType = "auto");
		}

		User.firstLoginUI(
			password = 1234,
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		task ("Print the upgrade report") {
			var reportFileContent = UpgradeReport.getAutoUpgradeReportFileContent();

			echo(${reportFileContent});
		}
	}

	@priority = 5
	test CanUpgradeLargePartitionedDatabase7413 {
		property custom.startup.timeout = "600";
		property data.archive.type = "data-archive-portal-partition-large";
		property minimum.slave.ram = "24";
		property portal.release = "false";
		property portal.upstream = "false";
		property portal.version = "2024.q2.3";
		property test.assert.warning.exceptions = "false";

		task ("Print the upgrade execution time") {
			UpgradeReport.printUpgradeExecutionTime(upgradeType = "client");
		}

		User.firstLoginUI(
			password = 1234,
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");
	}

	@priority = 5
	test CanUpgradeLargePartitionedDatabase7413Benchmark {
		property data.archive.type = "data-archive-portal-partition-large";
		property minimum.slave.ram = "24";
		property portal.release = "false";
		property portal.upstream = "false";
		property portal.version = "2024.q2.3";
		property test.assert.warning.exceptions = "false";

		task ("Print the upgrade execution time") {
			UpgradeReport.printUpgradeExecutionTime(upgradeType = "client");
		}

		User.firstLoginUI(
			password = 1234,
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		task ("Print the upgrade report") {
			var reportFileContent = UpgradeReport.getUpgradeReportFileContent();

			echo(${reportFileContent});
		}
	}

	@priority = 5
	test CanUpgradePartitionedDatabase7413U33 {
		property data.archive.type = "data-archive-portal-partition";
		property portal.smoke.upgrades = "true";
		property portal.version = "7.4.13.u33";

		User.loginPG(
			nodePort = 8080,
			password = PropsUtil.get("default.admin.password"),
			userEmailAddress = "test@liferay.com");

		SearchAdministration.executeReindex();

		ValidateDatabasePartitioningUpgrade.viewUpgradeDBPartition();
	}

	@priority = 5
	test ExtractAndAddDBPartitionCompaniesWithUpgradedDB {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property data.archive.type = "data-archive-portal-partition";
		property portal.version = "7.4.13.u33";
		property test.assert.warning.exceptions = "false";

		task ("Validate www.able.com and www.baker.com partitions") {
			User.loginPG(
				nodePort = 8080,
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");

			SearchAdministration.executeReindex();

			ValidateDatabasePartitioningUpgrade.viewUpgradeDBPartition();

			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");

			SignOut.signOutOfSpecificURL(url = "http://www.baker.com:8080");
		}

		task ("Extract www.able.com and www.baker.com partitions and shutdown the server") {
			DBPartition.extractDBPartition(partitionCompanyId = 42638);

			DBPartition.extractDBPartition(partitionCompanyId = 44913);

			Clustering.shutdownSpecificServer(nodePort = 8080);

			Clustering.shutdownSpecificServer(nodePort = 9080);
		}

		task ("Create an empty database") {
			AntCommands.runCommand("build-test.xml", "rebuild-database -Ddatabase.type=mysql -Dsql.dir=sql/create-bare/ -Dsql.file=create-bare-mysql.sql");

			Clustering.startSpecificServer(
				deleteLiferayHome = "false",
				nodePort = 8080);

			Clustering.startSpecificServer(
				deleteLiferayHome = "false",
				nodePort = 9080);
		}

		task ("Add previously extracted partitions into new database") {
			DBPartition.insertDBPartition(partitionCompanyId = 42638);

			DBPartition.insertDBPartition(partitionCompanyId = 44913);
		}

		task ("Ensure that portal main functionalities work correctly") {
			SignIn.signInTestSetup();

			Smoke.runSmoke();

			SignOut.signOut();
		}

		task ("Ensure that both www.able.com and www.baker.com are accessible") {
			User.loginPG(
				nodePort = 8080,
				password = PropsUtil.get("default.admin.password"),
				userEmailAddress = "test@liferay.com");

			SearchAdministration.executeReindex();

			ValidateDatabasePartitioningUpgrade.viewUpgradeDBPartition();
		}
	}

}