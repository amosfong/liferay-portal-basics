@component-name = "portal-smoke"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Smoke";

	setUp {
		TestCase.setUpPortalInstance();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Ensure Liferay's log manager is working for libraries using JBoss Logging, such as Hibernate"
	@priority = 3
	test HibernateSQLQueriesViewableWithDebugLogLevel {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,wildfly";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		User.firstLoginPG();

		ServerAdministration.openServerAdmin();

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "org.hibernate.SQL");

		ServerAdministration.executeServerResourcesActions(actionsDescription = "Clear the database cache.");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = "com.liferay.portal.kernel.service.CompanyLocalServiceUtil.getCompanies()");

		AssertConsoleTextPresent(value1 = "select .*companyId .* from Company");
	}

	@description = "Ensure that Portal is logging into expected log files, both .xml and .log"
	@priority = 5
	test Smoke {
		property database.bare.enabled = "true";
		property portal.acceptance = "true";
		property portal.smoke = "false";

		var liferayLog = Clustering.getLogFileSpecificServer(nodePort = 0);

		for (var logContent : list "Started dynamic bundles,Auto deploy scanner started for,Available checkers") {
			if (!(contains(${liferayLog}, ${logContent}))) {
				fail("Unable to find expected logging: ${logContent}");
			}

			AssertConsoleTextPresent(value1 = ${logContent});
		}
	}

}