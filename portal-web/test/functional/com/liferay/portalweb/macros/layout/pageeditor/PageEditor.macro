definition {

	@summary = "Default summary"
	macro addComment(fragmentName = null, mentionsUserScreenName = null, fragmentComment = null) {
		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.gotoTab(tabName = "Comments");

		if (IsElementNotPresent(key_fragmentName = ${fragmentName}, locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_SECTION_NAME")) {
			PageEditor.clickConfigurableField(fragmentName = ${fragmentName});
		}

		AssertElementPresent(
			key_fragmentName = ${fragmentName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_SECTION_NAME");

		Click.clickAt(locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS");

		if (isSet(mentionsUserScreenName)) {
			var key_mentionsUserScreenName = ${mentionsUserScreenName};

			Type.sendKeys(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS",
				value1 = "${fragmentComment} @${mentionsUserScreenName}");

			Click.clickNoMouseOver(locator1 = "Mentions#MENTIONS_USER_DISPLAY_OPTION");
		}
		else {
			Type(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS",
				value1 = ${fragmentComment});
		}

		Button.clickComment();

		AssertElementNotPresent(
			key_fragmentComment = ${fragmentComment},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY_INPUT");
	}

	@summary = "Default summary"
	macro addCommentViaFragment(fragmentName = null, fragmentComment = null, position = null) {
		PageEditor.gotoCommentViaFragment(
			fragmentName = ${fragmentName},
			key_position = ${position});

		AssertElementPresent(
			key_fragmentName = ${fragmentName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_SECTION_NAME");

		Click.clickAt(locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS");

		Type(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS",
			value1 = ${fragmentComment});

		Button.clickComment();

		AssertElementNotPresent(
			key_fragmentComment = ${fragmentComment},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY_INPUT");
	}

	@summary = "Default summary"
	macro addElementToColumn(navTab = null, targetFragmentName = null, fragmentName = null, columnNumber = null, collectionName = null, height = null, portletName = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		if (!(isSet(displayStyle))) {
			var displayStyle = "list";
		}

		if (${displayStyle} == "list") {
			var switchTo = "card";
		}
		else {
			var switchTo = "list";
		}

		if (IsElementNotPresent(key_switchTo = ${switchTo}, locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON")) {
			Click(
				key_switchTo = "",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		AssertVisible(
			key_switchTo = ${switchTo},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

		Navigator.gotoNavTab(navTab = ${navTab});

		if ((${navTab} == "Fragments") && (${displayStyle} == "card")) {
			PageEditor.expandFragmentCollection(collectionName = ${collectionName});

			if (isSet(targetFragmentName) && (${height} == "Short")) {
				DragAndDrop.javaScriptDragAndDropObjectBelowShortNestedObject(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
					value1 = "");
			}

			if (isSet(targetFragmentName) && (${height} == "Tall")) {
				DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
					value1 = "");
			}
			else {
				DragAndDrop.javaScriptDragAndDropToObject(
					key_collectionName = ${collectionName},
					key_columnNumber = ${columnNumber},
					key_fragmentName = ${fragmentName},
					key_position = ${position},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#GRID_COLUMN",
					value1 = "");
			}
		}

		if ((${navTab} == "Fragments") && (${displayStyle} == "list")) {
			PageEditor.expandFragmentCollection(collectionName = ${collectionName});

			if (isSet(targetFragmentName) && (${height} == "Short")) {
				DragAndDrop.javaScriptDragAndDropObjectBelowShortNestedObject(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
					value1 = "");
			}

			if (isSet(targetFragmentName) && (${height} == "Tall")) {
				DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
					value1 = "");
			}
			else {
				DragAndDrop.javaScriptDragAndDropToObject(
					key_collectionName = ${collectionName},
					key_columnNumber = ${columnNumber},
					key_fragmentName = ${fragmentName},
					key_position = ${position},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#GRID_COLUMN",
					value1 = "");
			}
		}

		if (${navTab} == "Widgets") {
			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = ${portletName});

			var key_indexItem = ${position};

			if (isSet(targetFragmentName) && (${height} == "Short")) {
				DragAndDrop.javaScriptDragAndDropObjectBelowShortNestedObject(
					key_portletName = ${portletName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
					locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
					value1 = ${portletName});
			}

			if (isSet(targetFragmentName) && (${height} == "Tall")) {
				DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
					key_portletName = ${portletName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
					locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
					value1 = ${portletName});
			}
			else {
				DragAndDrop.javaScriptDragAndDropToObject(
					key_columnNumber = ${columnNumber},
					key_portletName = ${portletName},
					key_position = ${position},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
					locator2 = "PageEditor#GRID_COLUMN",
					value1 = ${portletName});
			}
		}

		PageEditor.waitForAutoSave();

		if (${navTab} == "Fragments") {
			AssertElementPresent(
				key_columnNumber = ${columnNumber},
				key_elementHeader = "//div[@data-name='${fragmentName}']",
				key_position = ${position},
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		if (${navTab} == "Widgets") {
			AssertElementPresent(
				key_columnNumber = ${columnNumber},
				key_elementHeader = "//div[@data-name='${portletName}']",
				key_position = ${position},
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
		}

		PageEditor.gotoTab(tabName = "Browser");
	}

	@summary = "Default summary"
	macro addElementToContainer(targetElementName = null, dropTarget = null, collectionName = null, portletName = null, navTab = null, fragmentName = null, ratio = null) {
		if (!(isSet(targetElementName))) {
			if (!(isSet(position))) {
				var position = 1;
			}

			if (!(isSet(indexItem))) {
				var indexItem = 1;
			}

			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			if (!(isSet(displayStyle))) {
				var displayStyle = "list";
			}

			if (${displayStyle} == "list") {
				var switchTo = "card";
			}
			else {
				var switchTo = "list";
			}

			if (IsElementNotPresent(key_switchTo = ${switchTo}, locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON")) {
				Click(
					key_switchTo = "",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
			}

			AssertVisible(
				key_switchTo = ${switchTo},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

			Navigator.gotoNavTab(navTab = ${navTab});

			if ((${navTab} == "Fragments") && (${displayStyle} == "card")) {
				PageEditor.expandFragmentCollection(collectionName = ${collectionName});

				DragAndDrop.javaScriptDragAndDropToObject(
					key_collectionName = ${collectionName},
					key_elementType = "Container",
					key_fragmentName = ${fragmentName},
					key_position = ${position},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#CONTAINER_CONTAINER");
			}

			if ((${navTab} == "Fragments") && (${displayStyle} == "list")) {
				PageEditor.expandFragmentCollection(collectionName = ${collectionName});

				DragAndDrop.javaScriptDragAndDropToObject(
					key_collectionName = ${collectionName},
					key_elementType = "Container",
					key_fragmentName = ${fragmentName},
					key_position = ${position},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#CONTAINER_CONTAINER");
			}

			if (${navTab} == "Widgets") {
				Type.sendKeysApplicationSearch(
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
					value1 = ${portletName});

				DragAndDrop.javaScriptDragAndDropToObject(
					key_elementType = "Container",
					key_indexItem = ${indexItem},
					key_portletName = ${portletName},
					key_position = ${position},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
					locator2 = "PageEditor#CONTAINER_CONTAINER");
			}

			PageEditor.waitForAutoSave();

			if (${navTab} == "Fragments") {
				AssertElementPresent(
					key_elementHeader = "//div[@data-name='${fragmentName}']",
					key_elementType = "Container",
					key_position = ${position},
					locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
			}

			if (${navTab} == "Widgets") {
				AssertElementPresent(
					key_elementHeader = "//div[@data-name='${portletName}']",
					key_elementType = "Container",
					key_position = ${position},
					locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

				Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
			}
		}
		else {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			if (!(isSet(index))) {
				var index = 1;
			}

			if (!(isSet(height))) {
				var height = "Short";
			}

			if (${navTab} == "Fragments") {
				PageEditor.expandFragmentCollection(collectionName = ${collectionName});

				if (isSet(targetElementName) && (${height} == "Short")) {
					if (${dropTarget} == "Up") {
						DragAndDrop.javaScriptDragAndDropObjectAboveShortNestedObject(
							index = ${index},
							key_collectionName = ${collectionName},
							key_fragmentName = ${fragmentName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
					}
					else {
						DragAndDrop.javaScriptDragAndDropObjectBelowShortNestedObject(
							index = ${index},
							key_collectionName = ${collectionName},
							key_fragmentName = ${fragmentName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
					}
				}

				if (isSet(targetElementName) && (${height} == "Tall")) {
					if (${dropTarget} == "Up") {
						DragAndDrop.javaScriptDragAndDropObjectAboveTallNestedObject(
							index = ${index},
							key_collectionName = ${collectionName},
							key_fragmentName = ${fragmentName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET",
							ratio = ${ratio});
					}
					else {
						DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
							index = ${index},
							key_collectionName = ${collectionName},
							key_fragmentName = ${fragmentName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET",
							ratio = ${ratio});
					}
				}

				PageEditor.waitForAutoSave();

				if ((${fragmentName} == "Content Display") || (${fragmentName} == "Collection Display") || (${fragmentName} == "Display Page Content")) {
					PageEditor.viewFragmentMessageInfo(fragmentName = ${fragmentName});
				}

				if (isSet(composition)) {
					echo("## Adding a composition of fragments");
				}
				else {
					PageEditor.viewFragment(
						fragmentName = ${fragmentName},
						position = ${position});
				}
			}
			else {
				Navigator.gotoNavTab(navTab = "Widgets");

				Type.sendKeysApplicationSearch(
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
					value1 = ${portletName});

				if (!(isSet(indexItem))) {
					var indexItem = 1;
				}

				if (isSet(targetElementName) && (${height} == "Short")) {
					if (${dropTarget} == "Up") {
						DragAndDrop.javaScriptDragAndDropObjectAboveShortNestedObject(
							index = ${index},
							key_indexItem = ${indexItem},
							key_portletName = ${portletName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
					}
					else {
						DragAndDrop.javaScriptDragAndDropObjectBelowShortNestedObject(
							index = ${index},
							key_indexItem = ${indexItem},
							key_portletName = ${portletName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
					}
				}

				if (isSet(targetElementName) && (${height} == "Tall")) {
					if (${dropTarget} == "Up") {
						DragAndDrop.javaScriptDragAndDropObjectAboveTallNestedObject(
							index = ${index},
							key_indexItem = ${indexItem},
							key_portletName = ${portletName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
					}
					else {
						DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
							index = ${index},
							key_indexItem = ${indexItem},
							key_portletName = ${portletName},
							key_targetFragmentName = ${targetElementName},
							locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
							locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
					}
				}

				PageEditor.waitForAutoSave();

				PageEditor.viewFragment(fragmentName = ${portletName});

				Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
			}
		}

		PageEditor.gotoTab(tabName = "Browser");
	}

	@summary = "Default summary"
	macro addElementToDropdownPanel(navTab = null, fragmentName = null, collectionName = null, portletName = null) {
		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		if (!(isSet(displayStyle))) {
			var displayStyle = "list";
		}

		if (!(isSet(indexItem))) {
			var indexItem = 1;
		}

		if (${displayStyle} == "list") {
			var switchTo = "card";
		}
		else {
			var switchTo = "list";
		}

		if (IsElementNotPresent(key_switchTo = ${switchTo}, locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON")) {
			Click(
				key_switchTo = "",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		AssertVisible(
			key_switchTo = ${switchTo},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

		Navigator.gotoNavTab(navTab = ${navTab});

		if ((${navTab} == "Fragments") && (${displayStyle} == "card")) {
			PageEditor.expandFragmentCollection(collectionName = ${collectionName});

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_element = "//div[contains(@class,'page-editor__root')]",
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
				locator2 = "Fragment#DROPDOWN_FRAGMENT_MENU_CONTENT");
		}

		if ((${navTab} == "Fragments") && (${displayStyle} == "list")) {
			PageEditor.expandFragmentCollection(collectionName = ${collectionName});

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_element = "//div[contains(@class,'page-editor__root')]",
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "Fragment#DROPDOWN_FRAGMENT_MENU_CONTENT");
		}

		if (${navTab} == "Widgets") {
			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = ${portletName});

			DragAndDrop.javaScriptDragAndDropToObject(
				key_element = "//div[contains(@class,'page-editor__root')]",
				key_indexItem = ${indexItem},
				key_portletName = ${portletName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "Fragment#DROPDOWN_FRAGMENT_MENU_CONTENT");
		}

		PageEditor.waitForAutoSave();

		if (${navTab} == "Fragments") {
			AssertElementPresent(
				key_fragmentName = ${fragmentName},
				key_inFragmentName = "Dropdown",
				locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");
		}

		if (${navTab} == "Widgets") {
			AssertElementPresent(
				key_fragmentName = ${portletName},
				key_inFragmentName = "Dropdown",
				locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");

			Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
		}
	}

	@summary = "Default summary"
	macro addElementToTab(navTab = null, navItem = null, fragmentName = null, index = null, position = null, collectionName = null, portletName = null) {
		PageEditor.gotoTabsFragmentNavItem(navItem = ${navItem});

		AssertVisible(
			key_content = "Drag and drop fragments or widgets here.",
			key_fragmentClass = "content",
			key_position = ${position},
			locator1 = "Fragment#DROP_ZONE_NO_FRAGMENTS_MESSAGE");

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		if (!(isSet(displayStyle))) {
			var displayStyle = "list";
		}

		if (!(isSet(indexItem))) {
			var indexItem = 1;
		}

		if (${displayStyle} == "list") {
			var switchTo = "card";
		}
		else {
			var switchTo = "list";
		}

		if (IsElementNotPresent(key_switchTo = ${switchTo}, locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON")) {
			Click(
				key_switchTo = "",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		AssertVisible(
			key_switchTo = ${switchTo},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

		Navigator.gotoNavTab(navTab = ${navTab});

		if ((${navTab} == "Fragments") && (${displayStyle} == "card")) {
			PageEditor.expandFragmentCollection(collectionName = ${collectionName});

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				key_index = ${index},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
				locator2 = "PageEditor#FRAGMENT_WITH_DROP_TARGET",
				value1 = "");
		}

		if ((${navTab} == "Fragments") && (${displayStyle} == "list")) {
			PageEditor.expandFragmentCollection(collectionName = ${collectionName});

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				key_index = ${index},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#FRAGMENT_WITH_DROP_TARGET",
				value1 = "");
		}

		if (${navTab} == "Widgets") {
			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = ${portletName});

			DragAndDrop.javaScriptDragAndDropToObject(
				key_index = ${index},
				key_indexItem = ${indexItem},
				key_portletName = ${portletName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#FRAGMENT_WITH_DROP_TARGET",
				value1 = ${portletName});
		}

		PageEditor.waitForAutoSave();

		if (${navTab} == "Fragments") {
			AssertElementPresent(
				key_fragmentName = ${fragmentName},
				key_inFragmentName = "Tabs",
				locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");
		}

		if (${navTab} == "Widgets") {
			AssertElementPresent(
				key_fragmentName = ${portletName},
				key_inFragmentName = "Tabs",
				locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");

			Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
		}
	}

	@summary = "Default summary"
	macro addEntryWithLink(entryExternalURL = null, fragmentName = null, id = null, contributed = null) {
		PageEditor.gotoEditableFieldEdit(
			contributed = ${contributed},
			fragmentName = ${fragmentName},
			id = ${id});

		SelectFieldText(
			key_editor = "content",
			locator1 = "AlloyEditor#EDITOR");

		Click(locator1 = "AlloyEditor#TEXT_FORMATTING_LINK");

		Type(
			locator1 = "AlloyEditor#TEXT_FORMATTING_LINK_INPUT",
			value1 = ${entryExternalURL});

		Click(locator1 = "AlloyEditor#TEXT_FORMATTING_LINK_INPUT_CONFIRM");

		Click(locator1 = "PageEditor#CONTENT_PAGE_DISABLED_HEADER");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro addExperience(experienceName = null, failureText = null, segmentName = null) {
		var key_experienceName = ${experienceName};
		var key_segmentName = ${segmentName};

		PageEditor.openExperienceMenu();

		Click(
			key_text = "New Experience",
			locator1 = "Button#ANY");

		Type(
			locator1 = "PageEditor#EXPERIENCE_NAME",
			value1 = ${experienceName});

		Select(
			locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
			value1 = ${segmentName});

		Click(
			key_text = "Save",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		if (isSet(failureText)) {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = ${failureText});
		}
		else {
			Alert.viewSuccessMessage();

			Click(locator1 = "PageEditor#EXPERIENCE_SELECTOR");
		}
	}

	@summary = "Default summary"
	macro addFragment(targetFragmentName = null, fragmentName = null, scope = null, dropTarget = null, position = null, collectionName = null) {
		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		if (!(isSet(displayStyle))) {
			var displayStyle = "list";
		}

		if (${displayStyle} == "list") {
			var switchTo = "card";
		}
		else {
			var switchTo = "list";
		}

		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementNotPresent(key_switchTo = ${switchTo}, locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON")) {
			Click(
				key_switchTo = "",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		AssertVisible(
			key_switchTo = ${switchTo},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

		Navigator.gotoNavTab(navTab = "Fragments");

		PageEditor.expandFragmentCollection(collectionName = ${collectionName});

		if (${displayStyle} == "card") {
			if ((${scope} == "Master") && (${dropTarget} == "Header")) {
				DragAndDrop.javaScriptDragAndDropToUp(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#HEADER_DROP_TARGET");
			}

			if ((${scope} == "Master") && (${dropTarget} == "Footer")) {
				DragAndDrop.javaScriptDragAndDropToBottom(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = "Drop Zone",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}

			if (isSet(targetFragmentName) && (${dropTarget} == "Header")) {
				DragAndDrop.javaScriptDragAndDropToUp(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}

			if (isSet(targetFragmentName) && !(isSet(dropTarget))) {
				DragAndDrop.javaScriptDragAndDropToBottom(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}
			else {
				DragAndDrop.javaScriptDragAndDropToObject(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
					locator2 = "PageEditor#FRAGMENT_DROP_TARGET");
			}
		}

		if (${displayStyle} == "list") {
			if ((${scope} == "Master") && (${dropTarget} == "Header")) {
				DragAndDrop.javaScriptDragAndDropToUp(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#HEADER_DROP_TARGET");
			}

			if ((${scope} == "Master") && (${dropTarget} == "Footer")) {
				DragAndDrop.javaScriptDragAndDropToBottom(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = "Drop Zone",
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}

			if (isSet(targetFragmentName) && (${dropTarget} == "Header")) {
				DragAndDrop.javaScriptDragAndDropToUp(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}

			if (isSet(targetFragmentName) && !(isSet(dropTarget))) {
				DragAndDrop.javaScriptDragAndDropToBottom(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}
			else {
				DragAndDrop.javaScriptDragAndDropToObject(
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#FRAGMENT_DROP_TARGET");
			}
		}

		PageEditor.waitForAutoSave();

		if ((${fragmentName} == "Content Display") || (${fragmentName} == "Collection Display") || (${fragmentName} == "Display Page Content")) {
			PageEditor.viewFragmentMessageInfo(fragmentName = ${fragmentName});
		}

		if (isSet(composition)) {
			echo("## Adding a composition of fragments");
		}
		else {
			PageEditor.viewFragment(
				fragmentName = ${fragmentName},
				position = ${position});
		}

		PageEditor.gotoTab(tabName = "Browser");
	}

	@summary = "Default summary"
	macro addFragmentToCollectionDisplay(targetFragmentName = null, fragmentName = null, entryTitle = null, collectionName = null) {
		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		if (!(isSet(displayStyle))) {
			var displayStyle = "list";
		}

		if (${displayStyle} == "list") {
			var switchTo = "card";
		}
		else {
			var switchTo = "list";
		}

		if (IsElementNotPresent(key_switchTo = ${switchTo}, locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON")) {
			Click(
				key_switchTo = "",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		AssertVisible(
			key_switchTo = ${switchTo},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

		Navigator.gotoNavTab(navTab = "Fragments");

		PageEditor.expandFragmentCollection(collectionName = ${collectionName});

		if (isSet(targetFragmentName) && (${displayStyle} == "card")) {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				key_targetFragmentName = ${targetFragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
				locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
				value1 = "");
		}

		if (isSet(targetFragmentName) && (${displayStyle} == "list")) {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				key_targetFragmentName = ${targetFragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#ANY_NESTED_FRAGMENT_DROP_TARGET",
				value1 = "");
		}

		if (!(isSet(targetFragmentName)) && (${displayStyle} == "card")) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_entryTitle = ${entryTitle},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM",
				locator2 = "PageEditor#COLLECTION_CELL",
				value1 = "");
		}

		if (!(isSet(targetFragmentName)) && (${displayStyle} == "list")) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_entryTitle = ${entryTitle},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#COLLECTION_CELL",
				value1 = "");
		}

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro addFragmentToFormContainer(targetFragmentName = null, fragmentName = null, collectionName = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		if (!(isSet(index))) {
			var index = 1;
		}

		if (!(isSet(height))) {
			var height = "Short";
		}

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		PageEditor.expandFragmentCollection(collectionName = ${collectionName});

		if (isSet(targetFragmentName)) {
			if (${height} == "Tall") {
				DragAndDrop.javaScriptDragAndDropObjectBelowTallNestedObject(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}
			else if (${height} == "Short") {
				DragAndDrop.javaScriptDragAndDropObjectBelowShortNestedObject(
					index = ${index},
					key_collectionName = ${collectionName},
					key_fragmentName = ${fragmentName},
					key_targetFragmentName = ${targetFragmentName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
					locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
			}
		}
		else {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				key_position = ${position},
				key_targetFragmentName = "Form Container",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#FORM_CONTAINER_CONTAINER");
		}

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro addFragmentViaKeyboard(fragmentName = null, upCount = null, collectionName = null) {
		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		if (!(isSet(displayStyle))) {
			var displayStyle = "list";
		}

		if (${displayStyle} == "list") {
			var switchTo = "card";
		}
		else {
			var switchTo = "list";
		}

		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementNotPresent(key_switchTo = ${switchTo}, locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON")) {
			Click(
				key_switchTo = "",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");
		}

		AssertVisible(
			key_switchTo = ${switchTo},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_DISPLAY_STYLE_BUTTON");

		Navigator.gotoNavTab(navTab = "Fragments");

		PageEditor.expandFragmentCollection(collectionName = ${collectionName});

		if (${displayStyle} == "card") {
			KeyPress(
				ariaLabel = "Add ${fragmentName}",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL",
				value1 = "\ENTER");

			if (isSet(upCount)) {
				var i = 0;

				while (${i} != ${upCount}) {
					KeyPress(
						ariaLabel = "Add ${fragmentName}",
						key_collectionName = ${collectionName},
						key_fragmentName = ${fragmentName},
						locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL",
						value1 = "\UP");

					var i = ${i} + 1;
				}
			}

			KeyPress(
				ariaLabel = "Add ${fragmentName}",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL",
				value1 = "\ENTER");
		}

		if (${displayStyle} == "list") {
			KeyPress(
				ariaLabel = "Add ${fragmentName}",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
				value1 = "\ENTER");

			if (isSet(upCount)) {
				var i = 0;

				while (${i} != ${upCount}) {
					KeyPress(
						ariaLabel = "Add ${fragmentName}",
						key_collectionName = ${collectionName},
						key_fragmentName = ${fragmentName},
						locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
						value1 = "\UP");

					var i = ${i} + 1;
				}
			}

			KeyPress(
				ariaLabel = "Add ${fragmentName}",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
				value1 = "\ENTER");
		}

		PageEditor.waitForAutoSave();
	}

	@summary = "Add a page rule"
	macro addPageRule(selectActionValue = null, selectItemForTheCondition = null, selectConditionValue = null, ruleName = null, selectItemForTheAction = null, selectAction = null, selectCondition = null) {
		Button.click(button = "New Rule");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "New Rule");

		if (isSet(ruleName)) {
			InputField.editText(
				fieldLabel = "Rule Name",
				text = ${ruleName});
		}

		Click(
			index = 1,
			locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

		DropdownMenuItem.click(menuItem = ${selectItemForTheCondition});

		Click(
			index = 2,
			locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

		DropdownMenuItem.click(menuItem = ${selectCondition});

		Click(
			index = 3,
			locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_ITEM");

		DropdownMenuItem.click(menuItem = ${selectConditionValue});

		Click(
			index = 1,
			locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

		DropdownMenuItem.click(menuItem = ${selectAction});

		Click(
			index = 2,
			locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

		DropdownMenuItem.click(menuItem = ${selectItemForTheAction});

		Click(
			index = 3,
			locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_ITEM");

		DropdownMenuItem.click(menuItem = ${selectActionValue});

		Modal.save();
	}

	@summary = "Default summary"
	macro addVideoFragmentURL(videoLink = null) {
		Type(
			key_text = "URL",
			locator1 = "TextInput#ANY",
			value1 = ${videoLink});

		Click(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro addWidget(targetFragmentName = null, dropTarget = null, position = null, portletName = null, collectionName = null) {
		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		Navigator.gotoNavTab(navTab = "Widgets");

		Type.sendKeysApplicationSearch(
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
			value1 = ${portletName});

		if (!(isSet(indexItem))) {
			var indexItem = 1;
		}

		var key_portletName = ${portletName};
		var key_indexItem = ${indexItem};

		if (!(isSet(index))) {
			var index = 1;
		}

		if (isSet(scope) && (${dropTarget} == "Header")) {
			DragAndDrop.javaScriptDragAndDropToUp(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#HEADER_DROP_TARGET",
				value1 = "");
		}

		if (isSet(scope) && (${dropTarget} == "Footer")) {
			DragAndDrop.javaScriptDragAndDropToBottom(
				index = ${index},
				key_targetFragmentName = "Drop Zone",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
		}

		if (isSet(targetFragmentName) && isSet(collectionName)) {
			DragAndDrop.javaScriptDragAndDropToBottom(
				index = ${index},
				key_collectionName = ${collectionName},
				key_fragmentName = ${portletName},
				key_targetFragmentName = ${targetFragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
		}
		else if (isSet(targetFragmentName)) {
			DragAndDrop.javaScriptDragAndDropToBottom(
				index = ${index},
				key_targetFragmentName = ${targetFragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET");
		}
		else {
			DragAndDrop.javaScriptDragAndDropToObject(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#FRAGMENT_DROP_TARGET");
		}

		PageEditor.waitForAutoSave();

		PageEditor.viewFragment(
			fragmentName = ${portletName},
			position = ${position});

		Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
	}

	@summary = "Default summary"
	macro addWidgetViaKeyboard(widgetName = null, upCount = null, categoryName = null) {
		PageEditor.assertFragmentSidebarLoaded();

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		Navigator.gotoNavTab(navTab = "Widgets");

		Type.sendKeysApplicationSearch(
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
			value1 = ${widgetName});

		KeyPress(
			ariaLabel = "Add ${widgetName}",
			key_collectionName = ${categoryName},
			key_fragmentName = ${widgetName},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
			value1 = "\ENTER");

		if (isSet(upCount)) {
			var i = 0;

			while (${i} != ${upCount}) {
				KeyPress(
					ariaLabel = "Add ${widgetName}",
					key_collectionName = ${categoryName},
					key_fragmentName = ${widgetName},
					locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
					value1 = "\UP");

				var i = ${i} + 1;
			}
		}

		KeyPress(
			ariaLabel = "Add ${widgetName}",
			key_collectionName = ${categoryName},
			key_fragmentName = ${widgetName},
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL",
			value1 = "\ENTER");

		PageEditor.waitForAutoSave();

		Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
	}

	@summary = "Default summary"
	macro assertAutoImageResolution(type = null, element = null, adaptiveMediaName = null) {
		if (${type} == "backgroundImage") {
			var backgroundImage = Css.getCssValue(
				attribute = "background-image",
				element = ${element});

			if (contains(${backgroundImage}, ${adaptiveMediaName})) {
				echo("The auto image resolution is right.");
			}
			else {
				TestUtils.fail(message = "The auto image resolution is wrong.");
			}
		}
		else {
			var currentSrc = selenium.getAttribute("${element}@currentSrc");

			if (contains(${currentSrc}, ${adaptiveMediaName})) {
				echo("The auto image resolution is right.");
			}
			else {
				TestUtils.fail(message = "The auto image resolution is wrong.");
			}
		}
	}

	@summary = "Default summary"
	macro assertFalseEntryIsNotPresent() {
		AssertElementNotPresent(locator1 = "PageEditor#COLLECTION_ITEM_FALSE_ENTRY");
	}

	@summary = "Default summary"
	macro assertFragmentSidebarLoaded() {
		WaitForPageLoad();

		WaitForVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR_LOADED");
	}

	@summary = "Default summary"
	macro assertPaginationNumericTypeIsDisplayed(pageNumberList = null) {
		AssertElementPresent(locator1 = "PageEditor#COLLECTION_ITEM_PAGINATION_NEXT_BUTTON_NUMERIC");

		for (var pageNumber : list ${pageNumberList}) {
			var key_pageNumber = ${pageNumber};

			AssertElementPresent(locator1 = "PageEditor#COLLECTION_ITEM_PAGINATION_NUMBER_BUTTON");
		}

		AssertElementPresent(locator1 = "PageEditor#COLLECTION_ITEM_PAGINATION_PREVIOUS_BUTTON_NUMERIC");
	}

	@summary = "Default summary"
	macro assertPaginationSimpleTypeIsDisplayed() {
		AssertElementPresent(locator1 = "PageEditor#COLLECTION_ITEM_PREVIOUS_BUTTON");

		AssertElementPresent(locator1 = "PageEditor#COLLECTION_ITEM_NEXT_BUTTON");
	}

	@summary = "Default summary"
	macro assertTrueEntryIsPresent() {
		AssertVisible(locator1 = "PageEditor#COLLECTION_ITEM_TRUE_ENTRY");
	}

	@summary = "Default summary"
	macro changeExperience(newExperience = null) {
		var key_experienceName = ${newExperience};

		PageEditor.openExperienceMenu();

		Click(locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");

		PageEditor.clickManagementBar();

		AssertElementPresent(locator1 = "PageEditor#EXPERIENCE_BUTTON_NAME");
	}

	@summary = "Default summary"
	macro changeLocale(currentLocale = null, locale = null) {
		Click(
			key_currentLocale = StringUtil.lowerCase(${currentLocale}),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");

		Click(
			key_locale = ${locale},
			locator1 = "Translation#DROPDOWN_MENU_ITEM");

		AssertVisible(
			key_currentLocale = StringUtil.lowerCase(${locale}),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");
	}

	@summary = "Default summary"
	macro clearSelection(fieldLabel = null) {
		if (contains(${fieldLabel}, "Image")) {
			Click.clickNoWaitForVisible(
				key_fieldLabel = ${fieldLabel},
				key_text = "times-circle",
				locator1 = "Icon#ANY_ITEM_SELECTOR");
		}
		else {
			Click.clickNoWaitForVisible(
				key_fieldLabel = ${fieldLabel},
				key_text = "restore",
				locator1 = "Icon#ANY_ITEM_SELECTOR");
		}

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro clickBack() {
		Click(locator1 = "Icon#ANGLE_LEFT_BACK");
	}

	@summary = "Default summary"
	macro clickConfigurableField(fragmentName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		WaitForVisible(locator1 = "Fragment#FRAGMENT_LABEL");

		Click.javaScriptClick(
			index = ${index},
			key_fragmentName = ${fragmentName},
			locator1 = "Fragment#FRAGMENT_LABEL");
	}

	@summary = "Default summary"
	macro clickEditableField(className = null, contributed = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (${contributed} == "false") {
			PageEditor.clickConfigurableField(fragmentName = ${fragmentName});
		}
		else {
			PageEditor.clickConfigurableField(
				fragmentName = ${fragmentName},
				index = ${index});
		}

		PageEditor.gotoTab(tabName = "Browser");

		if (isSet(className)) {
			var fragmentName = ${className};
		}
		else {
			var fragmentName = StringUtil.replace(${fragmentName}, " ", "-");

			var fragmentName = StringUtil.lowerCase(${fragmentName});
		}

		if (${contributed} == "false") {
			Click(locator1 = "Fragment#EDITABLE_FIELD_ANY");
		}
		else {
			Click(locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}
	}

	@summary = "Default summary"
	macro clickManagementBar() {
		var elementHeight = selenium.getElementHeight("PageEditor#FRAGMENT_SIDEBAR_BODY");

		var offSetY = 25 * ${elementHeight};

		var offSetY = ${offSetY} / 100;
		var elementWidth = selenium.getElementWidth("PageEditor#FRAGMENT_SIDEBAR_BODY");

		var offSetX = 0 * ${elementWidth};

		var offSetX = ${offSetX} / 100;

		Click.clickAt(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY",
			value1 = "${offSetX},${offSetY}");
	}

	@summary = "Default summary"
	macro closeSidebar(tabName = null) {
		var key_tabName = ${tabName};

		Click.clickNoMouseOver(locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");

		AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON_ACTIVE");
	}

	@summary = "Default summary"
	macro configureFragment(boxShadow = null, borderColor = null, enableLazyLoading = null, cssClasses = null, paddingRight = null, type = null, numberOfSlides = null, marginRight = null, paddingBottom = null, borderWidth = null, fieldLabel = null, hideFragment = null, action = null, imageSize = null, paddingTop = null, numberOfTabs = null, key = null, vocabularyType = null, customCSS = null, height = null, separatorColor = null, backgroundColor = null, successInteraction = null, hideFromSiteSearchResults = null, textColor = null, errorInteraction = null, marginLeft = null, errorText = null, unit = null, borderRadius = null, size = null, bottomSpacing = null, successText = null, fontSize = null, marginBottom = null, style = null, opacity = null, headingLevel = null, paddingLeft = null, marginTop = null) {
		if (isSet(action)) {
			Select(
				key_fieldLabel = "Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${action});

			PageEditor.waitForAutoSave();
		}

		if (isSet(alignment)) {
			var alignment = StringUtil.replace(${alignment}, " ", "-");

			var alignment = StringUtil.lowerCase(${alignment});

			Click(
				key_text = ${alignment},
				locator1 = "PageEditor#TEXT_ALIGN_ICON");

			PageEditor.waitForAutoSave();
		}

		if (isSet(backgroundColor)) {
			PageEditor.selectColorSwatchItem(
				colorSwatchItem = ${backgroundColor},
				fieldLabel = "Background Color");

			PageEditor.waitForAutoSave();
		}

		if (isSet(borderColor)) {
			PageEditor.selectColorSwatchItem(
				colorSwatchItem = ${borderColor},
				fieldLabel = "Border Color");

			PageEditor.waitForAutoSave();
		}

		if (isSet(borderRadius)) {
			Click(
				key_fieldLabel = "Border Radius",
				key_text = "theme",
				locator1 = "Icon#ANY_ITEM_SELECTOR");

			MenuItem.click(menuItem = ${borderRadius});

			PageEditor.waitForAutoSave();
		}

		if (isSet(unit)) {
			Click(
				key_fieldLabel = ${fieldLabel},
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL");

			DropdownMenuItem.click(menuItem = ${unit});
		}

		if (isSet(borderWidth)) {
			Type(
				key_text = "Border Width",
				locator1 = "TextInput#ANY",
				value1 = ${borderWidth});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (isSet(bottomSpacing)) {
			Select(
				key_fieldLabel = "Bottom Spacing",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${bottomSpacing});

			PageEditor.waitForAutoSave();
		}

		if (isSet(boxShadow)) {
			Click(
				key_fieldLabel = "Shadow",
				key_text = "theme",
				locator1 = "Icon#ANY_ITEM_SELECTOR");

			MenuItem.click(menuItem = ${boxShadow});

			PageEditor.waitForAutoSave();
		}

		if (isSet(cssClasses)) {
			if (!(isSet(key))) {
				Type.sendKeys(
					key_text = "CSS Classes",
					locator1 = "TextInput#ANY",
					value1 = ${cssClasses});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
			}
			else {
				for (var cssClass : list ${cssClasses}) {
					Type.sendKeys(
						key_text = "CSS Classes",
						locator1 = "TextInput#ANY",
						value1 = ${cssClass});

					KeyPress(
						key_text = "CSS Classes",
						locator1 = "TextInput#ANY",
						value1 = ${key});
				}
			}

			PageEditor.waitForAutoSave();
		}

		if (isSet(customCSS)) {
			Type(
				key_label = "Custom CSS",
				locator1 = "TextArea#ANY_LABELED",
				value1 = ${customCSS});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (${enableLazyLoading} == "true") {
			Check.checkNotVisible(
				checkboxName = "Enable Lazy Loading",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}
		else if (${enableLazyLoading} == "false") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Enable Lazy Loading",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(errorInteraction)) {
			Select(
				key_fieldLabel = "Error Interaction",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${errorInteraction});

			if (isSet(errorText)) {
				Type(
					key_text = "Error Text",
					locator1 = "TextInput#ANY",
					value1 = ${errorText});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
			}

			PageEditor.waitForAutoSave();
		}

		if (isSet(fontSize)) {
			Select(
				key_text = "font-size",
				locator1 = "Select#GENERIC_SELECT_FIELD_WITH_ICON",
				value1 = ${fontSize});

			PageEditor.waitForAutoSave();
		}

		if (isSet(headingLevel)) {
			Select(
				key_fieldLabel = "Heading Level",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${headingLevel});

			PageEditor.waitForAutoSave();
		}

		if (${hideFragment} == "true") {
			Click.clickAtNotVisible(
				checkboxName = "Hide Fragment",
				locator1 = "Checkbox#ANY_CHECKBOX");

			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Hide Fragment",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (${hideFragment} == "false") {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Hide Fragment",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (${hideFromSiteSearchResults} == "true") {
			Check.checkNotVisible(
				checkboxName = "Hide from Site Search Results",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(height)) {
			Select(
				key_fieldLabel = "Height",
				locator1 = "PageEditor#CUSTOM_STYLES_SELECT_FIELD",
				value1 = ${height});

			PageEditor.waitForAutoSave();
		}

		if (isSet(imageSize)) {
			Select(
				key_fieldLabel = "Image Size",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${imageSize});

			PageEditor.waitForAutoSave();
		}

		if (isSet(marginBottom)) {
			Click(
				ariaLabel = "Margin Bottom",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${marginBottom}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(marginLeft)) {
			Click(
				ariaLabel = "Margin Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${marginLeft}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(marginRight)) {
			Click(
				ariaLabel = "Margin Right",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${marginRight}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(marginTop)) {
			Click(
				ariaLabel = "Margin Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${marginTop}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(numberOfSlides)) {
			Type(
				key_fieldLabel = "Number of Slides",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${numberOfSlides});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_fieldLabel = "Number of Slides",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${numberOfSlides});
		}

		if (isSet(numberOfTabs)) {
			Type(
				key_fieldLabel = "Number of Tabs",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${numberOfTabs});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_fieldLabel = "Number of Tabs",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${numberOfTabs});
		}

		if (isSet(opacity)) {
			Type(
				ariaLabel = "Opacity",
				locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
				value1 = ${opacity});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (isSet(paddingBottom)) {
			Click(
				ariaLabel = "Padding Bottom",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${paddingBottom}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(paddingLeft)) {
			Click(
				ariaLabel = "Padding Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${paddingLeft}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(paddingRight)) {
			Click(
				ariaLabel = "Padding Right",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${paddingRight}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(paddingTop)) {
			Click(
				ariaLabel = "Padding Top",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DropdownMenuItem.click(menuItem = "Spacer ${paddingTop}");

			PageEditor.waitForAutoSave();
		}

		if (isSet(separatorColor)) {
			Click(
				key_borderBottom = "Separator Color",
				key_paletteItem = ${separatorColor},
				locator1 = "Button#BORDER_BOTTOM_PALETTE_ITEM");

			PageEditor.waitForAutoSave();
		}

		if (isSet(size)) {
			Select(
				key_fieldLabel = "Size",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${size});

			PageEditor.waitForAutoSave();
		}

		if (isSet(successInteraction)) {
			Select(
				key_fieldLabel = "Success Interaction",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${successInteraction});

			if (isSet(displayPage)) {
				Select(
					key_fieldLabel = "Display Page",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${displayPage});
			}

			if (isSet(successText)) {
				Type(
					key_text = "Success Text",
					locator1 = "TextInput#ANY",
					value1 = ${successText});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
			}

			PageEditor.waitForAutoSave();
		}

		if (isSet(textColor)) {
			PageEditor.selectColorSwatchItem(
				colorSwatchItem = ${textColor},
				fieldLabel = "Text Color");

			PageEditor.waitForAutoSave();
		}

		if (isSet(type)) {
			Select(
				key_fieldLabel = "Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${type});

			PageEditor.waitForAutoSave();
		}

		if (isSet(style)) {
			Select(
				key_fieldLabel = "Style",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${style});

			PageEditor.waitForAutoSave();
		}

		if (isSet(vocabularyType)) {
			Select(
				key_fieldLabel = "Vocabulary Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${vocabularyType});

			PageEditor.waitForAutoSave();
		}
	}

	@summary = "Default summary"
	macro configureFragmentViaKeyboard(fieldLabel = null, difference = null) {
		if (${difference} == "Up") {
			KeyPress(
				key_fieldLabel = ${fieldLabel},
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "\UP");
		}
		else {
			KeyPress(
				key_fieldLabel = ${fieldLabel},
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "\DOWN");
		}

		KeyPress(
			key_fieldLabel = ${fieldLabel},
			locator1 = "FormFields#NUMBER_FIELD",
			value1 = "\ENTER");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro createPageTemplate(alertMessage = null, collectionName = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Convert to Page Template");

		if (isSet(experienceName)) {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "The page template is based on the current experience.");
		}

		Select(
			key_fieldLabel = "Page Template Set",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = ${collectionName});

		Click(locator1 = "Modal#SAVE_BUTTON");

		if (IsElementPresent(locator1 = "Message#ERROR_DISMISSIBLE")) {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_DISMISSIBLE",
				value1 = ${alertMessage});
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro deleteAllExperiences() {
		PageEditor.openExperienceMenu();

		while (IsElementPresent(locator1 = "PageEditor#EXPERIENCE_DELETE_BUTTON")) {
			ClickNoError(locator1 = "PageEditor#EXPERIENCE_DELETE_BUTTON");

			AssertConfirm(value1 = "Do you want to delete this experience? Its content will be deleted.");

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro deleteComment(fragmentComment = null) {
		MouseOver(locator1 = "PageEditor#FRAGMENT_SIDEBAR_ELLIPSIS");

		Click(locator1 = "PageEditor#FRAGMENT_SIDEBAR_ELLIPSIS");

		AssertClickNoError(
			key_menuItem = "Delete",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Delete");

		Click(locator1 = "Button#DELETE_FRAGMENT_COMMENT");

		AssertTextNotPresent(value1 = ${fragmentComment});
	}

	@summary = "Default summary"
	macro deleteExperience(newExperience = null) {
		var key_experienceName = ${newExperience};

		PageEditor.openExperienceMenu();

		ClickNoError(locator1 = "PageEditor#EXPERIENCE_DELETE_BUTTON");

		AssertConfirm(value1 = "Do you want to delete this experience? Its content will be deleted.");

		Alert.viewSuccessMessage();

		PageEditor.openExperienceMenu();

		AssertElementNotPresent(
			key_experienceName = ${newExperience},
			locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");
	}

	@summary = "Default summary"
	macro deleteExperienceCancel() {
		PageEditor.openExperienceMenu();

		ClickNoError(locator1 = "PageEditor#EXPERIENCE_DELETE_BUTTON");

		Confirm.dismissAlert();
	}

	@summary = "Delete the page rule"
	macro deletePageRule(ruleName = null) {
		Click(
			key_ruleName = ${ruleName},
			locator1 = "PageEditor#PAGE_RULE_LIST_ITEM_ELLIPSIS");

		DropdownMenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();
	}

	@summary = "Delete a page rule action"
	macro deletePageRuleAction() {
		if (!(isSet(index))) {
			var index = 1;
		}

		MouseOver.mouseOverNotVisible(
			index = ${index},
			locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_DELETE_BUTTON");

		Click(
			index = ${index},
			locator1 = "PageEditor#PAGE_RULE_BUILDER_ACTION_DELETE_BUTTON");
	}

	@summary = "Delete a page rule condition"
	macro deletePageRuleCondition() {
		if (!(isSet(index))) {
			var index = 1;
		}

		MouseOver.mouseOverNotVisible(
			index = ${index},
			locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_DELETE_BUTTON");

		Click(
			index = ${index},
			locator1 = "PageEditor#PAGE_RULE_BUILDER_CONDITION_DELETE_BUTTON");
	}

	@summary = "Default summary"
	macro deprioritizeExperience(experienceName = null) {
		var key_experienceName = ${experienceName};

		PageEditor.openExperienceMenu();

		Click(locator1 = "PageEditor#EXPERIENCE_DEPRIORITIZE_BUTTON");
	}

	@summary = "Default summary"
	macro detachToken(fieldLabel = null) {
		Click.clickNoWaitForVisible(
			key_fieldLabel = ${fieldLabel},
			key_text = "chain-broken",
			locator1 = "Icon#ANY_ITEM_SELECTOR");

		PageEditor.waitForAutoSave();

		AssertElementPresent(
			key_fieldLabel = ${fieldLabel},
			key_text = "theme",
			locator1 = "Icon#ANY_ITEM_SELECTOR");
	}

	@summary = "Default summary"
	macro discardDraft() {
		Button.clickNoError(button = "Discard Draft");

		AssertConfirm(value1 = "Are you sure you want to discard the current draft and apply the latest published changes?");
	}

	@summary = "Default summary"
	macro duplicateExperience(experienceName = null) {
		PageEditor.openExperienceMenu();

		Click(locator1 = "PageEditor#EXPERIENCE_DUPLICATE_BUTTON");

		AssertElementPresent(
			key_experienceName = "Copy of ${experienceName}",
			locator1 = "PageEditor#EXPERIENCE_SELECT_ITEM");
	}

	@summary = "Default summary"
	macro editAppliedFilters(columnNumber = null, targetCollection = null) {
		var key_fragmentName = "Applied Filters";

		if (isSet(columnNumber)) {
			Click.clickNoWaitForVisible(
				key_columnNumber = ${columnNumber},
				key_elementHeader = "//div[@data-name='${key_fragmentName}']",
				key_position = 1,
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
		else {
			PageEditor.clickConfigurableField(fragmentName = "Applied Filters");

			PageEditor.gotoTab(tabName = "Browser");
		}

		WaitForVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "General");

		if (isSet(targetCollection)) {
			Click(
				key_fieldLabel = "Target Collection",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");

			Check.checkNotVisible(
				key_checkboxName = ${targetCollection},
				locator1 = "MenuItem#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(includeClearFiltersOption)) {
			Check.checkNotVisible(
				checkboxName = "Include Clear Filters Option",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}
	}

	@summary = "Default summary"
	macro editCDLayoutAndMaxNumber(maxNumber = null, layoutColumns = null) {
		Click.clickNoWaitForVisible(locator1 = "Masterclass#COLLECTION_DISPLAY");

		Navigator.gotoNavTab(navTab = "General");

		Select(
			locator1 = "Masterclass#LAYOUT_SELECT",
			value1 = ${layoutColumns});

		Type(
			locator1 = "Masterclass#MAX_NUMBER_OF_ITEMS",
			value1 = ${maxNumber});
	}

	@summary = "Default summary"
	macro editCollectionDisplay(pagination = null, itemTypeList = null, tagNameList = null, infoListProviderName = null, emptyCollectionAlert = null, maxNumberOfItemsToDisplay = null, displayAllPages = null, fragmentName = null, columnNumber = null, flexWrap = null, fieldLabel = null, assetTitle = null, showEmptyCollectionAlert = null, deviceType = null, depotName = null, filterResults = null, alignItems = null, styleDisplay = null, maxNumberOfPagesToDisplay = null, spaceBetweenColumns = null, selectedName = null, maxNumberOfItemsPerPage = null, assetListName = null, infoItemRelatedListProviderName = null, justifyContent = null, listItemStyle = null, layout = null, displayAllCollectionItems = null, option = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		var key_fragmentName = ${fragmentName};
		var key_index = ${index};

		if (isSet(deviceType) && (${deviceType} != "Desktop")) {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");
		}

		if (isSet(columnNumber)) {
			Click.clickNoWaitForVisible(
				key_columnNumber = ${columnNumber},
				key_elementHeader = "//div[@data-name='${key_fragmentName}']",
				key_position = 1,
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
		else {
			PageEditor.clickConfigurableField(
				fragmentName = ${fragmentName},
				index = ${index});

			PageEditor.gotoTab(tabName = "Browser");
		}

		if (isSet(deviceType) && (${deviceType} != "Desktop")) {
			SelectFrame(value1 = "relative=top");
		}

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "General");

		if (isSet(selectedName)) {
			PageEditor.viewItemSelectorText(
				fieldLabel = "Collection",
				text = ${selectedName});

			if (isSet(filterCollection)) {
				PageEditor.gotoEllipsisMenuItemInItemSelector(
					fieldLabel = "Collection",
					menuItem = "Filter Collection");

				if (isSet(clearFilter)) {
					Click(
						key_text = "Clear",
						locator1 = "Button#ANY");
				}

				if (isSet(itemTypeList)) {
					if (IsElementPresent(key_text = "Clear", locator1 = "Button#ANY")) {
						Click(
							key_text = "Clear",
							locator1 = "Button#ANY");
					}

					Click(
						key_text = "Select",
						locator1 = "Button#ANY");

					for (var itemType : list ${itemTypeList}) {
						Check.checkNotVisible(
							checkboxName = ${itemType},
							locator1 = "Checkbox#ANY_CHECKBOX");
					}

					Click(
						key_fieldLabel = "Item Type",
						locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL");
				}

				if (isSet(tagNameList)) {
					Click(
						key_text = "Select",
						locator1 = "Button#ANY");

					for (var tagName : list ${tagNameList}) {
						Check.checkNotVisible(
							checkboxName = ${tagName},
							locator1 = "Checkbox#ANY_CHECKBOX");
					}

					Click(
						key_fieldLabel = "Tag",
						locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON_WITH_LABEL");
				}

				if (isSet(assetTitle)) {
					Type(
						key_text = "Title",
						locator1 = "TextInput#ANY",
						value1 = ${assetTitle});

					Click(
						key_fieldLabel = "Title",
						locator1 = "FormFields#LABEL");
				}

				if (isSet(filterResults)) {
					AssertTextEquals(
						locator1 = "Search#SEARCH_INFO_WITHOUT_INLINE",
						value1 = ${filterResults});
				}

				if (isSet(fieldLabel)) {
					Select(
						key_fieldLabel = ${fieldLabel},
						locator1 = "Select#GENERIC_SELECT_FIELD",
						value1 = ${option});
				}

				Button.clickSave();
			}
		}
		else if (!(isSet(deviceType)) || (${deviceType} == "Desktop")) {
			if (IsTextEqual(key_fieldLabel = "Collection", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
				Click(
					key_fieldLabel = "Collection",
					key_text = "plus",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}
			else {
				Click(
					key_fieldLabel = "Collection",
					key_text = "change",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			if (isSet(assetListName)) {
				NavItem.click(navItem = "Collections");

				if (isSet(depotName)) {
					Click(
						key_breadcrumbName = "Sites and Libraries",
						locator1 = "Breadcrumb#BREADCRUMB_ENTRY");

					Click(
						key_groupTab = "Asset Library",
						locator1 = "ItemSelector#NAVIGATION_GROUP_TAB");

					LexiconCard.clickCard(card = ${depotName});
				}

				LexiconCard.clickCard(card = ${assetListName});

				SelectFrameTop();

				PageEditor.waitForAutoSave();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Collection",
					text = ${assetListName});
			}
			else if (isSet(infoListProviderName)) {
				NavItem.click(navItem = "Collection Providers");

				LexiconCard.clickCard(card = ${infoListProviderName});

				SelectFrameTop();

				PageEditor.waitForAutoSave();

				PageEditor.clickConfigurableField(
					fragmentName = ${fragmentName},
					index = ${index});

				PageEditor.gotoTab(tabName = "Browser");

				PageEditor.viewItemSelectorText(
					fieldLabel = "Collection",
					text = ${infoListProviderName});
			}
			else if (isSet(infoItemRelatedListProviderName)) {
				NavItem.click(navItem = "Related Items Collection Providers");

				LexiconCard.clickCard(card = ${infoItemRelatedListProviderName});

				SelectFrameTop();

				PageEditor.waitForAutoSave();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Collection",
					text = ${infoItemRelatedListProviderName});
			}
		}

		if (isSet(styleDisplay)) {
			if ((${styleDisplay} != "Grid") && (${styleDisplay} != "Flex Row") && (${styleDisplay} != "Flex Column")) {
				AssertElementPresent(
					key_fieldLabel = "Style Display",
					key_groupLabel = "Templates",
					key_value = ${styleDisplay},
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			Select(
				key_fieldLabel = "Style Display",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${styleDisplay});

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Style Display",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${styleDisplay});

			if (isSet(listItemStyle)) {
				Select(
					key_fieldLabel = "List Item Style",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${listItemStyle});

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "List Item Style",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${listItemStyle});
			}
		}

		if (isSet(flexWrap)) {
			Select(
				key_fieldLabel = "Flex Wrap",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${flexWrap});

			PageEditor.waitForAutoSave();
		}

		if (isSet(alignItems)) {
			Select(
				key_fieldLabel = "Align Items",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${alignItems});

			PageEditor.waitForAutoSave();
		}

		if (isSet(justifyContent)) {
			Select(
				key_fieldLabel = "Justify Content",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${justifyContent});

			PageEditor.waitForAutoSave();
		}

		if (isSet(layout)) {
			Select(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${layout});

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${layout});
		}

		if (${spaceBetweenColumns} == "true") {
			Check.checkNotVisible(
				checkboxName = "Show Gutter",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (${spaceBetweenColumns} == "false") {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Show Gutter",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (${showEmptyCollectionAlert} == "true") {
			Check.checkNotVisible(
				checkboxName = "Show Empty Collection Alert",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (${showEmptyCollectionAlert} == "false") {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Show Empty Collection Alert",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(emptyCollectionAlert)) {
			Type(
				key_text = "Empty Collection Alert",
				locator1 = "TextInput#ANY",
				value1 = ${emptyCollectionAlert});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_text = "Empty Collection Alert",
				locator1 = "TextInput#ANY",
				value1 = ${emptyCollectionAlert});
		}

		if (isSet(pagination)) {
			Select(
				key_fieldLabel = "Pagination",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${pagination});

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Pagination",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${pagination});
		}

		if (${displayAllPages} == "true") {
			Check.checkNotVisible(
				checkboxName = "Display All Pages",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
		else if (${displayAllPages} == "false") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Display All Pages",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		if (${displayAllCollectionItems} == "true") {
			Check.checkNotVisible(
				checkboxName = "Display All Collection Items",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
		else if (${displayAllCollectionItems} == "false") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Display All Collection Items",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		if (isSet(maxNumberOfItemsToDisplay)) {
			Type(
				key_fieldLabel = "Maximum Number of Items to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${maxNumberOfItemsToDisplay});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Items to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${maxNumberOfItemsToDisplay});
		}

		if (isSet(maxNumberOfPagesToDisplay)) {
			Type(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${maxNumberOfPagesToDisplay});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = ${maxNumberOfPagesToDisplay});
		}

		if (isSet(maxNumberOfItemsPerPage)) {
			Type(
				key_text = "Maximum Number of Items per Page",
				locator1 = "TextInput#ANY",
				value1 = ${maxNumberOfItemsPerPage});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_text = "Maximum Number of Items per Page",
				locator1 = "TextInput#ANY",
				value1 = ${maxNumberOfItemsPerPage});
		}
	}

	@summary = "Default summary"
	macro editCollectionFilter(index = null, vocabularyName = null, label = null, selectedName = null, categoryName = null, filter = null, subcategoryNameList = null, fragmentName = null, columnNumber = null, targetCollection = null, categoryNameList = null) {
		var key_fragmentName = ${fragmentName};

		if (isSet(columnNumber)) {
			Click.clickNoWaitForVisible(
				key_columnNumber = ${columnNumber},
				key_elementHeader = "//div[@data-name='${key_fragmentName}']",
				key_position = 1,
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
		else {
			PageEditor.clickConfigurableField(
				fragmentName = ${fragmentName},
				index = ${index});

			PageEditor.gotoTab(tabName = "Browser");
		}

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "General");

		if (isSet(targetCollection)) {
			Click(
				key_fieldLabel = "Target Collection",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");

			Check.checkNotVisible(
				key_checkboxName = ${targetCollection},
				locator1 = "MenuItem#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(filter)) {
			Select(
				key_fieldLabel = "Filter",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${filter});

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Filter",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${filter});
		}

		if (isSet(selectedName)) {
			PageEditor.viewItemSelectorText(
				fieldLabel = "Source",
				text = ${selectedName});
		}
		else if (isSet(vocabularyName)) {
			if (IsTextEqual(key_fieldLabel = "Source", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
				Click(
					key_fieldLabel = "Source",
					key_text = "plus",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}
			else {
				Click(
					key_fieldLabel = "Source",
					key_text = "change",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "name",
				tableEntry = ${vocabularyName});

			for (var category : list ${categoryNameList}) {
				AssertVisible(
					key_columnName = "name",
					key_tableEntry = ${category},
					locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK");
			}

			if (isSet(categoryName)) {
				LexiconTable.clickTableEntryColumnLink(
					columnName = "name",
					tableEntry = ${categoryName});

				for (var subcategory : list ${subcategoryNameList}) {
					AssertVisible(
						key_columnName = "name",
						key_tableEntry = ${subcategory},
						locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK");
				}

				Button.click(button = "Select This Level");

				PageEditor.waitForAutoSave();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Source",
					text = ${categoryName});
			}
			else {
				Button.click(button = "Select This Level");

				PageEditor.waitForAutoSave();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Source",
					text = ${vocabularyName});
			}
		}

		if (isSet(includeSearchField)) {
			Check.checkNotVisible(
				checkboxName = "Include Search Field",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(singleSelection)) {
			Check.checkNotVisible(
				checkboxName = "Single Selection",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(showHelpText)) {
			Check.checkNotVisible(
				checkboxName = "Show Help Text",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(showLabel)) {
			Check.checkNotVisible(
				checkboxName = "Show Label",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (isSet(label)) {
			Type(
				key_text = "Label",
				locator1 = "TextInput#ANY",
				value1 = ${label});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}
	}

	@summary = "Default summary"
	macro editComment(fragmentCommentEdit = null) {
		MouseOver(locator1 = "PageEditor#FRAGMENT_SIDEBAR_ELLIPSIS");

		Click(locator1 = "PageEditor#FRAGMENT_SIDEBAR_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		Click.clickAt(locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS_EDITOR");

		Type(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS_EDITOR",
			value1 = ${fragmentCommentEdit});

		Click(locator1 = "Button#UPDATE");
	}

	@summary = "Default summary"
	macro editContentDisplay(template = null, sourceFileName = null, depotName = null, navTab = null, webContentTitle = null, fragmentName = null, imageFileName = null, webContentContent = null, assetTitle = null, objectEntryId = null, navItemStyle = null, entryTitle = null, entryContent = null, object = null) {
		var key_fragmentName = ${fragmentName};

		PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "General");

		if (isSet(inCollectionDisplay)) {
			Select(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${template});

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${template});
		}
		else {
			if (IsTextEqual(key_fieldLabel = "Item", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
				Click(
					key_fieldLabel = "Item",
					key_text = "plus",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}
			else {
				Click(
					key_fieldLabel = "Item",
					key_text = "change",
					locator1 = "Icon#ANY_ITEM_SELECTOR");
			}

			if (IsElementPresent(key_menuItem = "Select Item...", locator1 = "MenuItem#ANY_MENU_ITEM")) {
				MenuItem.click(menuItem = "Select Item...");
			}

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			if (isSet(documentandmedia)) {
				if (IsElementPresent(locator1 = "MenuBar#MENU_BAR")) {
					MenuBar.click(menuBar = "Documents and Media");
				}
				else {
					Navigator.gotoNavTab(navTab = "Documents and Media");
				}

				LexiconCard.clickCard(card = ${imageFileName});

				PageEditor.viewItemSelectorText(
					fieldLabel = "Item",
					text = ${imageFileName});

				if (isSet(sourceFileName)) {
					PageEditor.viewFragment(fragmentName = ${fragmentName});

					ContentPages.viewFragmentBackgroundImage(image = ${sourceFileName});
				}
			}

			if (isSet(blogs)) {
				if (IsElementPresent(locator1 = "MenuBar#MENU_BAR")) {
					MenuBar.click(menuBar = "Blogs");
				}
				else {
					Navigator.gotoNavTab(navTab = "Blogs");
				}

				LexiconCard.clickCard(card = ${entryTitle});

				SelectFrameTop();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Item",
					text = ${entryTitle});

				if (isSet(entryContent)) {
					ContentPages.viewFragmentText(
						assetType = "widget-content",
						fragmentName = "Content Display",
						text = ${entryContent});
				}
			}

			if (isSet(categories)) {
				if (IsElementPresent(locator1 = "MenuBar#MENU_BAR")) {
					MenuBar.click(menuBar = "Categories");
				}
				else {
					Navigator.gotoNavTab(navTab = "Categories");
				}

				Portlet.expandTree();

				AssertVisible(
					key_nodeName = ${assetTitle},
					locator1 = "Treeview#NODE_ITEM");

				Click(
					key_nodeName = ${assetTitle},
					locator1 = "Treeview#NODE_UNSELECTED");

				PageEditor.viewItemSelectorText(
					fieldLabel = "Item",
					text = ${assetTitle});
			}

			if (${navItemStyle} == "horizontal") {
				AssertElementNotPresent(locator1 = "MenuBar#MENU_BAR_VERTICAL");

				AssertElementPresent(
					key_tab = ${navTab},
					locator1 = "NavTab#TAB_LINK");
			}

			if (${navItemStyle} == "vertical") {
				AssertElementPresent(locator1 = "MenuBar#MENU_BAR_VERTICAL");
			}

			if (isSet(knowledgeBase)) {
				if (IsElementPresent(locator1 = "MenuBar#MENU_BAR")) {
					MenuBar.click(menuBar = "Knowledge Base Articles");
				}
				else {
					Navigator.gotoNavTab(navTab = "Knowledge Base Articles");
				}

				Click(
					key_kbArticleTitle = ${entryTitle},
					locator1 = "KnowledgeBaseSelectParent#SELECTOR_FIELD");

				SelectFrameTop();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Item",
					text = ${entryTitle});

				if (isSet(entryContent)) {
					ContentPages.viewFragmentText(
						assetType = "widget-content",
						fragmentName = "Content Display",
						text = ${entryContent});
				}
			}

			if (isSet(object)) {
				if (IsElementPresent(locator1 = "MenuBar#MENU_BAR")) {
					MenuBar.click(menuBar = ${object});
				}
				else {
					Navigator.gotoNavTab(navTab = ${object});
				}

				Click(
					key_listEntry = ${objectEntryId},
					locator1 = "LexiconList#LIST_ENTRY");

				SelectFrameTop();

				ContentPages.viewFragmentText(
					assetType = "contentobject",
					fragmentName = "Content Display",
					text = ${entryContent});
			}

			if (isSet(webcontent)) {
				if (IsElementPresent(locator1 = "MenuBar#MENU_BAR")) {
					MenuBar.click(menuBar = "Web Content");
				}
				else {
					Navigator.gotoNavTab(navTab = "Web Content");
				}

				if (isSet(depotName)) {
					var key_contentName = ${webContentTitle};

					AssertClick(
						key_breadcrumbName = "Sites and Libraries",
						locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
						value1 = "Sites and Libraries");

					AssertClick(
						key_groupTab = "Asset Library",
						locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
						value1 = "Asset Library");

					LexiconCard.clickCard(card = ${depotName});

					Click(locator1 = "ItemSelector#SELECT_FILE_WEB_CONTENT");
				}
				else {
					LexiconEntry.changeDisplayStyle(displayStyle = "cards");

					LexiconCard.clickCard(card = ${webContentTitle});
				}

				SelectFrameTop();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Item",
					text = ${webContentTitle});

				if (isSet(webContentContent)) {
					ContentPages.viewFragmentText(
						assetType = "journal",
						fragmentName = "Content Display",
						text = ${webContentContent});
				}
			}

			if (isSet(template)) {
				Select(
					key_fieldLabel = "Template",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${template});

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Template",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${template});
			}
		}

		SelectFrameTop();
	}

	@summary = "Default summary"
	macro editDropdown(displayedBehavior = null, panel = null, panelType = null) {
		var key_fragmentName = "Dropdown";

		PageEditor.clickConfigurableField(fragmentName = "Dropdown");

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		if (${panel} == "General") {
			Navigator.gotoNavTab(navTab = "General");

			if (isSet(displayedBehavior)) {
				Check.checkNotVisible(
					checkboxName = ${displayedBehavior},
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}

			if (isSet(panelType)) {
				Select(
					key_fieldLabel = "Panel Type",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${panelType});

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Panel Type",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${panelType});
			}
		}
	}

	@summary = "Default summary"
	macro editExperience(new_segmentName = null, new_experienceName = null) {
		PageEditor.openExperienceMenu();

		Click(locator1 = "PageEditor#EXPERIENCE_EDIT_BUTTON");

		if (isSet(new_experienceName)) {
			Type(
				locator1 = "PageEditor#EXPERIENCE_NAME",
				value1 = ${new_experienceName});
		}

		if (isSet(new_segmentName)) {
			Select(
				locator1 = "PageEditor#EXPERIENCE_SELECT_SEGMENT",
				value1 = ${new_segmentName});
		}

		Click(locator1 = "Button#SAVE");
	}

	@summary = "Default summary"
	macro editFormContainer(deviceType = null, showNotificationWhenFormIsSubmitted = null, displayPageName = null, siteName = null, successMessage = null, pageName = null, url = null, columnNumber = null, subtype = null, successText = null, contentType = null, successNotificationText = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (isSet(deviceType) && (${deviceType} != "Desktop")) {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");
		}

		if (isSet(columnNumber)) {
			Click.clickNoWaitForVisible(
				key_columnNumber = ${columnNumber},
				key_elementHeader = "//div[@data-name='Form Container']",
				key_position = 1,
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
		else {
			PageEditor.clickConfigurableField(
				fragmentName = "Form Container",
				index = ${index});

			PageEditor.gotoTab(tabName = "Browser");
		}

		if (isSet(deviceType) && (${deviceType} != "Desktop")) {
			SelectFrame(value1 = "relative=top");
		}

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "General");

		if (isSet(contentType)) {
			Select(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${contentType});

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Content Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${contentType});
		}

		if (isSet(subtype)) {
			Select(
				key_fieldLabel = "Subtype",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${subtype});

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Subtype",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${subtype});
		}

		if (isSet(contentType)) {
			task ("Select all form fields") {
				SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MANAGE_FORM_FIELDS");

				PortletEntry.selectAll();

				SelectFrame(value1 = "relative=top");

				Click(
					key_text = "Save",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				PageEditor.waitForAutoSave();
			}
		}

		if (${successMessage} == "Stay in Page") {
			Select(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Stay in Page");

			AssertSelectedLabel(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Stay in Page");

			PageEditor.waitForAutoSave();
		}
		else if (${successMessage} == "Show Embedded Message") {
			Select(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Show Embedded Message");

			AssertSelectedLabel(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Show Embedded Message");

			if (isSet(successText)) {
				Type(
					key_text = "Embedded Message",
					locator1 = "TextInput#ANY",
					value1 = ${successText});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
			}

			PageEditor.waitForAutoSave();
		}
		else if (${successMessage} == "Go to Page") {
			Select(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Go to Page");

			AssertSelectedLabel(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Go to Page");

			if (isSet(pageName)) {
				if (IsTextEqual(key_fieldLabel = "Page", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
					Click(
						key_fieldLabel = "Page",
						key_text = "plus",
						locator1 = "Icon#ANY_ITEM_SELECTOR");
				}
				else {
					Click(
						key_fieldLabel = "Page",
						key_text = "change",
						locator1 = "Icon#ANY_ITEM_SELECTOR");
				}

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				if (isSet(siteName)) {
					AssertClick(
						key_breadcrumbName = "Sites and Libraries",
						locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
						value1 = "Sites and Libraries");

					LexiconCard.clickCardTitle(card = ${siteName});
				}

				Portlet.expandTree();

				AssertVisible(
					key_nodeName = ${pageName},
					locator1 = "Treeview#NODE_ITEM");

				Click(
					key_nodeName = ${pageName},
					locator1 = "Treeview#NODE_UNSELECTED");

				SelectFrame(value1 = "relative=top");
			}

			PageEditor.waitForAutoSave();
		}
		else if (${successMessage} == "Go to External URL") {
			Select(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Go to External URL");

			AssertSelectedLabel(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Go to External URL");

			if (isSet(url)) {
				Type(
					key_text = "External URL",
					locator1 = "TextInput#ANY",
					value1 = ${url});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
			}

			PageEditor.waitForAutoSave();
		}
		else if (${successMessage} == "Go to Entry Display Page") {
			Select(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Go to Entry Display Page");

			AssertSelectedLabel(
				key_fieldLabel = "Success Action",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Go to Entry Display Page");

			Select(
				key_fieldLabel = "Display Page",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${displayPageName});

			PageEditor.waitForAutoSave();
		}

		if (${showNotificationWhenFormIsSubmitted} == "true") {
			Check.checkNotVisible(
				checkboxName = "Show Notification After Submit",
				locator1 = "Checkbox#ANY_CHECKBOX");

			if (isSet(successNotificationText)) {
				Type(
					key_text = "Success Notification Text",
					locator1 = "TextInput#ANY",
					value1 = ${successNotificationText});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();
			}
		}
	}

	@summary = "Default summary"
	macro editFragmentHTML(fileName = null, fragmentName = null, id = null, contributed = null) {
		PageEditor.gotoEditableFieldEdit(
			contributed = ${contributed},
			fragmentName = ${fragmentName},
			id = ${id});

		if (isSet(fileName)) {
			var content = TestCase.getFileContent(fileName = ${fileName});
		}

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Fragment#EDITABLE_HTML_FRAGMENT_FIELD",
			value1 = ${content});

		Click(locator1 = "Modal#SAVE_BUTTON");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro editFragmentImage(navTab = null, depotName = null, uploadFileName = null, fileName = null, fragmentName = null, imageFileName = null, imageDescription = null, id = null, invalidFileValidation = null, imageSourceURL = null, contributed = null) {
		PageEditor.gotoImageSource(
			contributed = ${contributed},
			fragmentName = ${fragmentName},
			id = ${id});

		if (!(IsSelectedLabel(key_fieldLabel = "Source Selection", locator1 = "Select#GENERIC_SELECT_FIELD", value1 = "Direct"))) {
			Select(
				key_fieldLabel = "Source Selection",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Direct");

			AssertSelectedLabel(
				key_fieldLabel = "Source Selection",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Direct");
		}

		if (${enableLazyLoading} == "true") {
			PageEditor.configureFragment(enableLazyLoading = "true");
		}

		if (IsTextEqual(key_fieldLabel = "Image", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
			Click(
				key_fieldLabel = "Image",
				key_text = "plus",
				locator1 = "Icon#ANY_ITEM_SELECTOR");
		}
		else {
			Click(
				key_fieldLabel = "Image",
				key_text = "change",
				locator1 = "Icon#ANY_ITEM_SELECTOR");
		}

		if (isSet(imageFileName)) {
			if (isSet(depotName)) {
				ItemSelector.selectRepositoryImage(
					depotName = ${depotName},
					imageFileName = ${imageFileName},
					navTab = "Documents and Media");
			}
			else if (isSet(uploadFileName)) {
				ItemSelector.uploadFile(
					invalidFileValidation = ${invalidFileValidation},
					navTab = ${navTab},
					uploadFileName = ${uploadFileName});
			}
			else {
				ItemSelector.selectDMImage(
					imageFileName = ${imageFileName},
					navTab = "Documents and Media");
			}
		}
		else if (isSet(imageSourceURL)) {
			ItemSelector.addImageFromURL(
				imageSourceURL = ${imageSourceURL},
				navTab = "URL");
		}
		else {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			WaitForEditable(locator1 = "TextInput#FILE");

			UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = ${fileName});

			WaitForElementPresent(
				key_text = "Add",
				locator1 = "Button#ANY_ENABLED");

			Button.clickAdd();
		}

		SelectFrameTop();

		PageEditor.waitForAutoSave();

		if (isSet(imageDescription)) {
			Type(
				key_text = "Image Description",
				locator1 = "TextInput#ANY",
				value1 = ${imageDescription});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_text = "Image Description",
				locator1 = "TextInput#ANY",
				value1 = ${imageDescription});
		}
	}

	@summary = "Default summary"
	macro editFragmentText(fragmentName = null, className = null, style = null, id = null, text = null, contributed = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		PageEditor.gotoEditableFieldEdit(
			className = ${className},
			contributed = ${contributed},
			fragmentName = ${fragmentName},
			id = ${id},
			index = ${index});

		if (isSet(text)) {
			Type(
				key_editor = "content",
				locator1 = "AlloyEditor#EDITOR",
				value1 = ${text});
		}

		if (isSet(style)) {
			SelectFieldText(
				key_editor = "content",
				locator1 = "AlloyEditor#EDITOR");

			Click(locator1 = "AlloyEditor#TEXT_FORMATTING_STYLE");

			Click(
				key_styleFormat = ${style},
				locator1 = "AlloyEditor#TEXT_FORMATTING_STYLE_DROPDOWN");
		}

		PageEditor.clickManagementBar();

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro editFragmentTextViaPageContentPanel(itemName = null, style = null, text = null) {
		Click.clickAtNotVisible(
			key_itemName = ${itemName},
			locator1 = "PageEditor#PAGE_CONTENTS_ITEM_EDIT_PENCIL");

		AssertElementPresent(
			key_text = "Edit Text",
			locator1 = "Button#ANY_DISABLED");

		if (isSet(text)) {
			Type(
				key_editor = "content",
				locator1 = "AlloyEditor#EDITOR",
				value1 = ${text});
		}

		if (isSet(style)) {
			SelectFieldText(
				key_editor = "content",
				locator1 = "AlloyEditor#EDITOR");

			Click(locator1 = "AlloyEditor#TEXT_FORMATTING_STYLE");

			Click(
				key_styleFormat = ${style},
				locator1 = "AlloyEditor#TEXT_FORMATTING_STYLE_DROPDOWN");
		}

		PageEditor.clickManagementBar();

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro editInput(helpText = null, numberOfLines = null, numberOfOptions = null, markAsRequired = null, label = null, showAllOptions = null, showCharactersCount = null, field = null, fragmentName = null, placeholder = null, hideLabel = null, hideHelpText = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		PageEditor.gotoConfiguration(
			fragmentName = ${fragmentName},
			index = ${index});

		if (isSet(field)) {
			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = ${field});

			PageEditor.waitForAutoSave();
		}

		if (${markAsRequired} == "true") {
			Check.checkNotVisible(
				checkboxName = "Mark as Required",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}
		else if (${markAsRequired} == "false") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Mark as Required",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (${hideLabel} == "true") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Label",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}
		else if (${hideLabel} == "false") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show Label",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}

		if (isSet(label)) {
			Type(
				key_text = "Label",
				locator1 = "TextInput#ANY",
				value1 = ${label});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (${hideHelpText} == "true") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Help Text",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}
		else if (${hideHelpText} == "false") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show Help Text",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}

		if (isSet(helpText)) {
			Type(
				key_text = "Help Text",
				locator1 = "TextInput#ANY",
				value1 = ${helpText});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (isSet(numberOfLines)) {
			Type(
				key_text = "Number of Lines",
				locator1 = "TextInput#ANY",
				value1 = ${numberOfLines});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (isSet(numberOfOptions)) {
			Type(
				key_text = "Number of Options",
				locator1 = "TextInput#ANY",
				value1 = ${numberOfOptions});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (isSet(placeholder)) {
			Type(
				key_text = "Placeholder",
				locator1 = "TextInput#ANY",
				value1 = ${placeholder});

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();
		}

		if (${showAllOptions} == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show All Options",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}
		else if (${showAllOptions} == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show All Options",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}

		if (${showCharactersCount} == "false") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Show Characters Count",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}
		else if (${showCharactersCount} == "true") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Show Characters Count",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			PageEditor.waitForAutoSave();
		}
	}

	@summary = "Default summary"
	macro editKBArticleNavigationMaxNestingLevel(maxNestingLevel = null) {
		var key_fragmentName = "Knowledge Base Navigation";

		PageEditor.clickConfigurableField(fragmentName = "Knowledge Base Navigation");

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "General");

		Type(
			key_fieldLabel = "Maximum Nesting Level",
			locator1 = "TextInput#GENERIC_NUMBER_INPUT",
			value1 = ${maxNestingLevel});

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro editLayoutContainer(boxShadow = null, borderColor = null, navItem = null, fieldName = null, htmlTag = null, backgroundImage = null, paddingRight = null, link = null, source = null, containerWidth = null, marginRight = null, uploadFileName = null, paddingBottom = null, flexWrap = null, maxHeight = null, borderWidth = null, paddingTop = null, contentDisplay = null, panel = null, height = null, backgroundColor = null, depotName = null, alignItems = null, hideFromSiteSearchResults = null, justifyContent = null, url = null, marginLeft = null, target = null, borderRadius = null, field = null, imageFileName = null, width = null, marginBottom = null, position = null, opacity = null, entryTitle = null, imageSourceURL = null, paddingLeft = null, marginTop = null) {
		if (isSet(position)) {
			var index = ${position};
		}
		else {
			var index = 1;
		}

		PageEditor.clickConfigurableField(
			fragmentName = "Container",
			index = ${index});

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		if (${enableLazyLoading} == "true") {
			Navigator.gotoNavTab(navTab = "Advanced");

			Check.checkNotVisible(
				checkboxName = "Set Content Visibility to Auto",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		if (${panel} == "Styles") {
			Navigator.gotoNavTab(navTab = "Styles");

			if (isSet(backgroundColor)) {
				PageEditor.selectColorSwatchItem(
					colorSwatchItem = ${backgroundColor},
					fieldLabel = "Background Color");

				PageEditor.waitForAutoSave();
			}

			if (isSet(backgroundImage)) {
				Select(
					key_fieldLabel = "Image Source",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${backgroundImage});

				if (${backgroundImage} == "Mapping") {
					if (isSet(entryTitle)) {
						PageEditorMapping.mapEditableFieldToAsset(
							entryTitle = ${entryTitle},
							navItem = ${navItem},
							uploadFileName = ${uploadFileName});

						if (${navItem} == "Documents and Media") {
							Select(
								locator1 = "PageEditorEditableLink#LAYOUT_BACKGROUND_IMAGE_FIELD",
								value1 = ${fieldName});
						}
						else {
							Select(
								locator1 = "PageEditorEditableLink#LAYOUT_BACKGROUND_IMAGE_FIELD",
								value1 = "Image");
						}

						PageEditor.waitForAutoSave();
					}
					else {
						if (isSet(source)) {
							Select(
								key_fieldLabel = "Source",
								locator1 = "Select#GENERIC_SELECT_FIELD",
								value1 = ${source});
						}

						WaitForEditable(
							key_fieldLabel = "Field",
							locator1 = "Select#GENERIC_SELECT_FIELD");

						Select(
							key_fieldLabel = "Field",
							locator1 = "Select#GENERIC_SELECT_FIELD",
							value1 = ${fieldName});

						PageEditor.waitForAutoSave();
					}
				}

				if (${backgroundImage} == "Direct") {
					if (IsTextEqual(key_fieldLabel = "Background Image", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
						Click(
							key_fieldLabel = "Background Image",
							key_text = "plus",
							locator1 = "Icon#ANY_ITEM_SELECTOR");
					}
					else {
						Click(
							key_fieldLabel = "Background Image",
							key_text = "change",
							locator1 = "Icon#ANY_ITEM_SELECTOR");
					}

					if (isSet(depotName)) {
						ItemSelector.selectRepositoryImage(
							depotName = ${depotName},
							imageFileName = ${imageFileName},
							navTab = "Documents and Media");
					}
					else {
						if (isSet(uploadFileName)) {
							ItemSelector.uploadFile(
								navTab = "Documents and Media",
								uploadFileName = ${uploadFileName});
						}
						else if (isSet(imageSourceURL)) {
							ItemSelector.addImageFromURL(
								imageSourceURL = ${imageSourceURL},
								navTab = "URL");
						}
						else {
							SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

							Click(
								key_card = ${entryTitle},
								locator1 = "Card#CARD_TITLE");
						}
					}

					SelectFrame(value1 = "relative=top");
				}

				PageEditor.waitForAutoSave();
			}

			if (isSet(borderColor)) {
				PageEditor.selectColorSwatchItem(
					colorSwatchItem = ${borderColor},
					fieldLabel = "Border Color");

				PageEditor.waitForAutoSave();
			}

			if (isSet(borderRadius)) {
				Click(
					key_fieldLabel = "Border Radius",
					key_text = "theme",
					locator1 = "Icon#ANY_ITEM_SELECTOR");

				MenuItem.click(menuItem = ${borderRadius});

				PageEditor.waitForAutoSave();
			}

			if (isSet(borderWidth)) {
				PageEditor.configureFragment(borderWidth = ${borderWidth});

				AssertTextEquals(
					key_text = "Border Width",
					locator1 = "TextInput#ANY",
					value1 = ${borderWidth});
			}

			if (isSet(boxShadow)) {
				Click(
					key_fieldLabel = "Shadow",
					key_text = "theme",
					locator1 = "Icon#ANY_ITEM_SELECTOR");

				MenuItem.click(menuItem = ${boxShadow});

				PageEditor.waitForAutoSave();
			}

			PageEditor.configureFragment(
				marginBottom = ${marginBottom},
				marginLeft = ${marginLeft},
				marginRight = ${marginRight},
				marginTop = ${marginTop},
				paddingBottom = ${paddingBottom},
				paddingLeft = ${paddingLeft},
				paddingRight = ${paddingRight},
				paddingTop = ${paddingTop});

			if (isSet(opacity)) {
				Type(
					ariaLabel = "Opacity",
					locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
					value1 = ${opacity});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();

				AssertTextEquals(
					ariaLabel = "Opacity",
					locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
					value1 = ${opacity});
			}
		}

		if (${panel} == "General") {
			Navigator.gotoNavTab(navTab = "General");

			if (isSet(containerWidth)) {
				Select(
					key_fieldLabel = "Container Width",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${containerWidth});

				PageEditor.waitForAutoSave();
			}

			if (isSet(contentDisplay)) {
				Select(
					key_fieldLabel = "Content Display",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${contentDisplay});

				PageEditor.waitForAutoSave();
			}

			if (isSet(flexWrap)) {
				Select(
					key_fieldLabel = "Flex Wrap",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${flexWrap});

				PageEditor.waitForAutoSave();
			}

			if (isSet(alignItems)) {
				Select(
					key_fieldLabel = "Align Items",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${alignItems});

				PageEditor.waitForAutoSave();
			}

			if (isSet(justifyContent)) {
				Select(
					key_fieldLabel = "Justify Content",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${justifyContent});

				PageEditor.waitForAutoSave();
			}

			if (isSet(height)) {
				Type(
					key_borderBottom = "Frame",
					key_fieldLabel = "Height",
					locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD",
					value1 = ${height});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();
			}

			if (isSet(maxHeight)) {
				Type(
					key_borderBottom = "Frame",
					key_fieldLabel = "Max Height",
					locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD",
					value1 = ${maxHeight});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();
			}

			if (isSet(width)) {
				Type(
					key_borderBottom = "Frame",
					key_fieldLabel = "Width",
					locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD",
					value1 = ${width});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();
			}

			if (${link} == "Mapped URL") {
				Select(
					key_fieldLabel = "Link",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${link});

				PageEditor.waitForAutoSave();

				PageEditorMapping.mapEditableFieldToAsset(
					entryTitle = ${entryTitle},
					navItem = ${navItem});

				Select(
					key_fieldLabel = "Field",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${field});

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Field",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${field});
			}
			else if (isSet(url)) {
				Type(
					key_text = "URL",
					locator1 = "TextInput#ANY",
					value1 = ${url});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();
			}

			if (${target} == "Blank") {
				Check.checkNotVisible(
					checkboxName = "Open in a new tab.",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}
			else if (${target} == "Self") {
				Uncheck.uncheckToggleSwitch(
					checkboxName = "Open in a new tab.",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}
		}

		if (${panel} == "Advanced") {
			Navigator.gotoNavTab(navTab = "Advanced");

			if (isSet(htmlTag)) {
				Select(
					key_fieldLabel = "HTML Tag",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${htmlTag});

				PageEditor.waitForAutoSave();
			}

			if (${hideFromSiteSearchResults} == "true") {
				Check.checkNotVisible(
					checkboxName = "Hide from Site Search Results",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}
		}
	}

	@summary = "Default summary"
	macro editLayoutGrid(boxShadow = null, borderColor = null, navItem = null, fieldName = null, backgroundImage = null, paddingRight = null, source = null, marginRight = null, uploadFileName = null, paddingBottom = null, borderWidth = null, paddingTop = null, panel = null, height = null, backgroundColor = null, depotName = null, inverseOrder = null, columnCount = null, spaceBetweenColumns = null, marginLeft = null, layout = null, borderRadius = null, imageFileName = null, marginBottom = null, position = null, opacity = null, entryTitle = null, imageSourceURL = null, paddingLeft = null, marginTop = null, verticalAlignment = null) {
		if (isSet(position)) {
			var index = ${position};
		}
		else {
			var index = 1;
		}

		PageEditor.clickConfigurableField(
			fragmentName = "Grid",
			index = ${index});

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		if (${panel} == "Styles") {
			Navigator.gotoNavTab(navTab = "Styles");

			if (isSet(backgroundColor)) {
				PageEditor.selectColorSwatchItem(
					colorSwatchItem = ${backgroundColor},
					fieldLabel = "Background Color");

				PageEditor.waitForAutoSave();
			}

			if (isSet(backgroundImage)) {
				Select(
					key_fieldLabel = "Image Source",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${backgroundImage});

				if (${backgroundImage} == "Mapping") {
					if (isSet(entryTitle)) {
						PageEditorMapping.mapEditableFieldToAsset(
							entryTitle = ${entryTitle},
							navItem = ${navItem},
							uploadFileName = ${uploadFileName});

						if (${navItem} == "Documents and Media") {
							Select(
								locator1 = "PageEditorEditableLink#LAYOUT_BACKGROUND_IMAGE_FIELD",
								value1 = ${fieldName});
						}
						else {
							Select(
								locator1 = "PageEditorEditableLink#LAYOUT_BACKGROUND_IMAGE_FIELD",
								value1 = "Image");
						}

						PageEditor.waitForAutoSave();
					}
					else {
						if (isSet(source)) {
							Select(
								key_fieldLabel = "Source",
								locator1 = "Select#GENERIC_SELECT_FIELD",
								value1 = ${source});
						}

						WaitForEditable(
							key_fieldLabel = "Field",
							locator1 = "Select#GENERIC_SELECT_FIELD");

						Select(
							key_fieldLabel = "Field",
							locator1 = "Select#GENERIC_SELECT_FIELD",
							value1 = ${fieldName});

						PageEditor.waitForAutoSave();
					}
				}

				if (${backgroundImage} == "Direct") {
					if (IsTextEqual(key_fieldLabel = "Background Image", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
						Click(
							key_fieldLabel = "Background Image",
							key_text = "plus",
							locator1 = "Icon#ANY_ITEM_SELECTOR");
					}
					else {
						Click(
							key_fieldLabel = "Background Image",
							key_text = "change",
							locator1 = "Icon#ANY_ITEM_SELECTOR");
					}

					if (isSet(depotName)) {
						ItemSelector.selectRepositoryImage(
							depotName = ${depotName},
							imageFileName = ${imageFileName},
							navTab = "Documents and Media");
					}
					else {
						if (isSet(uploadFileName)) {
							ItemSelector.uploadFile(
								navTab = "Documents and Media",
								uploadFileName = ${uploadFileName});
						}
						else if (isSet(imageSourceURL)) {
							ItemSelector.addImageFromURL(
								imageSourceURL = ${imageSourceURL},
								navTab = "URL");
						}
						else {
							SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

							Click(
								key_card = ${entryTitle},
								locator1 = "Card#CARD_TITLE");
						}
					}

					SelectFrame(value1 = "relative=top");
				}

				PageEditor.waitForAutoSave();
			}

			if (isSet(borderColor)) {
				PageEditor.selectColorSwatchItem(
					colorSwatchItem = ${borderColor},
					fieldLabel = "Border Color");

				PageEditor.waitForAutoSave();
			}

			if (isSet(borderRadius)) {
				Click(
					key_fieldLabel = "Border Radius",
					key_text = "theme",
					locator1 = "Icon#ANY_ITEM_SELECTOR");

				MenuItem.click(menuItem = ${borderRadius});

				PageEditor.waitForAutoSave();
			}

			if (isSet(borderWidth)) {
				PageEditor.configureFragment(borderWidth = ${borderWidth});

				AssertTextEquals(
					key_text = "Border Width",
					locator1 = "TextInput#ANY",
					value1 = ${borderWidth});
			}

			if (isSet(boxShadow)) {
				Click(
					key_fieldLabel = "Shadow",
					key_text = "theme",
					locator1 = "Icon#ANY_ITEM_SELECTOR");

				MenuItem.click(menuItem = ${boxShadow});

				PageEditor.waitForAutoSave();
			}

			PageEditor.configureFragment(
				marginBottom = ${marginBottom},
				marginLeft = ${marginLeft},
				marginRight = ${marginRight},
				marginTop = ${marginTop},
				paddingBottom = ${paddingBottom},
				paddingLeft = ${paddingLeft},
				paddingRight = ${paddingRight},
				paddingTop = ${paddingTop});

			if (isSet(opacity)) {
				Type(
					ariaLabel = "Opacity",
					locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
					value1 = ${opacity});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();

				AssertTextEquals(
					ariaLabel = "Opacity",
					locator1 = "TextInput#ANY_WITH_ARIA_LABEL",
					value1 = ${opacity});
			}
		}

		if (${panel} == "General") {
			Navigator.gotoNavTab(navTab = "General");

			if (isSet(columnCount)) {
				Select(
					key_fieldLabel = "Number of Modules",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${columnCount});

				PageEditor.waitForAutoSave();
			}

			if (${spaceBetweenColumns} == "true") {
				Check.checkNotVisible(
					checkboxName = "Show Gutter",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}

			if (${spaceBetweenColumns} == "false") {
				Uncheck.uncheckToggleSwitch(
					checkboxName = "Show Gutter",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}

			if (isSet(height)) {
				Type(
					key_borderBottom = "Frame",
					key_fieldLabel = "Height",
					locator1 = "TextInput#BORDER_BOTTOM_INPUT_FIELD",
					value1 = ${height});

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();
			}

			if (isSet(layout)) {
				Select(
					key_fieldLabel = "Layout",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${layout});

				PageEditor.waitForAutoSave();
			}

			if (isSet(verticalAlignment)) {
				Select(
					key_fieldLabel = "Vertical Alignment",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${verticalAlignment});

				PageEditor.waitForAutoSave();
			}

			if (${inverseOrder} == "true") {
				Check.checkNotVisible(
					checkboxName = "Inverse order",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}

			if (${inverseOrder} == "false") {
				Uncheck.uncheckToggleSwitch(
					checkboxName = "Inverse order",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}
		}
	}

	@summary = "Default summary"
	macro editMenuDisplay(displayStyle = null, selectedItemColor = null, sublevels = null, hoveredItemColor = null, panel = null, siteMenus = null) {
		var key_fragmentName = "Menu Display";

		PageEditor.clickConfigurableField(fragmentName = "Menu Display");

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		if (${panel} == "General") {
			Navigator.gotoNavTab(navTab = "General");

			if (isSet(siteMenus)) {
				Click(
					key_fieldLabel = "Source",
					key_text = "change",
					locator1 = "Icon#ANY_ITEM_SELECTOR");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				NavItem.click(navItem = "Site Menus");

				LexiconTable.clickTableEntryColumnLink(
					columnName = "name",
					tableEntry = ${siteMenus});

				Button.click(button = "Select This Level");

				PageEditor.waitForAutoSave();

				PageEditor.viewItemSelectorText(
					fieldLabel = "Source",
					text = ${siteMenus});
			}

			if (isSet(displayStyle)) {
				Select(
					key_fieldLabel = "Display Style",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${displayStyle});

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Display Style",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${displayStyle});
			}

			if (isSet(sublevels)) {
				Select(
					key_fieldLabel = "Sublevels",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${sublevels});

				PageEditor.waitForAutoSave();

				AssertSelectedLabel(
					key_fieldLabel = "Sublevels",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = ${sublevels});
			}
		}
		else if (${panel} == "Styles") {
			Navigator.gotoNavTab(navTab = "Styles");

			if (isSet(hoveredItemColor)) {
				PageEditor.selectColorSwatchItem(
					colorSwatchItem = ${hoveredItemColor},
					fieldLabel = "Hovered Item Color");

				PageEditor.waitForAutoSave();
			}

			if (isSet(selectedItemColor)) {
				PageEditor.selectColorSwatchItem(
					colorSwatchItem = ${selectedItemColor},
					fieldLabel = "Selected Item Color");

				PageEditor.waitForAutoSave();
			}
		}
	}

	@summary = "Edit the page rule"
	macro editPageRule(newRuleName = null, selectActionValue = null, selectItemForTheCondition = null, selectConditionValue = null, ruleName = null, selectItemForTheAction = null, selectAction = null, selectCondition = null) {
		Click(
			key_ruleName = ${ruleName},
			locator1 = "PageEditor#PAGE_RULE_LIST_ITEM_ELLIPSIS");

		DropdownMenuItem.click(menuItem = "Edit");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Edit Rule");

		if (isSet(newRuleName)) {
			InputField.editText(
				fieldLabel = "Rule Name",
				text = ${newRuleName});
		}

		if (isSet(selectItemForTheCondition)) {
			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_EXISTING_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = ${selectItemForTheCondition});
		}

		if (isSet(selectCondition)) {
			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_EXISTING_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = ${selectCondition});
		}

		if (isSet(selectConditionValue)) {
			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_EXISTING_CONDITION_ITEM");

			DropdownMenuItem.click(menuItem = ${selectConditionValue});
		}

		if (isSet(selectAction)) {
			Click(
				index = 1,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_EXISTING_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = ${selectAction});
		}

		if (isSet(selectItemForTheAction)) {
			Click(
				index = 2,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_EXISTING_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = ${selectItemForTheAction});
		}

		if (isSet(selectActionValue)) {
			Click(
				index = 3,
				locator1 = "PageEditor#PAGE_RULE_BUILDER_EXISTING_ACTION_ITEM");

			DropdownMenuItem.click(menuItem = ${selectActionValue});
		}

		Modal.save();
	}

	@summary = "Default summary"
	macro editTabs(persistSelectedTab = null, panel = null, numberOfTabs = null) {
		PageEditor.clickConfigurableField(fragmentName = "Tabs");

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		if (${panel} == "General") {
			Navigator.gotoNavTab(navTab = "General");

			if (${persistSelectedTab} == "false") {
				Uncheck.uncheckNotVisible(
					checkboxName = "Persist Selected Tab",
					locator1 = "Checkbox#ANY_CHECKBOX");

				PageEditor.waitForAutoSave();
			}

			if (isSet(numberOfTabs)) {
				PageEditor.configureFragment(numberOfTabs = ${numberOfTabs});
			}
		}
	}

	@summary = "Default summary"
	macro expandFragmentCollection(collectionName = null) {
		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		Navigator.gotoNavTab(navTab = "Fragments");

		AssertVisible(
			key_collectionName = ${collectionName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL");

		if (IsElementPresent(key_collectionName = ${collectionName}, locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL_COLLAPSED")) {
			AssertClick(
				key_collectionName = ${collectionName},
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL_COLLAPSED",
				value1 = ${collectionName});
		}

		AssertElementPresent(
			key_collectionName = ${collectionName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL_EXPANDED");
	}

	@summary = "Default summary"
	macro expandWidgetCategory(categoryName = null) {
		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		Navigator.gotoNavTab(navTab = "Widgets");

		AssertVisible(
			key_collectionName = ${categoryName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL");

		if (IsElementPresent(key_collectionName = ${categoryName}, locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL_COLLAPSED")) {
			Click(
				key_collectionName = ${categoryName},
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL_COLLAPSED");
		}

		AssertElementPresent(
			key_collectionName = ${categoryName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL_EXPANDED");
	}

	@summary = "Default summary"
	macro getCommonStylesClass(fragmentName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		var javascript = '''
function getWebElement(locator) {
  return document.evaluate(locator, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

return	Array.from(getWebElement("(//div[@data-name='${fragmentName}'])[${index}]").classList).filter(className => className.includes('lfr-layout-structure-item'))[0];
		''';

		var className = selenium.getEval(${javascript});

		var className = StringUtil.extractLast(${className}, "lfr-layout-structure-item-topper-");

		var commonStylesClass = StringUtil.add("lfr-layout-structure-item-", ${className}, "");

		return ${commonStylesClass};
	}

	@summary = "Default summary"
	macro getFileSizeOfSelectedImageResolution() {
		var key_resolutionLabel = "File Size";

		WaitForElementPresent(locator1 = "PageEditor#IMAGE_RESOLUTION_LABEL");

		var fileSize = selenium.getText("PageEditor#IMAGE_RESOLUTION_VALUE");

		var fileSize = StringUtil.extractFirst(${fileSize}, ".");

		var fileSize = StringUtil.extractDigits(${fileSize});

		return ${fileSize};
	}

	@summary = "Default summary"
	macro getTopperStylesClass(fragmentName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		var javascript = '''
function getWebElement(locator) {
  return document.evaluate(locator, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

return	Array.from(getWebElement("(//div[@data-name='${fragmentName}'])[${index}]").classList).filter(className => className.includes('lfr-layout-structure-item'))[0];
		''';

		var topperStylesClass = selenium.getEval(${javascript});

		return ${topperStylesClass};
	}

	@summary = "Default summary"
	macro getWidthOfSelectedImageResolution() {
		var key_resolutionLabel = "Width";

		WaitForElementPresent(locator1 = "PageEditor#IMAGE_RESOLUTION_LABEL");

		var width = selenium.getText("PageEditor#IMAGE_RESOLUTION_VALUE");

		var width = StringUtil.extractDigits(${width});

		return ${width};
	}

	@summary = "Default summary"
	macro gotoAdvanced(fragmentName = null, index = null) {
		PageEditor.clickConfigurableField(
			fragmentName = ${fragmentName},
			index = ${index});

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "Advanced");
	}

	@summary = "Default summary"
	macro gotoCommentList() {
		Click(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BACK");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_LIST_TITLE",
			value1 = "Comments");
	}

	@summary = "Default summary"
	macro gotoCommentViaFragment(fragmentName = null) {
		var key_fragmentName = ${fragmentName};

		if (IsElementNotPresent(locator1 = "Fragment#FRAGMENT_COMMENT_ICON")) {
			PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

			PageEditor.gotoTab(tabName = "Browser");
		}

		Click(locator1 = "Fragment#FRAGMENT_COMMENT_ICON");

		if (IsElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_SECTION_NAME")) {
			PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

			PageEditor.gotoTab(tabName = "Browser");
		}
	}

	@summary = "Default summary"
	macro gotoConfiguration(fragmentName = null, index = null) {
		PageEditor.clickConfigurableField(
			fragmentName = ${fragmentName},
			index = ${index});

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		AssertElementPresent(
			key_nodeName = ${fragmentName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_ACTIVE");

		Navigator.gotoNavTab(navTab = "General");
	}

	@summary = "Default summary"
	macro gotoDuplicate(fragmentName = null) {
		var key_fragmentName = ${fragmentName};

		PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

		PageEditor.gotoTab(tabName = "Browser");

		Click.waitForMenuToggleJSClick(locator1 = "Fragment#FRAGMENT_HEADER_ELLIPSIS");

		MenuItem.click(menuItem = "Duplicate");
	}

	@summary = "Default summary"
	macro gotoEditableFieldEdit(className = null, id = null, contributed = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		PageEditor.clickEditableField(
			className = ${className},
			contributed = ${contributed},
			fragmentName = ${fragmentName},
			id = ${id},
			index = ${index});

		if (isSet(className)) {
			var fragmentName = ${className};
		}
		else {
			var fragmentName = StringUtil.replace(${fragmentName}, " ", "-");

			var fragmentName = StringUtil.lowerCase(${fragmentName});
		}

		if (${contributed} == "false") {
			Click(locator1 = "Fragment#EDITABLE_FIELD_ANY");
		}
		else {
			Click(locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");
		}
	}

	@summary = "Default summary"
	macro gotoEllipsisMenuItemInItemSelector(fieldLabel = null, menuItem = null) {
		Click(
			key_fieldLabel = ${fieldLabel},
			key_text = "ellipsis-v",
			locator1 = "Icon#ANY_ITEM_SELECTOR");

		MenuItem.click(menuItem = ${menuItem});
	}

	@summary = "Default summary"
	macro gotoEllipsisMenuItemInPageContentPanel(itemName = null, menuItem = null) {
		PageEditor.gotoTab(tabName = "Page Content");

		LexiconEntry.gotoFragmentPageContentEllipsisMenuItem(
			menuItem = ${menuItem},
			rowEntry = ${itemName});
	}

	@summary = "Default summary"
	macro gotoEllipsisMenuItemInPageElementsPanel(fragmentName = null, menuItem = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		PageEditor.gotoTab(tabName = "Browser");

		if (IsElementNotPresent(key_nodeName = ${fragmentName}, locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_ACTIVE")) {
			Click(
				key_nodeName = ${fragmentName},
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE");
		}

		Click.clickAtNotVisible(
			key_index = ${position},
			key_nodeName = ${fragmentName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = ${menuItem});

		if (${menuItem} != "Rename") {
			PageEditor.waitForAutoSave();
		}
	}

	@summary = "Default summary"
	macro gotoImageSource(fragmentName = null, id = null, contributed = null) {
		PageEditor.clickEditableField(
			contributed = ${contributed},
			fragmentName = ${fragmentName},
			id = ${id});

		Navigator.gotoNavTab(navTab = "Image Source");
	}

	@summary = "Default summary"
	macro gotoSaveAsFragment(fragmentName = null) {
		var key_fragmentName = ${fragmentName};

		PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

		PageEditor.gotoTab(tabName = "Browser");

		Click.waitForMenuToggleJSClick(locator1 = "Fragment#FRAGMENT_HEADER_ELLIPSIS");

		MenuItem.click(menuItem = "Save Composition");
	}

	@summary = "Default summary"
	macro gotoSelectPanel(fragmentName = null) {
		PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

		PageEditor.gotoTab(tabName = "Browser");

		AssertVisible(
			key_sidebarButton = "Browser",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Navigator.gotoNavTab(navTab = "General");

		if (IsTextEqual(key_fieldLabel = "Item", locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT", value1 = "")) {
			Click(
				key_fieldLabel = "Item",
				key_text = "plus",
				locator1 = "Icon#ANY_ITEM_SELECTOR");
		}
		else {
			Click(
				key_fieldLabel = "Item",
				key_text = "change",
				locator1 = "Icon#ANY_ITEM_SELECTOR");
		}

		SelectFrame(locator1 = "IFrame#MODAL_BODY");
	}

	@summary = "Default summary"
	macro gotoStyle(deviceType = null, fragmentName = null) {
		if (isSet(deviceType) && (${deviceType} != "Desktop")) {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");
		}

		PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

		PageEditor.gotoTab(tabName = "Browser");

		if (isSet(deviceType) && (${deviceType} != "Desktop")) {
			SelectFrame(value1 = "relative=top");
		}

		AssertElementPresent(
			key_nodeName = ${fragmentName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_ACTIVE");

		Navigator.gotoNavTab(navTab = "Styles");
	}

	@summary = "Default summary"
	macro gotoTab(tabName = null) {
		if ((IsElementPresent(locator1 = "ProductMenu#PRODUCT_MENU_OPENED")) && (IsElementNotPresent(key_tabName = ${tabName}, locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON_ACTIVE"))) {
			Click(
				key_tabName = ${tabName},
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");

			WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");
		}
		else {
			WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

			if ((IsElementPresent.isElementPresentAfterWait(locator1 = "//div[contains(@class,'content--open')]//*[contains(@class,'page-editor__sidebar__panel-header')]")) && (IsElementNotPresent(key_sidebarButton = ${tabName}, locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE"))) {
				Click(
					key_tabName = ${tabName},
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON");
			}
		}
	}

	@summary = "Default summary"
	macro gotoTabsFragmentNavItem(navItem = null) {
		var key_navItem = ${navItem};

		Click.javaScriptClick(
			locator1 = "Fragment#NAV_ITEM_TAB",
			value1 = ${navItem});

		AssertElementPresent(locator1 = "Fragment#ACTIVE_NAV_ITEM_TAB");
	}

	@summary = "Default summary"
	macro hideFragmentViaHeader(fragmentName = null) {
		var key_fragmentName = ${fragmentName};

		PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

		PageEditor.gotoTab(tabName = "Browser");

		Click.waitForMenuToggleJSClick(locator1 = "Fragment#FRAGMENT_HEADER_ELLIPSIS");

		MenuItem.click(menuItem = "Hide Fragment");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro hideFragmentViaPageStructure(fragmentName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		PageEditor.gotoTab(tabName = "Browser");

		if (IsElementNotPresent(key_index = ${index}, key_nodeName = ${fragmentName}, locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_INDEX")) {
			Click(
				key_nodeName = "",
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_COLLAPSED");
		}

		if (IsElementNotPresent(key_index = ${index}, key_nodeName = ${fragmentName}, locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_ACTIVE_INDEX")) {
			Click(
				key_index = ${index},
				key_nodeName = ${fragmentName},
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_INDEX");
		}

		Click.clickNoWaitForVisible(
			key_index = ${index},
			key_nodeName = ${fragmentName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_HIDE_INDEX");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro hideFragmentViaPageStyles(fragmentName = null) {
		PageEditor.gotoConfiguration(fragmentName = ${fragmentName});

		PageEditor.configureFragment(hideFragment = "true");
	}

	@summary = "Default summary"
	macro mapFormContainerToObject(contentType = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		Select(
			key_position = ${index},
			locator1 = "PageEditor#FORM_CONTAINER_SELECT_FIELD",
			value1 = ${contentType});

		task ("Select all form fields") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MANAGE_FORM_FIELDS");

			PortletEntry.selectAll();

			SelectFrame(value1 = "relative=top");

			Click(
				key_text = "Save",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");

			PageEditor.waitForAutoSave();
		}
	}

	@summary = "Default summary"
	macro markFavorite(fragmentName = null, collectionName = null) {
		if (isSet(displayStyle)) {
			var displayStyle = "list";
		}

		Type.sendKeysApplicationSearch(
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
			value1 = ${fragmentName});

		if (${displayStyle} == "card") {
			Click.clickAtNotVisible(
				ariaLabel = "Mark ${fragmentName} as Favorite",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");
		}
		else {
			Click.clickAtNotVisible(
				ariaLabel = "Mark ${fragmentName} as Favorite",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");
		}

		PageEditor.waitForAutoSave();

		Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_CLEAR_BUTTON");
	}

	@summary = "Default summary"
	macro openExperienceMenu() {
		if (IsElementNotPresent(locator1 = "PageEditor#EXPERIENCE_MENU")) {
			Click(locator1 = "PageEditor#EXPERIENCE_SELECTOR");
		}
	}

	@summary = "Default summary"
	macro openNewExperienceEditor() {
		PageEditor.openExperienceMenu();

		Click(
			key_text = "New Experience",
			locator1 = "Button#ANY");
	}

	@summary = "Default summary"
	macro previewEmbeddedMessage() {
		Check.checkNotVisible(
			checkboxName = "Preview Success Message",
			locator1 = "Checkbox#ANY_CHECKBOX");
	}

	@summary = "Default summary"
	macro previewInANewTab() {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Preview in a New Tab");

		SelectWindow.selectPopUp(value1 = "null");
	}

	@summary = "Default summary"
	macro previewSuccessNotification() {
		Click(
			ariaLabel = "Preview Success Notification",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");
	}

	@summary = "Default summary"
	macro prioritizeExperience(experienceName = null) {
		var key_experienceName = ${experienceName};

		PageEditor.openExperienceMenu();

		if (!(isSet(count))) {
			var count = 1;
		}

		while (${count} != 0) {
			Click(locator1 = "PageEditor#EXPERIENCE_PRIORITIZE_BUTTON");

			var count = ${count} - 1;
		}
	}

	@summary = "Default summary"
	macro publish(action = null, objectName = null) {
		Button.click(button = "Publish");

		if ((IsElementPresent(locator1 = "Modal#BODY")) && (IsTextEqual(locator1 = "Modal#HEADER", value1 = "Form Errors"))) {
			Modal.publish(
				action = ${action},
				warningMessage = "The following errors have been found with the forms on the page. Publishing without fixing these errors may affect form performance. Are you sure you want to publish?");
		}
		else if ((IsElementPresent(locator1 = "Modal#BODY")) && (IsTextEqual(locator1 = "Modal#HEADER", value1 = "Submit Button Missing"))) {
			Modal.publish(
				action = ${action},
				warningMessage = "${objectName} form has a hidden or missing submit button. If you continue, your users may not be able to submit the form. Are you sure you want to publish it?");
		}
		else if ((IsElementPresent(locator1 = "Modal#BODY")) && (IsTextEqual(locator1 = "Modal#HEADER", value1 = "Fragment Mapping Missing"))) {
			Modal.publish(
				action = ${action},
				warningMessage = "${objectName} form has some fragments not mapped to object fields. Unmapped fragments data will not be stored. Are you sure you want to publish?");
		}
		else if ((IsElementPresent(locator1 = "Modal#BODY")) && (IsTextEqual(locator1 = "Modal#HEADER", value1 = "Required Fields Missing"))) {
			Modal.publish(
				action = ${action},
				warningMessage = "${objectName} form has one or more required fields not mapped from the form. A form with missing required fields will not generate a valid entry. Are you sure you want to publish it?");
		}
		else if ((IsElementPresent(locator1 = "Modal#BODY")) && (IsTextEqual(locator1 = "Modal#HEADER", value1 = "Required Fields Hidden"))) {
			Modal.publish(
				action = ${action},
				warningMessage = "${objectName} form contains one or more hidden fragments mapped to required fields. A form with missing required fields will not generate a valid entry. Are you sure you want to publish it?");
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro removeFragment(fragmentName = null, index = null) {
		var key_fragmentName = ${fragmentName};

		PageEditor.clickConfigurableField(
			fragmentName = ${fragmentName},
			index = ${index});

		PageEditor.gotoTab(tabName = "Browser");

		Click.waitForMenuToggleJSClick(locator1 = "Fragment#FRAGMENT_HEADER_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro reopenResolvedComment(commentReply = null, fragmentComment = null) {
		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "PageEditor#FRAGMENT_SIDEBAR_SHOW_RESOLVED_COMMENTS_CHECKBOX_UNCHECKED");

		MouseOver(locator1 = "PageEditor#FRAGMENT_SIDEBAR_SHOW_RESOLVED_COMMENTS_LABEL");

		Click(locator1 = "PageEditor#FRAGMENT_SIDEBAR_SHOW_RESOLVED_COMMENTS_LABEL");

		AssertTextEquals(
			key_fragmentComment = ${fragmentComment},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_RESOLVED_COMMENTS_ENTRY",
			value1 = ${fragmentComment});

		AssertTextEquals(
			key_commentReply = ${commentReply},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_REPLY_RESOLVED_COMMENTS_ENTRY",
			value1 = ${commentReply});

		AssertElementPresent(locator1 = "Button#REPLY_DISABLED");

		Click.clickNoMouseOver(locator1 = "Button#REOPEN");

		AssertElementPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_SHOW_RESOLVED_COMMENTS_CHECKBOX_DISABLED");
	}

	@summary = "Default summary"
	macro reorderElementViaKeyboard(downCount = null, upCount = null, elementName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		KeyPress(
			ariaLabel = "Move ${elementName}",
			key_index = ${index},
			key_nodeName = ${elementName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_BUTTON_WITH_ARIA_LABEL_INDEX",
			value1 = "\ENTER");

		if (isSet(upCount)) {
			var i = 0;

			while (${i} != ${upCount}) {
				KeyPress(
					ariaLabel = "Move ${elementName}",
					key_index = ${index},
					key_nodeName = ${elementName},
					locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_BUTTON_WITH_ARIA_LABEL_INDEX",
					value1 = "\UP");

				var i = ${i} + 1;
			}
		}

		if (isSet(downCount)) {
			var i = 0;

			while (${i} != ${downCount}) {
				KeyPress(
					ariaLabel = "Move ${elementName}",
					key_index = ${index},
					key_nodeName = ${elementName},
					locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_BUTTON_WITH_ARIA_LABEL_INDEX",
					value1 = "\DOWN");

				var i = ${i} + 1;
			}
		}

		KeyPress(
			ariaLabel = "Move ${elementName}",
			key_index = ${index},
			key_nodeName = ${elementName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_BUTTON_WITH_ARIA_LABEL_INDEX",
			value1 = "\ENTER");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro reorderSets(navTab = null, setName = null, action = null) {
		Click(locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_REORDER_SETS_BUTTON");

		Modal.gotoNavTab(navTab = ${navTab});

		KeyPress(
			key_card = ${setName},
			locator1 = "Card#CARD_DRAG_ICON",
			value1 = "\ENTER");

		if (${action} == "Move Up") {
			KeyPress(
				key_card = ${setName},
				locator1 = "Card#CARD_DRAG_ICON",
				value1 = "\UP");

			KeyPress(
				key_card = ${setName},
				locator1 = "Card#CARD_DRAG_ICON",
				value1 = "\ENTER");
		}
		else if (${action} == "Move Down") {
			KeyPress(
				key_card = ${setName},
				locator1 = "Card#CARD_DRAG_ICON",
				value1 = "\DOWN");

			KeyPress(
				key_card = ${setName},
				locator1 = "Card#CARD_DRAG_ICON",
				value1 = "\DOWN");

			KeyPress(
				key_card = ${setName},
				locator1 = "Card#CARD_DRAG_ICON",
				value1 = "\ENTER");
		}

		Button.click(button = "Save");
	}

	@summary = "Default summary"
	macro replyToComment(commentReply = null) {
		AssertClick(
			locator1 = "Button#REPLY",
			value1 = "Reply");

		Type(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_REPLY_COMMENTS_EDITOR",
			value1 = ${commentReply});

		AssertClick(
			locator1 = "Button#REPLY",
			value1 = "Reply");
	}

	@summary = "Default summary"
	macro resizeConfigurationPanel(fragmentName = null, position = null) {
		PageEditor.clickConfigurableField(fragmentName = ${fragmentName});

		PageEditor.gotoTab(tabName = "Browser");

		AssertElementPresent(
			key_nodeName = ${fragmentName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_ACTIVE");

		var defaultHeight = selenium.getElementHeight("PageEditor#CONFIGURATION_PANEL_CONFIGURATION");

		echo("### The default height of item configuration panel is ${defaultHeight}");

		DragAndDrop.dragAndDrop(
			locator1 = "PageEditor#CONFIGURATION_PANEL_HANDLE",
			value1 = ${position});

		WaitForElementNotPresent(locator1 = "PageEditor#ACTIVE_CONFIGURATION_PANEL_HANDLE");

		var updatedHeight = selenium.getElementHeight("PageEditor#CONFIGURATION_PANEL_CONFIGURATION");

		echo("### The updated height of item configuration panel is ${updatedHeight}");

		TestUtils.assertNotEquals(
			actual = ${updatedHeight},
			expected = ${defaultHeight});
	}

	@summary = "Default summary"
	macro resolveComment(fragmentComment = null) {
		AssertElementPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_SHOW_RESOLVED_COMMENTS_CHECKBOX_DISABLED");

		Click.clickNoMouseOver(locator1 = "Button#RESOLVE");

		AssertTextNotPresent(value1 = ${fragmentComment});
	}

	@summary = "Default summary"
	macro restoreDefaultHidePropertyForFragment(fragmentName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		PageEditor.gotoTab(tabName = "Browser");

		Click(
			key_index = ${index},
			key_nodeName = ${fragmentName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_INDEX");

		Navigator.gotoNavTab(navTab = "General");

		Click(locator1 = "Button#RESTORE_DEFAULT");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro restoreSpacing(fieldLabel = null) {
		Click(
			ariaLabel = ${fieldLabel},
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		Click(
			key_text = "restore",
			locator1 = "MenuItem#ANY_ICON");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro searchInPageContentPanel(searchTerm = null) {
		PageEditor.gotoTab(tabName = "Page Content");

		Type(
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
			value1 = ${searchTerm});
	}

	@summary = "Default summary"
	macro selectColorSwatchItem(fieldLabel = null, colorSwatchItem = null) {
		if (IsElementPresent(key_fieldLabel = ${fieldLabel}, key_text = "theme", locator1 = "Icon#ANY_ITEM_SELECTOR")) {
			Click(
				key_fieldLabel = ${fieldLabel},
				key_text = "theme",
				locator1 = "Icon#ANY_ITEM_SELECTOR");
		}
		else {
			Click(
				key_fieldLabel = ${fieldLabel},
				locator1 = "Button#COLOR_PICKER");
		}

		Click(
			key_colorSwatchItem = ${colorSwatchItem},
			locator1 = "Button#COLOR_SWATCH_ITEM");
	}

	@summary = "Default summary"
	macro selectContentFilter(filter = null) {
		AssertVisible(
			key_sidebarButton = "Page Content",
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

		Click(locator1 = "PageEditor#PAGE_CONTENTS_CONTENT_FILTER_TOGGLE");

		DropdownMenuItem.click(menuItem = ${filter});

		AssertTextEquals(
			locator1 = "PageEditor#PAGE_CONTENTS_CONTENT_FILTER_TOGGLE",
			value1 = ${filter});
	}

	@summary = "Default summary"
	macro selectItemToPreviewWithObject(entryValue = null) {
		Click(locator1 = "PageEditor#PREVIEW_WITH_DROPDOWN_MENU");

		Click(locator1 = "PageEditor#PREVIEW_WITH_OTHER_ITEM");

		SelectFrame(
			key_title = "Select",
			locator1 = "IFrame#MODAL_ANY");

		Click(
			key_entryValue = ${entryValue},
			locator1 = "PageEditor#PREVIEW_WITH_CUSTOM_OBJECT_ITEM");

		IFrame.selectTopFrame();
	}

	@summary = "Default summary"
	macro submitForWorkflow() {
		Button.click(button = "Submit for Workflow");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro switchViewport(deviceType = null) {
		Click(
			key_deviceType = ${deviceType},
			locator1 = "PageEditor#DEVICE_TYPE");

		if (${deviceType} == "Desktop") {
			var viewport = "desktop";
		}
		else if (${deviceType} == "Tablet") {
			var viewport = "tablet";
		}
		else if (${deviceType} == "Landscape Phone") {
			var viewport = "landscapeMobile";
		}
		else if (${deviceType} == "Portrait Phone") {
			var viewport = "portraitMobile";
		}

		WaitForVisible(
			key_deviceType = ${viewport},
			locator1 = "PageEditor#VIEWPORT");
	}

	@summary = "Default summary"
	macro togglePreview() {
		Click(
			key_text = "view",
			locator1 = "Icon#ANY");
	}

	@summary = "Default summary"
	macro unhideFragmentViaPageStructure(fragmentName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		PageEditor.gotoTab(tabName = "Browser");

		Click.clickNoWaitForVisible(
			key_index = ${index},
			key_nodeName = ${fragmentName},
			locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_HIDE_INDEX");

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro unhideFragmentViaPageStyles(fragmentName = null) {
		PageEditor.gotoTab(tabName = "Browser");

		if (IsElementNotPresent(key_nodeName = ${fragmentName}, locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE_ACTIVE")) {
			Click(
				key_nodeName = ${fragmentName},
				locator1 = "Treeview#PAGE_STRUCTURE_TREE_NODE");
		}

		Navigator.gotoNavTab(navTab = "General");

		PageEditor.configureFragment(hideFragment = "false");
	}

	@summary = "Default summary"
	macro unmarkFavorite(fragmentName = null, collectionName = null) {
		if (isSet(displayStyle)) {
			var displayStyle = "list";
		}

		if (${displayStyle} == "card") {
			Click.clickAtNotVisible(
				ariaLabel = "Unmark ${fragmentName} as Favorite",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_CARD_ITEM_BUTTON_WITH_ARIA_LABEL");
		}
		else {
			Click.clickAtNotVisible(
				ariaLabel = "Unmark ${fragmentName} as Favorite",
				key_collectionName = ${collectionName},
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT_BUTTON_WITH_ARIA_LABEL");
		}

		PageEditor.waitForAutoSave();
	}

	@summary = "Default summary"
	macro viewCollectionDisplayStyle(layout = null, alignItems = null, flexWrap = null, columnCount = null, position = null, spaceBetweenColumns = null, justifyContent = null) {
		if (!(isSet(rowNumber))) {
			var rowNumer = 1;
		}

		if (isSet(columnCount)) {
			var i = 0;

			while (${i} != ${columnCount}) {
				var columnNumber = ${i} + 1;

				AssertElementPresent(
					key_columnNumber = ${columnNumber},
					key_position = ${position},
					key_rowNumber = ${rowNumer},
					locator1 = "PageEditor#COLLECTION_DISPLAY_COLUMN");
			}

			var columnNumber = ${columnCount} + 1;

			AssertElementNotPresent(
				key_columnNumber = ${columnNumber},
				key_position = ${position},
				key_rowNumber = ${rowNumer},
				locator1 = "PageEditor#COLLECTION_DISPLAY_COLUMN");
		}

		if (isSet(alignItems)) {
			AssertElementPresent(
				key_alignItems = ${alignItems},
				key_position = ${position},
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_ALIGN_ITEMS");
		}

		if (isSet(flexWrap)) {
			AssertElementPresent(
				key_flexWrap = ${flexWrap},
				key_position = ${position},
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_FLEX_WRAP");
		}

		if (isSet(justifyContent)) {
			AssertElementPresent(
				key_justifyContent = ${justifyContent},
				key_position = ${position},
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_JUSTIFY_CONTENT");
		}

		if (isSet(layout)) {
			AssertElementPresent(
				key_layout = ${layout},
				key_position = ${position},
				locator1 = "PageEditor#COLLECTION_DISPLAY_CONFIGURATION_LAYOUT");
		}

		if (${spaceBetweenColumns} == "true") {
			AssertElementNotPresent(
				key_position = ${position},
				locator1 = "PageEditor#COLLECTION_DISPLAY_COLUMNS_NO_GUTTER");
		}
		else if (${spaceBetweenColumns} == "false") {
			AssertElementPresent(
				key_position = ${position},
				locator1 = "PageEditor#COLLECTION_DISPLAY_COLUMNS_NO_GUTTER");
		}
	}

	@summary = "Default summary"
	macro viewCollectionItem(assetTitle = null) {
		if (!(isSet(column))) {
			var column = 1;
		}

		if (!(isSet(row))) {
			var row = 1;
		}

		AssertVisible(
			key_colPosition = ${column},
			key_entryTitle = ${assetTitle},
			key_fragmentName = "Collection Display",
			key_rowPosition = ${row},
			locator1 = "PageEditor#COLLECTION_ITEM_TITLE");
	}

	@summary = "Default summary"
	macro viewCollectionNotPresent(collectionName = null) {
		AssertElementNotPresent(
			key_collectionName = ${collectionName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COLLECTION_PANEL");
	}

	@summary = "Default summary"
	macro viewComment(mentionsUserScreenName = null, fragmentComment = null, mentionsUserFullName = null) {
		if (isSet(fragmentComment)) {
			if (isSet(fromNotifications)) {
				AssertTextEquals(
					key_fragmentComment = ${fragmentComment},
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY_HIGHLIGHTED",
					value1 = ${fragmentComment});
			}
			else if (isSet(mentionsUserScreenName)) {
				AssertTextEquals(
					key_fragmentComment = ${fragmentComment},
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY",
					value1 = "${fragmentComment}@${mentionsUserScreenName}");

				Mentions.viewMentionTagLink(
					mentionsUserFullName = ${mentionsUserFullName},
					mentionsUserScreenName = ${mentionsUserScreenName});
			}
			else {
				AssertTextEquals(
					key_fragmentComment = ${fragmentComment},
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_ENTRY",
					value1 = ${fragmentComment});
			}
		}
		else {
			AssertVisible(
				key_sidebarButton = "Comments",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_CENTER_TEXT",
				value1 = "There are no comments yet.");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_STATE_TEXT",
				value1 = "Select a fragment to add a comment.");
		}

		if (isSet(key_fragmentName)) {
			AssertElementPresent(
				key_fragmentName = "Rich Text",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_SECTION_NAME");
		}
	}

	@summary = "Default summary"
	macro viewCommentList(fragmentName = null, commentCount = null) {
		AssertTextEquals(
			key_fragmentName = ${fragmentName},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_LIST_HEADING",
			value1 = ${fragmentName});

		AssertTextEquals(
			key_commentCount = ${commentCount},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_LIST_SECONDARY_TEXT",
			value1 = ${commentCount});

		if (isSet(openComment)) {
			Click(
				key_fragmentName = ${fragmentName},
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENT_LIST_HEADING");
		}
	}

	@summary = "Default summary"
	macro viewCommentReply(commentReply = null, user = null) {
		if (isSet(fromNotifications)) {
			AssertTextEquals(
				key_commentReply = ${commentReply},
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_REPLY_COMMENTS_ENTRY_HIGHLIGHTED",
				value1 = ${commentReply});
		}
		else {
			AssertTextEquals(
				key_commentReply = ${commentReply},
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_REPLY_COMMENTS_ENTRY",
				value1 = ${commentReply});
		}

		AssertTextEquals(
			key_commentReply = ${commentReply},
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_REPLY_COMMENTS_ENTRY_AUTHOR",
			value1 = ${user});
	}

	@summary = "Default summary"
	macro viewContainerStyle(boxShadow = null, backgroundColor = null, borderColor = null, alignItems = null, backgroundImage = null, paddingRight = null, justifyContent = null, containerWidth = null, marginLeft = null, marginRight = null, paddingBottom = null, borderRadius = null, flexWrap = null, borderWidth = null, marginBottom = null, contentDisplay = null, paddingTop = null, opacity = null, paddingLeft = null, marginTop = null, height = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		if (isSet(alignItems)) {
			AssertElementPresent(
				key_alignItems = ${alignItems},
				key_position = ${position},
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_ALIGN_ITEMS");
		}

		if (isSet(backgroundColor)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "backgroundColor",
				styleValue = ${backgroundColor});
		}

		if (isSet(backgroundImage)) {
			AssertElementPresent(
				key_imageName = ${backgroundImage},
				key_position = ${position},
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_BACKGROUND_IMAGE");
		}

		if (isSet(borderColor)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "borderColor",
				styleValue = ${borderColor});
		}

		if (isSet(borderRadius)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "borderRadius",
				styleValue = ${borderRadius});
		}

		if (isSet(borderWidth)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "borderWidth",
				styleValue = ${borderWidth});
		}

		if (isSet(boxShadow)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "boxShadow",
				styleValue = ${boxShadow});
		}

		if (isSet(containerWidth)) {
			if (${containerWidth} == "Fixed Width") {
				AssertElementPresent(
					key_position = ${position},
					locator1 = "PageEditor#CONTAINER_CONFIGURATION_FIXED_WIDTH");
			}
			else if (${containerWidth} == "Fluid") {
				AssertElementNotPresent(
					key_position = ${position},
					locator1 = "PageEditor#CONTAINER_CONFIGURATION_FIXED_WIDTH");
			}
		}

		if (isSet(contentDisplay)) {
			AssertElementPresent(
				key_contentDisplay = ${contentDisplay},
				key_position = ${position},
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_CONTENT_DISPLAY");
		}

		if (isSet(flexWrap)) {
			AssertElementPresent(
				key_flexWrap = ${flexWrap},
				key_position = ${position},
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_FLEX_WRAP");
		}

		if (isSet(justifyContent)) {
			AssertElementPresent(
				key_justifyContent = ${justifyContent},
				key_position = ${position},
				locator1 = "PageEditor#CONTAINER_CONFIGURATION_JUSTIFY_CONTENT");
		}

		if (isSet(height)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "height",
				styleValue = ${height});
		}

		if (isSet(marginBottom)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "marginBottom",
				styleValue = "spacer-${marginBottom}");
		}

		if (isSet(marginLeft)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "marginLeft",
				styleValue = "spacer-${marginLeft}");
		}

		if (isSet(marginRight)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "marginRight",
				styleValue = "spacer-${marginRight}");
		}

		if (isSet(marginTop)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "marginTop",
				styleValue = "spacer-${marginTop}");
		}

		if (isSet(opacity)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "opacity",
				styleValue = ${opacity});
		}

		if (isSet(paddingBottom)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "paddingBottom",
				styleValue = "spacer-${paddingBottom}");
		}

		if (isSet(paddingLeft)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "paddingLeft",
				styleValue = "spacer-${paddingLeft}");
		}

		if (isSet(paddingRight)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "paddingRight",
				styleValue = "spacer-${paddingRight}");
		}

		if (isSet(paddingTop)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = "Container",
				index = ${position},
				styleName = "paddingTop",
				styleValue = "spacer-${paddingTop}");
		}
	}

	@summary = "Default summary"
	macro viewDuplicateFragment(fragmentName = null) {
		AssertElementPresent(
			index = 2,
			key_fragmentName = ${fragmentName},
			locator1 = "Fragment#FRAGMENT_LABEL");
	}

	@summary = "Default summary"
	macro viewEditorEmpty() {
		AssertElementPresent(locator1 = "PageEditor#EMPTY_MESSAGE");
	}

	@summary = "Default summary"
	macro viewElementInsideModule(moduleNumber = null, elementName = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		AssertElementPresent(
			key_columnNumber = ${moduleNumber},
			key_elementHeader = "//div[@data-name='${elementName}']",
			key_position = ${position},
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@summary = "Default summary"
	macro viewElementNotPresentInsideModule(moduleNumber = null, elementName = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		AssertElementNotPresent(
			key_columnNumber = ${moduleNumber},
			key_elementHeader = "//div[@data-name='${elementName}']",
			key_position = ${position},
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@summary = "Default summary"
	macro viewExperienceActiveInEditMode(experienceName = null) {
		PageEditor.openExperienceMenu();

		AssertElementPresent(
			key_experienceName = ${experienceName},
			locator1 = "PageEditor#EXPERIENCE_ACTIVE_LABEL");
	}

	@summary = "Default summary"
	macro viewExperienceActiveInViewModeControlMenu(experienceName = null) {
		ContentPages.openExperienceMenu();

		AssertElementPresent(
			key_experienceName = ${experienceName},
			locator1 = "PageEditor#EXPERIENCE_ACTIVE_LABEL_VIEW_CONTROL_MENU");
	}

	@summary = "Default summary"
	macro viewExperienceActiveInViewModeDropdown(experienceName = null) {
		ContentPages.openExperienceMenu();

		AssertTextEquals(
			key_experienceName = ${experienceName},
			locator1 = "PageEditor#EXPERIENCE_ACTIVE_LABEL_VIEW_DROPDOWN",
			value1 = "Active");
	}

	@summary = "Default summary"
	macro viewExperienceNotActiveInEditMode(experienceName = null) {
		PageEditor.openExperienceMenu();

		AssertElementPresent(
			key_experienceName = ${experienceName},
			locator1 = "PageEditor#EXPERIENCE_INACTIVE_LABEL");
	}

	@summary = "Default summary"
	macro viewExperienceNotActiveInViewModeControlMenu(experienceName = null) {
		ContentPages.openExperienceMenu();

		AssertElementPresent(
			key_experienceName = ${experienceName},
			locator1 = "PageEditor#EXPERIENCE_INACTIVE_LABEL_VIEW_CONTROL_MENU");
	}

	@summary = "Default summary"
	macro viewExperienceNotActiveInViewModeDropdown(experienceName = null) {
		ContentPages.openExperienceMenu();

		AssertTextEquals(
			key_experienceName = ${experienceName},
			locator1 = "PageEditor#EXPERIENCE_INACTIVE_LABEL_VIEW_DROPDOWN",
			value1 = "Inactive");
	}

	@summary = "Default summary"
	macro viewExperienceValues(experienceName = null, segmentName = null) {
		PageEditor.openExperienceMenu();

		AssertVisible(
			key_experienceName = ${experienceName},
			key_segmentName = ${segmentName},
			locator1 = "PageEditor#EXPERIENCE_VALUES");

		Click(locator1 = "PageEditor#EXPERIENCE_LABEL");
	}

	@summary = "Default summary"
	macro viewFragment(fragmentName = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		AssertElementPresent(
			index = ${position},
			key_fragmentName = ${fragmentName},
			locator1 = "Fragment#FRAGMENT_LABEL");
	}

	@summary = "Default summary"
	macro viewFragmentCommonStyle(styleValue = null, fragmentName = null, index = null, styleName = null) {
		var commonStylesClass = PageEditor.getCommonStylesClass(
			fragmentName = ${fragmentName},
			index = ${index});

		var actualStyleValue = Css.getStyleValue(
			className = ${commonStylesClass},
			cssSelector = "#layout-common-styles",
			styleName = ${styleName});

		if (contains(${actualStyleValue}, ${styleValue})) {
			echo("PASSED");
		}
		else {
			TestUtils.fail(message = "FAILED: expected '${styleValue}', actual was '${actualStyleValue}'");
		}
	}

	@summary = "Default summary"
	macro viewFragmentEditableImage(imageFileName = null, imageDescription = null, fragmentClass = null, id = null, contributed = null) {
		if (${contributed} == "false") {
			AssertVisible(
				key_fragmentClass = ${fragmentClass},
				key_image = ${imageFileName},
				locator1 = "Fragment#EDITABLE_FIELD_IMAGE_PROPERTIES");
		}
		else {
			AssertVisible(
				id = ${id},
				key_image = ${imageFileName},
				key_imageDescription = ${imageDescription},
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}
	}

	@summary = "Default summary"
	macro viewFragmentEditableText(editableText = null, className = null, style = null, id = null, contributed = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		PageEditor.viewFragment(
			fragmentName = ${fragmentName},
			index = ${position});

		if (isSet(className)) {
			var fragmentName = ${className};
		}
		else {
			var fragmentName = StringUtil.replace(${fragmentName}, " ", "-");

			var fragmentName = StringUtil.lowerCase(${fragmentName});
		}

		if (${contributed} == "false") {
			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = ${fragmentName},
				position = ${position},
				text = ${editableText});

			if (isSet(style)) {
				AssertVisible(
					id = ${id},
					key_position = ${position},
					key_style = ${style},
					key_text = ${editableText},
					locator1 = "Fragment#INLINE_RICH_TEXT_STYLE");
			}
		}
		else {
			ContentPages.viewFragmentText(
				fragmentName = ${fragmentName},
				id = ${id},
				position = ${position},
				text = ${editableText});

			if (isSet(style)) {
				AssertVisible(
					id = ${id},
					key_position = ${position},
					key_style = ${style},
					key_text = ${editableText},
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_RICH_TEXT_STYLE");
			}
		}
	}

	@summary = "Default summary"
	macro viewFragmentHeaderNotVisible(fragmentName = null) {
		AssertElementNotPresent(
			key_fragmentName = ${fragmentName},
			locator1 = "Fragment#FRAGMENT_HEADER");
	}

	@summary = "Default summary"
	macro viewFragmentHeaderVisible(fragmentName = null) {
		AssertVisible(
			key_fragmentName = ${fragmentName},
			locator1 = "Fragment#FRAGMENT_HEADER");
	}

	@summary = "Default summary"
	macro viewFragmentMessageInfo(fragmentName = null) {
		if (${fragmentName} == "Collection Display") {
			if (!(isSet(messageInfo))) {
				var messageInfo = "No Collection Selected Yet";
			}

			AssertVisible(
				key_fragmentName = ${fragmentName},
				key_messageInfo = ${messageInfo},
				locator1 = "Fragment#NO_COLLECTION_SELECTED_MESSAGE");
		}
		else if (${fragmentName} == "Content Display") {
			if (!(isSet(messageInfo))) {
				var messageInfo = "The selected content will be shown here.";
			}

			AssertVisible(
				key_fragmentName = ${fragmentName},
				key_messageInfo = ${messageInfo},
				locator1 = "Fragment#MESSAGE_INFO");
		}
		else if (${fragmentName} == "Display Page Content") {
			if (!(isSet(messageInfo))) {
				var messageInfo = "The display page content will be shown here.";
			}

			AssertVisible(
				key_fragmentName = ${fragmentName},
				key_messageInfo = ${messageInfo},
				locator1 = "Fragment#MESSAGE_INFO");
		}
		else {
			AssertVisible(
				key_fragmentName = ${fragmentName},
				key_messageInfo = ${messageInfo},
				locator1 = "Fragment#MESSAGE_INFO");
		}
	}

	@summary = "Default summary"
	macro viewFragmentNotPresent(fragmentName = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		AssertElementNotPresent(
			index = ${position},
			key_fragmentName = ${fragmentName},
			locator1 = "Fragment#FRAGMENT_LABEL");
	}

	@summary = "Default summary"
	macro viewFragmentNotVisible(fragmentName = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		AssertNotVisible(
			index = ${position},
			key_fragmentName = ${fragmentName},
			locator1 = "Fragment#FRAGMENT_LABEL");
	}

	@summary = "Default summary"
	macro viewFragmentOrder(fragmentName = null, position = null) {
		AssertElementPresent(
			key_fragmentName = ${fragmentName},
			key_position = ${position},
			locator1 = "Fragment#FRAGMENT_POSITION");
	}

	@summary = "Default summary"
	macro viewFragmentStyle(boxShadow = null, borderColor = null, paddingRight = null, marginRight = null, paddingBottom = null, fragmentName = null, borderWidth = null, imageSize = null, paddingTop = null, height = null, separatorColor = null, backgroundColor = null, textColor = null, marginLeft = null, borderRadius = null, size = null, bottomSpacing = null, marginBottom = null, style = null, alignment = null, opacity = null, headingLevel = null, paddingLeft = null, marginTop = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		if (isSet(alignment)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "textAlign",
				styleValue = ${alignment});
		}

		if (isSet(backgroundColor)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "backgroundColor",
				styleValue = ${backgroundColor});
		}

		if (isSet(borderColor)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "borderColor",
				styleValue = ${borderColor});
		}

		if (isSet(borderRadius)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "borderRadius",
				styleValue = ${borderRadius});
		}

		if (isSet(bottomSpacing)) {
			AssertElementPresent(
				key_bottomSpacing = ${bottomSpacing},
				locator1 = "Fragment#BOTTOM_SPACING");
		}

		if (isSet(borderWidth)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "borderWidth",
				styleValue = ${borderWidth});
		}

		if (isSet(boxShadow)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "boxShadow",
				styleValue = ${boxShadow});
		}

		if (isSet(headingLevel)) {
			AssertElementPresent(
				key_fragmentName = StringUtil.lowerCase(${fragmentName}),
				key_headingLevel = ${headingLevel},
				key_position = ${position},
				locator1 = "Fragment#FRAGMENT_CONFIGURATION_HEADER");
		}

		if (isSet(height)) {
			AssertElementPresent(
				key_height = ${height},
				locator1 = "Fragment#SPACER_HEIGHT");
		}

		if (isSet(imageSize)) {
			AssertElementPresent(
				key_fragmentName = StringUtil.lowerCase(${fragmentName}),
				key_imageSize = ${imageSize},
				locator1 = "Fragment#IMAGE_SIZE");
		}

		if (isSet(marginBottom)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "marginBottom",
				styleValue = "spacer-${marginBottom}");
		}

		if (isSet(marginLeft)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "marginLeft",
				styleValue = "spacer-${marginLeft}");
		}

		if (isSet(marginRight)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "marginRight",
				styleValue = "spacer-${marginRight}");
		}

		if (isSet(marginTop)) {
			PageEditor.viewFragmentTopperStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "marginTop",
				styleValue = "spacer-${marginTop}");
		}

		if (isSet(opacity)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "opacity",
				styleValue = ${opacity});
		}

		if (isSet(paddingBottom)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "paddingBottom",
				styleValue = "spacer-${paddingBottom}");
		}

		if (isSet(paddingLeft)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "paddingLeft",
				styleValue = "spacer-${paddingLeft}");
		}

		if (isSet(paddingRight)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "paddingRight",
				styleValue = "spacer-${paddingRight}");
		}

		if (isSet(paddingTop)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "paddingTop",
				styleValue = "spacer-${paddingTop}");
		}

		if (isSet(separatorColor)) {
			AssertElementPresent(
				key_separatorColor = ${separatorColor},
				locator1 = "Fragment#SEPARATOR_COLOR");
		}

		if (isSet(size)) {
			AssertElementPresent(
				key_fragmentName = StringUtil.lowerCase(${fragmentName}),
				key_size = ${size},
				locator1 = "Fragment#BUTTON_SIZE");
		}

		if (isSet(textColor)) {
			PageEditor.viewFragmentCommonStyle(
				fragmentName = ${fragmentName},
				index = ${position},
				styleName = "color",
				styleValue = ${textColor});
		}

		if (isSet(style)) {
			AssertElementPresent(
				key_fragmentName = StringUtil.lowerCase(${fragmentName}),
				key_type = ${style},
				locator1 = "Fragment#FRAGMENT_CONFIGURATION_TYPE");
		}
	}

	@summary = "Default summary"
	macro viewFragmentTopperStyle(styleValue = null, fragmentName = null, index = null, styleName = null) {
		var topperStylesClass = PageEditor.getTopperStylesClass(
			fragmentName = ${fragmentName},
			index = ${index});

		var actualStyleValue = Css.getStyleValue(
			className = ${topperStylesClass},
			cssSelector = "#layout-common-styles",
			styleName = ${styleName});

		if (contains(${actualStyleValue}, ${styleValue})) {
			echo("PASSED");
		}
		else {
			TestUtils.fail(message = "FAILED: expected '${styleValue}', actual was '${actualStyleValue}'");
		}
	}

	@summary = "Default summary"
	macro viewGridStyle(layout = null, columnCount = null, position = null, spaceBetweenColumns = null, verticalAlignment = null) {
		if (isSet(columnCount)) {
			var i = 0;

			while (${i} != ${columnCount}) {
				var columnNumber = ${i} + 1;

				AssertElementPresent(
					key_columnNumber = ${columnNumber},
					key_position = ${position},
					locator1 = "PageEditor#GRID_COLUMN");
			}

			var columnNumber = ${columnCount} + 1;

			AssertElementNotPresent(
				key_columnNumber = ${columnNumber},
				key_position = ${position},
				locator1 = "PageEditor#GRID_COLUMN");
		}

		if (isSet(inverseOrder)) {
			AssertElementPresent(
				key_position = ${position},
				locator1 = "PageEditor#GRID_CONFIGURATION_INVERSE_ORDER");
		}

		if (isSet(layout)) {
			AssertElementPresent(
				key_layout = ${layout},
				key_position = ${position},
				locator1 = "PageEditor#GRID_CONFIGURATION_LAYOUT");
		}

		if (${spaceBetweenColumns} == "true") {
			AssertElementNotPresent(
				key_position = ${position},
				locator1 = "PageEditor#GRID_CONFIGURATION_COLUMNS_NO_GUTTER");
		}
		else if (${spaceBetweenColumns} == "false") {
			AssertElementPresent(
				key_position = ${position},
				locator1 = "PageEditor#GRID_CONFIGURATION_COLUMNS_NO_GUTTER");
		}

		if (${verticalAlignment} == "Top") {
			AssertElementPresent(
				key_position = ${position},
				key_verticalAlignment = "",
				locator1 = "PageEditor#GRID_CONFIGURATION_VERTICAL_ALIGNMENT");
		}
		else if (${verticalAlignment} == "Middle") {
			AssertElementPresent(
				key_position = ${position},
				key_verticalAlignment = "middle",
				locator1 = "PageEditor#GRID_CONFIGURATION_VERTICAL_ALIGNMENT");
		}
		else if (${verticalAlignment} == "Bottom") {
			AssertElementPresent(
				key_position = ${position},
				key_verticalAlignment = "bottom",
				locator1 = "PageEditor#GRID_CONFIGURATION_VERTICAL_ALIGNMENT");
		}
	}

	@summary = "Default summary"
	macro viewInputStyle(charactersCount = null, helpText = null, numberOfLines = null, label = null, placeholder = null, type = null, showLabel = null, showHelpText = null) {
		if (!(isSet(position))) {
			var position = 1;
		}

		if (isSet(charactersCount)) {
			AssertTextEquals(
				index = ${position},
				locator1 = "Fragment#INPUT_LENGTH_INFO",
				type = ${type},
				value1 = ${charactersCount});
		}

		if (${showLabel} == "true") {
			AssertTextEquals(
				fieldLabel = ${label},
				index = ${position},
				locator1 = "Fragment#INPUT_LABEL",
				type = ${type},
				value1 = ${label});
		}
		else if (${showLabel} == "false") {
			AssertElementPresent(
				fieldLabel = ${label},
				index = ${position},
				locator1 = "Fragment#INPUT_LABEL_INVISIBLE",
				type = ${type});
		}

		if (${showHelpText} == "true") {
			AssertTextEquals(
				index = ${position},
				locator1 = "Fragment#INPUT_HELP_TEXT",
				type = ${type},
				value1 = ${helpText});
		}
		else if (${showHelpText} == "false") {
			AssertElementNotPresent(
				index = ${position},
				locator1 = "Fragment#INPUT_HELP_TEXT",
				type = ${type});
		}

		if (isSet(numberOfLines)) {
			AssertAttributeValue(
				index = ${position},
				locator1 = "Fragment#TEXTAREA_FIELD",
				type = ${type},
				value1 = "rows",
				value2 = ${numberOfLines});
		}

		if (isSet(placeholder)) {
			if (${type} == "textarea") {
				AssertAttributeValue(
					index = ${position},
					locator1 = "Fragment#TEXTAREA_FIELD",
					type = ${type},
					value1 = "placeholder",
					value2 = ${placeholder});
			}
			else {
				AssertAttributeValue(
					index = ${position},
					locator1 = "Fragment#INPUT_FIELD",
					type = ${type},
					value1 = "placeholder",
					value2 = ${placeholder});
			}
		}

		if (isSet(markAsRequired)) {
			AssertElementPresent(
				fieldLabel = ${label},
				index = ${position},
				locator1 = "Fragment#INPUT_REQUIRED",
				type = ${type});
		}
	}

	@summary = "Default summary"
	macro viewItemSelectorText(fieldLabel = null, text = null) {
		SelectFrameTop();

		AssertTextEquals(
			key_fieldLabel = ${fieldLabel},
			locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
			value1 = ${text});
	}

	@summary = "Default summary"
	macro viewMentionPopupDisapper() {
		AssertElementPresent(locator1 = "Mentions#MENTION_POPUP_DISAPPEAR");
	}

	@summary = "Default summary"
	macro viewMentionsDisplayOption(mentionsUserScreenName = null, fragmentComment = null, noMentionsUserScreenName = null) {
		Click.clickAt(locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS");

		Type.sendKeys(
			locator1 = "PageEditor#FRAGMENT_SIDEBAR_COMMENTS",
			value1 = ${fragmentComment});

		if (isSet(noMentionsUserScreenName)) {
			AssertElementNotPresent(
				key_mentionsUserScreenName = ${noMentionsUserScreenName},
				locator1 = "Mentions#MENTIONS_USER_DISPLAY_OPTION");
		}

		AssertElementPresent(
			key_mentionsUserScreenName = ${mentionsUserScreenName},
			locator1 = "Mentions#MENTIONS_USER_DISPLAY_OPTION");

		Click.clickNoMouseOver(
			key_mentionsUserScreenName = ${mentionsUserScreenName},
			locator1 = "Mentions#MENTIONS_USER_DISPLAY_OPTION");
	}

	@summary = "Default summary"
	macro viewNotPresentInPermissionsIframeBody(elementValue = null) {
		Click.clickAtNotVisible(locator1 = "Portlet#OPTIONS_ICON");

		Click(
			key_menuItem = "Permissions",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementNotPresent(locator1 = "//body[.='${elementValue}']");
	}

	@summary = "Default summary"
	macro viewNumberOfCollectionItemsInCollectionPage(numberOfItems = null) {
		AssertTextEquals(
			locator1 = "ControlMenu#VIEW_COLLECTION_ITEMS_BUTTON",
			value1 = ${numberOfItems});
	}

	@summary = "Default summary"
	macro viewOrderOfSideBarButtons(buttonNameList = null) {
		if (!(isSet(i))) {
			var i = 1;
		}

		for (var buttonName : list ${buttonNameList}) {
			AssertVisible(
				index = ${i},
				key_tabName = ${buttonName},
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TAB_BUTTON_BY_INDEX");

			var i = ${i} + 1;
		}
	}

	@summary = "Default summary"
	macro waitForAutoSave() {
		SelectFrameTop();

		Pause(value1 = 1000);

		WaitForVisible(locator1 = "PageEditor#AUTOSAVE_MESSAGE");
	}

}