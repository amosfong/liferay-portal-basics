definition {

	@summary = "Compare the database count with the ${expectedCount}"
	macro assertDatabaseCount(databaseSubstring = null, databaseFilter = null, expectedCount = null) {
		Variables.assertDefined(parameterList = "${databaseFilter},${databaseSubstring},${expectedCount}");

		var databaseType = PropsUtil.get("database.type");

		if (${databaseType} == "mysql") {
			var sqlStatement = "SHOW DATABASES LIKE '${databaseFilter}';";
		}
		else if (${databaseType} == "postgresql") {
			var sqlStatement = "select schema_name from information_schema.schemata WHERE schema_name LIKE '${databaseFilter}';";
		}

		var sqlResults = SQL.executeSQLStatement(sqlStatement = ${sqlStatement});

		var matches = StringUtil.count(${sqlResults}, ${databaseSubstring});

		if (${matches} != ${expectedCount}) {
			fail("Expected ${expectedCount} matches of ${databaseSubstring}, found ${matches}.");
		}
	}

	@summary = "Assert the ${text} in MySQL Statement Result"
	macro assertTextInMySQLStatementResult(text = null, mysqlStatement = null) {
		var sqlResults = SQL.executeSQLStatement(sqlStatement = ${mysqlStatement});

		if (!(contains(${sqlResults}, ${text}))) {
			fail("The MySql query result does not contain text: ${text}");
		}
	}

	@summary = "Assert the ${text} is not in MySQL Statement Result"
	macro assertTextNotInMySQLStatementResult(text = null, mysqlStatement = null) {
		var sqlResults = SQL.executeSQLStatement(sqlStatement = ${mysqlStatement});

		if (contains(${sqlResults}, ${text})) {
			fail("The MySql query result contains text: ${text}");
		}
	}

	@summary = "Drop index ${indexName} on ${tableName}"
	macro dropMySQLIndex(indexName = null, tableName = null) {
		Variables.assertDefined(parameterList = "${indexName},${tableName}");

		SQL.executeSQLStatement(sqlStatement = "drop index ${indexName} on ${tableName};");

		var hasMySQLIndex = SQL.hasMySQLIndex(indexName = ${indexName});

		if (${hasMySQLIndex} == "true") {
			fail("Index ${indexName} wasn't dropped");
		}
	}

	@summary = "Execute ${sqlStatement} with autocommit ${autoCommit}"
	macro executeSettingAutoCommitSQLStatement(autoCommit = null, sqlStatement = null) {
		Variables.assertDefined(parameterList = "${autoCommit},${sqlStatement}");

		var liferayHome = PropsUtil.get("liferay.home.dir.name");
		var inputFile = "sqltemp.sql";
		var outputFile = "sqltemp.txt";

		FileUtil.write("${liferayHome}/${inputFile}", ${sqlStatement});

		AntCommands.runCommand("build-test.xml", "execute-sql -Dsql.autocommit=${autoCommit} -Dsql.input.file=${liferayHome}/${inputFile} -Dsql.output.file=${liferayHome}/${outputFile}");

		var output = FileUtil.read("${liferayHome}/${outputFile}");

		return ${output};
	}

	@summary = "Execute ${sqlStatement}"
	macro executeSQLStatement(sqlStatement = null) {
		Variables.assertDefined(parameterList = ${sqlStatement});

		var result = SQL.executeSettingAutoCommitSQLStatement(
			autoCommit = "false",
			sqlStatement = ${sqlStatement});

		return ${result};
	}

	@summary = "Assert an index on the MySQL database"
	macro hasMySQLIndex(indexName = null) {
		Variables.assertDefined(parameterList = ${indexName});

		var indexQuery = "SELECT COUNT(DISTINCT(index_name)) FROM information_schema.statistics WHERE index_schema = database() AND index_name = '${indexName}';";

		var index = SQL.executeSQLStatement(sqlStatement = ${indexQuery});

		if (contains(${index}, 1)) {
			return "true";
		}
		else {
			return "false";
		}
	}

}