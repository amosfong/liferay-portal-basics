definition {

	@summary = "Default summary"
	macro addPageAndPortlet(pageURL = null, portletName = null) {
		JSONLayout.addPublicLayout(
			groupName = "Bridge Issues",
			layoutName = ${portletName});

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.configurePage(
			columnName = "1 Column",
			pageName = ${portletName},
			sitePageType = "Widget Page");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/bridge-issues/${pageURL}");

		Portlet.addPG(portletName = ${portletName});
	}

	@summary = "Default summary"
	macro navigateToDo(urlAppend = null, pageLink = null) {
		var key_urlAppend = ${urlAppend};

		Navigator.openWithAppendToBaseURL(urlAppend = ${key_urlAppend});

		var key_pageLink = ${pageLink};

		Click(locator1 = "BridgeIssues#NAVIGATE_TO_VIEW");
	}

	@summary = "Default summary"
	macro select(textValue = null) {
		Click(locator1 = "BridgeIssues#SELECT_ONE_MENU");

		Click(
			key_opt = ${textValue},
			locator1 = "BridgeIssues#SELECT_MENU_OPTION");

		AssertElementPresent(
			key_attribute = ${textValue},
			locator1 = "BridgeIssues#SELECT_MENU_VALUE");
	}

	@summary = "Default summary"
	macro upload3250File(mode = null, fileName = null, instantAjax = null) {
		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			key_mode = ${mode},
			locator1 = "BridgeIssues#CHOOSE_FILE_BUTTON",
			value1 = ${fileName});

		if (${instantAjax} == "true") {
			Click(
				key_mode = ${mode},
				locator1 = "BridgeIssues#SUBMIT_FILE_BUTTON");
		}
	}

	@summary = "Default summary"
	macro urlParameters(buttonName = null, urlEnd = null, alpha = null, beta = null, gamma = null) {
		Click(
			key_buttonName = ${buttonName},
			locator1 = "BridgeIssues#URL_BUTTON");

		AssertLocation.assertPartialLocation(value1 = ${urlEnd});

		AssertTextEquals(
			locator1 = "BridgeIssues#PARAMETER_ALPHA",
			value1 = ${alpha});

		AssertTextEquals(
			locator1 = "BridgeIssues#PARAMETER_BETA",
			value1 = ${beta});

		AssertTextEquals(
			locator1 = "BridgeIssues#PARAMETER_GAMMA",
			value1 = ${gamma});
	}

	@summary = "Default summary"
	macro verifyParam(liIndex = null, paramLink = null, ulIndex = null, paramValue = null) {
		var key_liIndex = ${liIndex};
		var key_ulIndex = ${ulIndex};

		if (isSet(paramLink)) {
			AssertTextEquals(
				locator1 = "BridgeIssues#PARAM_LINK",
				value1 = ${paramLink});
		}

		if (isSet(paramValue)) {
			AssertTextEquals(
				locator1 = "BridgeIssues#PARAM_VALUE",
				value1 = ${paramValue});
		}
	}

	@summary = "Default summary"
	macro verifyValue(toPageLink = null, inValidURL = null, restoreState = null, textValue = null, statusValue = null, detailValue = null, link = null, validURL = null) {
		if (${restoreState} == "true") {
			Click(
				key_pageLink = ${link},
				locator1 = "BridgeIssues#PAGE_LINK");

			AssertElementPresent(
				key_attribute = ${textValue},
				locator1 = "BridgeIssues#TEXT_VALUE");

			AssertElementPresent(
				key_attribute = ${statusValue},
				locator1 = "BridgeIssues#STATUS_VALUE");

			AssertElementPresent(
				key_attribute = ${detailValue},
				locator1 = "BridgeIssues#DETAIL_VALUE");
		}

		if (isSet(toPageLink)) {
			Click(
				key_pageLink = ${link},
				locator1 = "BridgeIssues#PAGE_LINK");

			Click(
				key_toPageLink = ${toPageLink},
				locator1 = "BridgeIssues#TO_PAGE_LINK");

			AssertElementPresent(
				key_attribute = ${textValue},
				locator1 = "BridgeIssues#TEXT_VALUE");

			AssertElementPresent(
				key_attribute = ${statusValue},
				locator1 = "BridgeIssues#STATUS_VALUE");

			AssertElementPresent(
				key_attribute = ${detailValue},
				locator1 = "BridgeIssues#DETAIL_VALUE");
		}

		if (isSet(validURL)) {
			Click(
				key_validURL = ${validURL},
				locator1 = "BridgeIssues#VALID_URL");

			AssertElementPresent(
				key_attribute = ${textValue},
				locator1 = "BridgeIssues#TEXT_VALUE");

			AssertElementPresent(
				key_attribute = ${statusValue},
				locator1 = "BridgeIssues#STATUS_VALUE");

			AssertElementPresent(
				key_attribute = ${detailValue},
				locator1 = "BridgeIssues#DETAIL_VALUE");
		}

		if (isSet(inValidURL)) {
			Click(
				key_inValidURL = ${inValidURL},
				locator1 = "BridgeIssues#INVALID_URL");

			AssertElementPresent(locator1 = "BridgeIssues#ERROR_MESSAGE");
		}
	}

}