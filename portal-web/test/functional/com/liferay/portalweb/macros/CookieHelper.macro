definition {

	@description = "Get Cookie '${cookieName}' and check if it's value equals: '${expectedCookieValue}'"
	@summary = "Default summary"
	macro _checkSelectedCookieValue(expectedCookieValue = null) {
		Variables.assertDefined(parameterList = "${cookieName},${expectedCookieValue}");

		var javascript = '''var cookieName = "${cookieName}";
                        	var allCookies = document.cookie.split(';');
							var value="empty";
                        	for (var i = 0; i < allCookies.length; i++){
                        		if(allCookies[i].includes(cookieName)){
                        			value = allCookies[i].replace(cookieName+"=","").trim();
                        		}
                        	}
                        	return value;''';

		var cookieValue = selenium.getEval(${javascript});

		if (${cookieValue} != "empty") {
			echo("Cookie with name: ${cookieName} has the following value: ${cookieValue}");

			TestUtils.assertEquals(
				actual = ${cookieValue},
				expected = ${expectedCookieValue});
		}
		else {
			fail("Cookie with name ${cookieName} is not exists");
		}
	}

	@description = "Verifying if all Cookies are saved with true as value"
	@summary = "Default summary"
	macro checkAllCookieAreAcceptedAndSaved() {
		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_PERFORMANCE",
			expectedCookieValue = "true");

		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_FUNCTIONAL",
			expectedCookieValue = "true");

		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_PERSONALIZATION",
			expectedCookieValue = "true");

		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_NECESSARY",
			expectedCookieValue = "true");
	}

	@description = "Verifying if all Cookies are saved with false as value"
	@summary = "Default summary"
	macro checkAllCookieAreDeclinedAndSaved() {
		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_PERFORMANCE",
			expectedCookieValue = "false");

		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_FUNCTIONAL",
			expectedCookieValue = "false");

		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_PERSONALIZATION",
			expectedCookieValue = "false");

		CookieHelper._checkSelectedCookieValue(
			cookieName = "CONSENT_TYPE_NECESSARY",
			expectedCookieValue = "true");
	}

	@summary = "Default summary"
	macro checkEachCookiesSavedValue(cookieNameListWithTrueValue = null, cookieNameListWithFalseValue = null) {
		if (isSet(cookieNameListWithTrueValue)) {
			for (var cookieName : list ${cookieNameListWithTrueValue}) {
				CookieHelper._checkSelectedCookieValue(
					cookieName = ${cookieName},
					expectedCookieValue = "true");
			}
		}

		if (isSet(cookieNameListWithFalseValue)) {
			for (var cookieName : list ${cookieNameListWithFalseValue}) {
				CookieHelper._checkSelectedCookieValue(
					cookieName = ${cookieName},
					expectedCookieValue = "false");
			}
		}
	}

	@description = "Check if cookie named as '${cookieName}' lasts for 12 months. Requires Chrome 87."
	@summary = "Default summary"
	macro checkSelectedCookieExpirationDate() {
		Variables.assertDefined(parameterList = ${cookieName});

		var javascriptForTargetDate = '''var targetDate = new Date( Date.now()); targetDate.setDate(targetDate.getDate() + 365); return targetDate.toISOString().slice(0,13);''';

		var targetDate = selenium.getEval(${javascriptForTargetDate});
		var javascriptForCookieExpirationDate = '''var cookieName = "${cookieName}";
													async function getCookieExpirationDate(){
													try {
															await cookieStore.get(cookieName).then(cookie => cookieExpirationDate = cookie.expires);
															return (new Date(cookieExpirationDate)).toISOString().slice(0,13); // return format: YYYY-MM-DDTHH
														  }
														  catch(error){
															return error.toString();
														  }
												 }

			return getCookieExpirationDate();''';

		var cookieExpirationDate = selenium.getEval(${javascriptForCookieExpirationDate});

		if (${targetDate} != ${cookieExpirationDate}) {
			TestUtils.fail(message = "Cookie expiration date is not 12 months ahead. The expected expiration date is:'${targetDate}' while the actual cookie has '${cookieExpirationDate}'.");
		}
	}

	@description = "Get Cookie check if it's exist."
	@summary = "Default summary"
	macro checkSelectedCookieIsExist() {
		Variables.assertDefined(parameterList = ${cookieName});

		var javascript = '''var cookieName = "${cookieName}";
                                var allCookies = document.cookie.split(';');
        						var value="empty";
                                for (var i = 0; i < allCookies.length; i++){
                                	if(allCookies[i].includes(cookieName)){
                                		value = "true";
                                	}
                                }
                                return value;''';

		var cookieExistValue = selenium.getEval(${javascript});

		if (${cookieExistValue} == "true") {
			echo("Cookie with name: ${cookieName} is exist");

			TestUtils.pass(message = "Cookie named: ${cookieName} is exist.");
		}
		else if (${cookieExistValue} != "true") {
			fail("Cookie with name ${cookieName} is not exist.");
		}
	}

	@description = "Get Cookie check if it's not exist."
	@summary = "Default summary"
	macro checkSelectedCookieIsNotExist() {
		Variables.assertDefined(parameterList = ${cookieName});

		var javascript = '''var cookieName = "${cookieName}";
                                var allCookies = document.cookie.split(';');
        						var value="empty";
                                for (var i = 0; i < allCookies.length; i++){
                                	if(allCookies[i].includes(cookieName)){
                                		value = "true";
                                	}
                                }
                                return value;''';

		var cookieExistValue = selenium.getEval(${javascript});

		if (${cookieExistValue} != "true") {
			echo("Cookie with name: ${cookieName} is not exist");

			TestUtils.pass(message = "Cookie named: ${cookieName} is not exist.");
		}
		else if (${cookieExistValue} == "true") {
			fail("Cookie with name ${cookieName} is exist.");
		}
	}

	@description = "Get Cookie check if it's not present."
	@summary = "Default summary"
	macro checkSelectedCookieIsNotPresent(expectedCookieValue = null) {
		Variables.assertDefined(parameterList = "${cookieName},${expectedCookieValue}");

		var javascript = '''var cookieName = "${cookieName}";
                                var allCookies = document.cookie.split(';');
        						var value="empty";
                                for (var i = 0; i < allCookies.length; i++){
                                	if(allCookies[i].includes(cookieName)){
                                		value = allCookies[i].replace(cookieName+"=","").trim();
                                	}
                                }
                                return value;''';

		var cookieValue = selenium.getEval(${javascript});

		if (${cookieValue} == "empty") {
			echo("Cookie with name: ${cookieName} has the following value: ${cookieValue}");

			TestUtils.pass(message = "Cookie named: ${cookieName} is not present.");
		}
		else {
			fail("Cookie with name ${cookieName} is present.");
		}
	}

	@description = "Adding site with Cookie Banner Configuration portlet"
	@summary = "Default summary"
	macro createSitePageWithCookieBannerConfigurationPortlet() {
		var groupName = ${groupName};

		if (!(isSet(groupName))) {
			var groupName = "Guest";
		}

		JSONLayout.addPublicLayout(
			groupName = ${groupName},
			layoutName = "Cookie Consent Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = ${groupName},
			layoutName = "Cookie Consent Test Page",
			widgetName = "Cookies Banner Configuration");

		Navigator.gotoSitePage(
			pageName = "Cookie Consent Test Page",
			siteName = ${groupName});
	}

	@description = "Delete all cookies and Refresh page"
	@summary = "Default summary"
	macro deleteAllCookiesAndRefreshPage() {
		var javascript = '''document.cookie.split(";").forEach(function(c) {
    document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
});''';

		var deleted = selenium.getEval(${javascript});

		echo(${deleted});

		Navigator.openURL();
	}

	@description = "Navigate to home page"
	@summary = "Default summary"
	macro siteVisit(domain = null, virtualHostsURL = null) {
		if (isSet(virtualHostsURL)) {
			Navigator.openSpecificURL(
				domain = ${domain},
				url = ${virtualHostsURL});
		}
		else {
			Navigator.openURL();
		}
	}

	@description = "Verify if Policy Page is visible"
	@summary = "Default summary"
	macro verifyPolicyPageIsVisible(policyLink = null) {
		Variables.assertDefined(parameterList = ${policyLink});

		SelectWindow(value1 = "PolicyPage - Liferay DXP");

		AssertElementPresent(locator1 = "//h2[contains(.,'Type Facet')]");
	}

}