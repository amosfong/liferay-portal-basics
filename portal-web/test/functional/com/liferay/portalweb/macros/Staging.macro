definition {

	@summary = "Default summary"
	macro activateStagingCP(pageVersioningEnabled = null, remotePort = null, siteName = null, siteId = null, uncheckContent = null, isNotEditable = null) {
		ProductMenuHelper.openProductMenu();

		AssertTextEquals.assertPartialText(
			locator1 = "ProductMenu#PRODUCT_MENU_PANEL_SITE_ADMINISTRATION_SITE_NAME",
			value1 = ${siteName});

		if (isSet(remoteStaging)) {
			WaitForElementPresent(locator1 = "SiteSettingsStaging#STAGING_REMOTE_LIVE");

			Check.checkHiddenToggleSwitch(locator1 = "SiteSettingsStaging#STAGING_REMOTE_LIVE");

			Type(
				locator1 = "SiteSettingsStaging#REMOTE_STAGING_IP",
				value1 = "localhost");

			Type(
				locator1 = "SiteSettingsStaging#REMOTE_STAGING_PORT",
				value1 = ${remotePort});

			Type(
				locator1 = "SiteSettingsStaging#REMOTE_STAGING_SITE_ID",
				value1 = ${siteId});
		}

		if (!(isSet(remoteStaging))) {
			WaitForElementPresent(locator1 = "SiteSettingsStaging#STAGING_LOCAL_LIVE");

			Check.checkHiddenToggleSwitch(locator1 = "SiteSettingsStaging#STAGING_LOCAL_LIVE");
		}

		if (${pageVersioningEnabled} == "true") {
			if (IsElementPresent(key_fieldLabel = "Enabled", locator1 = "Checkbox#CHECKBOX_LABEL")) {
				Click.clickAtNotVisible(locator1 = "Checkbox#ENABLED_ON_PUBLIC_PAGES");
			}
			else {
				Click.clickAtNotVisible(locator1 = "Checkbox#ENABLED_ON_PUBLIC_PAGES");

				Click.clickAtNotVisible(locator1 = "Checkbox#ENABLED_ON_PRIVATE_PAGES");
			}
		}

		Click(locator1 = "SiteSettingsStaging#CONTENT_SELECT_ALL_CHECKBOX");

		if (isSet(noContent)) {
			Click(locator1 = "SiteSettingsStaging#CONTENT_SELECT_ALL_CHECKBOX");
		}

		if (isSet(uncheckContent)) {
			var key_contentName = ${uncheckContent};

			Click(locator1 = "SiteSettingsStaging#CONTENT_CHECKBOX");
		}

		if (isSet(isNotEditable)) {
			var key_contentName = ${isNotEditable};

			AssertNotEditable(locator1 = "SiteSettingsStaging#CONTENT_CHECKBOX");
		}

		if (isSet(recycleBinNotification)) {
			AssertTextPresent(
				locator1 = "Message#ERROR_3_ALT",
				value1 = "The recycle bin of this site will be automatically emptied before turning on local staging. Make sure to manually restore anything you do not want to delete permanently before you continue.");
		}

		if (isSet(remoteStaging)) {
			Staging.saveRemoteStagingConfiguration(siteName = ${siteName});
		}

		if (!(isSet(remoteStaging))) {
			Staging.saveLocalStagingConfiguration(siteName = ${siteName});
		}

		AssertTextNotPresent(
			locator1 = "Message#ERROR",
			value1 = "The tunneling servlet shared secret is not set.");

		AssertTextNotPresent(
			locator1 = "Message#ERROR",
			value1 = "Your request failed to complete.");

		WaitForElementPresent(locator1 = "Button#PLUS");

		AssertConsoleTextNotPresent(value1 = "Please configure tunneling.servlet.shared.secret");

		AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException: java.lang.NullPointerException");
	}

	@summary = "Default summary"
	macro addCustomPublication(publishTemplateName = null, headerTitle = null) {
		WaitForElementPresent(locator1 = "Button#PLUS");

		LexiconEntry.gotoAdd();

		if (isSet(headerTitle)) {
			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = ${headerTitle});
		}

		if (isSet(publishTemplateName)) {
			var key_publishTemplateName = ${publishTemplateName};

			Click(locator1 = "Staging#STAGING_PUBLISH_TEMPLATE_LINK");
		}
	}

	@summary = "Default summary"
	macro addPageVariationPG(pageVariationName = null) {
		WaitForElementPresent(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");

		Click(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");

		Click(locator1 = "Staging#STAGING_MENU_MANAGE_PAGE_VARIATION");

		SelectFrame(locator1 = "IFrame#PAGE_VARIATION_IFRAME");

		AssertClick(
			locator1 = "Button#ADD_PAGE_VARIATION",
			value1 = "Add Page Variation");

		Type(
			locator1 = "StagingManageVariations#MANAGE_VARIATION",
			value1 = ${pageVariationName});

		AssertClick(
			locator1 = "StagingManageVariations#ADD",
			value1 = "Add");

		Alert.viewSuccessMessage();

		IFrame.closeFrame();

		WaitForLiferayEvent.initializeLiferayEventLog();
	}

	@summary = "Default summary"
	macro addPublishTemplate(publishTemplateDescription = null, publishTemplateName = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Publish Templates");

		WaitForElementPresent(locator1 = "Button#PLUS");

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "TextInput#NAME",
			value1 = ${publishTemplateName});

		PortletEntry.inputDescription(description = ${publishTemplateDescription});
	}

	@summary = "Default summary"
	macro addRepeatEvent(scheduleTitleName = null, frequency = null) {
		Click(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "StagingPublishToLive#SWITCH_TO_ADVANCED_PUBLICATION");

		Type(
			locator1 = "StagingPublishToLive#DATE_SCHEDULE_TITLE_FIELD",
			value1 = ${scheduleTitleName});

		Click(locator1 = "StagingPublishToLive#DATE_SCHEDULE_RADIO");

		if (isSet(startOnTomorrow)) {
			Staging.setStartDateTomorrow();
		}

		Check(locator1 = "StagingPublishToLive#DATE_SCHEDULE_END_DATE_NO_END_DATE_RADIO");

		Select(
			locator1 = "StagingPublishToLive#DATE_SCHEDULE_REPEAT_DROPDOWN",
			value1 = ${frequency});

		AssertSelectedLabel(
			locator1 = "StagingPublishToLive#DATE_SCHEDULE_REPEAT_DROPDOWN",
			value1 = ${frequency});

		AssertClick(
			locator1 = "StagingPublishToLive#ADD_EVENT_BUTTON",
			value1 = "Add Event");

		if (isSet(failureExpected)) {
			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "A wrong start date was specified, the scheduled process cannot start in the past.");
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro addSitePagesVariationPG(sitePagesVariationName = null, copySitePagesVariationName = null) {
		Click.waitForMenuToggleJSClick(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");

		Click(locator1 = "Staging#MANAGE_VARIATIONS");

		var key_sitePagesVariationName = ${sitePagesVariationName};

		SelectFrame(locator1 = "IFrame#SITE_VARIATION_IFRAME");

		AssertClick(
			locator1 = "StagingManageVariations#ADD_SITE_PAGES_VARIATIONS_BUTTON",
			value1 = "Add Site Pages Variation");

		Type(
			locator1 = "StagingManageVariations#MANAGE_VARIATION",
			value1 = ${sitePagesVariationName});

		if (isSet(copySitePagesVariationName)) {
			MouseOver(
				key_tooltipInfo = "Only the latest version marked as ready for publish process is copied.",
				locator1 = "Staging#STAGING_TOOLTIP");

			AssertVisible(
				key_content = "Only the latest version marked as ready for publish process is copied.",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");

			Select(
				locator1 = "StagingManageVariations#ADD_SITE_PAGES_VARIATION_COPY_PAGES_SELECT",
				value1 = ${copySitePagesVariationName});
		}

		AssertClick(
			locator1 = "StagingManageVariations#ADD",
			value1 = "Add");

		Alert.viewSuccessMessage();

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro addStagingAdminRole() {
		JSONRole.addSiteRole(
			roleKey = "Staging Admin",
			roleTitle = "Staging Admin");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,VIEW,PREFERENCES,PERMISSIONS,CONFIGURATION,ADD_TO_PAGE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Staging Admin",
				roleType = "site");
		}

		for (var resourceActionIndex : list "VIEW_SITE_ADMINISTRATION,MANAGE_ANNOUNCEMENTS,VIEW_MEMBERS,EXPORT_IMPORT_PORTLET_INFO,VIEW,EXPORT_IMPORT_LAYOUTS,UPDATE,DELETE,PUBLISH_STAGING,CONFIGURE_PORTLETS,PUBLISH_PORTLET_INFO,ASSIGN_USER_ROLES,PREVIEW_IN_DEVICE,ASSIGN_MEMBERS,PERMISSIONS,ADD_LAYOUT_SET_BRANCH,MANAGE_TEAMS,ADD_LAYOUT_BRANCH,MANAGE_SUBGROUPS,ADD_LAYOUT,MANAGE_STAGING,ADD_COMMUNITY,MANAGE_LAYOUTS,VIEW_STAGING,MANAGE_ARCHIVED_SETUPS,ADD_LAYOUT_UTILITY_PAGE_ENTRY") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Staging Admin",
				roleType = "site");
		}

		for (var resourceActionIndex : list "UPDATE_DISCUSSION,UPDATE,PERMISSIONS,DELETE_DISCUSSION,DELETE,CUSTOMIZE,CONFIGURE_PORTLETS,ADD_LAYOUT,ADD_DISCUSSION,VIEW,UPDATE_LAYOUT_ADVANCED_OPTIONS,UPDATE_LAYOUT_BASIC,UPDATE_LAYOUT_CONTENT,UPDATE_LAYOUT_LIMITED") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "Staging Admin",
				roleType = "site");
		}

		for (var resourceActionIndex : list "UPDATE,PERMISSIONS,DELETE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.LayoutBranch",
				roleTitle = "Staging Admin",
				roleType = "site");
		}

		for (var resourceActionIndex : list "UPDATE,PERMISSIONS,MERGE,DELETE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.portal.kernel.model.LayoutSetBranch",
				roleTitle = "Staging Admin",
				roleType = "site");
		}
	}

	@summary = "Default summary"
	macro assignStagingAdminToSite(siteName = null) {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONGroup.assignUserToGroup(
			groupName = ${siteName},
			userEmailAddress = "userea@liferay.com");

		JSONGroup.assignGroupRoleToUser(
			groupName = ${siteName},
			roleTitle = "Staging Admin",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");
	}

	@summary = "Default summary"
	macro changePageVariationInHistory(pageVariationNameMenulistName = null) {
		Click(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");

		Click(locator1 = "Staging#HISTORY_BUTTON");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Select(
			key_pageVariationName = ${pageVariationNameMenulistName},
			locator1 = "Staging#VARIATIONS_SELECTOR",
			value1 = ${pageVariationNameMenulistName});
	}

	@summary = "Default summary"
	macro changePageVariationPG(pageVariationNameMenulistName = null, pageVariationName = null) {
		var key_pageVariationName = ${pageVariationName};

		AssertClick(
			locator1 = "Staging#PAGE_VARIATION_DROPDOWN",
			value1 = ${pageVariationName});

		var key_pageVariationName = ${pageVariationNameMenulistName};

		AssertClick(
			locator1 = "Staging#PAGE_VARIATION_MENULIST_NAME",
			value1 = ${pageVariationNameMenulistName});
	}

	@summary = "Default summary"
	macro changeSitePageVariationCP(sitePagesVariationName = null) {
		var key_sitePagesVariationName = ${sitePagesVariationName};

		Click(locator1 = "Staging#SITE_PAGES_VARIATION_MENULIST_NAME");

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#SITE_PAGES_VARIATION_MENULIST_ACTIVE",
			value1 = ${sitePagesVariationName});
	}

	@summary = "Default summary"
	macro changeSitePageVariationPG(sitePagesVariationName = null, sitePagesVariationMenulistName = null) {
		var key_sitePagesVariationName = ${sitePagesVariationName};

		Refresh();

		AssertClick(
			locator1 = "Staging#SITE_PAGES_VARIATION_DROPDOWN",
			value1 = ${sitePagesVariationName});

		var key_sitePagesVariationName = ${sitePagesVariationMenulistName};

		AssertClick(
			locator1 = "Staging#SITE_PAGES_VARIATION_MENULIST_NAME",
			value1 = ${sitePagesVariationMenulistName});
	}

	@summary = "Default summary"
	macro clickPublishToLiveButton(remoteStaging = null) {
		if (${remoteStaging} == "true") {
			ClickNoError(locator1 = "Staging#STAGING_PUBLISH_TO_REMOTE_LIVE_BUTTON");
		}
		else if (isSet(scheduleProcess)) {
			ClickNoError(locator1 = "StagingPublishToLive#ADD_EVENT_BUTTON");
		}
		else {
			ClickNoError(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");
		}
	}

	@summary = "Default summary"
	macro configurePublishToLive(contentDateRange = null, includeThumbnailsAndPreviewsDuringStaging = null, dateRangeStartDate = null, checkContentNameList = null, uncheckContentNameList = null, checkPageName = null, uncheckChildPagesNameList = null, uncheckLogo = null, checkSubSubContent = null, dateRangeEndDate = null, deleteMissingPages = null, checkPrivatePages = null, deleteApplicationData = null, contentName = null, uncheckSubSubContent = null, uncheckSubContent = null, contentDeletion = null, mainContent = null, checkPublicPages = null, subContent = null, pageDeletion = null) {
		if (IsElementPresent.isElementPresentAfterWait(locator1 = "StagingPublishToLive#SWITCH_TO_ADVANCED_PUBLICATION")) {
			AssertClick.assertPartialTextClickAt(
				locator1 = "StagingPublishToLive#SWITCH_TO_ADVANCED_PUBLICATION",
				value1 = "Switch to Advanced Publish Process");
		}

		SelectFrameTop();

		if (IsElementPresent(locator1 = "IFrame#MODAL_BODY")) {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}

		if (${deleteMissingPages} == "true") {
			ContentConfiguration.deleteMissingPages();
		}

		if (${uncheckLogo} == "true") {
			ContentConfiguration.uncheckLogo();
		}

		if (isSet(checkPageName)) {
			ContentConfiguration.checkPageName(checkPageName = ${checkPageName});
		}

		if (isSet(contentDateRange)) {
			ContentConfiguration.contentDateRange(
				contentDateRange = ${contentDateRange},
				dateRangeEndDate = ${dateRangeEndDate},
				dateRangeStartDate = ${dateRangeStartDate});
		}

		if (${contentDeletion} == "true") {
			ContentConfiguration.contentDeletion();
		}

		if (${deleteApplicationData} == "true") {
			Click(locator1 = "StagingPublishToLive#DELETE_APPLICATION_DATA_BEFORE_IMPORTING_CHECKBOX");
		}

		if (${pageDeletion} == "true") {
			ContentConfiguration.pageDeletion();
		}

		if (isSet(checkContentNameList)) {
			ContentConfiguration.checkContentNameList(checkContentNameList = ${checkContentNameList});
		}

		if (isSet(uncheckChildPagesNameList)) {
			ContentConfiguration.uncheckChildPagesNameList(uncheckChildPagesNameList = ${uncheckChildPagesNameList});
		}

		if (isSet(uncheckContentNameList)) {
			ContentConfiguration.uncheckContentNameList(uncheckContentNameList = ${uncheckContentNameList});
		}

		if (isSet(uncheckPages)) {
			ContentConfiguration.uncheckPages();
		}

		if (${includeThumbnailsAndPreviewsDuringStaging} == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Staging#STAGING_CONTENT_INFO",
				value1 = "Previews and Thumbnails");

			WaitForElementPresent(
				key_contentName = ${checkContentNameList},
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_CONTENT_CHANGE_LINK");

			AssertClick.assertTextClickNoMouseOver(
				key_contentName = ${checkContentNameList},
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_CONTENT_CHANGE_LINK",
				value1 = "Change");

			AssertChecked.assertCheckedNotVisible(
				key_contentName = ${checkContentNameList},
				key_subContent = "Previews and Thumbnails",
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_SUBCONTENT_CHECKBOX");
		}
		else if (${includeThumbnailsAndPreviewsDuringStaging} == "false") {
			AssertTextNotEquals.assertNotPartialMatch(
				locator1 = "Staging#STAGING_CONTENT_INFO",
				value1 = "Previews and Thumbnails");

			WaitForElementPresent(
				key_contentName = ${checkContentNameList},
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_CONTENT_CHANGE_LINK");

			AssertClick.assertTextClickNoMouseOver(
				key_contentName = ${checkContentNameList},
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_CONTENT_CHANGE_LINK",
				value1 = "Change");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_contentName = ${checkContentNameList},
				key_subContent = "Previews and Thumbnails",
				locator1 = "ExportImport#CONTENT_CHOOSE_CONTENT_SUBCONTENT_CHECKBOX");
		}

		if (isSet(uncheckSubContent)) {
			Check.checkHiddenToggleSwitch(
				key_contentName = ${mainContent},
				locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");

			ContentConfiguration.uncheckSubContent(
				mainContent = ${mainContent},
				uncheckSubContent = ${uncheckSubContent});
		}

		if (isSet(uncheckSubSubContent)) {
			ContentConfiguration.uncheckSubSubContent(
				contentName = ${contentName},
				subContent = ${subContent},
				uncheckSubSubContent = ${uncheckSubSubContent});
		}

		if (isSet(checkSubSubContent)) {
			ContentConfiguration.checkSubSubContent(
				checkSubSubContent = ${checkSubSubContent},
				contentName = ${contentName},
				subContent = ${subContent});
		}

		if (isSet(checkPrivatePages)) {
			ContentConfiguration.checkPrivatePages(checkPrivatePages = ${checkPrivatePages});
		}

		if (isSet(checkPublicPages)) {
			ContentConfiguration.checkPublicPages(checkPublicPages = ${checkPublicPages});
		}

		if (isSet(checkPublishPermission)) {
			Click(locator1 = "Checkbox#PERMISSIONS");
		}
	}

	@summary = "Default summary"
	macro configurePublishToLiveViaPortletCP(contentDateRange = null, dateRangeStartDate = null, dateRangeEndDate = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging");

		WaitForLiferayEvent.initializeLiferayEventLog();

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		if (isSet(contentDateRange)) {
			ContentConfiguration.contentDateRange(
				contentDateRange = ${contentDateRange},
				dateRangeEndDate = ${dateRangeEndDate},
				dateRangeStartDate = ${dateRangeStartDate});
		}
	}

	@summary = "Default summary"
	macro configureScheduleTime(endByDateDayLength = null, endByDateMonthLength = null, scheduleTitleName = null) {
		Click(locator1 = "StagingPublishToLive#DATE_SCHEDULE_RADIO");

		if (isSet(scheduleTitleName)) {
			Type(
				locator1 = "StagingPublishToLive#DATE_SCHEDULE_TITLE_FIELD",
				value1 = ${scheduleTitleName});
		}

		var displayDate = DateTimeSchedule.increaseDisplayTime(
			field = "start",
			minuteIncreaseValue = 5);

		Type.sendKeys(
			locator1 = "StagingPublishToLive#DATE_SCHEDULE_TIME_INPUT",
			value1 = ${displayDate});

		if (isSet(endByDate)) {
			Check(locator1 = "StagingPublishToLive#DATE_SCHEDULE_END_DATE_END_BY_RADIO");

			var endByDateDay = selenium.getAttribute("//input[contains(@id,'schedulerEndDateDay')]@value");

			if (${endByDateDayLength} == 1) {
				var endByDateDay = "0${endByDateDay}";
			}

			var endByDateMonth = selenium.getAttribute("//input[contains(@id,'schedulerEndDateMonth')]@value");

			if (${endByDateMonthLength} == 1) {
				var endByDateMonth = "0${endByDateMonth}";
			}

			var endByDateYear = selenium.getAttribute("//input[contains(@id,'schedulerEndDateYear')]@value");

			var endByDateYearFuture = ${endByDateYear} + 5;

			var endByDay = "${endByDateMonth}/${endByDateDay}/${endByDateYearFuture}";

			Type(
				locator1 = "StagingPublishToLive#DATE_SCHEDULE_END_DATE_INPUT",
				value1 = ${endByDay});
		}
	}

	@summary = "Default summary"
	macro copyFromLive(portletName = null, portletOption = null) {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = ${portletOption});

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		ClickNoError(locator1 = "Staging#COPY_FROM_LIVE");

		WaitForElementPresent(
			locator1 = "Button#SUBMIT",
			value1 = "Copy from Live");

		AssertClickNoError.assertPartialTextClickAt(
			locator1 = "Button#SUBMIT",
			value1 = "Copy from Live");

		AssertConfirm(value1 = "Are you sure you want to copy from live and update the existing staging widget information?");

		AssertTextEquals(
			locator1 = "Staging#STAGING_STATUS_PORTLET",
			value1 = "Successful");

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro deactivateStagingCP(siteName = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging Configuration");

		if (IsVisible(key_fieldLabel = "Enabled", locator1 = "Checkbox#CHECKBOX_LABEL")) {
			Check.checkHiddenToggleSwitch(locator1 = "SiteSettingsStaging#NONE_RADIO");

			AssertClickNoError(
				locator1 = "Button#SAVE",
				value1 = "Save");

			AssertConfirm(value1 = "Are you sure you want to deactivate staging for ${siteName}?");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "Staging is successfully disabled.");
		}

		AssertNotVisible(
			key_fieldLabel = "Enabled",
			locator1 = "Checkbox#CHECKBOX_LABEL");
	}

	@summary = "Default summary"
	macro deleteHistory() {
		if (IsElementPresent(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS")) {
			Staging.gotoHistory();
		}

		Click(locator1 = "Icon#HISTORY_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro deletePageVariationPG(pageVariationName = null) {
		WaitForLiferayEvent.initializeLiferayEventLog();

		Click(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");

		Click(locator1 = "Staging#STAGING_MENU_MANAGE_PAGE_VARIATION");

		SelectFrame(locator1 = "IFrame#PAGE_VARIATION_IFRAME");

		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Delete",
			rowEntry = ${pageVariationName});

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro deletePublishTask(publicationTitle = null) {
		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Clear",
			rowEntry = ${publicationTitle});

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			locator1 = "Staging#PROCESS_TITLE",
			value1 = ${publicationTitle});
	}

	@summary = "Default summary"
	macro deletePublishTemplate(publishTemplateName = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Publish Templates");

		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Delete",
			rowEntry = ${publishTemplateName});

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		AssertElementNotPresent(
			key_rowEntry = ${publishTemplateName},
			locator1 = "Icon#ROW_VERTICAL_ELLIPSIS");
	}

	@summary = "Default summary"
	macro deleteSitePagesVariationPG(sitePagesVariationName = null) {
		Staging.navigateToSitePageVariation();

		LexiconEntry.gotoEntryMenuItemNoWaitNoError(
			menuItem = "Delete",
			rowEntry = ${sitePagesVariationName});

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro disableStagingSite(siteName = null) {
		Navigator.openSiteStagingConfiguration(siteName = ${siteName});

		Staging.deactivateStagingCP(siteName = ${siteName});
	}

	@summary = "Default summary"
	macro editPublishTemplate(publishTemplateNameEdit = null, publishTemplateName = null, publishTemplateDescriptionEdit = null) {
		Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		Navigator.gotoNavItem(navItem = "Publish Templates");

		var key_publishTemplateName = ${publishTemplateName};

		AssertTextEquals(
			locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_NAME",
			value1 = ${publishTemplateName});

		AssertClick(
			locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_NAME",
			value1 = ${publishTemplateName});

		Type(
			locator1 = "TextInput#NAME",
			value1 = ${publishTemplateNameEdit});

		PortletEntry.inputDescription(description = ${publishTemplateDescriptionEdit});
	}

	@summary = "Default summary"
	macro editPublishTemplateRemoteSiteID(groupName = null, remotePort = null) {
		Panel.expandPanel(panel = "Remote Live Connection Settings");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = ${groupName},
			portalURL = "http://localhost:${remotePort}",
			site = "true");

		Type(
			locator1 = "SiteSettingsStaging#REMOTE_STAGING_SITE_ID",
			value1 = ${siteId});
	}

	@summary = "Default summary"
	macro editSitePageVariationPG(sitePagesVariationName = null) {
		Staging.navigateToSitePageVariation();

		var key_sitePagesVariationName = ${sitePagesVariationName};

		LexiconEntry.openEntryMenu(rowEntry = ${sitePagesVariationName});

		MenuItem.click(menuItem = "Edit");

		Type(
			locator1 = "StagingManageVariations#MANAGE_VARIATION",
			value1 = "${sitePagesVariationName} Edit");

		AssertClick(
			locator1 = "StagingManageVariations#UPDATE_BUTTON",
			value1 = "Update");

		Staging.viewVariationSuccessMessage();
	}

	@summary = "Default summary"
	macro editStagingConfiguration(pageVersioningEnabled = null, isNotEditable = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging Configuration");

		if (${pageVersioningEnabled} == "true") {
			Check.checkHiddenToggleSwitch(locator1 = "Checkbox#ENABLED_ON_PUBLIC_PAGES");

			Check.checkHiddenToggleSwitch(locator1 = "Checkbox#ENABLED_ON_PRIVATE_PAGES");
		}

		if (isSet(isNotEditable)) {
			var key_contentName = ${isNotEditable};

			AssertNotEditable(locator1 = "Checkbox#STAGED_CONTENT");
		}

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro enablePageInSitePagesVariation(sitePagesVariationName = null, privacy = null, pageName = null) {
		AssertTextEquals.assertPartialText(
			locator1 = "Staging#STAGING_BAR_PAGE_VARIATIONS_ALERT",
			value1 = "The page ${pageName} is not enabled in ${sitePagesVariationName}, but is available for other pages variations.");

		AssertClick(
			locator1 = "Staging#STAGING_MENU_ENABLE_PAGE_BUTTON",
			value1 = "Enable in ${sitePagesVariationName}");

		PagesAdmin.viewPageItemPresent(
			pageName = ${pageName},
			privacy = ${privacy});
	}

	@summary = "Default summary"
	macro gotoHistory() {
		if (IsElementNotPresent(locator1 = "Staging#HISTORY_BUTTON")) {
			Click(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");
		}

		Click(locator1 = "Staging#HISTORY_BUTTON");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");
	}

	@summary = "Default summary"
	macro gotoNavTab(tabName = null) {
		var key_tabName = ${tabName};

		if (IsElementNotPresent(locator1 = "StagingPublishToLive#ACTIVE_TAB_NAME")) {
			Click(locator1 = "StagingPublishToLive#TAB_NAME");
		}

		AssertElementPresent(locator1 = "StagingPublishToLive#ACTIVE_TAB_NAME");
	}

	@summary = "Default summary"
	macro gotoPublishToLive() {
		if ((IsElementNotPresent(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON")) && (IsElementPresent(locator1 = "Icon#STAGING"))) {
			Click(locator1 = "Icon#STAGING");

			AssertElementPresent(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");
		}

		if ((IsElementPresent(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION")) && !(isSet(pleaseDoNotMarkAsReady))) {
			Check.toggleSwitch(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION");
		}

		WaitForLiferayEvent.initializeLiferayEventLog();

		Click(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");
	}

	@summary = "Default summary"
	macro markAsReadyForPublication() {
		if (IsElementPresent(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION")) {
			AssertNotChecked(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION");

			Check.toggleSwitch(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION");
		}
	}

	@summary = "Default summary"
	macro mergeSitePagesVariation(sitePagesVariationName = null, sitePagesVariationMergeName = null) {
		Refresh();

		Staging.navigateToSitePageVariation();

		LexiconEntry.gotoEntryMenuItemNoWait(
			menuItem = "Merge",
			rowEntry = ${sitePagesVariationName});

		var key_sitePagesVariationMergeName = ${sitePagesVariationMergeName};

		AssertTextEquals(
			locator1 = "StagingManageVariations#MERGE_SITE_PAGES_VARIATION_TABLE_BRANCH",
			value1 = ${sitePagesVariationMergeName});

		AssertClickNoError(
			locator1 = "StagingManageVariations#MERGE_SITE_PAGES_VARIATION_TABLE_SELECT_LINK",
			value1 = "Select");

		AssertConfirm(value1 = "Are you sure you want to merge changes from ${sitePagesVariationMergeName}?");

		Staging.viewVariationSuccessMessage();

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro modifyVariation() {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging Configuration");

		if (isSet(enableOnPublicPages)) {
			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Checkbox#ENABLED_ON_PUBLIC_PAGES");

			AssertClickNoError(
				locator1 = "Button#SAVE",
				value1 = "Save");
		}

		if (isSet(enableOnPrivatePages)) {
			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Checkbox#ENABLED_ON_PRIVATE_PAGES");

			AssertClickNoError(
				locator1 = "Button#SAVE",
				value1 = "Save");
		}
	}

	@summary = "Default summary"
	macro moveToTheRecycleBinPublishTemplate(publishTemplateName = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Publish Templates");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Delete",
			rowEntry = ${publishTemplateName});

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro navigateToSitePageVariation() {
		WaitForLiferayEvent.initializeLiferayEventLog();

		Click(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");

		Click(locator1 = "Staging#MANAGE_VARIATIONS");

		SelectFrame(locator1 = "IFrame#SITE_VARIATION_IFRAME");
	}

	@summary = "Default summary"
	macro openStagingAdmin(siteURLKey = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_staging_processes_web_portlet_StagingProcessesPortlet");
	}

	@summary = "Default summary"
	macro publishCustomPublication(scheduleProcess = null, inProcess = null, checkContentNameList = null, validateErrorMessage = null, rangeAll = null, editPublishTemplateName = null, publishTemplateName = null, failureExpected = null, remoteStaging = null, headerTitle = null) {
		Staging.addCustomPublication(
			headerTitle = ${headerTitle},
			publishTemplateName = ${publishTemplateName});

		if (isSet(scheduleProcess)) {
			Staging.configureScheduleTime();
		}

		if (isSet(editPublishTemplateName)) {
			Type(
				locator1 = "TextInput#NAME",
				value1 = ${editPublishTemplateName});
		}

		if (${rangeAll} == "true") {
			Click(locator1 = "Radio#CHOOSE_CONTENT_ALL_CHANGE");

			ClickNoError(locator1 = "Link#REFRESH_COUNTS");
		}

		if (isSet(checkContentNameList)) {
			for (var contentName : list ${checkContentNameList}) {
				Check.checkNotVisible(
					key_contentName = ${contentName},
					locator1 = "Staging#STAGING_CONTENT_CHECKBOX");
			}
		}

		Staging.clickPublishToLiveButton(
			failureExpected = ${failureExpected},
			remoteStaging = ${remoteStaging},
			scheduleProcess = ${scheduleProcess});

		Staging.viewProcessResult(
			failureExpected = ${failureExpected},
			inProcess = ${inProcess},
			scheduleProcess = ${scheduleProcess},
			validateErrorMessage = ${validateErrorMessage});
	}

	@summary = "Default summary"
	macro publishToLive(scheduleProcess = null, validateErrorMessage = null, failureExpected = null, remoteStaging = null, publicationName = null) {
		if (isSet(publicationName)) {
			PortletEntry.inputName(name = ${publicationName});
		}

		Staging.clickPublishToLiveButton(remoteStaging = ${remoteStaging});

		Staging.viewProcessResult(
			failureExpected = ${failureExpected},
			scheduleProcess = ${scheduleProcess},
			validateErrorMessage = ${validateErrorMessage});

		WaitForLiferayEvent.initializeLiferayEventLog();

		SelectFrameTop();

		if (IsElementPresent(locator1 = "IFrame#MODAL_BODY")) {
			IFrame.closeFrame();
		}

		WaitForLiferayEvent.initializeLiferayEventLog();
	}

	@summary = "Default summary"
	macro publishToLiveNowViaPortletCP(replicateIndividualDeletions = null) {
		Staging.configurePublishToLiveViaPortletCP();

		if (${replicateIndividualDeletions} == "true") {
			AssertVisible(locator1 = "Staging#STAGING_CONTENT_DELETIONS");

			Click(locator1 = "Staging#STAGING_CONTENT_DELETIONS");

			Click(locator1 = "Staging#REPLICATE_INDIVIDUAL_DELETIONS");
		}

		ClickNoError(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");

		AssertConfirm(value1 = "Are you sure you want to publish to live and update the existing application data?");

		WaitForElementPresent(locator1 = "Staging#STAGING_STATUS_PORTLET");

		AssertTextEquals(
			locator1 = "Staging#STAGING_STATUS_PORTLET",
			value1 = "Successful");

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro publishToLiveNowViaPortletPG(portletName = null) {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = "Staging");

		IFrame.selectConfigurationFrame();

		AssertClickNoError(
			locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON",
			value1 = "Publish to Live");

		AssertConfirm(value1 = "Are you sure you want to publish to live and update the existing application data?");

		WaitForElementPresent(locator1 = "Staging#STAGING_STATUS_PORTLET");

		AssertTextEquals(
			locator1 = "Staging#STAGING_STATUS_PORTLET",
			value1 = "Successful");

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro publishToLivePublishTemplate(siteName = null) {
		if (IsElementPresent(locator1 = "StagingPublishToLive#SWITCH_TO_ADVANCED_PUBLICATION")) {
			AssertClick.assertPartialTextClickAt(
				locator1 = "StagingPublishToLive#SWITCH_TO_ADVANCED_PUBLICATION",
				value1 = "Switch to Advanced Publish Process");

			AssertClick(
				locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_BUTTON",
				value1 = "Publish Templates");
		}

		Click(locator1 = "Icon#HISTORY_VERTICAL_ELLIPSIS");

		Click(locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_PUBLISH_TO_LIVE_ARROW_BUTTON");

		AssertClick(
			locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON",
			value1 = "Publish to Live");

		while ((IsElementNotPresent(locator1 = "Staging#PROCESS_SUCCESSFUL")) && (IsElementNotPresent(locator1 = "Staging#LATEST_PROCESS_RESULT"))) {

			// Set a minium pause to wait for the publication process completed.

			Pause(value1 = 1000);
		}

		if (IsElementPresent(locator1 = "Staging#PROCESS_SUCCESSFUL")) {
			AssertTextEquals(
				locator1 = "Staging#PROCESS_SUCCESSFUL",
				value1 = "Successful");

			SelectFrame(value1 = "relative=top");

			IFrame.closeFrame();
		}
		else {
			AssertTextEquals(
				locator1 = "Staging#LATEST_PROCESS_RESULT",
				value1 = "SUCCESSFUL");
		}

		var key_siteName = ${siteName};

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		if (IsElementPresent(locator1 = "Staging#LATEST_PROCESS_RESULT")) {
			AssertTextEquals(
				locator1 = "Staging#LATEST_PROCESS_RESULT",
				value1 = "SUCCESSFUL");
		}
		else {
			AssertTextEquals(
				locator1 = "Staging#PROCESS_SUCCESSFUL",
				value1 = "Successful");
		}
	}

	@summary = "Default summary"
	macro publishToRemoteUncheckContentViaCustomPublication(contentName = null) {
		LexiconEntry.gotoAdd();

		var key_contentName = ${contentName};

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Staging#STAGING_CONTENT_CHECKBOX");

		AssertClickNoError(
			locator1 = "Staging#STAGING_PUBLISH_TO_REMOTE_LIVE_BUTTON",
			value1 = "Publish to Remote Live");

		WaitForElementPresent(locator1 = "Staging#PROCESS_RESULT");

		AssertTextEquals(
			locator1 = "Staging#PROCESS_RESULT",
			value1 = "SUCCESSFUL");
	}

	@summary = "Default summary"
	macro publishViaSAP(entry = null, confirmMessage = null) {
		if (IsElementPresent(key_rowEntry = ${entry}, locator1 = "Icon#ROW_VERTICAL_ELLIPSIS")) {
			Click(
				key_rowEntry = ${entry},
				locator1 = "Icon#ROW_VERTICAL_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Publish to Live");
		}
		else {
			WebContentNavigator.gotoEntryMenuItem(
				entry = ${entry},
				menuItem = "Publish to Live");
		}

		AssertConfirm(value1 = ${confirmMessage});

		AssertTextEquals(
			locator1 = "Staging#PROCESS_SUCCESSFUL",
			value1 = "Successful");
	}

	@summary = "Default summary"
	macro publishWithMultiPublishOption() {
		if (!(isSet(index))) {
			var index = 1;
		}

		Click(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Publish Selected Elements");

		AssertTextEquals(
			index = ${index},
			locator1 = "Modal#BODY_MESSAGE",
			value1 = "Are you sure you want to publish the selected entities?");

		AssertClick(
			buttonName = "Publish to Live",
			locator1 = "Modal#PRIMARY_BUTTON",
			value1 = "Publish to Live");

		WaitForElementPresent(locator1 = "Staging#PROCESS_RESULT");

		AssertTextEquals(
			locator1 = "Staging#PROCESS_RESULT",
			value1 = "SUCCESSFUL");
	}

	@summary = "Default summary"
	macro redoStagingPageVersioningPG() {
		while (IsElementNotPresent(locator1 = "Staging#STAGING_MENU_REDO_BUTTON")) {
			Click(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");
		}

		ClickNoError(locator1 = "Staging#STAGING_MENU_REDO_BUTTON");

		AssertConfirm(value1 = "Are you sure you want to redo your last changes?");
	}

	@summary = "Default summary"
	macro remoteStagingSetUp(pageVersioningEnabled = null, siteName = null, uncheckContent = null, contentName = null) {
		if (!(isSet(remotePort))) {
			var remotePort = 8080;
		}

		HeadlessSite.addSite(
			portalURL = "http://localhost:${remotePort}",
			siteName = "Remote Site");

		var siteId = JSONGroupSetter.setGroupId(
			groupName = "Remote Site",
			portalURL = "http://localhost:${remotePort}");
		var siteURLKey = ContentPagesNavigator._convertNameToKey(name = ${siteName});

		Staging.openStagingAdmin(siteURLKey = ${siteURLKey});

		Staging.activateStagingCP(
			contentName = ${contentName},
			pageVersioningEnabled = ${pageVersioningEnabled},
			remotePort = ${remotePort},
			remoteStaging = "true",
			siteId = ${siteId},
			siteName = ${siteName},
			uncheckContent = ${uncheckContent});
	}

	@summary = "Default summary"
	macro remoteStagingSetUpViaJson(branchingPublic = null, groupName = null, branchingPrivate = null, parentGroupName = null) {
		if (!(isSet(remotePort))) {
			var remotePort = 8080;
		}

		HeadlessSite.addSite(
			portalURL = "http://localhost:${remotePort}",
			siteName = "Remote Site");

		var remoteGroupId = JSONGroupSetter.setGroupId(
			groupName = "Remote Site",
			portalURL = "http://localhost:${remotePort}");

		JSONStaging.enableRemoteStaging(
			branchingPrivate = ${branchingPrivate},
			branchingPublic = ${branchingPublic},
			groupName = ${groupName},
			parentGroupName = ${parentGroupName},
			remoteGroupId = ${remoteGroupId},
			remotePort = ${remotePort});
	}

	@summary = "Default summary"
	macro runGroovyScript() {
		ServerAdministration.openServerAdmin();

		var script = TestCase.getFileContent(fileName = "create-400-web-content-articles.groovy");

		Navigator.gotoNavItem(navItem = "Script");

		Select(
			locator1 = "ServerAdministrationScript#LANGUAGE_SELECT",
			value1 = "Groovy");

		Type(
			locator1 = "ServerAdministrationScript#SCRIPT_TEXT",
			value1 = ${script});

		AssertClick(
			locator1 = "ServerAdministrationScript#EXECUTE_BUTTON",
			value1 = "Execute");

		while (IsElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE")) {

			// Set a long pause to wait for creating 400 web content articles.

			Pause(value1 = 4000);
		}
	}

	@summary = "Default summary"
	macro saveLocalStagingConfiguration(siteName = null) {
		AssertClickNoError(
			locator1 = "Button#SAVE",
			value1 = "Save");

		AssertConfirm(value1 = "Are you sure you want to activate local staging for ${siteName}?");

		while (IsElementNotPresent(locator1 = "Staging#PROCESS_SUCCESSFUL")) {

			// Set a minium pause to wait for the publication process completed.

			Pause(value1 = 1000);
		}

		AssertTextEquals(
			locator1 = "Staging#PROCESS_RESULT",
			value1 = "SUCCESSFUL");
	}

	@summary = "Default summary"
	macro savePublishTemplate(publishTemplateDescription = null, publishTemplateName = null) {
		Button.clickSave();

		var key_publishTemplateName = ${publishTemplateName};

		AssertTextEquals(
			locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_NAME",
			value1 = ${publishTemplateName});

		AssertTextEquals(
			locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_DESCRIPTION",
			value1 = ${publishTemplateDescription});
	}

	@summary = "Default summary"
	macro saveRemoteStagingConfiguration(siteName = null) {
		AssertClickNoError(
			locator1 = "Button#SAVE",
			value1 = "Save");

		AssertConfirm(value1 = "Are you sure you want to activate remote staging for ${siteName}?");

		while (IsElementNotPresent(locator1 = "Message#SUCCESS")) {

			// This pause has been optimized. See details in LRQA-66660.

			Pause(value1 = 1000);
		}

		if (IsElementPresent(locator1 = "Button#CLOSE_MESSAGE")) {
			Click(locator1 = "Button#CLOSE_MESSAGE");
		}
	}

	@summary = "Default summary"
	macro schedulePublishToLivePG(checkContentNameList = null, scheduleTitleName = null, frequency = null) {
		if (IsElementPresent(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION")) {
			Check.toggleSwitch(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION");
		}

		Click(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "StagingPublishToLive#SWITCH_TO_ADVANCED_PUBLICATION");

		AssertElementPresent(locator1 = "//div[contains(@class,'layout-selector-options')]//*[contains(@class,'treeview')]");

		if (IsElementPresent(locator1 = "PagesConfiguration#PAGES_ALL_PAGES_CHECKBOX")) {
			Click.clickAtNotVisible(locator1 = "PagesConfiguration#PAGES_ALL_PAGES_CHECKBOX");
		}
		else {
			Click.clickAtNotVisible(locator1 = "PagesConfiguration#PAGES_ALL_PUBLIC_PAGES_CHECKBOX");
		}

		Staging.configureScheduleTime(scheduleTitleName = ${scheduleTitleName});

		if (isSet(frequency)) {
			Select(
				locator1 = "StagingPublishToLive#DATE_SCHEDULE_REPEAT_DROPDOWN",
				value1 = ${frequency});
		}

		if (isSet(checkContentNameList)) {
			for (var contentName : list ${checkContentNameList}) {
				var key_contentName = ${contentName};

				Click.clickAtNotVisible(locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");
			}
		}

		AssertClick(
			locator1 = "StagingPublishToLive#ADD_EVENT_BUTTON",
			value1 = "Add Event");

		Alert.viewSuccessMessage();

		SelectFrameTop(value1 = "relative=top");

		// We split a long pause which is a 5-minute scheduled event into smaller one and there is another 3-minute pause in testcases.

		Pause(value1 = 5000);
	}

	@summary = "Default summary"
	macro searchPublishTemplate(searchTerm = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Publish Templates");

		Search.searchCP(searchTerm = ${searchTerm});

		var key_publishTemplateName = ${searchTerm};

		AssertTextEquals.assertPartialText(
			locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_NAME",
			value1 = ${searchTerm});
	}

	@summary = "Default summary"
	macro setStartDateTomorrow() {
		Click(locator1 = "StagingPublishToLive#DATE_SCHEDULE_START_DATE");

		var daySelected = selenium.getText("CalendarEditEvent#MINI_CALENDAR_DAY_SELECTED");

		var tomorrow = ${daySelected} + 1;

		var key_daySpecific = ${tomorrow};

		if (IsElementPresent(locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC")) {
			Click(locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC");
		}
		else {
			Click(locator1 = "CalendarEditEvent#MINI_CALENDAR_NEXT_MONTH_BUTTON");

			var key_daySpecific = 1;

			Click(locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC");
		}
	}

	@summary = "Default summary"
	macro submitForWorkflowPageRevision() {
		if (IsTextEqual(locator1 = "Message#WORKFLOW_STATUS", value1 = "Draft")) {
			AssertClick(
				locator1 = "Staging#STAGING_MENU_SUBMIT_FOR_WORKFLOW",
				value1 = "Submit for Workflow");
		}

		AssertElementNotPresent(locator1 = "Staging#STAGING_MENU_SUBMIT_FOR_WORKFLOW");

		Refresh();

		if (IsTextEqual(locator1 = "Message#WORKFLOW_STATUS", value1 = "Pending (Created)")) {
			AssertTextEquals(
				locator1 = "Message#WORKFLOW_STATUS",
				value1 = "Pending (Created)");
		}
		else {
			AssertTextEquals(
				locator1 = "Message#WORKFLOW_STATUS",
				value1 = "Pending (Review)");
		}
	}

	@summary = "Default summary"
	macro undoStagingPageVersioningPG() {
		Click(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS");

		ClickNoError(locator1 = "Staging#STAGING_MENU_UNDO_BUTTON");

		AssertConfirm(value1 = "Are you sure you want to undo your last changes?");
	}

	@summary = "Default summary"
	macro validateFolderExist() {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		AntCommands.runCommand("build-test.xml", "check-folder-in-lar");

		var result = FileUtil.read("${liferayHome}/result.txt");

		if (contains(${result}, "not found")) {
			fail("Folder not found in lar file.");
		}
	}

	@summary = "Default summary"
	macro validateFolderNotExist() {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		AntCommands.runCommand("build-test.xml", "check-folder-in-lar");

		var result = FileUtil.read("${liferayHome}/result.txt");

		if (!(contains(${result}, "not found"))) {
			fail("Folder found in lar file.");
		}
	}

	@summary = "Default summary"
	macro viewAddButtonDoesNotExist() {
		IsElementNotPresent(locator1 = "Button#PLUS");
	}

	@summary = "Default summary"
	macro viewAddButtonExists() {
		AssertVisible(locator1 = "Button#PLUS");
	}

	@summary = "Default summary"
	macro viewDateRange(dateRangeStartDate = null, dateRangeEndDate = null) {
		AssertElementPresent(
			key_dateRangeStartDate = ${dateRangeStartDate},
			locator1 = "Select#DATE_RANGE_START_DATE_VALUE");

		AssertElementPresent(
			key_dateRangeEndDate = ${dateRangeEndDate},
			locator1 = "Select#DATE_RANGE_END_DATE_VALUE");
	}

	@summary = "Default summary"
	macro viewDefaultConfiguration(configurationNameList = null) {
		for (var configurationName : list ${configurationNameList}) {
			var key_checkboxName = ${configurationName};

			AssertChecked.assertCheckedNotVisible(locator1 = "StagingPublishToLive#STAGING_CONFIGURATION_CHECKBOX");
		}
	}

	@summary = "Default summary"
	macro viewEditedSitePagesVariationPG(sitePagesVariationName = null) {
		var key_sitePagesVariationName = ${sitePagesVariationName};

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#SITE_PAGES_VARIATION",
			value1 = ${sitePagesVariationName});
	}

	@summary = "Default summary"
	macro viewHistoryVersionPG(historyVersion = null, historyVersionName = null, modifiedVersion = null) {
		if (IsElementPresent(locator1 = "Icon#STAGING_BAR_VERTICAL_ELLIPSIS")) {
			Staging.gotoHistory();
		}

		if (${modifiedVersion} == "true") {
			AssertTextNotEquals(
				locator1 = "Staging#HISTORY_VERSION",
				value1 = ${historyVersion});
		}
		else if (isSet(historyVersionName)) {
			var key_historyVersionName = ${historyVersionName};

			AssertTextEquals.assertPartialText(
				locator1 = "Staging#HISTORY_VERSION_NAME",
				value1 = ${historyVersionName});
		}
		else if (IsElementPresent(locator1 = "Staging#HISTORY_VERSION_2")) {
			AssertTextEquals(
				locator1 = "Staging#HISTORY_VERSION_2",
				value1 = ${historyVersion});
		}
		else if (IsElementPresent.isVisible(locator1 = "Staging#HISTORY_VERSION")) {
			AssertTextEquals(
				locator1 = "Staging#HISTORY_VERSION",
				value1 = ${historyVersion});
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "Staging#HISTORY_VERSION_ANCHOR",
				value1 = ${historyVersion});
		}

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro viewNoPublishContentCountViaPortletStagingCP() {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertElementNotPresent(locator1 = "Staging#STAGING_CONTENT_COUNT");

		AssertElementNotPresent(locator1 = "Staging#STAGING_CONTENT_INFO");

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro viewNotStagedAssetMessageOnStaging() {
		MouseOver.javaScriptFocus(
			key_text = "warning-full",
			locator1 = "Icon#ANY");

		AssertVisible(
			key_content = "The data of this portlet is not staged. Any data changes are immediately available to the Local Live site. The portlet's own workflow is still honored. Portlet setup is still managed from staging.",
			locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
	}

	@summary = "Default summary"
	macro viewPageVariationPG(pageVariationName = null) {
		var key_pageVariationName = ${pageVariationName};

		AssertTextEquals(
			locator1 = "Staging#PAGE_VARIATION",
			value1 = ${pageVariationName});
	}

	@summary = "Default summary"
	macro viewPortletDefaultMessageInRemoteLive() {
		Alert.viewInfoMessageSpecific(infoMessage = "This application is not visible to users yet");
	}

	@summary = "Default summary"
	macro viewProcessResult(validateErrorMessage = null) {
		while (IsElementNotPresent(locator1 = "Staging#PROCESS_RESULT")) {

			// This pause has been optimized. See details in LPS-135924.

			Pause(value1 = 1000);
		}

		if (isSet(failureExpected)) {
			AssertTextEquals(
				locator1 = "Staging#PROCESS_FAILED",
				value1 = "Failed");
		}
		else if (isSet(inProcess)) {
			AssertTextEquals(
				locator1 = "Staging#PROCESS_CURRENT_ITEM",
				value1 = "Please wait as the publish processes complete on the remote site.");
		}
		else if (isSet(scheduleProcess)) {
			Alert.viewSuccessMessage();
		}
		else {
			WaitForElementNotPresent(locator1 = "Staging#PROCESS_IN_PROGRESS");

			Staging.viewSuccessResult();
		}

		if (isSet(validateErrorMessage)) {
			Staging.viewValidationError(validateErrorMessage = ${validateErrorMessage});
		}
	}

	@summary = "Default summary"
	macro viewPublicationSummary(lookAndFeelList = null, noContentList = null, pagesOption = null, pagesNotToPublish = null, pagesToPublish = null, dateRestrictionOption = null, publicationTitle = null, contentList = null) {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Summary",
			rowEntry = ${publicationTitle});

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(locator1 = "Staging#PROCESS_SUMMARY_PAGES_TITLE");

		if (isSet(content)) {
			for (var content : list ${contentList}) {
				var key_content = ${content};

				AssertTextPresent(
					locator1 = "Staging#PUBLICATION_CONTENT",
					value1 = ${content});
			}
		}

		if (isSet(deletions)) {
			AssertElementPresent(locator1 = "Staging#PUBLICATION_DELETIONS");
		}

		if (isSet(lookAndFeelList)) {
			for (var lookAndFeel : list ${lookAndFeelList}) {
				var key_lookAndFeel = ${lookAndFeel};

				AssertTextPresent(
					locator1 = "Staging#PUBLICATION_LOOK_AND_FEEL",
					value1 = ${lookAndFeel});
			}
		}

		if (${dateRestrictionOption} == "All") {
			var key_dateRestrictionOption = "Without Restriction";

			AssertTextPresent(
				locator1 = "Staging#PUBLICATION_DATE",
				value1 = ${key_dateRestrictionOption});
		}

		if (${dateRestrictionOption} == "From Last Publish Date") {
			AssertTextPresent(
				locator1 = "Staging#PUBLICATION_DATE",
				value1 = ${dateRestrictionOption});
		}

		if (${dateRestrictionOption} == "Date Range") {
			var key_dateRestrictionOption = "Modified or Created Between";

			AssertTextPresent(
				locator1 = "Staging#PUBLICATION_DATE",
				value1 = ${key_dateRestrictionOption});
		}

		if (${dateRestrictionOption} == "Last") {
			AssertTextPresent(
				locator1 = "Staging#PUBLICATION_DATE",
				value1 = ${dateRestrictionOption});
		}

		if (isSet(noContent)) {
			for (var noContent : list ${noContentList}) {
				var key_content = ${noContent};

				AssertTextNotPresent(
					locator1 = "Staging#PUBLICATION_CONTENT",
					value1 = ${content});
			}
		}

		if (isSet(pagesNotToPublish)) {
			AssertHTMLSourceTextNotPresent(value1 = ${pagesNotToPublish});
		}

		if (isSet(pagesOption)) {
			AssertTextEquals(
				locator1 = "Staging#PUBLICATION_PAGE_OPTION",
				value1 = ${pagesOption});
		}

		if (isSet(pagesToPublish)) {
			AssertHTMLSourceTextPresent(value1 = ${pagesToPublish});
		}

		if (isSet(permissions)) {
			AssertElementPresent(locator1 = "Staging#PUBLICATION_PERMISSION");
		}

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro viewPublishContentCountViaPortletStagingCP(contentInformation = null, contentCount = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertTextEquals(
			locator1 = "Staging#STAGING_CONTENT_COUNT",
			value1 = ${contentCount});

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#STAGING_CONTENT_INFO",
			value1 = ${contentInformation});

		IFrame.closeFrame();
	}

	@summary = "Default summary"
	macro viewPublishTask(publicationTitle = null) {
		AssertTextEquals.assertPartialText(
			locator1 = "Staging#PROCESS_TITLE",
			value1 = ${publicationTitle});
	}

	@summary = "Default summary"
	macro viewPublishTemplate(uncheckContentNameList = null, publishTemplateDescription = null, publishTemplateName = null) {
		if (IsElementPresent(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS")) {
			Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");
		}

		MenuItem.click(menuItem = "Publish Templates");

		var key_publishTemplateName = ${publishTemplateName};

		AssertTextEquals(
			locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_NAME",
			value1 = ${publishTemplateName});

		AssertTextEquals(
			locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_DESCRIPTION",
			value1 = ${publishTemplateDescription});

		if (isSet(uncheckContentNameList)) {
			AssertClick(
				locator1 = "StagingPublishToLive#PUBLISH_TEMPLATES_TABLE_NAME",
				value1 = ${publishTemplateName});

			for (var contentName : list ${uncheckContentNameList}) {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_contentName = ${contentName},
					locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");
			}
		}
	}

	@summary = "Default summary"
	macro viewRepeatingEventDetails(endDate = null, siteName = null, scheduleTitleName = null) {
		Staging.openStagingAdmin(siteURLKey = ${siteName});

		Navigator.gotoNavItem(navItem = "Scheduled");

		var key_scheduleTitleName = ${scheduleTitleName};

		AssertTextPresent(
			locator1 = "StagingPublishToLive#SCHEDULED_TABLE_TITLE",
			value1 = ${scheduleTitleName});

		AssertTextEquals(
			locator1 = "StagingPublishToLive#SCHEDULED_TABLE_END_DATE",
			value1 = ${endDate});
	}

	@summary = "Default summary"
	macro viewSitePagesVariationActiveCP(sitePagesVariationName = null) {
		var key_sitePagesVariationName = ${sitePagesVariationName};

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#SITE_PAGES_VARIATION_MENULIST_ACTIVE",
			value1 = ${sitePagesVariationName});
	}

	@summary = "Default summary"
	macro viewSitePagesVariationPG(sitePagesVariationName = null) {
		var key_sitePagesVariationName = ${sitePagesVariationName};

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#SITE_PAGES_VARIATION",
			value1 = ${sitePagesVariationName});
	}

	@summary = "Default summary"
	macro viewStagingLocalLivePG() {
		AssertElementPresent(locator1 = "Staging#STAGING_VIEW");
	}

	@summary = "Default summary"
	macro viewStagingLocalLiveVariationMessagePG(sitePagesVariationName = null, pagesVariationName = null, pageName = null) {
		if (IsElementNotPresent(locator1 = "Staging#LIVE_MENU_MESSAGE")) {
			AssertClick(
				locator1 = "Staging#LIVE_DROP_DOWN_BUTTON",
				value1 = "Live");
		}

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#LIVE_MENU_MESSAGE",
			value1 = "Page ${pageName} was last published from ${sitePagesVariationName}.");

		if (isSet(pagesVariationName)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Staging#LIVE_MENU_MESSAGE_DETAILS",
				value1 = "Variation: ${pagesVariationName}");
		}
	}

	@summary = "Default summary"
	macro viewStagingWorkflowStatusPG(stagingWorkflowStatus = null) {
		if (${stagingWorkflowStatus} == "Ready for Publication") {
			AssertElementPresent(locator1 = "Staging#STAGING_MENU_READY_FOR_PUBLICATION");
		}
	}

	@summary = "Default summary"
	macro viewSuccessResult() {
		if (IsElementPresent(locator1 = "ControlMenu#HEADING")) {
			WaitForElementNotPresent(
				key_title = "Current",
				locator1 = "Staging#PROCESS_GROUP_TITLE");

			AssertTextEquals(
				locator1 = "Staging#LATEST_PROCESS_RESULT",
				value1 = "Successful");
		}
		else {
			AssertTextEquals(
				locator1 = "Staging#PROCESS_RESULT",
				value1 = "Successful");
		}
	}

	@summary = "Default summary"
	macro viewUncheckContentNameList(uncheckContentNameList = null) {
		LexiconEntry.gotoHeaderMenuItem(menuItem = "Staging Configuration");

		for (var contentName : list ${uncheckContentNameList}) {
			AssertNotChecked.assertNotCheckedNotVisible(
				key_contentName = ${contentName},
				locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");
		}
	}

	@summary = "Default summary"
	macro viewValidationError(validateErrorMessage = null) {
		Click.javaScriptClick(locator1 = "Message#SEE_MORE_DETAILS_LINK");

		SelectFrameTop();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = ${validateErrorMessage});
	}

	@summary = "Default summary"
	macro viewVariationSuccessMessage() {
		SelectFrameTop(value1 = "relative=top");

		SelectFrame(locator1 = "IFrame#SITE_VARIATION_IFRAME");

		Alert.viewSuccessMessage();

		SelectFrameTop(value1 = "relative=top");
	}

	@summary = "Default summary"
	macro viewVariationTooltipMessage(title = null, pageName = null) {
		var key_pageName = ${pageName};
		var key_title = ${title};

		ScrollWebElementIntoView(locator1 = "StagingPublishToLive#CONTENT_ALL");

		MouseOver(
			key_pageName = ${pageName},
			locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_PAGE_NAME");

		AssertVisible(
			key_title = ${title},
			locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_PAGE_NAME_SPAN_TITLE");
	}

}