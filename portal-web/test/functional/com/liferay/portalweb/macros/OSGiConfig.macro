definition {

	@summary = "Assert no ${osgiConfigFileName} exist"
	macro assertOSGiConfigDoesNotExist(osgiConfigFileName = null) {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var osgiConfigExists = FileUtil.exists("${liferayHome}/osgi/configs/${osgiConfigFileName}");

		if (${osgiConfigExists} == "true") {
			fail("File ${osgiConfigFileName} exists");
		}
	}

	@summary = "Assert ${text} on ${osgiConfigFileName}"
	macro assertTextInOSGiConfig(osgiConfigFileName = null, text = null) {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/osgi/configs/${osgiConfigFileName}");

		if (contains(${fileContent}, ${text})) {
			echo("File ${osgiConfigFileName} contains text ${text}");
		}
		else {
			fail("File ${osgiConfigFileName} does not contain text ${text}");
		}
	}

	@summary = "Assert no ${text} on ${osgiConfigFileName}"
	macro assertTextNotInOSGiConfig(osgiConfigFileName = null, text = null) {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/osgi/configs/${osgiConfigFileName}");

		if (contains(${fileContent}, ${text})) {
			fail("File ${osgiConfigFileName} contains text ${text}");
		}
		else {
			echo("File ${osgiConfigFileName} does not contain text ${text}");
		}
	}

	@summary = "Copy an OSGI config file"
	macro copyOSGiConfigFile(osgiConfigFileBaseDir = null, osgiConfigFileName = null) {
		Variables.assertDefined(parameterList = "${osgiConfigFileBaseDir},${osgiConfigFileName}");

		var configs = FileUtil.read("${osgiConfigFileBaseDir}/${osgiConfigFileName}");
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		FileUtil.write("${liferayHome}/osgi/configs/${osgiConfigFileName}", ${configs});
	}

	@summary = "Delete an OSGI config file"
	macro deleteOSGiConfigFile(osgiConfigFileName = null) {
		Variables.assertDefined(parameterList = ${osgiConfigFileName});

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		FileUtil.delete("${liferayHome}/osgi/configs/${osgiConfigFileName}");
	}

	@summary = "Deploy an OSGI config file"
	macro deployOSGiConfigFile(osgiConfigFileName = null, osgiConfigs = null) {
		Variables.assertDefined(parameterList = "${osgiConfigs},${osgiConfigFileName}");

		var configList = "";

		for (var osgiConfig : list ${osgiConfigs}) {
			var configList = '''${osgiConfig}
${configList}''';
		}

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		FileUtil.write("${liferayHome}/osgi/configs/${osgiConfigFileName}", ${configList});
	}

	@summary = "Edit an OSGI config file located on Temp dir"
	macro editOSGiConfigFileFromTempFolder(newValue = null, osgiConfigFileName = null, oldValue = null) {
		var tempDir = PropsUtil.get("output.dir.name");

		Variables.assertDefined(parameterList = "${tempDir},${osgiConfigFileName}");

		var filePath = FileUtil.getCanonicalPath(${tempDir});

		var filePath = "${filePath}/${osgiConfigFileName}";

		FileUtil.replaceStringInFile(${filePath}, ${oldValue}, ${newValue});
	}

	@summary = "Wait for OSGi Configuration to update in the Database"
	macro waitForOSGiConfig() {

		// LRQA-78134 Current workaround to wait for OSGi configurations until we get a reliable way of waiting for them to update in the database

		Pause(value1 = 8000);
	}

	@summary = "Wait for ${osgiConfigFileName} processed and deleted from the config directory"
	macro waitForOSGiConfigDeleted(osgiConfigFileName = null) {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var osgiConfigExists = FileUtil.exists("${liferayHome}/osgi/configs/${osgiConfigFileName}");

		while ((${osgiConfigExists} == "true")) {
			var osgiConfigExists = FileUtil.exists("${liferayHome}/osgi/configs/${osgiConfigFileName}");

			// We need to pause until the file gets deleted, meaning that it has been processed. See LPD-21245

			Pause(value1 = 2000);
		}
	}

}