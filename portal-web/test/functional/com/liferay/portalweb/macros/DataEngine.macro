definition {

	@summary = "Default summary"
	macro addField(fieldLocation = null, fieldName = null, fieldFieldLabel = null, numericType = null, fieldType = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fields");

		var key_fieldFieldLabel = ${fieldFieldLabel};
		var key_fieldName = ${fieldName};

		if (!(isSet(fieldReference))) {
			var fieldReference = StringUtil.replace(${fieldFieldLabel}, " ", "");
		}

		if (isSet(fieldLocation)) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldLocation = ${fieldLocation},
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "Sidebar#ADD_FIELD_POSITION",
				value1 = ${fieldName});
		}
		else {
			DragAndDrop.javaScriptDragAndDropToObject(
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "Sidebar#ADD_FIELD_TARGET",
				value1 = ${fieldName});
		}

		WaitForVisible(locator1 = "Sidebar#BACK");

		if (isSet(fieldFieldLabel)) {
			Navigator.gotoNavTab(navTab = "Basic");

			Type(
				key_fieldLabel = "Label",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${fieldFieldLabel});

			AssertTextEquals(
				key_fieldLabel = "Label",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${fieldFieldLabel});

			AssertElementPresent(
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
				value1 = ${fieldFieldLabel});
		}

		if (${fieldName} == "Text") {
			if (isSet(fieldType)) {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = ${fieldType},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}
		else if (${fieldName} == "Numeric") {
			if (isSet(numericType)) {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = ${numericType},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		if (isSet(fieldFieldLabel)) {
			Navigator.gotoNavTab(navTab = "Advanced");

			if (isSet(textNumber)) {
				var textNumber = selenium.getAttribute("//div[contains(@data-field-name,'fieldReference')]//label[normalize-space(text())='Field Reference']//..//input@value");

				return ${textNumber};

				echo("## * textNumber: ${textNumber}");
			}

			Type(
				key_fieldLabel = "Field Reference",
				key_fieldName = "fieldReference",
				locator1 = "Sidebar#TEXT_INPUT",
				value1 = ${fieldReference});

			AssertTextEquals.assertValue(
				key_fieldLabel = "Field Reference",
				key_fieldName = "fieldReference",
				locator1 = "Sidebar#TEXT_INPUT",
				value1 = ${fieldReference});
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addFieldGroupWithFields(fieldNameList = null) {
		var index = 1;
		var firstFieldLabel = "";

		for (var fieldName : list ${fieldNameList}) {
			if (${index} == 1) {
				var firstFieldLabel = ${fieldName};

				DataEngine.addField(
					fieldFieldLabel = ${fieldName},
					fieldName = ${fieldName});
			}
			else if (${index} == 2) {
				DataEngine.addFieldNested(
					fieldFieldLabel = ${fieldName},
					fieldName = ${fieldName},
					targetFieldLabel = ${firstFieldLabel});
			}
			else {
				DataEngine.addFieldNested(
					fieldFieldLabel = ${fieldName},
					fieldName = ${fieldName},
					targetFieldGroupLabel = "Fields Group");
			}

			if ((${fieldName} == "Select from List") || (${fieldName} == "Single Selection") || (${fieldName} == "Multiple Selection")) {
				for (var i : list "1,2,3") {
					DataEngine.addFieldOption(
						fieldFieldLabel = ${fieldName},
						index = ${i},
						optionValue = "Option ${i}");
				}
			}
			else if (${fieldName} == "Grid") {
				for (var i : list "1,2") {
					DataEngine.addFieldOption(
						fieldFieldLabel = ${fieldName},
						index = ${i},
						optionFieldLabel = "Rows",
						optionValue = "Row ${i}");

					DataEngine.editFieldReferenceOfFieldOption(
						fieldFieldLabel = ${fieldName},
						fieldReferenceOfFieldOption = "R${i}",
						index = ${i},
						optionFieldLabel = "Rows");
				}

				for (var i : list "1,2") {
					DataEngine.addFieldOption(
						fieldFieldLabel = ${fieldName},
						index = ${i},
						optionFieldLabel = "Columns",
						optionValue = "Column ${i}");

					DataEngine.editFieldReferenceOfFieldOption(
						fieldFieldLabel = ${fieldName},
						fieldReferenceOfFieldOption = "C${i}",
						index = ${i},
						optionFieldLabel = "Columns");
				}
			}

			var index = ${index} + 1;
		}
	}

	@summary = "Default summary"
	macro addFieldNested(targetFieldGroupLabel = null, fieldName = null, targetFieldLabel = null, fieldFieldLabel = null, numericType = null, fieldType = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fields");

		if (isSet(targetFieldGroupLabel)) {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldGroupLabel = ${targetFieldGroupLabel},
				key_fieldName = ${fieldName},
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "DDMEditStructure#FORM_FIELD_GROUP_TARGET",
				value1 = ${fieldName});
		}
		else {
			DragAndDrop.javaScriptDragAndDropToObject(
				key_fieldFieldLabel = ${targetFieldLabel},
				key_fieldName = ${fieldName},
				locator1 = "Sidebar#ADD_FIELD_NAME",
				locator2 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldName});
		}

		WaitForVisible(locator1 = "Sidebar#BACK");

		Navigator.gotoNavTab(navTab = "Basic");

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldFieldLabel});

		AssertTextEquals(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldFieldLabel});

		AssertElementPresent(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
			value1 = ${fieldFieldLabel});

		if (${fieldName} == "Text") {
			if (isSet(fieldType)) {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = ${fieldType},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}
		else if (${fieldName} == "Numeric") {
			if (isSet(numericType)) {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = ${numericType},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		var fieldReference = StringUtil.replace(${fieldFieldLabel}, " ", "");

		Navigator.gotoNavTab(navTab = "Advanced");

		Type(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${fieldReference});

		AssertTextEquals.assertValue(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${fieldReference});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addFieldOption(optionValue = null, fieldFieldLabel = null, index = null, optionFieldLabel = null, gridOptionType = null) {
		if (isSet(fieldFieldLabel)) {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldFieldLabel});
		}

		if (${index} != 1) {
			if (isSet(gridOptionType)) {
				FormFields.clickAddOptionButton(gridOptionType = ${gridOptionType});
			}
			else {
				FormFields.clickAddOptionButton();
			}
		}

		if (isSet(optionFieldLabel)) {
			Type(
				index = ${index},
				key_optionFieldLabel = ${optionFieldLabel},
				locator1 = "Sidebar#OPTION_INPUT",
				value1 = ${optionValue});
		}
		else {
			Type(
				index = ${index},
				locator1 = "Sidebar#OPTION_INPUT_WITHOUT_LABEL",
				value1 = ${optionValue});
		}

		if (isSet(fieldFieldLabel)) {
			Click(locator1 = "Sidebar#BACK");
		}
	}

	@summary = "Default summary"
	macro addFields(fieldNameList = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fields");

		for (var fieldName : list ${fieldNameList}) {
			var key_fieldName = ${fieldName};
			var fieldReference = StringUtil.replace(${fieldName}, " ", "");

			DoubleClick(locator1 = "Sidebar#ADD_FIELD_NAME");

			WaitForVisible(locator1 = "Sidebar#BACK");

			AssertElementPresent(
				key_fieldFieldLabel = ${fieldName},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
				value1 = ${fieldName});

			if (${fieldName} == "Grid") {
				var index = 1;

				for (var optionValue : list "R1,R2") {
					DataEngine.addFieldOption(
						index = ${index},
						optionFieldLabel = "Rows",
						optionValue = "Row ${index}");

					DataEngine.editFieldReferenceOfFieldOption(
						fieldReferenceOfFieldOption = ${optionValue},
						index = ${index},
						optionFieldLabel = "Rows");

					if (${index} != 2) {
						FormFields.clickAddOptionButton(gridOptionType = "Rows");
					}

					var index = ${index} + 1;
				}

				var index = 1;

				for (var optionValue : list "C1,C2") {
					DataEngine.addFieldOption(
						index = ${index},
						optionFieldLabel = "Columns",
						optionValue = "Column ${index}");

					DataEngine.editFieldReferenceOfFieldOption(
						fieldReferenceOfFieldOption = ${optionValue},
						index = ${index},
						optionFieldLabel = "Columns");

					if (${index} != " 2") {
						FormFields.clickAddOptionButton(gridOptionType = "Columns");
					}

					var index = ${index} + 1;
				}
			}
			else if (${fieldName} == "Multiple Selection") {
				DataEngine.addFieldOption(
					index = 1,
					optionFieldLabel = "Options",
					optionValue = "Option 1");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "First",
					index = 1,
					optionFieldLabel = "Options");

				FormFields.clickAddOptionButton();

				DataEngine.addFieldOption(
					index = 2,
					optionFieldLabel = "Options",
					optionValue = "Option 2");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Second",
					index = 2,
					optionFieldLabel = "Options");
			}
			else if (${fieldName} == "Select from List") {
				DataEngine.addFieldOption(
					index = 1,
					optionValue = "Option 2");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value2",
					index = 1);

				FormFields.clickAddOptionButton();

				DataEngine.addFieldOption(
					index = 2,
					optionValue = "Option 1");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value1",
					index = 2);
			}
			else if (${fieldName} == "Single Selection") {
				DataEngine.addFieldOption(
					index = 1,
					optionValue = "Option 3");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value3",
					index = 1);

				FormFields.clickAddOptionButton();

				DataEngine.addFieldOption(
					index = 2,
					optionValue = "Option 4");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value4",
					index = 2);
			}

			Navigator.gotoNavTab(navTab = "Advanced");

			Type(
				key_fieldLabel = "Field Reference",
				key_fieldName = "fieldReference",
				locator1 = "Sidebar#TEXT_INPUT",
				value1 = ${fieldReference});

			AssertTextEquals.assertValue(
				key_fieldLabel = "Field Reference",
				key_fieldName = "fieldReference",
				locator1 = "Sidebar#TEXT_INPUT",
				value1 = ${fieldReference});

			Click(locator1 = "Sidebar#BACK");
		}
	}

	@summary = "Default summary"
	macro addFieldsetNested(fieldsetLabel = null, fieldsetName = null, targetFieldLabel = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		DragAndDrop.javaScriptDragAndDropToObject(
			key_fieldFieldLabel = ${targetFieldLabel},
			key_fieldName = ${fieldsetName},
			locator1 = "Sidebar#ADD_FIELD_NAME",
			locator2 = "DDMEditStructure#FORM_FIELD_CONTAINER");

		WaitForVisible(locator1 = "Sidebar#BACK");

		if (isSet(fieldsetLabel)) {
			Type(
				key_fieldLabel = "Label",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${fieldsetLabel});

			AssertTextEquals(
				key_fieldLabel = "Label",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${fieldsetLabel});

			AssertElementPresent(
				key_fieldsetLabel = ${fieldsetLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL",
				value1 = ${fieldsetLabel});
		}
		else {
			AssertElementPresent(
				key_fieldsetLabel = ${fieldsetName},
				locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL",
				value1 = ${fieldsetName});
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addFieldsetToBuilder(fieldsetName = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		DoubleClick(
			key_fieldName = ${fieldsetName},
			locator1 = "Sidebar#ADD_FIELD_NAME");

		AssertElementPresent(
			key_fieldsetLabel = ${fieldsetName},
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addFieldsWithDefaultReference(fieldNameList = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fields");

		for (var fieldName : list ${fieldNameList}) {
			var key_fieldName = ${fieldName};

			DoubleClick(locator1 = "Sidebar#ADD_FIELD_NAME");

			WaitForVisible(locator1 = "Sidebar#BACK");

			AssertElementPresent(
				key_fieldFieldLabel = ${fieldName},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
				value1 = ${fieldName});

			if (${fieldName} == "Grid") {
				var index = 1;

				for (var optionValue : list "R1,R2") {
					DataEngine.addFieldOption(
						index = ${index},
						optionFieldLabel = "Rows",
						optionValue = "Row ${index}");

					DataEngine.editFieldReferenceOfFieldOption(
						fieldReferenceOfFieldOption = ${optionValue},
						index = ${index},
						optionFieldLabel = "Rows");

					if (${index} != 2) {
						FormFields.clickAddOptionButton(gridOptionType = "Rows");
					}

					var index = ${index} + 1;
				}

				var index = 1;

				for (var optionValue : list "C1,C2") {
					DataEngine.addFieldOption(
						index = ${index},
						optionFieldLabel = "Columns",
						optionValue = "Column ${index}");

					DataEngine.editFieldReferenceOfFieldOption(
						fieldReferenceOfFieldOption = ${optionValue},
						index = ${index},
						optionFieldLabel = "Columns");

					if (${index} != 2) {
						FormFields.clickAddOptionButton(gridOptionType = "Columns");
					}

					var index = ${index} + 1;
				}
			}
			else if (${fieldName} == "Multiple Selection") {
				DataEngine.addFieldOption(
					index = 1,
					optionFieldLabel = "Options",
					optionValue = "Option 1");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "First",
					index = 1,
					optionFieldLabel = "Options");

				FormFields.clickAddOptionButton();

				DataEngine.addFieldOption(
					index = 2,
					optionFieldLabel = "Options",
					optionValue = "Option 2");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Second",
					index = 2,
					optionFieldLabel = "Options");
			}
			else if (${fieldName} == "Select from List") {
				DataEngine.addFieldOption(
					index = 1,
					optionValue = "Option 2");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value2",
					index = 1);

				FormFields.clickAddOptionButton();

				DataEngine.addFieldOption(
					index = 2,
					optionValue = "Option 1");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value1",
					index = 2);
			}
			else if (${fieldName} == "Single Selection") {
				DataEngine.addFieldOption(
					index = 1,
					optionValue = "Option 3");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value3",
					index = 1);

				FormFields.clickAddOptionButton();

				DataEngine.addFieldOption(
					index = 2,
					optionValue = "Option 4");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldReferenceOfFieldOption = "Value4",
					index = 2);
			}

			Click(locator1 = "Sidebar#BACK");
		}
	}

	@summary = "Default summary"
	macro addFieldToFieldsGroup(fieldName = null, fieldFieldLabel = null, numericType = null, fieldsGroupLabel = null, fieldType = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fields");

		DragAndDrop.javaScriptDragAndDropToBottom(
			key_fieldName = ${fieldName},
			key_fieldsGroupLabel = ${fieldsGroupLabel},
			locator1 = "Sidebar#ADD_FIELD_NAME",
			locator2 = "DDMEditStructure#FORM_FIELDS_GROUP_CONTAINER");

		WaitForVisible(locator1 = "Sidebar#BACK");

		Navigator.gotoNavTab(navTab = "Basic");

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldFieldLabel});

		AssertTextEquals(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldFieldLabel});

		AssertElementPresent(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
			value1 = ${fieldFieldLabel});

		if (${fieldName} == "Text") {
			if (isSet(fieldType)) {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = ${fieldType},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}
		else if (${fieldName} == "Numeric") {
			if (isSet(numericType)) {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = ${numericType},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		var fieldReference = StringUtil.replace(${fieldFieldLabel}, " ", "");

		Navigator.gotoNavTab(navTab = "Advanced");

		Type(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${fieldReference});

		AssertTextEquals.assertValue(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${fieldReference});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro addRepeatableField(fieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		WaitForElementPresent(
			index = ${index},
			key_fieldLabel = ${fieldLabel},
			locator1 = "DataEngineRenderer#REPEATABLE_FIELD_ADD_BUTTON_INDEXED");

		Click(
			index = ${index},
			key_fieldLabel = ${fieldLabel},
			locator1 = "DataEngineRenderer#REPEATABLE_FIELD_ADD_BUTTON_INDEXED");
	}

	@summary = "Default summary"
	macro addTranslationToFieldset(fieldsetName = null, fieldNameList = null, localeList = null) {
		DataEngine.gotoFieldsetItemEllipsis(fieldsetName = ${fieldsetName});

		MenuItem.click(menuItem = "Edit");

		for (var locale : list ${localeList}) {
			DataEngine.changeLocale(
				locale = ${locale},
				modal = "true");

			Type(
				locator1 = "FormViewBuilder#FIELD_SET_NAME",
				value1 = "${fieldsetName} ${locale}");

			for (var fieldName : list ${fieldNameList}) {
				DataEngine.editFieldLabel(
					fieldFieldLabel = ${fieldName},
					fieldFieldLabelEdit = "${fieldName} ${locale}",
					fieldsetModal = "true");

				if (isSet(fieldHelp)) {
					DataEngine.editFieldTip(
						fieldFieldLabel = "${fieldName} ${locale}",
						fieldHelp = "${fieldName} Help Text ${locale}");
				}

				if (isSet(fieldPlaceholder)) {
					DataEngine.editFieldTip(
						fieldFieldLabel = "${fieldName} ${locale}",
						fieldPlaceholder = "${fieldName} Placeholder ${locale}");
				}
			}
		}

		Click(locator1 = "Modal#SAVE_BUTTON");

		WaitForPageLoad();

		if (IsElementPresent(key_text = "Propagate", locator1 = "Button#ANY")) {
			Click(
				key_text = "Propagate",
				locator1 = "Button#ANY");
		}

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro assertAllowMultipleSelectionsField(fieldFieldLabel = null) {
		var checkboxName = "Allow Multiple Selections";

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertElementPresent(locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertCheckboxOptions(fieldLabel = null, optionLabelList = null) {
		if (!(isSet(fieldIndex))) {
			var fieldIndex = 1;
		}

		if (!(isSet(optionIndex))) {
			var optionIndex = 1;
		}

		for (var optionLabel : list ${optionLabelList}) {
			AssertElementPresent(
				fieldIndex = ${fieldIndex},
				key_fieldLabel = ${fieldLabel},
				key_optionLabel = ${optionLabel},
				locator1 = "DataEngineBuilder#OPTIONS_CHECKBOX_INDEXED",
				optionIndex = ${optionIndex});
		}
	}

	@summary = "Default summary"
	macro assertFieldInFieldsGroupRepeated(fieldName = null, index = null) {
		AssertElementPresent(
			key_fieldName = ${fieldName},
			key_index = ${index},
			locator1 = "WCEditWebContent#REPEATED_FIELD_IN_FIELDS_GROUP");
	}

	@summary = "Default summary"
	macro assertFieldNotPresent(fieldsetLabel = null, fieldFieldLabel = null, fieldsGroupLabel = null) {
		if (isSet(fieldFieldLabel)) {
			AssertElementNotPresent(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");
		}
		else if (isSet(fieldsetLabel)) {
			AssertElementNotPresent(
				key_fieldsetLabel = ${fieldsetLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");
		}
		else if (isSet(fieldsGroupLabel)) {
			AssertElementNotPresent(
				key_fieldFieldLabel = ${fieldsGroupLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}
	}

	@summary = "Default summary"
	macro assertFieldRepeated(fieldName = null, index = null) {
		AssertElementPresent(
			key_fieldName = ${fieldName},
			key_index = ${index},
			locator1 = "WCEditWebContent#REPEATED_FIELD");
	}

	@summary = "Default summary"
	macro assertFieldRepeatedNotPresent(fieldName = null, index = null) {
		AssertElementNotPresent(
			key_fieldName = ${fieldName},
			key_index = ${index},
			locator1 = "WCEditWebContent#REPEATED_FIELD");
	}

	@summary = "Default summary"
	macro assertInlineField(fieldFieldLabel = null) {
		var checkboxName = "Inline";

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertElementPresent(locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertInlineOptions(fieldLabel = null, optionLabelList = null) {
		if (!(isSet(fieldIndex))) {
			var fieldIndex = 1;
		}

		if (!(isSet(optionIndex))) {
			var optionIndex = 1;
		}

		for (var optionLabel : list ${optionLabelList}) {
			AssertElementPresent(
				fieldIndex = ${fieldIndex},
				key_fieldLabel = ${fieldLabel},
				key_optionLabel = ${optionLabel},
				locator1 = "DataEngineBuilder#OPTIONS_INLINE_INDEXED",
				optionIndex = ${optionIndex});
		}
	}

	@summary = "Default summary"
	macro assertLocalizableField(fieldFieldLabel = null) {
		var checkboxName = "Localizable";

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertElementPresent(locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertLocalizableFieldUnchecked(fieldFieldLabel = null) {
		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertElementPresent(
			checkboxName = "Localizable",
			locator1 = "Checkbox#ANY_CHECKBOX_UNCHECKED");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertNonInlineOptions(fieldLabel = null, optionLabelList = null) {
		if (!(isSet(fieldIndex))) {
			var fieldIndex = 1;
		}

		if (!(isSet(optionIndex))) {
			var optionIndex = 1;
		}

		for (var optionLabel : list ${optionLabelList}) {
			AssertElementPresent(
				fieldIndex = ${fieldIndex},
				key_fieldLabel = ${fieldLabel},
				key_optionLabel = ${optionLabel},
				locator1 = "DataEngineBuilder#OPTIONS_NOT_INLINE_INDEXED",
				optionIndex = ${optionIndex});
		}
	}

	@summary = "Default summary"
	macro assertNonLocalizableField(fieldFieldName = null) {
		AssertElementPresent(
			key_fieldName = ${fieldFieldName},
			locator1 = "DataEngineRenderer#WEB_CONTENT_DISABLED_FIELD");
	}

	@summary = "Default summary"
	macro assertOrderOptionsAlphabeticallyField(fieldFieldLabel = null) {
		var checkboxName = "Order Options Alphabetically";

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertElementPresent(locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertRepeatableField(fieldFieldLabel = null) {
		var checkboxName = "Repeatable";

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertElementPresent(locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertShowLabelField(fieldFieldLabel = null) {
		var checkboxName = "Show Label";

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertElementPresent(locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro assertSwitchOptions(fieldLabel = null, optionLabelList = null) {
		if (!(isSet(fieldIndex))) {
			var fieldIndex = 1;
		}

		if (!(isSet(optionIndex))) {
			var optionIndex = 1;
		}

		for (var optionLabel : list ${optionLabelList}) {
			AssertElementPresent(
				fieldIndex = ${fieldIndex},
				key_fieldLabel = ${fieldLabel},
				key_optionLabel = ${optionLabel},
				locator1 = "DataEngineBuilder#OPTIONS_SWITCH_INDEXED",
				optionIndex = ${optionIndex});
		}
	}

	@summary = "Default summary"
	macro changeLocale(fieldName = null, locale = null) {
		Portlet.waitForForm();

		if (isSet(fieldName)) {
			Click.clickNoMouseOver(
				key_fieldName = ${fieldName},
				locator1 = "Button#LOCALIZATION");
		}
		else if (isSet(friendlyURLHistory)) {
			Click.clickNoMouseOver(locator1 = "Icon#FRIENDLY_URL_HISTORY_LOCALIZATION");
		}
		else if (isSet(modal)) {
			Click(locator1 = "Modal#LOCALIZATION_DROPDOWN_TOGGLE");
		}
		else {
			Click.clickNoMouseOver(locator1 = "Button#LOCALIZATION_GENERIC");
		}

		if (isSet(localizedFriendlyURL)) {
			Click.clickNoMouseOver(locator1 = "Icon#FRIENDLY_URL_HISTORY_SPANISH_LOCALIZATION");
		}
		else if (isSet(modal)) {
			Click(
				key_locale = ${locale},
				locator1 = "DataEngineBuilder#DROPDOWN_MENU_ITEM");
		}
		else {
			Click(
				key_locale = ${locale},
				locator1 = "Translation#LOCALIZATION_NAME");
		}
	}

	@summary = "Default summary"
	macro createNewFieldset(fieldsetName = null, fieldNameList = null) {
		DataEngine.gotoCreateNewFieldset();

		Type(
			locator1 = "FormViewBuilder#FIELD_SET_NAME",
			value1 = ${fieldsetName});

		DataEngine.addFields(fieldNameList = ${fieldNameList});

		if (isSet(fieldHelp)) {
			for (var fieldName : list ${fieldNameList}) {
				DataEngine.editFieldTip(
					fieldFieldLabel = ${fieldName},
					fieldHelp = "${fieldName} Help Text");
			}
		}

		if (isSet(fieldPlaceholder)) {
			for (var fieldName : list ${fieldNameList}) {
				DataEngine.editFieldTip(
					fieldFieldLabel = ${fieldName},
					fieldPlaceholder = "${fieldName} Placeholder");
			}
		}

		Modal.save();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro delete(fieldsetLabel = null, fieldFieldLabel = null, fieldsGroupLabel = null) {
		if (isSet(fieldFieldLabel)) {
			Click(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");

			Click(
				key_text = ${fieldFieldLabel},
				locator1 = "Icon#SELECTED_FORM_FIELD_VERTICAL_ELLIPSIS");
		}
		else if (isSet(fieldsetLabel)) {
			Click(
				key_fieldsetLabel = ${fieldsetLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

			Click(
				key_text = ${fieldsetLabel},
				locator1 = "Icon#SELECTED_FORM_FIELD_VERTICAL_ELLIPSIS");
		}
		else if (isSet(fieldsGroupLabel)) {
			Click(
				key_fieldFieldLabel = ${fieldsGroupLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

			Click(
				key_text = ${fieldsGroupLabel},
				locator1 = "Icon#SELECTED_FORM_FIELD_VERTICAL_ELLIPSIS");
		}

		MenuItem.click(menuItem = "Delete");
	}

	@summary = "Default summary"
	macro deleteFieldsetFromSideBar(fieldsetName = null) {
		if (isSet(siteURLKey)) {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");
		}

		NavItem.gotoStructures();

		WebContentStructures.addCP();

		DataEngine.gotoFieldsetItemEllipsis(fieldsetName = ${fieldsetName});

		MenuItem.click(menuItem = "Delete");

		Button.clickDelete();
	}

	@summary = "Default summary"
	macro duplicate(fieldsetLabel = null, fieldFieldLabel = null, fieldsGroupLabel = null) {
		if (isSet(fieldFieldLabel)) {
			Click(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");

			Click(
				key_text = ${fieldFieldLabel},
				locator1 = "Icon#SELECTED_FORM_FIELD_VERTICAL_ELLIPSIS");
		}
		else if (isSet(fieldsetLabel)) {
			Click(
				key_fieldsetLabel = ${fieldsetLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

			Click(
				key_text = ${fieldsetLabel},
				locator1 = "Icon#SELECTED_FORM_FIELD_VERTICAL_ELLIPSIS");
		}
		else if (isSet(fieldsGroupLabel)) {
			Click(
				key_fieldFieldLabel = ${fieldsGroupLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

			Click(
				key_text = ${fieldsGroupLabel},
				locator1 = "Icon#SELECTED_FORM_FIELD_VERTICAL_ELLIPSIS");
		}

		MenuItem.click(menuItem = "Duplicate");
	}

	@summary = "Default summary"
	macro editCollapsible(fieldsetLabel = null, fieldsGroupLabel = null, collapsible = null) {
		if (isSet(fieldsetLabel)) {
			Click(
				key_fieldsetLabel = ${fieldsetLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");
		}
		else if (isSet(fieldsGroupLabel)) {
			Click(
				key_fieldFieldLabel = ${fieldsGroupLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		Navigator.gotoNavTab(navTab = "Basic");

		if (${collapsible} == "true") {
			Check.checkToggleSwitch(
				checkboxName = "Collapsible",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
		else if (${collapsible} == "false") {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Collapsible",
				locator1 = "Checkbox#ANY_CHECKBOX_CHECKED");
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldLabel(fieldName = null, fieldFieldLabel = null, fieldFieldLabelEdit = null) {
		WaitForVisible(locator1 = "Sidebar#PANEL_OPEN");

		Navigator.gotoSidebarTab(tabName = "Builder");

		if (${fieldName} == "Boolean") {
			Click(
				key_fieldLabel = ${fieldFieldLabel},
				locator1 = "Checkbox#CHECKBOX_LABEL");
		}
		else {
			if (isSet(fieldsetModal)) {
				Click(
					key_fieldFieldLabel = ${fieldFieldLabel},
					locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL_IN_FIELDSET_MODAL");
			}
			else {
				Click(
					key_fieldFieldLabel = ${fieldFieldLabel},
					locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
			}
		}

		Type(
			key_fieldLabel = "Label",
			key_fieldName = "label",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${fieldFieldLabelEdit});

		AssertTextEquals.assertValue(
			key_fieldLabel = "Label",
			key_fieldName = "label",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${fieldFieldLabelEdit});

		if (${fieldName} == "Boolean") {
			AssertElementPresent(
				key_fieldLabel = ${fieldFieldLabelEdit},
				locator1 = "Checkbox#CHECKBOX_LABEL");
		}
		else {
			AssertElementPresent(
				key_fieldFieldLabel = ${fieldFieldLabelEdit},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldLocalizable(fieldFieldLabel = null) {
		var key_fieldName = "localizable";

		if (isSet(fieldsetModal)) {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL_IN_FIELDSET_MODAL",
				value1 = ${fieldFieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldFieldLabel});
		}

		Navigator.gotoNavTab(navTab = "Advanced");

		Check.checkToggleSwitch(locator1 = "Checkbox#SWITCH");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldOption(optionValue = null, fieldFieldLabel = null, index = null, optionFieldLabel = null) {
		if (isSet(fieldFieldLabel)) {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldFieldLabel});
		}

		Type(
			index = ${index},
			key_optionFieldLabel = ${optionFieldLabel},
			locator1 = "Sidebar#OPTION_INPUT",
			value1 = ${optionValue});
	}

	@summary = "Default summary"
	macro editFieldReference(fieldFieldLabel = null, fieldReference = null, assertFieldReference = null, fieldsGroupLabel = null) {
		if (isSet(fieldsGroupLabel)) {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldsGroupLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
				value1 = ${fieldsGroupLabel});
		}
		else {
			Click(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");
		}

		Navigator.gotoNavTab(navTab = "Advanced");

		Type(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${fieldReference});

		AssertTextEquals.assertValue(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = ${assertFieldReference});

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldReferenceOfFieldOption(fieldFieldLabel = null, index = null, optionFieldLabel = null, fieldReferenceOfFieldOption = null) {
		if (isSet(fieldFieldLabel)) {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldFieldLabel});
		}

		if (isSet(optionFieldLabel)) {
			TripleClick(
				index = ${index},
				key_optionFieldLabel = ${optionFieldLabel},
				locator1 = "Sidebar#OPTION_FIELD_REFERENCE_INPUT");

			Type.sendKeys(
				index = ${index},
				key_optionFieldLabel = ${optionFieldLabel},
				locator1 = "Sidebar#OPTION_FIELD_REFERENCE_INPUT",
				value1 = ${fieldReferenceOfFieldOption});

			Click.pauseClickAt(
				key_tab = "Basic",
				locator1 = "NavTab#TAB_LINK");
		}
		else {
			TripleClick(
				index = ${index},
				locator1 = "Sidebar#OPTION_WITHOUT_LABEL_FIELD_REFERENCE_INPUT");

			Type.sendKeys(
				index = ${index},
				locator1 = "Sidebar#OPTION_WITHOUT_LABEL_FIELD_REFERENCE_INPUT",
				value1 = ${fieldReferenceOfFieldOption});

			Click.pauseClickAt(
				key_tab = "Basic",
				locator1 = "NavTab#TAB_LINK");
		}

		if (isSet(fieldFieldLabel)) {
			Click(locator1 = "Sidebar#BACK");
		}
	}

	@summary = "Default summary"
	macro editFieldRequired(fieldFieldLabel = null) {
		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Basic");

		Check.checkToggleSwitch(
			checkboxName = "Required Field",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertVisible(
			key_text = "Save",
			locator1 = "Button#ANY_ENABLED");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldRequiredWithoutBack(fieldFieldLabel = null) {
		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Check.checkToggleSwitch(
			checkboxName = "Required Field",
			locator1 = "Checkbox#ANY_CHECKBOX");

		AssertVisible(
			key_text = "Save",
			locator1 = "Button#ANY_ENABLED");
	}

	@summary = "Default summary"
	macro editFieldSearchable(fieldFieldLabel = null, searchableType = null) {
		if (${fieldFieldLabel} == "Boolean") {
			Click(
				key_fieldLabel = ${fieldFieldLabel},
				locator1 = "Checkbox#CHECKBOX_LABEL");
		}
		else {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldFieldLabel});
		}

		Navigator.gotoNavTab(navTab = "Advanced");

		Check.checkNotVisible(
			key_fieldFieldLabel = "Searchable",
			key_optionValue = ${searchableType},
			locator1 = "WCEditWebContent#SELECTION_OPTION");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldsetsCollapsible(fieldsetLabel = null) {
		Click(
			key_fieldsetLabel = ${fieldsetLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		Check.checkToggleSwitch(
			checkboxName = "Collapsible",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldsetsLabel(fieldsetLabel = null, fieldsetLabelEdit = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Click(
			key_fieldsetLabel = ${fieldsetLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldsetLabelEdit});

		AssertTextEquals(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldsetLabelEdit});

		AssertElementPresent(
			key_fieldsetLabel = ${fieldsetLabelEdit},
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldsGroupCollapsible() {
		if (!(isSet(fieldsGroupLabel))) {
			var fieldsGroupLabel = "Fields Group";
		}

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldsGroupLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
			value1 = ${fieldsGroupLabel});

		Navigator.gotoNavTab(navTab = "Basic");

		Check.checkToggleSwitch(
			checkboxName = "Collapsible",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldsGroupLabel(fieldsGroupLabelEdit = null, fieldsGroupLabel = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		if (isSet(fieldsetModal)) {
			Click(
				key_fieldFieldLabel = ${fieldsGroupLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL_IN_FIELDSET_MODAL");
		}
		else {
			Click(
				key_fieldFieldLabel = ${fieldsGroupLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldsGroupLabelEdit});

		AssertTextEquals(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${fieldsGroupLabelEdit});

		AssertElementPresent(
			key_fieldFieldLabel = ${fieldsGroupLabelEdit},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldTip(fieldPlaceholder = null, fieldFieldLabel = null, fieldHelp = null) {
		if (isSet(fieldsetModal)) {
			Click(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL_IN_FIELDSET_MODAL");
		}
		else {
			Click(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}

		if (isSet(fieldPlaceholder)) {
			var key_fieldLabel = "Placeholder";
			var key_text = "Placeholder";

			Click(locator1 = "Sidebar#DDM_ANY");

			Type(
				locator1 = "Sidebar#DDM_ANY",
				value1 = ${fieldPlaceholder});

			AssertTextEquals(
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${fieldPlaceholder});
		}

		if (isSet(fieldHelp)) {
			if (isSet(fieldsetModal)) {
				Click(
					key_fieldFieldLabel = ${fieldFieldLabel},
					locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL_IN_FIELDSET_MODAL");

				Type(
					key_fieldLabel = "Help Text",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = ${fieldHelp});
			}
			else {
				var key_fieldFieldLabel = ${fieldFieldLabel};
				var key_text = "Help";

				Click(locator1 = "Sidebar#DDM_ANY");

				Type(
					locator1 = "Sidebar#DDM_ANY",
					value1 = ${fieldHelp});

				AssertTextEquals(
					locator1 = "DDMEditStructure#SETTINGS_TEXT",
					value1 = ${fieldHelp});
			}
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editFieldType(fieldLabel = null, fieldLineType = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}

		Check.checkNotVisible(
			key_fieldFieldLabel = "Field Type",
			key_optionValue = ${fieldLineType},
			locator1 = "WCEditWebContent#SELECTION_OPTION");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editImageFieldPredefinedValue(depotName = null, imageFileName = null, fieldFieldLabel = null) {
		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		Click(locator1 = "FormFields#UPLOAD_PREDEFINED_VALUE");

		if (isSet(selectFromDepot)) {
			ItemSelector.selectRepositoryImage(
				depotName = ${depotName},
				imageFileName = ${imageFileName});
		}
		else if (isSet(selectFromCurrentSite)) {
			ItemSelector.selectDMImage(imageFileName = ${imageFileName});
		}
		else {
			ItemSelector.uploadFile(uploadFileName = ${imageFileName});
		}
	}

	@summary = "Default summary"
	macro editNumericType(fieldLabel = null, fieldNumericType = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}

		Check.checkNotVisible(
			key_fieldFieldLabel = "My numeric type is:",
			key_optionValue = ${fieldNumericType},
			locator1 = "WCEditWebContent#SELECTION_OPTION");

		if (${fieldNumericType} == "Integer") {
			var numericType = "integer";
		}
		else {
			var numericType = "double";
		}

		WaitForElementPresent(
			key_optionValue = ${numericType},
			locator1 = "DataEngineBuilder#OPTION_SELECTED");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro editStyle(styleValue = null, fieldLabel = null) {
		Click(
			key_fieldFieldLabel = ${fieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");

		Navigator.gotoNavTab(navTab = "Advanced");

		Type(
			key_fieldName = "",
			locator1 = "DDMField#TEXT_BOX",
			value1 = ${styleValue});

		AssertElementPresent(
			key_styleValue = ${styleValue},
			locator1 = "DataEngineRenderer#SEPARATOR_STYLE");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro gotoCreateNewFieldset() {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		Click(locator1 = "FormViewBuilder#CREATE_NEW_FIELD_SETS");
	}

	@summary = "Default summary"
	macro gotoEditFieldset(fieldsetName = null) {
		DataEngine.gotoFieldsetItemEllipsis(fieldsetName = ${fieldsetName});

		MenuItem.click(menuItem = "Edit");
	}

	@summary = "Default summary"
	macro gotoFieldsetItemEllipsis(fieldsetName = null) {
		Navigator.gotoSidebarTab(tabName = "Builder");

		Navigator.gotoNavTab(navTab = "Fieldsets");

		Click(
			key_fieldsetName = ${fieldsetName},
			locator1 = "Sidebar#FIELDSET_ITEM_ELLIPSIS");
	}

	@summary = "Default summary"
	macro moveNestedField(fieldsetLabel = null, nestedFieldLabel = null) {
		var key_fieldsetLabel = ${fieldsetLabel};
		var key_fieldFieldLabel = ${nestedFieldLabel};

		Click(locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");

		DragAndDrop.javaScriptDragAndDropToBottom(
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			locator2 = "Form#ADD_FIELD_POSITION_1");
	}

	@summary = "Default summary"
	macro removeFieldOption(fieldFieldLabel = null, index = null, optionFieldLabel = null) {
		if (isSet(fieldFieldLabel)) {
			AssertClick.assertPartialTextClickAt(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
				value1 = ${fieldFieldLabel});
		}

		if (isSet(optionFieldLabel)) {
			Click(
				index = ${index},
				key_optionFieldLabel = ${optionFieldLabel},
				locator1 = "DataEngineBuilder#OPTION_REMOVE_BUTTON_WITH_LABEL_INDEXED");
		}
		else {
			Click(
				index = ${index},
				locator1 = "DataEngineBuilder#OPTION_REMOVE_BUTTON_INDEXED");
		}
	}

	@summary = "Default summary"
	macro tearDownInstance() {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Localization",
			configurationName = "Language",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureCurrentLanguagesCP(defaultPortalLanguage = "English (United States)");
	}

	@summary = "Default summary"
	macro toggleFieldRepeatable(fieldsetLabel = null, fieldFieldLabel = null, fieldsGroupLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (isSet(fieldFieldLabel)) {
			var fieldLabel = ${fieldFieldLabel};
			var tab = "Advanced";
		}
		else if (isSet(fieldsetLabel)) {
			var fieldLabel = ${fieldsetLabel};
			var tab = "Basic";
		}
		else if (isSet(fieldsGroupLabel)) {
			var fieldLabel = ${fieldsGroupLabel};
			var tab = "Basic";
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}

		Navigator.gotoNavTab(navTab = ${tab});

		Check.checkToggleSwitch(
			key_fieldName = "repeatable",
			locator1 = "Checkbox#SWITCH");

		WaitForElementPresent(
			index = ${index},
			key_fieldLabel = ${fieldLabel},
			locator1 = "DataEngineRenderer#REPEATABLE_FIELD_ADD_BUTTON_INDEXED");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro toggleInline(fieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}

		Navigator.gotoNavTab(navTab = "Advanced");

		if (IsChecked(checkboxName = "Inline", locator1 = "Checkbox#ANY_CHECKBOX")) {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Inline",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
		else {
			Check.checkToggleSwitch(
				checkboxName = "Inline",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro toggleMultipleSelectionOption(webContentMultipleSelection = null) {
		AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

		if (!(isSet(webContentMultipleSelectionFieldLabel))) {
			var webContentMultipleSelectionFieldLabel = "Multiple Selection";
		}

		Click.clickAtNotVisible(
			key_fieldFieldLabel = ${webContentMultipleSelectionFieldLabel},
			key_optionValue = ${webContentMultipleSelection},
			locator1 = "WCEditWebContent#SELECTION_OPTION");
	}

	@summary = "Default summary"
	macro toggleShowAsSwitch(fieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}

		Navigator.gotoNavTab(navTab = "Basic");

		if (IsChecked(checkboxName = "Show as a Switch", locator1 = "Checkbox#ANY_CHECKBOX")) {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Show as a Switch",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
		else {
			Check.checkToggleSwitch(
				checkboxName = "Show as a Switch",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro toggleShowLabel(fieldLabel = null, hiddenFieldLabel = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			if (isSet(fieldLabel)) {
				AssertClick.assertPartialTextClickAt(
					index = ${index},
					key_fieldLabel = ${fieldLabel},
					locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
					value1 = ${fieldLabel});
			}
			else {
				Click(
					index = ${index},
					locator1 = "DataEngineBuilder#FIELD_CONTAINER_IN_MODAL_INDEXED");
			}
		}
		else {
			if (isSet(fieldLabel)) {
				AssertClick.assertPartialTextClickAt(
					index = ${index},
					key_fieldLabel = ${fieldLabel},
					locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
					value1 = ${fieldLabel});
			}
			else {
				Click(
					index = ${index},
					locator1 = "DataEngineBuilder#FIELD_CONTAINER_INDEXED");
			}
		}

		if (IsTextEqual(locator1 = "Sidebar#TITLE", value1 = "Fields Group")) {
			var tab = "Basic";
		}
		else {
			var tab = "Advanced";
		}

		Navigator.gotoNavTab(navTab = ${tab});

		if (IsChecked(checkboxName = "Show Label", locator1 = "Checkbox#ANY_CHECKBOX")) {
			Uncheck.uncheckToggleSwitch(
				checkboxName = "Show Label",
				locator1 = "Checkbox#ANY_CHECKBOX");

			if (IsElementPresent(locator1 = "Modal#MODAL")) {
				WaitForElementNotPresent(
					index = ${index},
					key_fieldLabel = ${fieldLabel},
					locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED");
			}
			else {
				WaitForElementNotPresent(
					index = ${index},
					key_fieldLabel = ${fieldLabel},
					locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED");
			}
		}
		else {
			Check.checkToggleSwitch(
				checkboxName = "Show Label",
				locator1 = "Checkbox#ANY_CHECKBOX");

			if (IsElementPresent(locator1 = "Modal#MODAL")) {
				WaitForElementPresent(
					index = ${index},
					key_fieldLabel = ${hiddenFieldLabel},
					locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED");
			}
			else {
				WaitForElementPresent(
					index = ${index},
					key_fieldLabel = ${hiddenFieldLabel},
					locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED");
			}
		}

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro viewField(fieldPlaceholder = null, fieldName = null, fieldFieldLabel = null, fieldHelp = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldFieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldFieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldFieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldFieldLabel});
		}

		AssertElementPresent(
			key_fieldName = ${fieldName},
			locator1 = "DataEngineBuilder#FIELD_NAME_INDEXED");

		AssertTextEquals.assertValue(
			locator1 = "Sidebar#DDM_LABEL",
			value1 = ${fieldFieldLabel});

		if (isSet(fieldHelp)) {
			AssertTextEquals(
				key_fieldFieldLabel = ${fieldFieldLabel},
				locator1 = "DDMEditStructure#SETTINGS_TEXT",
				value1 = ${fieldHelp});
		}

		if (isSet(fieldPlaceholder)) {
			AssertTextEquals(
				key_fieldLabel = "Placeholder Text",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = ${fieldPlaceholder});
		}
	}

	@summary = "Default summary"
	macro viewFieldLabel(fieldName = null, fieldFieldLabel = null) {
		if (${fieldName} == "Boolean") {
			AssertElementPresent(
				key_fieldLabel = ${fieldFieldLabel},
				locator1 = "Checkbox#CHECKBOX_LABEL");
		}
		else {
			if (!(isSet(index))) {
				var index = 1;
			}

			AssertElementPresent(
				key_fieldFieldLabel = ${fieldFieldLabel},
				key_index = ${index},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL_ANY");
		}
	}

	@summary = "Default summary"
	macro viewFieldSearchable(fieldFieldLabel = null, searchableType = null) {
		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = ${fieldFieldLabel},
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = ${fieldFieldLabel});

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertChecked.assertCheckedNotVisible(
			key_fieldFieldLabel = "Searchable",
			key_optionValue = ${searchableType},
			locator1 = "WCEditWebContent#SELECTION_OPTION");
	}

	@summary = "Default summary"
	macro viewFieldset(fieldsetName = null, fieldNameList = null) {
		AssertVisible(
			key_fieldsetLabel = ${fieldsetName},
			locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

		for (var fieldName : list ${fieldNameList}) {
			AssertVisible(
				key_fieldFieldLabel = ${fieldName},
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
		}
	}

	@summary = "Default summary"
	macro viewFieldsetTranslation(fieldsetName = null, fieldNameList = null, localeList = null) {
		for (var locale : list ${localeList}) {
			PortletEntry.changeLocale(locale = ${locale});

			AssertVisible(
				key_fieldsetLabel = "${fieldsetName} ${locale}",
				locator1 = "DDMEditStructure#FORM_FIELD_SETS_CONTAINER_LABEL");

			for (var fieldName : list ${fieldNameList}) {
				AssertVisible(
					key_fieldFieldLabel = "${fieldName} ${locale}",
					locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
			}
		}
	}

	@summary = "Default summary"
	macro viewFieldType(fieldLabel = null, fieldLineType = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}

		AssertChecked.assertCheckedNotVisible(
			key_fieldFieldLabel = "Field Type",
			key_optionValue = ${fieldLineType},
			locator1 = "WCEditWebContent#SELECTION_OPTION");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro viewNestedField(fieldName = null, nestedField = null, nestedFieldData = null) {
		AssertTextEquals.assertValue(
			key_fieldName = ${fieldName},
			key_nestedFieldName = ${nestedField},
			locator1 = "DDMField#NESTED_INPUT",
			value1 = ${nestedFieldData});
	}

	@summary = "Default summary"
	macro viewNumericType(fieldLabel = null, fieldNumericType = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementPresent(locator1 = "Modal#MODAL")) {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_IN_MODAL_INDEXED",
				value1 = ${fieldLabel});
		}
		else {
			AssertClick.assertPartialTextClickAt(
				index = ${index},
				key_fieldLabel = ${fieldLabel},
				locator1 = "DataEngineBuilder#FIELD_LABEL_INDEXED",
				value1 = ${fieldLabel});
		}

		AssertElementPresent(
			key_optionValue = ${fieldNumericType},
			locator1 = "DataEngineBuilder#OPTION_SELECTED");

		Click(locator1 = "Sidebar#BACK");
	}

	@summary = "Default summary"
	macro waitForAutoSave() {
		if (IsElementPresent(key_text = "Publish", locator1 = "Button#ANY")) {
			Button.clickPublish();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			Button.clickSave();
		}
	}

}