definition {

	@summary = "Default summary"
	macro addKeywords(keyword = null) {
		Click(locator1 = "ACSettings#KEYWORD_BUTTON");

		Type(
			locator1 = "ACSettings#KEYWORD_TEXTFIELD",
			value1 = ${keyword});

		Click(locator1 = "ACSettings#KEYWORD_SEND_BUTTON");
	}

	@summary = "Default summary"
	macro addMultiplesOptions(optionsList = null) {
		Click(locator1 = "ACSettings#KEYWORD_BUTTON");

		for (var option : list ${optionsList}) {
			Type(
				locator1 = "ACSettings#KEYWORD_TEXTFIELD",
				value1 = ${option});

			KeyPress(
				locator1 = "ACSettings#KEYWORD_TEXTFIELD",
				value1 = "\ENTER");
		}

		Click(locator1 = "ACSettings#KEYWORD_SEND_BUTTON");
	}

	@summary = "Default summary"
	macro addUser(userInvite = null) {
		Click(locator1 = "ACSettings#INVITE_USERS_BUTTON");

		for (var keyword : list ${userInvite}) {
			Type(
				locator1 = "ACSettings#KEYWORD_TEXTFIELD",
				value1 = ${keyword});

			KeyPress(
				locator1 = "ACSettings#KEYWORD_TEXTFIELD",
				value1 = "\ENTER");
		}

		Click(locator1 = "ACSettings#KEYWORD_SEND_BUTTON");
	}

	@summary = "Default summary"
	macro assertAddonsDetails(individualsAddons = null, pageViewsAddons = null) {
		if (isSet(individualsAddons)) {
			AssertElementPresent(
				key_planItem = "Individuals",
				key_planLimit = ${individualsAddons},
				locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");
		}

		if (isSet(pageViewsAddons)) {
			AssertElementPresent(
				key_planItem = "Page Views",
				key_planLimit = ${pageViewsAddons},
				locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");
		}
	}

	@summary = "Default summary"
	macro assertCurrentPlanLimitAndAddOn(individualsLimit = null, pageViewsLimit = null) {
		if (isSet(individualsLimit)) {
			AssertElementPresent(
				key_metricName = "KNOWN INDIVIDUALS",
				key_planLimit = ${individualsLimit},
				locator1 = "ACUsage#USAGE_CURRENT_PLAN_LIMIT_AND_ADD_ON");
		}

		if (isSet(pageViewsLimit)) {
			AssertElementPresent(
				key_metricName = "PAGE VIEWS",
				key_planLimit = ${pageViewsLimit},
				locator1 = "ACUsage#USAGE_CURRENT_PLAN_LIMIT_AND_ADD_ON");
		}
	}

	@summary = "Default summary"
	macro assertDataSourceStatus(section = null, status = null) {
		var key_dataSourceStatus = ${status};
		var key_sectionStatus = ${section};

		AssertElementPresent(locator1 = "ACSettings#DATA_SOURCE_STATUS");
	}

	@summary = "Default summary"
	macro assertIndividualsUsage(individualUsageValue = null) {
		AssertTextEquals(
			locator1 = "ACSettings#INDIVIDUALS_USAGE_METRIC",
			value1 = ${individualUsageValue});
	}

	@summary = "Default summary"
	macro assertInviteUsersButton() {
		AssertElementPresent(locator1 = "ACSettings#INVITE_USERS_BUTTON");
	}

	@summary = "Default summary"
	macro assertKeywordNotPresent(keyword = null) {
		for (var word : list ${keyword}) {
			var key_keywordName = ${word};

			AssertElementNotPresent(
				locator1 = "ACSettings#KEYWORD_NAME",
				value1 = ${word});
		}
	}

	@summary = "Default summary"
	macro assertKeywords(keyword = null) {
		for (var word : list ${keyword}) {
			var key_keywordName = ${word};

			AssertTextEquals(
				locator1 = "ACSettings#KEYWORD_NAME",
				value1 = ${word});
		}
	}

	@summary = "Default summary"
	macro assertOverviewUsage(current = null, metricName, planLimit, notEquals = null) {
		if (isSet(current)) {
			AssertTextEquals.assertPartialText(
				key_metricName = ${metricName},
				key_planLimit = ${planLimit},
				locator1 = "ACUsage#USAGE_CURRENT_PLAN_LIMIT_AND_ADD_ON",
				value1 = ${current});
		}

		if (isSet(notEquals)) {
			AssertTextNotEquals.assertNotPartialMatch(
				key_metricName = ${metricName},
				key_planLimit = ${planLimit},
				locator1 = "ACUsage#USAGE_CURRENT_PLAN_LIMIT_AND_ADD_ON",
				value1 = ${notEquals});
		}
	}

	@summary = "Default summary"
	macro assertPageViewsUsage(pageViewsUsageValue = null) {
		AssertTextEquals(
			locator1 = "ACSettings#PAGE_VIEWS_USAGE_METRIC",
			value1 = ${pageViewsUsageValue});
	}

	@summary = "Default summary"
	macro assertPlanDetails(individualsLimit = null, pageViewsLimit = null, planName, usersLimit = null) {
		AssertElementPresent(
			key_planName = ${planName},
			locator1 = "ACUsage#CURRENT_PLAN");

		if (isSet(individualsLimit)) {
			AssertElementPresent(
				key_planItem = "Individuals",
				key_planLimit = ${individualsLimit},
				locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");
		}

		if (isSet(pageViewsLimit)) {
			AssertElementPresent(
				key_planItem = "Page Views",
				key_planLimit = ${pageViewsLimit},
				locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");
		}

		if (isSet(usersLimit)) {
			AssertElementPresent(
				key_planItem = "Workspace Users",
				key_planLimit = ${usersLimit},
				locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");
		}
	}

	@summary = "Default summary"
	macro assertRequestLog(key_jobType = null) {
		if (${key_jobType} == "Delete") {
			AssertElementPresent(locator1 = "ACDataControlAndPrivacy#REQUEST_LOG_TABLE");

			var key_jobType = "Suppress";

			AssertElementPresent(locator1 = "ACDataControlAndPrivacy#REQUEST_LOG_TABLE");
		}
		else {
			AssertElementPresent(locator1 = "ACDataControlAndPrivacy#REQUEST_LOG_TABLE");
		}
	}

	@summary = "Default summary"
	macro assertUserList(userName = null) {
		AssertTextEquals(
			locator1 = "ACSettings#USER_LIST",
			value1 = ${userName});
	}

	@summary = "Default summary"
	macro assertUserListEmail(userEmail = null) {
		AssertTextEquals(
			locator1 = "ACSettings#USER_LIST_EMAIL",
			value1 = ${userEmail});
	}

	@summary = "Default summary"
	macro assertUserManagementDescription() {
		AssertElementPresent(locator1 = "ACSettings#USER_MANAGEMENT_DESCRIPTION");
	}

	@summary = "Default summary"
	macro assertUserManagementHeader() {
		AssertElementPresent(locator1 = "ACSettings#HEADER_USER_MANAGEMENT");
	}

	@summary = "Default summary"
	macro assertUserNotPresent(userEmail = null) {
		AssertTextNotEquals(
			locator1 = "ACSettings#USER_LIST_EMAIL",
			value1 = ${userEmail});
	}

	@summary = "Default summary"
	macro assertUserPermission(permissionType = null) {
		for (var userEmail : list ${userEmail}) {
			AssertElementPresent(
				key_permissionType = ${permissionType},
				key_userEmail = ${userEmail},
				locator1 = "ACSettings#USER_ROLE_BY_EMAIL");
		}
	}

	@summary = "Default summary"
	macro assertUsersListByEmail() {
		AssertElementPresent(locator1 = "ACSettings#USER_LIST_BY_EMAIL");
	}

	@summary = "Default summary"
	macro changeMultipleUsersPermissions(permissionType = null, userEmail = null) {
		ACSettings.clickUsersByEmail(userEmail = ${userEmail});

		Click(
			key_text = "Change Permissions",
			locator1 = "Button#ANY");

		Click(
			key_text = "Select Permission",
			locator1 = "Button#ANY");

		Click(
			key_siteRole = ${permissionType},
			locator1 = "ACSettings#SELECT_SITE_ROLE");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro changeRetentionPeriodTo7Months() {
		Click(locator1 = "ACSettings#RETENTION_PERIOD");

		KeyPress(
			locator1 = "ACSettings#RETENTION_PERIOD",
			value1 = "\UP");

		KeyPress(
			locator1 = "ACSettings#RETENTION_PERIOD",
			value1 = "\ENTER");

		Click(locator1 = "ACSettings#CONFIRMATION_BUTTON");
	}

	@summary = "Default summary"
	macro changeUserRole(permissionType = null, userEmail = null, newRole = null) {
		Click(
			key_userEmail = ${userEmail},
			locator1 = "ACSettings#EDIT_BUTTON_BY_EMAIL");

		Click(
			key_permissionType = ${permissionType},
			locator1 = "ACSettings#PERMISSION_DROPDOWN");

		Click(
			key_siteRole = ${newRole},
			locator1 = "ACSettings#SELECT_SITE_ROLE");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro checkDataSourceStatus() {
		var sectionTitleList = ListUtil.newListFromString(${sectionTitleList});
		var statusList = ListUtil.newListFromString(${statusList});
		var size = ListUtil.size(${sectionTitleList});
		var i = 0;

		while (${i} != ${size}) {
			var section = ListUtil.get(${sectionTitleList}, ${i});
			var status = ListUtil.get(${statusList}, ${i});

			ACSettings.assertDataSourceStatus(
				section = ${section},
				status = ${status});

			var i = ${i} + 1;

			var i = StringUtil.valueOf(${i});
		}
	}

	@summary = "Default summary"
	macro clearProperty(propertyName = null) {
		ACUtils.searchBar(searchItem = ${propertyName});

		ACNavigation.openItem(itemName = ${propertyName});

		ACUtils.clickAnyButton(buttonName = "Clear Data");

		var confirmMessage = selenium.getElementValue("ACSettings#DELETE_CONFIRMATION_MESSAGE");

		Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

		Type(
			locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT",
			value1 = ${confirmMessage});

		Click(locator1 = "ACSettings#CONFIRMATION_BUTTON");

		Alert.viewSuccessMessage();

		ACUtils.waitForClearProperty();
	}

	@summary = "Default summary"
	macro clickGenericAddOrConfirmationButton() {
		Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
	}

	@summary = "Default summary"
	macro clickUsersByEmail() {
		for (var userEmail : list ${userEmail}) {
			Click(
				key_userEmail = ${userEmail},
				locator1 = "ACSettings#CHECKBOX_BY_EMAIL");
		}
	}

	@summary = "Default summary"
	macro createRequestLogByEmail(jobType, email) {
		var key_fieldType = ${jobType};

		ACSettings.goToDataControlAndPrivacy();

		ACSettings.navigateToRequestOrSuppressedOptions(
			optionName = "Request Log",
			optionValue = "Manage");

		Click(locator1 = "ACDataControlAndPrivacy#CREATE_REQUEST");

		Click(locator1 = "ACDataControlAndPrivacy#JOB_TYPE");

		Click(locator1 = "ACDataControlAndPrivacy#FIND_BY_EMAIL_FIELD");

		Click(
			key_optionName = ${email},
			locator1 = "ACDataControlAndPrivacy#SELECT_USER");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	// @summary = "Deletes all data source"

	//macro deleteAllDataSource {

	// // It is not possible to delete data source after LRAC-13389. This functionality must be returned by a story that has not yet been created

	//	if (IsElementNotPresent(locator1 = "ACSettings#EXIT_SETTINGS_BUTTON")) {
	//		ACNavigation.goToSettings();
	//}
	//	ACSettings.goToDataSources();
	//	while (IsElementPresent(locator1 = "ACSettings#ITEM_TABLE")) {
	//		ACSettings.deleteDataSource();
	//		Refresh();
	//}
	//}

	@summary = "Default summary"
	macro deleteAllKeywords() {
		KeyPress(
			locator1 = "ACSettings#SELECT_ALL_CHECKBOX",
			value1 = "\SPACE");

		Click(locator1 = "ACSettings#DELETE_FROM_TOOLBAR");

		Click(locator1 = "ACSettings#CONTINUE_BUTTON");
	}

	@summary = "Default summary"
	macro deleteAllPendingUsers() {
		ACSettings.goToUserManagement();

		while (IsElementPresent(locator1 = "ACSettings#VIEW_STATUS_PENDING")) {
			if (IsElementPresent(locator1 = "ACSettings#VIEW_STATUS_PENDING")) {
				Click(locator1 = "ACSettings#DELETE_USER");

				Click(locator1 = "ACSettings#CONTINUE_BUTTON");
			}
		}
	}

	@summary = "Deletes all properties \  @param propertyList the list of properties you want to delete (optional)"
	macro deleteAllProperties() {
		if (IsElementNotPresent(locator1 = "ACSettings#EXIT_SETTINGS_BUTTON")) {
			ACNavigation.goToSettings();
		}

		ACSettings.goToProperties();

		if (IsElementPresent(locator1 = "ACSettings#SELECT_ALL_CHECKBOX")) {
			KeyPress(
				locator1 = "ACSettings#SELECT_ALL_CHECKBOX",
				value1 = "\SPACE");

			if (IsElementPresent(itemName = "Beryl Commerce", locator1 = "ACSettings#ITEM_ON_LIST")) {
				Click.clickAtNotVisible(
					key_propertyName = "Beryl Commerce",
					locator1 = "ACSettings#PROPERTY_CHECKBOX");
			}

			if (IsElementPresent(locator1 = "ACSettings#GENERIC_DELETE_BUTTON")) {
				Click(locator1 = "ACSettings#GENERIC_DELETE_BUTTON");

				var confirmMessage = selenium.getText("ACSettings#DELETE_CONFIRMATION_MESSAGE");

				Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

				Type(
					locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT",
					value1 = ${confirmMessage});

				Click(locator1 = "ACSettings#CONFIRMATION_BUTTON");
			}
		}
	}

	// @summary = "Deletes a specific data source \  @param dataSourceName the name of the data source you want to delete"

	//macro deleteDataSource {

	// // It is not possible to delete data source after LRAC-13389. This functionality must be returned by a story that has not yet been created

	//	if (IsElementNotPresent(locator1 = "ACSettings#EXIT_SETTINGS_BUTTON")) {
	//		ACNavigation.goToSettings();
	//}
	//	if (isSet(dataSourceName)) {
	//		ACUtils.searchBar(searchItem = ${dataSourceName});
	//		ACNavigation.openItem(itemName = ${dataSourceName});
	//}
	//	else {
	//		Click(locator1 = "ACSettings#ITEM_TABLE");
	//}
	//	WaitForVisible(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");
	//	if (IsElementPresent(key_text = "Edit CSV", locator1 = "Button#ANY")) {
	//		var dataSourceName = selenium.getText("//div[contains(@class,'sheet-header')]//h3");
	//		Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");
	//		var confirmMessage = selenium.getElementValue("ACSettings#DELETE_CONFIRMATION_MESSAGE");
	//		Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");
	//		Type(
	//			locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT",
	//			value1 = ${confirmMessage});
	//		Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");
	//		AssertTextEquals(
	//			locator1 = "Modal#HEADER",
	//			value1 = "Delete Data Source");
	//		AssertTextPresent(
	//			locator1 = "Modal#BODY",
	//			value1 = "Are you sure you want to delete ${dataSourceName}?");
	//		AssertTextPresent(
	//			locator1 = "Modal#BODY",
	//			value1 = "You will permanently lose all contacts and analytics data collected from this data source. You will not be able to undo this action.");
	//		Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");
	//}
	//	else {
	//		var dataSourceName = selenium.getText("//h3");
	//		Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");
	//		if (!(contains(${dataSourceName}, "Salesforce"))) {
	//			AssertTextEquals(
	//				locator1 = "Modal#HEADER",
	//				value1 = "Delete ${dataSourceName}");
	//}
	//		var confirmMessage = selenium.getElementValue("ACSettings#DELETE_CONFIRMATION_MESSAGE");
	//		Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");
	//		Type(
	//			locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT",
	//			value1 = ${confirmMessage});
	//		Click(locator1 = "ACSettings#CONFIRMATION_BUTTON");
	//}
	//}

	@summary = "Default summary"
	macro deletePropertyByCheckbox(propertyName) {
		Click.clickAtNotVisible(
			key_propertyName = ${propertyName},
			locator1 = "ACSettings#PROPERTY_CHECKBOX");

		Click(locator1 = "ACSettings#GENERIC_DELETE_BUTTON");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Delete ${propertyName}?");

		AssertTextPresent(
			locator1 = "Modal#BODY",
			value1 = "To delete ${propertyName}, copy the sentence below to confirm your intention to delete property.");

		AssertTextPresent(
			locator1 = "Modal#BODY",
			value1 = "This will result in the complete removal of this property's historical events. You will not be able to undo this operation.");

		var confirmMessage = selenium.getText("ACSettings#DELETE_CONFIRMATION_MESSAGE");

		Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

		Type(
			locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT",
			value1 = ${confirmMessage});

		Click(locator1 = "ACSettings#CONFIRMATION_BUTTON");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro deletePropertyByEllipse(propertyName = null) {
		ACUtils.searchBar(searchItem = ${propertyName});

		ACUtils.clickKebab();

		MenuItem.clickNoError(menuItem = "Delete");

		var confirmMessage = selenium.getText("ACSettings#DELETE_CONFIRMATION_MESSAGE");

		Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

		Type(
			locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT",
			value1 = ${confirmMessage});

		Click(locator1 = "ACSettings#CONFIRMATION_BUTTON");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro deleteUser(userDelete = null) {
		if (IsVisible(locator1 = "ACSettings#USER_LIST_EMAIL", value1 = ${userDelete})) {
			Click(locator1 = "ACSettings#DELETE_USER");

			Click(locator1 = "ACSettings#CONTINUE_BUTTON");
		}
	}

	@summary = "Default summary"
	macro disconnectDataSource() {
		Click(locator1 = "ACSettings#DISCONNECT_DATA_SOURCE_BUTTON");

		Click(locator1 = "ACSettings#DISCONNECT_CONFIRMATION_BUTTON");
	}

	@summary = "Default summary"
	macro getCurrentNumber(metricName, planLimit) {
		var key_planLimit = ${planLimit};
		var key_metricName = ${metricName};

		WaitForVisible(locator1 = "ACUsage#USAGE_CURRENT_PLAN_LIMIT_AND_ADD_ON");

		var current = selenium.getText("ACUsage#USAGE_CURRENT_PLAN_LIMIT_AND_ADD_ON");

		var current = StringUtil.extractFirst(${current}, " of");

		return ${current};
	}

	@summary = "Default summary"
	macro getDXPInstanceId(dataSourceName = null) {
		ACSettings.goToDataSources();

		ACUtils.searchBar(searchItem = ${dataSourceName});

		ACNavigation.openItem(itemName = ${dataSourceName});

		AssertTextEquals(
			inputFieldId = "dataSourceName",
			locator1 = "TextInput#INPUT_ID",
			value1 = ${dataSourceName});

		var dxpInstanceId = selenium.getElementValue("//input[contains(@id,'dxpInstanceId')]");

		return ${dxpInstanceId};
	}

	@summary = "Default summary"
	macro getPropertyId(propertyName = null) {
		ACSettings.goToProperties();

		ACUtils.searchBar(searchItem = ${propertyName});

		ACNavigation.openItem(itemName = ${propertyName});

		WaitForVisible(
			locator1 = "ACSettings#HEADER_TITLE",
			title = ${propertyName});

		var propertyId = selenium.getText("ACSettings#HEADER_DESCRIPTION");

		var propertyId = StringUtil.extractLast(${propertyId}, " ");

		return ${propertyId};
	}

	@summary = "Default summary"
	macro getUsagePercentage(metricName = null) {
		var usageSince = selenium.getText("//div[contains(@class,'overview-usage')][.//h3[contains(@class,'metric-name')][normalize-space(text())='${metricName}']]//span[contains(@class,'usage-since')]");

		var percentage = StringUtil.extractFirst(${usageSince}, "since");

		var percentage = StringUtil.trim(${percentage});

		return ${percentage};
	}

	@summary = "Default summary"
	macro goToAccounts() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "accounts");
	}

	@summary = "Default summary"
	macro goToApis() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "apis");
	}

	@summary = "Default summary"
	macro goToAttributes() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "local");
	}

	@summary = "Default summary"
	macro goToBehaviors() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "behaviors");
	}

	@summary = "Default summary"
	macro goToDataControlAndPrivacy() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "data-privacy");
	}

	@summary = "Default summary"
	macro goToDataSources() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "data-source");
	}

	@summary = "Default summary"
	macro goToDefinitions() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "definitions");
	}

	@summary = "Default summary"
	macro goToDefinitionsOptions(definitionsOptions = null) {
		var key_definitionsOptions = ${definitionsOptions};

		Click(locator1 = "ACSettings#DEFINITIONS_OPTIONS");
	}

	@summary = "Default summary"
	macro goToEventAttributes() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "event-attributes");
	}

	@summary = "Default summary"
	macro goToEvents() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "events");
	}

	@summary = "Default summary"
	macro goToGlobalAttributes() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "global");
	}

	@summary = "Default summary"
	macro goToIndividuals() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "individual");
	}

	@summary = "Default summary"
	macro goToInterests() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "interest");
	}

	@summary = "Default summary"
	macro goToProperties() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "properties");
	}

	@summary = "Default summary"
	macro goToSearch() {
		ACSettings.goToDefinitionsOptions(definitionsOptions = "search");
	}

	@summary = "Default summary"
	macro goToSettingsNavigation(settingsNavigation = null) {
		var key_settingsNavigation = ${settingsNavigation};

		Click(locator1 = "ACSettings#SETTINGS_NAVIGATION");
	}

	@summary = "Default summary"
	macro goToUsage() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "usage");
	}

	@summary = "Default summary"
	macro goToUserManagement() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "users");
	}

	@summary = "Default summary"
	macro goToWorkspace() {
		ACSettings.goToSettingsNavigation(settingsNavigation = "settings/workspace");
	}

	@summary = "Default summary"
	macro navigateToRequestOrSuppressedOptions(optionValue = null, optionName = null) {
		var key_optionName = ${optionName};
		var key_optionValue = ${optionValue};

		Click(locator1 = "ACDataControlAndPrivacy#REQUEST_SUPPRESSED_OPTIONS");
	}

	@summary = "Default summary"
	macro renameDataSource(dataSourceNewName = null) {
		Click(locator1 = "Icon#EDIT_PENCIL");

		Click(
			inputFieldId = "dataSourceName",
			locator1 = "TextInput#INPUT_ID");

		KeyPress(
			inputFieldId = "dataSourceName",
			locator1 = "TextInput#INPUT_ID",
			value1 = "\BACK_SPACE");

		Type(
			inputFieldId = "dataSourceName",
			locator1 = "TextInput#INPUT_ID",
			value1 = ${dataSourceNewName});

		Button.clickSubmitButton();
	}

	@summary = "Default summary"
	macro takeTokenFromAnalyticsCloud() {
		if (IsElementNotPresent(locator1 = "ACSettings#SETTINGS_PAGE")) {
			ACNavigation.goToSettings();
		}

		ACSettings.goToDataSources();

		Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");

		Click(locator1 = "ACSettings#DXP_DATA_SOURCE_OPTION");

		var token = selenium.getElementValue("ACSettings#TOKEN_INPUT_FIELD");

		static var staticACToken = ${token};

		return ${staticACToken};
	}

	@summary = "Default summary"
	macro takeTokenFromExistingDataSource(dataSourceName = null) {
		if (IsElementNotPresent(locator1 = "ACSettings#SETTINGS_PAGE")) {
			ACNavigation.goToSettings();
		}

		ACSettings.goToDataSources();

		ACUtils.searchBar(searchItem = ${dataSourceName});

		ACNavigation.openItem(itemName = ${dataSourceName});

		ACUtils.clickAnyButton(button = "Reconnect");

		var token = selenium.getElementValue("ACSettings#TOKEN_INPUT_FIELD");

		static var staticExistingSourceToken = ${token};

		return ${staticExistingSourceToken};
	}

	@summary = "Default summary"
	macro verifyCannotAddUser() {
		AssertElementNotPresent(locator1 = "ACSettings#INVITE_USERS_BUTTON");
	}

	@summary = "Default summary"
	macro viewCurrentPlan(planName = null) {
		AssertVisible(
			key_planName = ${planName},
			locator1 = "ACUsage#CURRENT_PLAN");
	}

	@summary = "Default summary"
	macro viewDeleteNotAvailable() {
		AssertElementNotPresent(locator1 = "ACSettings#DELETE_USER");
	}

	@summary = "Default summary"
	macro viewEditnotAvailable() {
		AssertElementNotPresent(
			key_text = "Edit",
			locator1 = "Button#ANY");
	}

	@summary = "Default summary"
	macro viewFilterButton(filter = null, nofilter = null) {
		if (isSet(nofilter)) {
			AssertElementNotPresent(
				key_text = ${nofilter},
				locator1 = "ACSettings#PROPERTIES_DROPDOWN_BUTTON");
		}

		AssertElementPresent(
			key_text = ${filter},
			locator1 = "ACSettings#PROPERTIES_DROPDOWN_BUTTON");
	}

	@summary = "Default summary"
	macro viewPropertyEntryName(propertyName = null) {
		AssertElementPresent(
			entryName = ${propertyName},
			locator1 = "ACSettings#PROPERTIES_LIST_NAME");
	}

	@summary = "Default summary"
	macro viewPropertyInfo() {
		AssertElementPresent(locator1 = "ACSettings#PROPERTIES_HEADER_DESCRIPTION");
	}

	@summary = "Default summary"
	macro viewUserNotSelectable(email = null) {
		AssertElementPresent(
			locator1 = "ACSettings#USER_UNSELECTABLE",
			userEmail = ${email});
	}

}