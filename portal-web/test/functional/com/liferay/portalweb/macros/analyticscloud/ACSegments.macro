definition {

	@summary = "Default summary"
	macro accessSegment(segmentName = null) {
		var key_segmentName = ${segmentName};

		Click(locator1 = "ACSegments#SELECT_SEGMENT");
	}

	@summary = "Default summary"
	macro addAllMembers() {
		Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

		KeyPress(
			locator1 = "ACSettings#SELECT_ALL_CHECKBOX",
			value1 = "\SPACE");

		Click(locator1 = "ACSegments#ADD_BUTTON");
	}

	@summary = "Default summary"
	macro addBreakdownByAttribute(breakdownName = null, attribute = null, binsAmount = null) {
		Click(locator1 = "ACSegments#ADD_BREAKDOWN_BUTTON");

		Click(locator1 = "ACSegments#SEGMENT_OVERVIEW_ATTRIBUTE");

		Click(
			locator1 = "ACSegments#ATTRIBUTE_DROPDOWN_MENU_ITEM",
			menuItem = ${attribute});

		if (isSet(binsAmount)) {
			Click(locator1 = "ACSegments#BINS_INPUT");

			Type(
				locator1 = "ACSegments#BINS_INPUT",
				value1 = ${binsAmount});
		}

		Click(locator1 = "ACSegments#BREAKDOWN_NAME_INPUT");

		Type(
			locator1 = "ACSegments#BREAKDOWN_NAME_INPUT",
			value1 = ${breakdownName});

		Click(locator1 = "Button#SAVE");
	}

	@summary = "Default summary"
	macro addNestedSegmentField(segmentField = null) {
		Type(
			locator1 = "ACSegments#SEARCH_SEGMENT",
			value1 = ${segmentField});

		var key_segmentField = ${segmentField};

		if (!(isSet(index))) {
			var index = 1;
		}

		DragAndDrop.javaScriptDragAndDropToObject(
			index = ${index},
			locator1 = "ACSegments#SEGMENT_CRITERION_ITEM",
			locator2 = "ACSegments#CRITERIA_STATEMENT_BODY");
	}

	@summary = "Default summary"
	macro addOrganizationName(organizationName = null) {
		Type(
			locator1 = "ACSegments#ORGANIZATION_NAME_INPUT",
			value1 = ${organizationName});
	}

	@summary = "Default summary"
	macro addSegmentField(segmentField = null) {
		Type(
			locator1 = "ACSegments#SEARCH_SEGMENT",
			value1 = ${segmentField});

		var key_segmentField = ${segmentField};

		DragAndDrop.javaScriptDragAndDropToObject(
			locator1 = "ACSegments#SEGMENT_CRITERION_ITEM",
			locator2 = "ACSegments#SEGMENT_DROP_AREA");
	}

	@summary = "Default summary"
	macro addStaticMember(tableMember = null) {
		var key_tableMember = ${tableMember};

		Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

		while ((IsElementNotPresent(locator1 = "ACSegments#TABLE_CHECKBOX")) && (maxIterations = "50")) {
			ACSegments.searchSegment(findSegment = ${tableMember});

			ACUtils.clearSearchBar();
		}

		Click(locator1 = "ACSegments#TABLE_CHECKBOX");

		Click(locator1 = "ACSegments#ADD_BUTTON");
	}

	@summary = "Default summary"
	macro addStaticMultiMember() {
		Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

		for (var tableMember : list ${tableMember}) {
			var key_tableMember = ${tableMember};

			ACSegments.searchSegment(findSegment = ${tableMember});

			while ((IsElementNotPresent(locator1 = "ACSegments#TABLE_CHECKBOX")) && (maxIterations = "50")) {
				ACUtils.clearSearchBar();

				ACSegments.searchSegment(findSegment = ${tableMember});
			}

			Click(locator1 = "ACSegments#TABLE_CHECKBOX");
		}

		Click(locator1 = "ACSegments#ADD_BUTTON");
	}

	@summary = "Default summary"
	macro assertCriteriaTable(criteriaName = null) {
		AssertVisible(
			key_criteriaName = ${criteriaName},
			locator1 = "ACSegments#CRITERIA_ROW");
	}

	@summary = "Default summary"
	macro assertMember(memberName = null) {
		AssertElementPresent(
			key_tableMember = ${memberName},
			locator1 = "ACSegments#TABLE_CHECKBOX");
	}

	@summary = "Default summary"
	macro assertMemberNotPresent(memberName = null) {
		AssertElementNotPresent(
			key_tableMember = ${memberName},
			locator1 = "ACSegments#TABLE_CHECKBOX");
	}

	@summary = "Default summary"
	macro assertMembershipValue(membership = null, segmentName = null) {
		AssertElementPresent(
			locator1 = "ACSegments#SEGMENT_TABLE_MEMBERSHIP_NAME_AND_VALUE",
			membershipName = ${membership},
			segmentName = ${segmentName});
	}

	@summary = "Default summary"
	macro assertSegmentAttributeNotPresent(segmentField = null) {
		var key_segmentField = ${segmentField};

		AssertElementNotPresent(locator1 = "ACSegments#SEGMENT_CRITERION_ITEM");
	}

	@summary = "Default summary"
	macro assertSegmentAttributePresent(segmentField = null) {
		var key_segmentField = ${segmentField};

		AssertElementPresent(locator1 = "ACSegments#SEGMENT_CRITERION_ITEM");
	}

	@summary = "Default summary"
	macro assertSegmentPresent(segmentName = null) {
		var key_segmentName = ${segmentName};

		AssertElementPresent(locator1 = "ACSegments#SELECT_SEGMENT");
	}

	@summary = "Default summary"
	macro assertTotalActivitiesValue(totalActivities = null, segmentName = null) {
		AssertElementPresent(
			locator1 = "ACSegments#SEGMENT_TABLE_TOTAL_ACTIVITIES_NAME_AND_VALUE",
			segmentName = ${segmentName},
			totalActivitiesNumber = ${totalActivities});
	}

	@summary = "Default summary"
	macro cancelSegment() {
		Click(locator1 = "ACSegments#CANCEL_SEGMENT");
	}

	@summary = "Default summary"
	macro clickCheckboxMember(tableMember = null) {
		var key_tableMember = ${tableMember};

		Click(locator1 = "ACSegments#TABLE_CHECKBOX");
	}

	@summary = "Default summary"
	macro clickMemberButton(buttonName = null, memberName = null) {
		var key_tableMember = ${memberName};
		var key_buttonName = ${buttonName};

		Click(locator1 = "ACSegments#MEMBER_GENERIC_BUTTON");
	}

	@summary = "Default summary"
	macro createDynamicSegment() {
		Click(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");

		ACSegments.selectSegmentType(segmentType = "DYNAMIC");
	}

	@summary = "Default summary"
	macro createDynamicSegmentAndFillFields(criterion = null, segmentField = null, segments = null) {
		ACSegments.createDynamicSegment();

		ACUtils.setItemName(itemName = ${segments});

		ACSegments.goToSidebarAttributes(criterion = ${criterion});

		ACSegments.addSegmentField(segmentField = ${segmentField});
	}

	@summary = "Default summary"
	macro createStaticSegment() {
		Click(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");

		ACSegments.selectSegmentType(segmentType = "STATIC");
	}

	@summary = "Default summary"
	macro deleteSegment(searchTerm = null) {
		ACSegments.searchSegment(findSegment = ${searchTerm});

		ACUtils.clickKebab();

		Click(locator1 = "ACSegments#DELETE_SEGMENT");

		Click(locator1 = "ACSegments#CONFIRM_DELETION");
	}

	@summary = "Default summary"
	macro deleteSegmentCriteria(criteriaName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		Click(
			criteriaName = ${criteriaName},
			index = ${index},
			locator1 = "ACSegments#CRITERIA_ELLIPSIS");

		while (IsElementPresent(criteriaName = ${criteriaName}, index = ${index}, locator1 = "ACSegments#CRITERIA_ELLIPSIS")) {
			DropdownMenuItem.click(menuItem = "Delete");
		}
	}

	@summary = "Default summary"
	macro deleteSegmentViaSegmentListInlineButton(segmentName = null) {
		var key_segmentName = ${segmentName};

		ACUtils.waitForLoading();

		Click.javaScriptClick(locator1 = "ACSegments#DELETE_SEGMENT_INLINE_BUTTON");

		Click(locator1 = "ACSegments#CONFIRM_DELETION");
	}

	@summary = "Default summary"
	macro duplicateSegmentCriteria(criteriaName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (IsElementNotPresent(locator1 = "ACSegments#CRITERIA_ELLIPSIS_OPTION_OPEN")) {
			Click(
				criteriaName = ${criteriaName},
				index = ${index},
				locator1 = "ACSegments#CRITERIA_ELLIPSIS");
		}

		MenuItem.click(menuItem = "Duplicate");
	}

	@summary = "Default summary"
	macro editConjunction() {
		if (!(isSet(index))) {
			var index = 1;
		}

		Click(
			index = ${index},
			locator1 = "ACSegments#CONJUNCTION_BUTTON");
	}

	@summary = "Default summary"
	macro editDateCriterion(month = null, year = null, day = null) {
		if (IsElementNotPresent(locator1 = "ACSegments#DATE_PICKER")) {
			Click(
				key_text = "calendar",
				locator1 = "Icon#ANY");
		}

		Select(
			key_indexCalendar = 2,
			locator1 = "ACSegments#MONTH_AND_YEAR_CALENDAR",
			value1 = ${year});

		Select(
			key_indexCalendar = 1,
			locator1 = "ACSegments#MONTH_AND_YEAR_CALENDAR",
			value1 = ${month});

		Click(
			key_day = ${day},
			locator1 = "ACSegments#DAY_CALENDAR_OPTION");
	}

	@summary = "Default summary"
	macro editNumberCriterion(numberInput = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		Type(
			index = ${index},
			locator1 = "ACSegments#NUMBER_INPUT",
			value1 = ${numberInput});

		Click(locator1 = "ACSegments#TOTAL_MEMBERS");
	}

	@summary = "Default summary"
	macro editSegment(segmentName = null) {
		var key_segmentName = ${segmentName};

		ACSegments.searchSegment(findSegment = ${segmentName});

		ACUtils.clickKebab();

		Click(locator1 = "ACSegments#EDIT_SEGMENT");

		ACUtils.waitForLoading();
	}

	@summary = "Default summary"
	macro editSessionCriterion() {
		echo("TODO");
	}

	@summary = "Default summary"
	macro editTextCriterion(textInput = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		Type(
			index = ${index},
			locator1 = "ACSegments#TEXT_INPUT",
			value1 = ${textInput});

		if (!(isSet(skip))) {
			Click(locator1 = "ACSegments#TOTAL_MEMBERS");
		}
	}

	@summary = "Default summary"
	macro editWebBehaviorCriterion(month2 = null, occurenceNumber = null, year = null, indexField = null, year2 = null, atLeastMost = null, searchTerm = null, month = null, activitiesOption = null, day2 = null, timePeriod = null, day = null, timeOption = null) {
		if (isSet(activitiesOption)) {
			Click(
				key_indexField = ${indexField},
				locator1 = "ACSegments#ACTIVITIES_CRITERION");

			Click(
				locator1 = "ACSegments#CRITERION_DROPDOWN_VALUE",
				operator = ${activitiesOption});
		}

		if (isSet(searchTerm)) {
			ACSegments.selectDocument(
				documentTitle = ${searchTerm},
				indexField = ${indexField});
		}

		if (isSet(atLeastMost)) {
			Click(
				key_indexField = ${indexField},
				locator1 = "ACSegments#OCCURENCE_SELECT");

			Click(
				locator1 = "ACSegments#CRITERION_DROPDOWN_VALUE",
				operator = ${atLeastMost});
		}

		if (isSet(occurenceNumber)) {
			ACSegments.setOccurence(occurenceNumber = ${occurenceNumber});
		}

		if (isSet(timeOption) || isSet(timePeriod)) {
			ACSegments.editWebBehaviorTimeCriterion(
				day = ${day},
				day2 = ${day2},
				indexField = ${indexField},
				month = ${month},
				month2 = ${month2},
				timeOption = ${timeOption},
				timePeriod = ${timePeriod},
				year = ${year},
				year2 = ${year2});
		}
	}

	@summary = "Default summary"
	macro editWebBehaviorTimeCriterion(month2 = null, month = null, year = null, timePeriod = null, day2 = null, indexField = null, day = null, year2 = null, timeOption = null) {
		if (isSet(timeOption)) {
			Click(
				key_indexField = ${indexField},
				locator1 = "ACSegments#TIME_INPUT_CRITERION_CONJUNCTION");

			Click(
				locator1 = "ACSegments#CRITERION_DROPDOWN_VALUE",
				operator = ${timeOption});
		}

		if (isSet(timePeriod)) {
			if ((${timeOption} == "since") || !(isSet(timeOption))) {
				Click(
					key_indexField = ${indexField},
					locator1 = "ACSegments#TIME_INPUT_CRITERION");

				Click(
					locator1 = "ACSegments#CRITERION_DROPDOWN_VALUE",
					operator = ${timePeriod});
			}
		}

		if ((${timeOption} == "after") || (${timeOption} == "before") || (${timeOption} == "on")) {
			ACSegments.editDateCriterion(
				day = ${day},
				month = ${month},
				year = ${year});
		}

		if (${timeOption} == "between") {
			ACSegments.editDateCriterion(
				day = ${day},
				month = ${month},
				year = ${year});

			ACSegments.editDateCriterion(
				day = ${day2},
				month = ${month2},
				year = ${year2});
		}
	}

	@summary = "Default summary"
	macro filterAndOrderForSegLists(filterName) {
		var key_filterName = ${filterName};

		if (!(isSet(key_dropdownName))) {
			var key_dropdownName = "Order";
		}

		Click(locator1 = "ACSegments#FILTER_AND_ORDER_BUTTON");

		Click(
			locator1 = "ACSegments#FILTER_DROPDOWN_OPTION",
			value1 = ${key_filterName});

		Click(locator1 = "ACSegments#FILTER_AND_ORDER_BUTTON");
	}

	@summary = "Default summary"
	macro filterKnownSegmentMembersList() {
		Click(locator1 = "ACSegments#KNOWN_SEGMENT_MEMBERS_FILTER");

		AssertElementPresent(locator1 = "ACSegments#KNOWN_SEGMENT_MEMBERS_FILTER_ARROW_DESC");
	}

	@summary = "Default summary"
	macro filterKnownSegmentMembersListByName() {
		Click(locator1 = "ACSegments#KNOWN_SEGMENT_MEMBERS_FILTER_BY_NAME");
	}

	@summary = "Default summary"
	macro generateDayMonthAndYearValues() {
		if (!(isSet(dateDifferenceFromCurrentDate))) {
			var dateDifferenceFromCurrentDate = 0;
		}

		var day = DateUtil.getDate(${dateDifferenceFromCurrentDate});
		var month = DateUtil.getMonthName(${dateDifferenceFromCurrentDate});
		var year = DateUtil.getYear(${dateDifferenceFromCurrentDate});
		static var staticDay = ${day};
		static var staticMonth = ${month};
		static var staticYear = ${year};

		return ${staticDay};

		return ${staticMonth};

		return ${staticYear};
	}

	@summary = "Default summary"
	macro generateSecondDayMonthAndYearValues() {
		if (!(isSet(dateDifferenceFromCurrentDate))) {
			var dateDifferenceFromCurrentDate = 0;
		}

		var day2 = DateUtil.getDate(${dateDifferenceFromCurrentDate});
		var month2 = DateUtil.getMonthName(${dateDifferenceFromCurrentDate});
		var year2 = DateUtil.getYear(${dateDifferenceFromCurrentDate});
		static var staticDay2 = ${day2};
		static var staticMonth2 = ${month2};
		static var staticYear2 = ${year2};

		return ${staticDay2};

		return ${staticMonth2};

		return ${staticYear2};
	}

	@summary = "Default summary"
	macro goToSidebarAttributes(criterion = null) {
		var key_criterion = ${criterion};

		Click.mouseDownMouseUp(locator1 = "ACSegments#CRITERION_TYPE_DROPDOWN");

		while (IsElementPresent(locator1 = "ACSegments#SELECT_CRITERION_TYPE", value1 = ${criterion})) {
			Click(
				locator1 = "ACSegments#SELECT_CRITERION_TYPE",
				value1 = ${criterion});
		}
	}

	@summary = "Default summary"
	macro includeAnonymous() {
		Check.checkToggleSwitch(locator1 = "ACSegments#ANONYMOUS_SWITCH");
	}

	@summary = "Default summary"
	macro previewSegmentMembership() {
		WaitForElementNotPresent(locator1 = "ACSegments#FORM_HEADER_LOADING_ANIMATION");

		ACUtils.waitForSendingRequest();

		Click(locator1 = "Icon#EYE_PREVIEW");
	}

	@summary = "Default summary"
	macro removeStaticMember(tableMember = null) {
		var key_tableMember = ${tableMember};

		Click(locator1 = "ACSegments#TABLE_CHECKBOX");

		Click(locator1 = "ACSegments#REMOVE_MEMBERS_BUTTON");
	}

	@summary = "Default summary"
	macro saveSegment() {
		Click(locator1 = "ACSegments#SAVE_SEGMENT");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro searchMember(findMember = null) {
		var searchTerm = ${findMember};

		Type(
			locator1 = "ACSegments#SEARCH_MEMBER",
			value1 = ${searchTerm});

		Click(locator1 = "ACUtils#CLEAR_SEARCH_BAR_BUTTON");
	}

	@summary = "Default summary"
	macro searchSegment(findSegment = null) {
		var searchTerm = ${findSegment};

		Type(
			locator1 = "ACSegments#SEARCH_SEGMENT",
			value1 = ${searchTerm});

		KeyPress(
			locator1 = "ACSettings#SEARCH_BAR",
			value1 = "\ENTER");

		ACUtils.waitForLoading();
	}

	@summary = "Default summary"
	macro searchTheSegmentProfile(searchTerm = null) {
		var key_segmentName = ${searchTerm};

		Type(
			locator1 = "ACSegments#SEARCH_MEMBER",
			value1 = ${key_segmentName});

		KeyPress(
			locator1 = "ACSegments#SEARCH_MEMBER",
			value1 = "\ENTER");
	}

	@summary = "Default summary"
	macro selectAutocompleteOption(criteriaName = null, autocompleteText = null) {
		var key_autocompleteText = ${autocompleteText};

		Click(
			key_criteriaName = ${criteriaName},
			locator1 = "ACSegments#AUTOCOMPLETE_SELECT_INPUT");

		WaitForElementPresent(locator1 = "ACSegments#SEGMENT_AUTOCOMPLETE_DROPDOWN");

		Click(locator1 = "ACSegments#SEGMENT_AUTOCOMPLETE_DROPDOWN");
	}

	@summary = "Default summary"
	macro selectDistributionByAttribute(attribute = null) {
		Click(locator1 = "ACSegments#ATTRIBUTE_TEXT_INPUT");

		Click(
			locator1 = "ACSegments#ATTRIBUTE_DROPDOWN_MENU_ITEM",
			menuItem = ${attribute});
	}

	@summary = "Default summary"
	macro selectDocument(indexField = null, documentTitle = null) {
		var key_indexField = ${indexField};
		var key_tableMember = ${documentTitle};

		Click(locator1 = "ACSegments#SELECT_BUTTON");

		ACSegments.searchSegment(findSegment = ${documentTitle});

		while ((IsElementNotPresent(locator1 = "ACSegments#TABLE_CHECKBOX")) && (maxIterations = "50")) {
			ACUtils.clearSearchBar();

			ACSegments.searchSegment(findSegment = ${documentTitle});
		}

		Click(locator1 = "ACSegments#TABLE_CHECKBOX");

		Click(locator1 = "ACSegments#ADD_BUTTON");
	}

	@summary = "Default summary"
	macro selectOperator(operator = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		Click(
			key_indexField = ${index},
			locator1 = "ACSegments#ACTIVITIES_CRITERION");

		Click(
			locator1 = "ACSegments#CRITERION_DROPDOWN_VALUE",
			operator = ${operator});
	}

	@summary = "Default summary"
	macro selectSegmentType(segmentType = null) {
		var key_segmentType = ${segmentType};

		Click(locator1 = "ACSegments#SELECT_SEGMENT_TYPE");
	}

	@summary = "Default summary"
	macro setOccurence(occurenceNumber = null) {
		Type(
			locator1 = "ACSegments#OCCURENCE_INPUT",
			value1 = ${occurenceNumber});
	}

	@summary = "Default summary"
	macro sortSegmentButton() {
		Click(locator1 = "ACSegments#ADD_MEMBERS_SORT_BUTTON");
	}

	@summary = "Default summary"
	macro viewActivePageCreationModel(pageNumber = null) {
		AssertTextEquals(
			locator1 = "ACSegments#ACTIVE_PAGE",
			value1 = ${pageNumber});
	}

	@summary = "Default summary"
	macro viewAutocompleteSuggestions(notPresent = null,autocompleteText) {
		var key_autocompleteText = ${autocompleteText};

		Click(
			index = 1,
			locator1 = "ACSegments#TEXT_INPUT");

		AssertTextEquals.assertPartialText(
			locator1 = "ACSegments#SEGMENT_AUTOCOMPLETE_DROPDOWN",
			value1 = ${autocompleteText});

		if (isSet(notPresent)) {
			AssertTextNotEquals.assertNotPartialMatch(
				locator1 = "ACSegments#SEGMENT_AUTOCOMPLETE_DROPDOWN",
				value1 = ${notPresent});
		}
	}

	@summary = "Default summary"
	macro viewBreakdownChartsEntry(key_entry = null) {
		WaitForElementPresent(locator1 = "ACSegments#BREAKDOWN_CHART");

		AssertTextEquals.assertPartialText(
			locator1 = "ACSegments#BREAKDOWN_CHART",
			value1 = ${key_entry});
	}

	@summary = "Default summary"
	macro viewConjunction(conjunction = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		AssertTextEquals(
			index = ${index},
			locator1 = "ACSegments#CONJUNCTION_BUTTON",
			value1 = ${conjunction});
	}

	@summary = "Default summary"
	macro viewDeletedCriteria() {
		AssertTextPresent(
			locator1 = "ACSegments#DELETED_CRITERIA",
			value1 = "Drag and drop criterion from the right to add rules.");
	}

	@summary = "Default summary"
	macro viewDeletedSegmentName(searchTerm = null) {
		var key_segmentName = ${searchTerm};

		ACSegments.searchSegment(findSegment = ${searchTerm});

		AssertElementNotPresent(locator1 = "ACSegments#SELECT_SEGMENT");
	}

	@summary = "Default summary"
	macro viewDuplicatedCriteria(totalCriteriaCount = null, criteriaName = null) {
		var i = 0;

		while (${i} != ${totalCriteriaCount}) {
			var i = ${i} + 1;

			AssertVisible(
				criteriaName = ${criteriaName},
				index = ${i},
				locator1 = "ACSegments#DUPLICATED_CRITERIA");
		}
	}

	@summary = "Default summary"
	macro viewEditorLabel(labelName = null) {
		AssertTextPresent(
			locator1 = "ACSegments#EDITOR_LABEL",
			value1 = ${labelName});
	}

	@summary = "Default summary"
	macro viewIncludeAnonymousLabel() {
		AssertElementPresent(locator1 = "ACSegments#ANONYMOUS_LABEL");
	}

	@summary = "Default summary"
	macro viewPreviewNumber(previewNumber = null) {
		AssertTextPresent(
			locator1 = "ACLoading#PREVIEW_NUMBER",
			value1 = ${previewNumber});
	}

	@summary = "Default summary"
	macro viewSegmentCriteriaIndividualAttributes(condition = null, conjunction = null, attributeValue = null, attributeName = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (!(isSet(key_indexNested))) {
			var key_indexNested = 1;
		}

		AssertVisible(
			index = ${index},
			locator1 = "ACSegments#SEGMENT_CRITERIA_TYPE",
			type = "Individual");

		if (isSet(attributeName)) {
			AssertTextEquals(
				index = ${index},
				locator1 = "ACSegments#SEGMENT_CRITERIA_ATTRIBUTE_NAME",
				value1 = ${attributeName});
		}

		if (isSet(condition)) {
			AssertTextEquals(
				index = ${index},
				locator1 = "ACSegments#SEGMENT_CRITERIA_CONDITION",
				value1 = ${condition});
		}

		if (isSet(attributeValue)) {
			AssertTextEquals(
				index = ${index},
				locator1 = "ACSegments#SEGMENT_CRITERIA_ATTRIBUTE_VALUE",
				value1 = ${attributeValue});
		}

		if (isSet(conjunction)) {
			AssertTextEquals(
				index = ${index},
				locator1 = "ACSegments#SEGMENT_CRITERIA_CONJUNCTION",
				value1 = ${conjunction});
		}
	}

	@summary = "Default summary"
	macro viewSegmentCriteriaSessionAttributes(condition = null, conjunction = null, attributeValue = null, preposition = null, attributeName = null, time = null) {
		if (!(isSet(index))) {
			var index = 1;
		}

		if (!(isSet(key_indexNested))) {
			var key_indexNested = 1;
		}

		AssertVisible(
			index = ${index},
			locator1 = "ACSegments#SEGMENT_CRITERIA_TYPE",
			type = "Session");

		AssertTextEquals(
			index = ${index},
			locator1 = "ACSegments#SEGMENT_CRITERIA_ATTRIBUTE_NAME",
			value1 = ${attributeName});

		AssertTextEquals(
			index = ${index},
			locator1 = "ACSegments#SEGMENT_CRITERIA_CONDITION",
			value1 = ${condition});

		if (isSet(attributeValue)) {
			AssertTextEquals(
				index = ${index},
				locator1 = "ACSegments#SEGMENT_CRITERIA_ATTRIBUTE_VALUE",
				value1 = ${attributeValue});
		}

		AssertTextEquals(
			index = ${index},
			index_2 = 2,
			locator1 = "ACSegments#SEGMENT_CRITERIA_PREPOSITION_AND_TIME",
			value1 = ${preposition});

		if (isSet(time)) {
			AssertTextEquals(
				index = ${index},
				index_2 = 3,
				locator1 = "ACSegments#SEGMENT_CRITERIA_PREPOSITION_AND_TIME",
				value1 = ${time});
		}

		if (isSet(conjunction)) {
			AssertTextEquals(
				index = ${index},
				locator1 = "ACSegments#SEGMENT_CRITERIA_CONJUNCTION",
				value1 = ${conjunction});
		}
	}

	@summary = "Default summary"
	macro viewSegmentCriteriaWebBehavior(date = null, searchTerm = null, occurenceNumber = null, activitiesOption = null, timePeriod = null, atLeastMost = null, timeOption = null) {
		if (isSet(activitiesOption)) {
			AssertTextEquals(
				key_index = 1,
				locator1 = "ACSegments#SEGMENT_CRITERIA_WEB_BEHAVIOR_SPAN",
				value1 = ${activitiesOption});
		}

		if (isSet(searchTerm)) {
			AssertTextEquals.assertPartialText(
				key_index = 1,
				locator1 = "ACSegments#SEGMENT_CRITERIA_WEB_BEHAVIOR_B",
				value1 = ${searchTerm});
		}

		if (isSet(atLeastMost)) {
			AssertTextEquals(
				key_index = 3,
				locator1 = "ACSegments#SEGMENT_CRITERIA_WEB_BEHAVIOR_SPAN",
				value1 = ${atLeastMost});
		}

		if (isSet(occurenceNumber)) {
			AssertTextEquals(
				key_index = 2,
				locator1 = "ACSegments#SEGMENT_CRITERIA_WEB_BEHAVIOR_B",
				value1 = ${occurenceNumber});
		}

		if (isSet(timeOption)) {
			AssertTextEquals(
				key_index = 5,
				locator1 = "ACSegments#SEGMENT_CRITERIA_WEB_BEHAVIOR_SPAN",
				value1 = ${timeOption});
		}

		if (isSet(timePeriod)) {
			AssertTextEquals(
				key_index = 6,
				locator1 = "ACSegments#SEGMENT_CRITERIA_WEB_BEHAVIOR_SPAN",
				value1 = ${timePeriod});
		}

		if (isSet(date)) {
			AssertTextEquals(
				key_index = 6,
				locator1 = "ACSegments#SEGMENT_CRITERIA_WEB_BEHAVIOR_SPAN",
				value1 = ${date});
		}
	}

	@summary = "Default summary"
	macro viewSegmentMembershipChartNumbers(netChange = null, removedMember = null, addedMember = null) {
		MouseOver(locator1 = "ACSegments#SEGMENT_MEMBERSHIP_CHART_HOVER");

		AssertTextEquals(
			key_memberType = "Added",
			locator1 = "ACSegments#SEGMENT_MEMBERSHIP_CHART_HOVER_MEMBER_CHANGE",
			value1 = ${addedMember});

		AssertTextEquals(
			key_memberType = "Removed",
			locator1 = "ACSegments#SEGMENT_MEMBERSHIP_CHART_HOVER_MEMBER_CHANGE",
			value1 = ${removedMember});

		AssertTextEquals(
			key_memberType = "Net Change",
			locator1 = "ACSegments#SEGMENT_MEMBERSHIP_CHART_HOVER_MEMBER_CHANGE",
			value1 = ${netChange});
	}

	@summary = "Default summary"
	macro viewSegmentMembershipChartRowNumbers(row = null, value = null) {
		AssertTextEquals.assertPartialText(
			key_row = ${row},
			locator1 = "ACSegments#SEGMENT_MEMBERSHIP_CHART_HOVER_DATA_ROW",
			value1 = ${value});
	}

	@summary = "Default summary"
	macro viewSegmentMembershipLegendNumbers(totalNumber = null, knownNumber = null, anonymousNumber = null) {
		AssertTextEquals(
			key_memberType = "Known Members:",
			locator1 = "ACSegments#SEGMENT_MEMBERSHIP_LEGEND",
			value1 = ${knownNumber});

		AssertTextEquals(
			key_memberType = "Anonymous Members:",
			locator1 = "ACSegments#SEGMENT_MEMBERSHIP_LEGEND",
			value1 = ${anonymousNumber});

		AssertTextEquals(
			key_memberType = "Total Members:",
			locator1 = "ACSegments#SEGMENT_MEMBERSHIP_LEGEND",
			value1 = ${totalNumber});
	}

	@summary = "Default summary"
	macro viewSegmentName(searchTerm = null) {
		var key_segmentName = ${searchTerm};

		ACSegments.searchSegment(findSegment = ${searchTerm});

		AssertElementPresent(locator1 = "ACSegments#SELECT_SEGMENT");
	}

}