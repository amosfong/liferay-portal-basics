definition {

	@summary = "Default summary"
	macro _clickAddPortlet(categoryName = null, portletName = null) {
		if (isSet(categoryName)) {
			Click.clickNoWaitForVisible(
				key_categoryName = ${categoryName},
				key_portletName = ${portletName},
				locator1 = "ControlMenuAddPanel#ADD_PORTLET_LINK_BY_CATEGORY");
		}
		else {
			Click.clickNoWaitForVisible(
				key_portletName = ${portletName},
				locator1 = "ControlMenuAddPanel#ADD_PORTLET_LINK");
		}
	}

	@summary = "Default summary"
	macro addDuplicatePG(categoryName = null) {
		var portletTypeKey = "PORTLET";

		if (${portletName} == "Map") {
			var portletName = "Where are the Liferay members?";
		}
		else if (${portletName} == "Requests") {
			var portletTypeKey = "PORTLET_BORDERLESS";
		}

		if (!(isSet(portletCount))) {
			var portletCount = 1;
		}

		var i = 0;

		while (${i} != ${portletCount}) {
			var i = ${i} + 1;

			Refresh();

			Portlet.addPGCmd(
				categoryName = ${categoryName},
				portletName = ${portletName});
		}

		var key_portletName = ${portletName};

		AssertElementPresent(locator1 = "Home#${portletTypeKey}");
	}

	@summary = "Default summary"
	macro addPG(categoryName = null) {
		if (${portletName} == "Map") {
			var portletName = "Where are the Liferay members?";
		}

		Portlet.addPGCmd(
			categoryName = ${categoryName},
			portletName = ${portletName});

		var i = 1;
		var key_portletName = ${portletName};

		while (!((IsElementPresent(locator1 = "Home#PORTLET")) || (${i} == 3))) {
			var i = ${i} + 1;

			echo("The PORTLET could not be found. Refreshing the page. Attempt number ${i}...");

			Refresh();

			Portlet.addPGCmd(
				categoryName = ${categoryName},
				portletName = ${portletName});
		}

		Click.clickAt(locator1 = "ControlMenuAddPanel#CLOSE_ADD_PANEL");

		WaitForElementNotPresent(locator1 = "ControlMenuAddPanel#ADD_PANEL_OPEN");

		AssertElementPresent(locator1 = "Home#PORTLET");
	}

	@summary = "Default summary"
	macro addPGCmd(categoryName = null) {
		if (${portletName} == "Where are the Liferay members?") {
			var portletName = "Map";
		}

		if (IsElementNotPresent(locator1 = "ControlMenuAddPanel#ADD_PANEL_OPEN")) {
			var browserType = PropsUtil.get("browser.type");

			if (${browserType} == "safari") {
				Click.clickNoMouseOver(locator1 = "ControlMenu#ADD");
			}
			else {
				Click.clickAt(locator1 = "ControlMenu#ADD");
			}
		}

		AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

		Navigator.gotoNavTab(navTab = "Widgets");

		WaitForElementPresent(locator1 = "NavBar#APPLICATION_SEARCH_FIELD");

		Type(
			locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
			value1 = ${portletName});

		Portlet._clickAddPortlet(
			categoryName = ${categoryName},
			portletName = ${portletName});

		var key_portletName = ${portletName};

		AssertElementPresent(locator1 = "Portlet#LOADED");
	}

	@summary = "Default summary"
	macro assertPortletHeader(portletName = null) {
		var key_portletTitleName = ${portletName};

		AssertVisible(locator1 = "Home#PORTLET_HEADER");
	}

	@summary = "Default summary"
	macro assertServerShutdown() {
		var shutdownPauseCount = 0;

		while ((IsElementPresent(locator1 = "//body")) && (${shutdownPauseCount} != 12)) {
			Refresh();

			var shutdownPauseCount = ${shutdownPauseCount} + 1;

			echo("Shutdown pause count: ${shutdownPauseCount}");
		}
	}

	@summary = "Default summary"
	macro assertServerStartup() {
		var startupPauseCount = 0;

		while (!(IsElementPresent(locator1 = "UserBar#USER_SIGN_IN")) && (${startupPauseCount} != 12)) {
			Refresh();

			var startupPauseCount = ${startupPauseCount} + 1;

			echo("Startup pause count: ${startupPauseCount}");
		}
	}

	@summary = "Default summary"
	macro changeDisplayStyle(displayStyle = null) {
		if (IsElementNotPresent(key_displayStyle = StringUtil.toLowerCase(${displayStyle}), locator1 = "Icon#DISPLAY_STYLE_ACTIVE")) {
			Click(
				key_displayStyle = StringUtil.toLowerCase(${displayStyle}),
				locator1 = "Icon#DISPLAY_STYLE");
		}

		AssertElementPresent(
			key_displayStyle = StringUtil.toLowerCase(${displayStyle}),
			locator1 = "Icon#DISPLAY_STYLE_ACTIVE");
	}

	@summary = "Default summary"
	macro clickPortletPlusIconPG(portletName = null) {
		var browserType = PropsUtil.get("browser.type");
		var key_portletName = ${portletName};

		if (${browserType} == "safari") {
			Click.javaScriptClick(locator1 = "Portlet#ICON_PLUS_SIGN");

			AssertVisible(locator1 = "Portlet#ICON_PLUS_SIGN");
		}
		else {
			MouseOver.javaScriptMouseOver(
				key_portletName = ${portletName},
				locator1 = "Portlet#ICON_PLUS_SIGN");

			Click.javaScriptClick(
				key_portletName = ${portletName},
				locator1 = "Portlet#ICON_PLUS_SIGN");
		}
	}

	@summary = "Default summary"
	macro configureBackgroundStylesViaLookAndFeelPG(backgroundColor = null) {
		Navigator.gotoNavTab(navTab = "Background Styles");

		PageEditor.selectColorSwatchItem(
			colorSwatchItem = ${backgroundColor},
			fieldLabel = "Background Color");

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro configureBorderStylesViaLookAndFeelPG(borderStyleAttributeList = null, borderColorAttributeList = null, sameForAllFieldsetLabelList = null, borderWidthAttributeList = null, borderWidthUnitList = null) {
		Navigator.gotoNavTab(navTab = "Border Styles");

		if (isSet(sameForAllFieldsetLabelList)) {
			for (var sameForAllFieldsetLabel : list ${sameForAllFieldsetLabelList}) {
				Check.checkToggleSwitch(
					key_fieldLabel = "Same for All",
					key_fieldsetLabel = ${sameForAllFieldsetLabel},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH_IN_FIELDSET");
			}
		}

		if (isSet(borderWidthAttributeList)) {
			for (var borderWidthAttribute : list ${borderWidthAttributeList}) {
				var fieldLabel = StringUtil.extractFirst(${borderWidthAttribute}, "-");
				var value = StringUtil.extractLast(${borderWidthAttribute}, "-");

				Type(
					inputFieldId = ${fieldLabel},
					locator1 = "TextInput#INPUT_ID",
					value1 = ${value});
			}
		}

		if (isSet(borderWidthUnitList)) {
			for (var borderWidthUnit : list ${borderWidthUnitList}) {
				var fieldLabel = StringUtil.extractFirst(${borderWidthUnit}, "-");
				var value = StringUtil.extractLast(${borderWidthUnit}, "-");

				Select(
					locator1 = "Select#SELECT_ID",
					selectFieldId = ${fieldLabel},
					value1 = ${value});
			}
		}

		if (isSet(borderStyleAttributeList)) {
			for (var borderStyleAttribute : list ${borderStyleAttributeList}) {
				var fieldLabel = StringUtil.extractFirst(${borderStyleAttribute}, "-");
				var value = StringUtil.extractLast(${borderStyleAttribute}, "-");

				Select(
					locator1 = "Select#SELECT_ID",
					selectFieldId = ${fieldLabel},
					value1 = ${value});
			}
		}

		if (isSet(borderColorAttributeList)) {
			for (var borderColorAttribute : list ${borderColorAttributeList}) {
				var fieldLabel = StringUtil.extractFirst(${borderColorAttribute}, "-");
				var value = StringUtil.extractLast(${borderColorAttribute}, "-");

				PageEditor.selectColorSwatchItem(
					colorSwatchItem = "#${value}",
					fieldLabel = ${fieldLabel});
			}
		}

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro configureCustomTitlePG(portletTitleName = null) {
		var key_portletTitleName = ${portletTitleName};

		WaitForEditable(locator1 = "Portlet#SPECIFIC_TITLE");

		Click(locator1 = "Portlet#SPECIFIC_TITLE");

		Type.typePause(
			locator1 = "TextInput#PORTLET_TITLE",
			value1 = "${portletTitleName} Custom");

		Click.mouseDownMouseUp(locator1 = "Icon#OK");
	}

	@summary = "Default summary"
	macro configureGeneralViaLookAndFeelPG(applicationDecorators = null, customTitle = null) {
		Navigator.gotoNavTab(navTab = "General");

		if (isSet(customTitle)) {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Use Custom Title",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Type(
				inputFieldId = "customTitle",
				locator1 = "TextInput#INPUT_ID",
				value1 = ${customTitle});
		}

		if (isSet(applicationDecorators)) {
			Select(
				key_selectFieldLabel = "Application Decorators",
				locator1 = "Select#ANY",
				value1 = ${applicationDecorators});
		}

		if (!(isSet(configureWithoutSave))) {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro configureMarginAndPaddingViaLookAndFeelPG(marginAttributeList = null, sameForAllFieldsetLabelList = null, paddingUnitList = null, paddingAttributeList = null, marginUnitList = null) {
		Navigator.gotoNavTab(navTab = "Margin and Padding");

		if (isSet(marginAttributeList)) {
			for (var marginAttribute : list ${marginAttributeList}) {
				var fieldLabel = StringUtil.extractFirst(${marginAttribute}, "-");
				var value = StringUtil.extractLast(${marginAttribute}, "-");

				Type(
					inputFieldId = "margin${fieldLabel}",
					locator1 = "TextInput#INPUT_ID",
					value1 = ${value});
			}
		}

		if (isSet(marginUnitList)) {
			for (var marginUnit : list ${marginUnitList}) {
				var fieldLabel = StringUtil.extractFirst(${marginUnit}, "-");
				var value = StringUtil.extractLast(${marginUnit}, "-");

				Select(
					locator1 = "Select#SELECT_ID",
					selectFieldId = "margin${fieldLabel}",
					value1 = ${value});
			}
		}

		if (isSet(paddingAttributeList)) {
			for (var paddingAttribute : list ${paddingAttributeList}) {
				var fieldLabel = StringUtil.extractFirst(${paddingAttribute}, "-");
				var value = StringUtil.extractLast(${paddingAttribute}, "-");

				Type(
					inputFieldId = "padding${fieldLabel}",
					locator1 = "TextInput#INPUT_ID",
					value1 = ${value});
			}
		}

		if (isSet(paddingUnitList)) {
			for (var paddingUnit : list ${paddingUnitList}) {
				var fieldLabel = StringUtil.extractFirst(${paddingUnit}, "-");
				var value = StringUtil.extractLast(${paddingUnit}, "-");

				Select(
					locator1 = "Select#SELECT_ID",
					selectFieldId = "padding${fieldLabel}",
					value1 = ${value});
			}
		}

		if (isSet(sameForAllFieldsetLabelList)) {
			for (var sameForAllFieldsetLabel : list ${sameForAllFieldsetLabelList}) {
				Check.checkToggleSwitch(
					key_fieldLabel = "Same for All",
					key_fieldsetLabel = ${sameForAllFieldsetLabel},
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH_IN_FIELDSET");
			}
		}

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro configureSharingPG(checkAnyWebSiteToggle = null, portletName = null) {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = "Configuration");

		IFrame.selectConfigurationFrame();

		Navigator.gotoNavItem(navItem = "Sharing");

		if (isSet(checkAnyWebSiteToggle)) {
			Panel.expandPanel(panel = "Any Website");

			if (${checkAnyWebSiteToggle} == "true") {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = "widgetShowAddAppLink",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
			else {
				Uncheck.uncheckToggleSwitch(
					key_toggleSwitchLabel = "widgetShowAddAppLink",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro configureTextStylesViaLookAndFeelPG(color = null, size = null, wordSpacing = null, letterSpacing = null, textDecoration = null, lineHeight = null, bold = null, alignment = null, italic = null, font = null) {
		Navigator.gotoNavTab(navTab = "Text Styles");

		if (isSet(alignment)) {
			Select(
				key_selectFieldLabel = "Alignment",
				locator1 = "Select#ANY",
				value1 = ${alignment});
		}

		if (isSet(color)) {
			PageEditor.selectColorSwatchItem(
				colorSwatchItem = ${color},
				fieldLabel = "Color");
		}

		if (isSet(textDecoration)) {
			Select(
				key_selectFieldLabel = "Text Decoration",
				locator1 = "Select#ANY",
				value1 = ${textDecoration});
		}

		if (isSet(font)) {
			Select(
				key_selectFieldLabel = "Font",
				locator1 = "Select#ANY",
				value1 = ${font});
		}

		if (isSet(letterSpacing)) {
			Select(
				key_selectFieldLabel = "Letter Spacing",
				locator1 = "Select#ANY",
				value1 = ${letterSpacing});
		}

		if (isSet(lineHeight)) {
			Select(
				key_selectFieldLabel = "Line Height",
				locator1 = "Select#ANY",
				value1 = ${lineHeight});
		}

		if (isSet(size)) {
			Select(
				key_selectFieldLabel = "Size",
				locator1 = "Select#ANY",
				value1 = ${size});
		}

		if (${bold} == "true") {
			Check.checkToggleSwitch(
				key_fieldLabel = "Bold",
				key_fieldsetLabel = "Widget CSS",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH_IN_FIELDSET");
		}
		else {
			Uncheck.uncheckToggleSwitch(
				key_fieldLabel = "Bold",
				key_fieldsetLabel = "Widget CSS",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH_IN_FIELDSET");
		}

		if (${italic} == "true") {
			Check.checkToggleSwitch(
				key_fieldLabel = "Italic",
				key_fieldsetLabel = "Widget CSS",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH_IN_FIELDSET");
		}
		else {
			Uncheck.uncheckToggleSwitch(
				key_fieldLabel = "Italic",
				key_fieldsetLabel = "Widget CSS",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH_IN_FIELDSET");
		}

		if (isSet(wordSpacing)) {
			Select(
				key_selectFieldLabel = "Word Spacing",
				locator1 = "Select#ANY",
				value1 = ${wordSpacing});
		}

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro deletePG(portletName = null) {
		var key_portletName = ${portletName};

		MouseOver.mouseOverNotVisible(locator1 = "Portlet#SPECIFIC_ELLIPSIS_ICON");

		Click(locator1 = "Portlet#SPECIFIC_ELLIPSIS_ICON");

		MenuItem.clickNoError(menuItem = "Delete");

		AssertConfirm(value1 = "Are you sure you want to remove this component?");
	}

	@summary = "Default summary"
	macro dragAndDropPortletToColumnPG(columnNumberTo = null, columnNumberFrom = null, portletName = null) {
		var key_portletName = ${portletName};

		AssertTextEquals(
			key_pageColumnNumber = ${columnNumberFrom},
			locator1 = "Portlet#PORTLET_TITLE_INSIDE_PAGE_COLUMN",
			value1 = ${portletName});

		DragAndDrop.dragAndDropPortletToObject(
			key_pageColumnId = ${columnNumberTo},
			key_pageColumnNumber = ${columnNumberFrom},
			locator1 = "Portlet#HEADER_INSIDE_PAGE_COLUMN",
			locator2 = "Home#PAGE_COLUMN",
			value1 = ${portletName});

		AssertTextEquals(
			key_pageColumnNumber = ${columnNumberTo},
			locator1 = "Portlet#PORTLET_TITLE_INSIDE_PAGE_COLUMN",
			value1 = ${portletName});
	}

	@summary = "Default summary"
	macro expandTree() {
		WaitForVisible(locator1 = "Treeview#NODE_LIST");

		while (IsElementPresent(locator1 = "Treeview#NODE_COLLAPSED")) {
			Click(locator1 = "Treeview#NODE_COLLAPSED");
		}

		AssertElementNotPresent(locator1 = "Treeview#NODE_COLLAPSED");
	}

	@summary = "Default summary"
	macro gotoPortletOptions(siteTemplate = null, portletName = null, portletIndex = null, portletOption = null) {
		if (isSet(portletName)) {
			var key_portletName = ${portletName};
			var browserType = PropsUtil.get("browser.type");

			if (${browserType} == "safari") {
				Click.javaScriptClick(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

				AssertVisible(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
			}
			else if (${siteTemplate} == "true") {
				MouseOver.waitForMenuToggleJSMouseOver(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

				Click(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
			}
			else if (isSet(portletIndex)) {
				MouseOver.waitForMenuToggleJSMouseOver(
					locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON_INDEX",
					portletIndex = ${portletIndex});

				Click.waitForMenuToggleJSClick(
					locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON_INDEX",
					portletIndex = ${portletIndex});
			}
			else {
				MouseOver.waitForMenuToggleJSMouseOver(locator1 = "Portlet#SPECIFIC_PORTLET_SECTION");

				Click.javaScriptClick(locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");
			}
		}
		else {
			MouseOver.waitForMenuToggleJSMouseOver(locator1 = "Portlet#PORTLET_SECTION");

			Click(locator1 = "Portlet#OPTIONS_ICON");
		}

		if (isSet(portletOption)) {
			MenuItem.click(menuItem = ${portletOption});
		}
	}

	@summary = "Default summary"
	macro mouseOverPortletTitle(portletTitleName = null) {
		var key_portletTitleName = ${portletTitleName};

		MouseOver(locator1 = "Portlet#SPECIFIC_TITLE");
	}

	@summary = "Default summary"
	macro saveAndCloseConfig() {
		Button.clickSave();

		Alert.viewSuccessMessage();

		SelectFrameTop();

		Click.mouseDownMouseUp(locator1 = "Modal#CLOSE_BUTTON");

		WaitForElementNotPresent(locator1 = "IFrame#MODAL_BODY");
	}

	@summary = "Default summary"
	macro selectScope(scope = null) {
		Navigator.gotoNavTab(navTab = "Scope");

		Select(
			locator1 = "Select#SCOPE",
			value1 = "regexp:.*${scope}.*");

		Portlet.saveAndCloseConfig();
	}

	@summary = "Default summary"
	macro selectScopePG(scope = null, portletIndex = null, portletName = null) {
		WaitForLiferayEvent.initializeLiferayEventLog();

		Portlet.gotoPortletOptions(
			portletIndex = ${portletIndex},
			portletName = ${portletName},
			portletOption = "Configuration");

		IFrame.selectConfigurationFrame();

		Portlet.selectScope(scope = ${scope});
	}

	@summary = "Default summary"
	macro selectTreeNode(nodeName = null) {
		if (IsElementPresent(key_nodeName = ${nodeName}, locator1 = "Treeview#NODE_UNSELECTED")) {
			AssertClick.assertPartialTextClickAt(
				key_nodeName = ${nodeName},
				locator1 = "Treeview#NODE_UNSELECTED",
				value1 = ${nodeName});
		}

		AssertElementPresent(
			key_nodeName = ${nodeName},
			locator1 = "Treeview#NODE_SELECTED");
	}

	@summary = "Default summary"
	macro shutdownServer() {
		AntCommands.runCommand("build-test.xml", "stop-app-server");
	}

	@summary = "Default summary"
	macro startServer(noLicense = null, deleteLiferayHome = null, keepOsGiState = null, keepCachedAppServerData = null) {
		var appServerType = PropsUtil.get("app.server.type");

		if (${deleteLiferayHome} == "false") {
			AntCommands.runCommand("build-test.xml", "start-app-server -Ddelete.liferay.home=false");
		}
		else if (${keepCachedAppServerData} == "true") {
			AntCommands.runCommand("build-test.xml", "start-app-server -Dkeep.cached.app.server.data=true");
		}
		else if (${keepOsGiState} == "true") {
			AntCommands.runCommand("build-test.xml", "start-app-server -Dkeep.osgi.state=true");
		}
		else if (${noLicense} == "true") {
			AntCommands.runCommand("build-test.xml", "start-app-server -Ddelete.liferay.home=false -Dlicense.not.present=true");
		}
		else {
			AntCommands.runCommand("build-test.xml", "start-app-server");
		}

		if (!(isSet(userEmailAddress))) {
			var userEmailAddress = "test@liferay.com";
		}

		if (!(isSet(password))) {
			var password = PropsUtil.get("default.admin.password");
		}

		if ((${appServerType} == "jboss") || (${appServerType} == "weblogic") || (${appServerType} == "wildfly")) {
			User.loginPG(
				password = ${password},
				userEmailAddress = ${userEmailAddress});
		}
	}

	@summary = "Default summary"
	macro viewApplicationDecorator(decorator = null, portletName = null) {
		if (isSet(portletName)) {
			var key_decorator = StringUtil.lowerCase(${decorator});
			var key_portletTitleName = ${portletName};

			AssertElementPresent(locator1 = "Portlet#SPECIFIC_PORTLET_BORDER_DECORATOR");
		}
		else {
			AssertElementPresent(
				key_decorator = StringUtil.lowerCase(${decorator}),
				locator1 = "Portlet#PORTLET_BORDER_DECORATOR");
		}
	}

	@summary = "Default summary"
	macro viewBody(portletBody = null, portletName = null) {
		var key_portletName = ${portletName};

		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#BODY",
			value1 = ${portletBody});
	}

	@summary = "Default summary"
	macro viewCannotAddPG(portletName = null) {
		if (IsNotVisible(locator1 = "ControlMenuAddPanel#CLOSE_ADD_PANEL")) {
			Click.clickAt(locator1 = "ControlMenu#ADD");
		}

		AssertElementPresent(locator1 = "ControlMenuAddPanel#SIDEBAR_HEADER");

		Navigator.gotoNavTab(navTab = "Widgets");

		WaitForElementPresent(locator1 = "NavBar#APPLICATION_SEARCH_FIELD");

		Type(
			locator1 = "NavBar#APPLICATION_SEARCH_FIELD",
			value1 = ${portletName});

		AssertElementNotPresent(
			key_portletName = ${portletName},
			locator1 = "ControlMenuAddPanel#ADD_PORTLET_LINK");
	}

	@summary = "Default summary"
	macro viewCannotEdit() {
		AssertElementNotPresent(locator1 = "Button#EDIT");
	}

	@summary = "Default summary"
	macro viewCannotPublish() {
		AssertElementNotPresent(locator1 = "Button#PUBLISH");
	}

	@summary = "Default summary"
	macro viewCannotSaveAsDraft() {
		AssertElementNotPresent(locator1 = "Button#SAVE_AS_DRAFT");
	}

	@summary = "Default summary"
	macro viewConfigureSharingPG(checkedAnyWebSiteToggle = null, portletName = null) {
		Portlet.gotoPortletOptions(
			portletName = ${portletName},
			portletOption = "Configuration");

		IFrame.selectConfigurationFrame();

		Navigator.gotoNavItem(navItem = "Sharing");

		if (isSet(checkedAnyWebSiteToggle)) {
			Panel.expandPanel(panel = "Any Website");

			if (${checkedAnyWebSiteToggle} == "true") {
				AssertChecked.assertCheckedNotVisible(
					key_toggleSwitchLabel = "widgetShowAddAppLink",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
			else {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_toggleSwitchLabel = "widgetShowAddAppLink",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}
	}

	@summary = "Default summary"
	macro viewDefaultTitle(portletName = null) {
		AssertElementPresent(
			key_portletName = ${portletName},
			locator1 = "Portlet#SPECIFIC_DEFAULT_TITLE");
	}

	@summary = "Default summary"
	macro viewDuplicatePG(totalPortletCount = null, portletName = null) {
		var i = 0;

		while (${i} != ${totalPortletCount}) {
			var i = ${i} + 1;

			AssertElementPresent(locator1 = "xpath=(//h2[contains(.,'${portletName}')])[${i}]");
		}
	}

	@summary = "Default summary"
	macro viewEmptyMessage(message = null) {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = ${message});
	}

	@summary = "Default summary"
	macro viewNoPermissionPG() {
		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "You do not have the roles required to access this portlet.");
	}

	@summary = "Default summary"
	macro viewNoPortletOptions(menuItem = null) {
		MouseOver.mouseOverNotVisible(locator1 = "Portlet#OPTIONS_ICON");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		MenuItem.viewNotPresent(menuItem = ${menuItem});
	}

	@summary = "Default summary"
	macro viewNoPortletsPresentCP(portlet = null, panel = null, category = null) {
		ApplicationsMenuHelper.openApplicationsMenu();

		Navigator.gotoNavTab(navTab = ${panel});

		AssertElementNotPresent(
			key_category = ${category},
			key_portlet = ${portlet},
			locator1 = "ApplicationsMenu#PORTLET",
			value1 = ${portlet});
	}

	@summary = "Default summary"
	macro viewNoPortletsPresentPG() {
		AssertElementNotPresent(locator1 = "Portlet#PORTLET_CONTENT");
	}

	@summary = "Default summary"
	macro viewNoSpecificPG(portletName = null) {
		AssertElementNotPresent(
			key_portletTitleName = ${portletName},
			locator1 = "Portlet#SPECIFIC_TITLE");
	}

	@summary = "Default summary"
	macro viewPG(portletBody = null, portletName = null) {
		Portlet.viewTitle(portletName = ${portletName});

		if (isSet(portletBody)) {
			Portlet.viewBody(
				portletBody = ${portletBody},
				portletName = ${portletName});
		}
	}

	@summary = "Default summary"
	macro viewPortletBodyNotPresent(portletName = null) {
		AssertElementNotPresent(
			key_portletName = ${portletName},
			locator1 = "Portlet#BODY");
	}

	@summary = "Default summary"
	macro viewPortletCouldNotBeFoundInfo() {
		AssertTextEquals(
			locator1 = "Message#INFO_MAIN_CONTENT",
			value1 = "This portlet could not be found. Please redeploy it or remove it from the page.");
	}

	@summary = "Default summary"
	macro viewPortletOptions(optionsName = null) {
		MouseOver.mouseOverNotVisible(locator1 = "Portlet#OPTIONS_ICON");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		AssertTextEquals(
			key_menuItem = ${optionsName},
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = ${optionsName});
	}

	@summary = "Default summary"
	macro viewPortletOptionsMenulist() {
		MouseOver.mouseOverNotVisible(locator1 = "Portlet#OPTIONS_ICON");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		AssertTextEquals(
			key_menuItem = "Look and Feel Configuration",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Look and Feel Configuration");

		AssertTextEquals(
			key_menuItem = "Configuration",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Configuration");

		AssertTextEquals(
			key_menuItem = "Configuration Templates",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Configuration Templates");

		AssertTextEquals(
			key_menuItem = "Export / Import",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Export / Import");

		AssertTextEquals(
			key_menuItem = "Permissions",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Permissions");

		AssertTextEquals(
			key_menuItem = "Delete",
			locator1 = "MenuItem#ANY_MENU_ITEM",
			value1 = "Delete");
	}

	@summary = "Default summary"
	macro viewPortletPresentPG(portletContent = null) {
		AssertTextEquals.assertPartialText(
			locator1 = "PageEditor#CONTENT_PAGE_WEB_CONTENT_CONTENT",
			value1 = ${portletContent});
	}

	@summary = "Default summary"
	macro viewSpecificPG(pageColumnNumber = null, portletName = null) {
		if (isSet(pageColumnNumber)) {
			AssertTextEquals(
				key_pageColumnNumber = ${pageColumnNumber},
				key_portletName = ${portletName},
				locator1 = "Portlet#PORTLET_TITLE_INSIDE_PAGE_COLUMN",
				value1 = ${portletName});
		}
		else {
			AssertTextEquals(
				key_portletTitleName = ${portletName},
				locator1 = "Portlet#SPECIFIC_TITLE",
				value1 = ${portletName});
		}
	}

	@summary = "Default summary"
	macro viewTitle(portletName = null) {
		var key_portletName = ${portletName};

		AssertTextEquals(
			locator1 = "Portlet#TITLE",
			value1 = ${portletName});
	}

	@summary = "Default summary"
	macro viewUndeployMessage() {
		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#PORTLET_CONTENT",
			value1 = "This portlet could not be found. Please redeploy it or remove it from the page.");
	}

	@summary = "Default summary"
	macro waitForForm() {
		AssertElementNotPresent(locator1 = "//fieldset[@disabled]");
	}

	@summary = "Default summary"
	macro waitForHomePage(pageName = null) {
		WaitForElementPresent(
			key_pageName = ${pageName},
			locator1 = "Home#PAGE");
	}

}