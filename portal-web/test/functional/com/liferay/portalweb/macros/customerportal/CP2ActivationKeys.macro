definition {

	@summary = "Default summary"
	macro _formatCamelCase() {
		var camelCase = StringUtil.replace(${camelCase}, " ", "");

		var camelCase = StringUtil.lowerCaseFirstLetter(${camelCase});

		return ${camelCase};
	}

	@summary = "Default summary"
	macro assertDropdownItemIsDisabled(dropdownItem = null) {
		var key_dropdownItem = ${dropdownItem};

		AssertElementPresent(locator1 = "CP2ActivationKeys#DISABLED_DROPDOWN_ITEM_BUTTON");
	}

	@summary = "Default summary"
	macro assertDropdownItemIsEnabled(dropdownItem = null) {
		var key_dropdownItem = ${dropdownItem};

		AssertElementPresent(locator1 = "CP2ActivationKeys#ENABLED_DROPDOWN_ITEM_BUTTON");
	}

	@summary = "Default summary"
	macro assertDropdownItemIsVisible(dropdownItem = null) {
		var key_dropdownItem = ${dropdownItem};

		AssertVisible(locator1 = "CP2ActivationKeys#DROPDOWN_ITEM_BUTTON");
	}

	@summary = "Default summary"
	macro assertDropdownSelection(option = null) {
		var key_option = ${option};

		AssertVisible(locator1 = "CP2ActivationKeys#DROPDOWN");
	}

	@summary = "Default summary"
	macro assertInfoNewKeyCard(licenseType = null,instanceSize = null,product = null,activationsAvailable = null,subscription = null,version = null) {
		if (isSet(product)) {
			var key_label = "Product";
			var key_value = ${product};

			AssertElementPresent(locator1 = "CP2ActivationKeys#INFO_NEW_KEY_CARD");
		}

		if (isSet(version)) {
			var key_label = "Version";
			var key_value = ${version};

			AssertElementPresent(locator1 = "CP2ActivationKeys#INFO_NEW_KEY_CARD");
		}

		if (isSet(licenseType)) {
			var key_label = "License Type";
			var key_value = ${licenseType};

			AssertElementPresent(locator1 = "CP2ActivationKeys#INFO_NEW_KEY_CARD");
		}

		if (isSet(subscription)) {
			var key_label = "Subscription";
			var key_value = ${subscription};

			AssertElementPresent(locator1 = "CP2ActivationKeys#INFO_NEW_KEY_CARD");
		}

		if (isSet(activationsAvailable)) {
			var key_label = "Key Activations Available";
			var key_value = ${activationsAvailable};

			AssertElementPresent(locator1 = "CP2ActivationKeys#INFO_NEW_KEY_CARD");
		}

		if (isSet(instanceSize)) {
			var key_label = "Instance Size";
			var key_value = ${instanceSize};

			AssertElementPresent(locator1 = "CP2ActivationKeys#INFO_NEW_KEY_CARD");
		}
	}

	@summary = "Default summary"
	macro assertInstructionsTable(textList = null) {
		for (var text : list ${textList}) {
			var key_text = ${text};

			AssertVisible(locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
		}
	}

	@summary = "Default summary"
	macro assertKeyDetailsEnvironmentElements(instanceSize = null,product = null,subscriptionType = null,environmentType = null,version = null) {
		var key_group = "Environment";

		if (isSet(product)) {
			var key_label = "Version";
			var key_value = ${product};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(version)) {
			var key_label = "Version";
			var key_value = ${version};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(environmentType)) {
			var key_label = "Environment Type";
			var key_value = ${environmentType};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(subscriptionType)) {
			var key_label = "Environment Type";
			var key_value = ${subscriptionType};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(instanceSize)) {
			var key_label = "Instance Size";
			var key_value = ${instanceSize};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}
	}

	@summary = "Default summary"
	macro assertKeyDetailsServerElements(hostName = null,macAddress = null,clusterNodes = null,ipAddress = null,keyType = null) {
		var key_group = "Server";

		if (isSet(keyType)) {
			var key_label = "Key Type";
			var key_value = ${keyType};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(hostName)) {
			var key_label = "Host Name";
			var key_value = ${hostName};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(ipAddress)) {
			var key_label = "IP Addresses";
			var key_value = ${ipAddress};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(macAddress)) {
			var key_label = "MAC Addresses";
			var key_value = ${macAddress};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(clusterNodes)) {
			var key_label = "Cluster Nodes";
			var key_value = ${clusterNodes};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}
	}

	@summary = "Default summary"
	macro assertKeyDetailsStatusElements(expiratonDate = null,startDate = null,status = null) {
		var key_group = "Activation Status";

		if (isSet(status)) {
			var key_label = "Status";
			var key_value = ${status};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(startDate)) {
			var key_label = "Start Date";
			var key_value = ${startDate};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}

		if (isSet(expirationDate)) {
			var key_label = "Expiration Date";
			var key_value = ${expiratonDate};

			AssertElementPresent(locator1 = "CP2ActivationKeys#KEY_DETAILS_ELEMENT_VALUES");
		}
	}

	@summary = "Default summary"
	macro assertLicenseQuantity(numberOfLicenses = null,licenseTab = null) {
		var key_licenseTab = CP2ActivationKeys._formatCamelCase(camelCase = ${licenseTab});
		var key_numberOfLicenses = ${numberOfLicenses};

		AssertElementPresent(locator1 = "CP2ActivationKeys#LICENSE_TAB_BUTTON_NUMBER");
	}

	@summary = "Default summary"
	macro assertSelectedFieldText(field = null,option = null) {
		var key_label = ${field};

		AssertTextEquals.assertPartialText(
			locator1 = "CP2ActivationKeys#KEY_COMPONENT_OPTION",
			value1 = ${option});
	}

	@summary = "Default summary"
	macro assertSignatureWithNoKeysIsVisible() {
		AssertVisible(locator1 = "CP2ActivationKeys#SUBSCRIPTION_KEY_DISABLED");
	}

	@summary = "Default summary"
	macro assertTableIsNotVisible() {
		AssertElementNotPresent(locator1 = "CP2ActivationKeys#TABLE");
	}

	@summary = "Default summary"
	macro assertTextAtTable(linePosition = null,text = null,lineColunm = null) {
		var key_linePosition = ${linePosition};
		var key_colunmPosition = ${lineColunm};
		var key_text = ${text};

		AssertTextEquals(
			locator1 = "CP2ActivationKeys#TABLE_ELEMENT_BY_POSITION",
			value1 = ${text});
	}

	@summary = "Default summary"
	macro assertTextButton(text = null) {
		var key_text = ${text};

		AssertVisible(locator1 = "CustomerPortalSite#BUTTON");
	}

	@summary = "Default summary"
	macro assertThatPaginationDoesNotAppear() {
		AssertElementNotPresent(locator1 = "CP2ActivationKeys#PAGINATION_BUTTON");
	}

	@summary = "Default summary"
	macro assertTooltipIsVisible(text = null) {
		var key_text = ${text};

		AssertVisible(locator1 = "CP2ActivationKeys#TOOLTIPS_TEXT");
	}

	@summary = "Default summary"
	macro clickAtDownloadButton(entitlementName = null) {
		var key_entitlementName = ${entitlementName};

		Click(locator1 = "CP2ActivationKeys#TABLES_DOWNLOAD_BUTTON");

		DownloadTempFile();
	}

	@summary = "Default summary"
	macro clickAtDropdownItem(dropdownItem = null) {
		var key_dropdownItem = ${dropdownItem};

		Click(locator1 = "CP2ActivationKeys#DROPDOWN_ITEM_BUTTON");
	}

	@summary = "Default summary"
	macro countTableRows() {
		var key_rowCount = 1;
		var rowCount = 0;
		var hasPagesToCount = "true";

		while (("" == "true")) {
			while ((IsElementPresent(locator1 = "CP2ActivationKeys#KEYS_TABLE_ROWS")) && (maxIterations = "51")) {
				var key_rowCount = ${key_rowCount} + 1;
				var rowCount = ${rowCount} + 1;
			}

			if ((IsElementPresent(locator1 = "CP2ActivationKeys#KEYS_TABLE_ROWS")) && (IsElementNotPresent(locator1 = "CP2ActivationKeys#DISABLED_NEXT_PAGE_BUTTON"))) {
				var key_rowCount = 1;

				CP2ActivationKeys.goToNextTablePage();
			}
			else {
				var hasPagesToCount = "false";
			}
		}

		return ${rowCount};
	}

	@summary = "Default summary"
	macro deactivateExistingKey(environmentName = null) {
		Search.searchCP(searchTerm = ${environmentName});

		CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(key_environmentName = ${environmentName});

		Button.click(button = "Deactivate");

		WaitForElementPresent(
			key_text = "I certify that the instances activated with the selected activation keys have been shut down and that there is no Liferay software installed, deployed, used or executed that is activated with the selected activation keys.",
			locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");

		Button.click(button = "Confirm Deactivate Keys");

		Button.click(button = "Continue");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro environmentDetails(environmentDetails = null,value = null) {
		var key_environmentDetails = ${environmentDetails};

		Type(
			locator1 = "CP2ActivationKeys#ENVIRONMENT_DETAILS",
			value1 = ${value});
	}

	@summary = "Default summary"
	macro exportAllKeyDetails(fileName = null) {
		Click(
			key_text = "Actions",
			locator1 = "Button#ANY");

		Click(
			key_action = "Export All Key Details (csv)",
			locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");

		Alert.viewSuccessMessage();

		CP2FileUtil.assertDownloadedFileIsPresent(downloadedFileName = ${fileName});
	}

	@summary = "Default summary"
	macro filterKeyTable(filterOption = null,filterType = null) {
		var key_filterOption = ${filterOption};

		CustomerPortal.clickAtButton(text = "Filter");

		CP2ActivationKeys.clickAtDropdownItem(key_dropdownItem = ${filterType});

		Check.checkNotVisible(locator1 = "CP2ActivationKeys#FILTER_CHECKBOX");

		CustomerPortal.clickAtButton(text = "Apply");
	}

	@summary = "Default summary"
	macro formatLicenseFileName(fileType = null) {
		if (!(isSet(licenseType))) {
			var licenseType = "";
		}
		else {
			var licenseType = "${licenseType}-";
		}

		if (!(isSet(product))) {
			var product = "";
		}
		else {
			var product = "${product}-";
		}

		if (!(isSet(version))) {
			var version = "";
		}
		else {
			var version = "${version}-";
		}

		if (!(isSet(licenseName))) {
			var licenseName = "";
		}

		if (!(isSet(copy))) {
			var copy = "";
		}
		else {
			var copy = " (${copy})";
		}

		var downloadedFileName = "${licenseType}${product}${version}${licenseName}";

		var downloadedFileName = StringUtil.toLowerCase(${downloadedFileName});

		var downloadedFileName = StringUtil.replace(${downloadedFileName}, " ", "");

		var downloadedFileName = "${downloadedFileName}${copy}.${fileType}";

		echo("Expected file name: ${downloadedFileName}");

		return ${downloadedFileName};
	}

	@summary = "Default summary"
	macro fulfillActivationKey() {
		var key_text = "Add Activation Key";

		if (!(isSet(hostName))) {
			var hostName = "localhost";
		}

		if (!(isSet(ipAddress))) {
			var ipAddress = "192.168.1.1";
		}

		if (!(isSet(macAddress))) {
			var macAddress = "0A-1B-2C-3D-4E-5F";
		}

		if (!(isSet(numberOfActivationKeys))) {
			var numberOfActivationKeys = 1;
		}

		var count = 1;
		var isAddButtonIsPresent = "true";

		while ((${isAddButtonIsPresent} == "true") && (maxIterations = "100")) {
			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = ${hostName},
				field = "Host Name",
				index = ${count});

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = ${ipAddress},
				field = "IP Address",
				index = ${count});

			CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
				content = ${macAddress},
				field = "MAC Address",
				index = ${count});

			if ((IsElementNotPresent(locator1 = "CustomerPortalSite#ANY_ACTIVE_BUTTON")) || (${numberOfActivationKeys} == ${count})) {
				var isAddButtonIsPresent = "false";
			}
			else {
				var count = ${count} + 1;

				CustomerPortal.clickAtButton(text = ${key_text});
			}
		}

		return ${count};
	}

	@summary = "Default summary"
	macro fulfillGenerateActivationKeyTextField(field = null,index = null,content = null) {
		var key_index = 1;

		if (isSet(index)) {
			var key_index = ${index};
		}

		var key_label = ${field};

		Type(
			locator1 = "CP2ActivationKeys#GENERATE_ACTIVATIONS_KEYS_TEXT_FIELD",
			value1 = ${content});
	}

	@summary = "Create a new key inside Customer Portal Site"
	macro fullFlowGenerateKey(keyType = null,option = null,fieldText = null,fieldType = null,hostName = null,numberOfActivationKeys = null) {
		CP2ActivationKeys.generateNewKey();

		CP2ActivationKeys.selectGenerateActivationKeyOptionByField(
			field = ${keyType},
			option = ${option});

		CP2ActivationKeys.selectFirstActiveSubscriptionInput(index = ${optionIndex});

		CustomerPortal.clickAtButton(text = "Next");

		CP2ActivationKeys.fulfillGenerateActivationKeyTextField(
			content = ${fieldText},
			field = ${fieldType});

		CP2ActivationKeys.fulfillActivationKey(
			hostName = ${hostName},
			numberOfActivationKeys = ${numberOfActivationKeys});

		CustomerPortal.clickAtButton(text = "Generate ${numberOfActivationKeys} Key");
	}

	@summary = "Default summary"
	macro generateKeyFlow(product = null,project = null) {
		CustomerPortal.search(searchItem = ${project});

		CustomerPortal.enterOnProject(title = ${project});

		CP2NavigationMenu.goToProductActivation();

		CP2NavigationMenu.clickOnProductButton(product = ${product});

		CP2ActivationKeys.generateNewKey();
	}

	@summary = "Default summary"
	macro generateNewKey() {
		CustomerPortal.clickAtButton(text = "Actions");

		CP2ActivationKeys.clickAtDropdownItem(dropdownItem = "Generate New");

		AssertElementPresent(locator1 = "CP2ActivationKeys#GENERATE_KEY_FORM");
	}

	@summary = "Default summary"
	macro getStartDateTextFromSignature(index = null) {
		var key_index = 1;

		if (isSet(index)) {
			var key_index = ${index};
		}

		WaitForElementPresent(locator1 = "CP2ActivationKeys#SIGNATURE_PERIOD_TEXT");

		var signatureDate = selenium.getText("CP2ActivationKeys#SIGNATURE_PERIOD_TEXT");

		var startDate = StringUtil.substring(${signatureDate}, 0, 12);

		var endsWithWhiteSpace = StringUtil.endsWith(${startDate}, " ");

		if (${endsWithWhiteSpace} == "true") {
			var startDate = StringUtil.substring(${signatureDate}, 0, 11);
		}

		return ${startDate};
	}

	@summary = "Default summary"
	macro gotoKeyDeactivation() {
		CustomerPortal.clickAtButton(text = "Actions");

		CP2ActivationKeys.clickAtDropdownItem(dropdownItem = "Deactivate");

		AssertElementPresent(locator1 = "CP2ActivationKeys#DEACTIVATE_KEY_PAGE");
	}

	@summary = "Default summary"
	macro goToKeyTab(licenseTab = null) {
		var key_licenseTab = CP2ActivationKeys._formatCamelCase(camelCase = ${licenseTab});

		Click(locator1 = "CP2ActivationKeys#LICENSE_TAB_BUTTON");
	}

	@summary = "Default summary"
	macro goToNextTablePage() {
		ScrollWebElementIntoView(locator1 = "CP2ActivationKeys#NEXT_PAGE_BUTTON");

		Click(locator1 = "CP2ActivationKeys#NEXT_PAGE_BUTTON");
	}

	@summary = "Default summary"
	macro putMouseOverElementAtTable(text = null) {
		var key_text = ${text};

		MouseOver(locator1 = "CP2ActivationKeys#TABLE_ELEMENT_BY_TEXT");
	}

	@summary = "Default summary"
	macro putMouseOverStatusElementAtTable(linePosition = null,status = null) {
		var key_linePosition = ${linePosition};
		var key_status = ${status};

		MouseOver(locator1 = "CP2ActivationKeys#TABLE_ELEMENT_BY_STATUS");
	}

	@summary = "Default summary"
	macro selectAllKeysOnPage() {
		Check(locator1 = "CP2ActivationKeys#KEY_CHECKBOX_ALL");
	}

	@summary = "Default summary"
	macro selectClusterNodes(key_option = null) {
		Select(
			locator1 = "CP2ActivationKeys#CLUSTER_NODES",
			value1 = ${key_option});
	}

	@summary = "Default summary"
	macro selectComplimentarySubscriptionTerm() {
		Click(locator1 = "CP2ActivationKeys#COMPLIMENTARY_KEY");
	}

	@summary = "Select the First Active Subscription on the generate new key modal"
	macro selectFirstActiveSubscriptionInput(index = null) {
		if (isSet(index)) {
			var key_position = ${index};

			Click(locator1 = "CP2ActivationKeys#SUBSCRIPTION_CHOICE");
		}
		else {
			var key_index = 1;

			Click(locator1 = "CP2ActivationKeys#SUBSCRIPTION_CHOICE");
		}
	}

	@summary = "Default summary"
	macro selectGenerateActivationKeyOptionByField(field = null,option = null) {
		var key_label = ${field};

		Select(
			locator1 = "CP2ActivationKeys#KEY_COMPONENT_OPTION",
			value1 = ${option});
	}

	@summary = "Default summary"
	macro selectKeyCheckboxByEnvironmentName(environmentName = null) {
		var key_environmentName = ${environmentName};

		Check(locator1 = "CP2ActivationKeys#KEY_CHECKBOX");
	}

	@summary = "Default summary"
	macro selectKeyCheckboxByExpirationDate(date = null,position = null) {
		var key_position = ${position};
		var key_date = ${date};

		Check(locator1 = "CP2ActivationKeys#KEY_CHECKBOX_BY_EXPIRATION_DATE");
	}

	@summary = "Default summary"
	macro selectPaginationQuantity(quantity = null) {
		if (IsElementPresent(locator1 = "CP2ActivationKeys#PAGINATION_BUTTON")) {
			Click(locator1 = "CP2ActivationKeys#PAGINATION_BUTTON");

			AssertVisible(
				key_quantity = ${quantity},
				locator1 = "CP2ActivationKeys#PAGINATION_BUTTON_ITEM");

			Click(
				key_quantity = ${quantity},
				locator1 = "CP2ActivationKeys#PAGINATION_BUTTON_ITEM");
		}
	}

	@summary = "Default summary"
	macro selectSubscription(position = null) {
		Click(
			key_position = ${position},
			locator1 = "CP2ActivationKeys#SUBSCRIPTION_CHOICE");
	}

	@summary = "Default summary"
	macro typeEnvironmentDetailsFields() {
		CP2ActivationKeys.environmentDetails(
			environmentDetails = "name",
			value = "Liferay Test");

		CP2ActivationKeys.environmentDetails(
			environmentDetails = "description",
			value = "Liferay Dev Environmet");

		CP2ActivationKeys.environmentDetails(
			environmentDetails = "host",
			value = "Host Name");

		CP2ActivationKeys.environmentDetails(
			environmentDetails = "ipAddresses",
			value = "1.1.1.1");

		CP2ActivationKeys.environmentDetails(
			environmentDetails = "macAddresses",
			value = "20-20-20-20-20-20");
	}

	@summary = "Default summary"
	macro viewActivationKeyDetails(key_environmentName = null) {
		Search.searchCP(searchTerm = ${key_environmentName});

		Click(
			key_text = ${key_environmentName},
			locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");

		AssertElementPresent(
			key_environmentName = ${key_environmentName},
			locator1 = "CP2ActivationKeys#KEY_DETAILS_MODAL");
	}

}