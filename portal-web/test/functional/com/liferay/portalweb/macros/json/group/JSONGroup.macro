definition {

	@summary = "Default summary"
	macro assignGroupRoleToUser(groupName = null, roleTitle = null, userEmailAddress = null, parentGroupName = null) {
		Variables.assertDefined(parameterList = "${roleTitle},${userEmailAddress}");

		if (!(isSet(groupId))) {
			var groupId = JSONGroupSetter.setGroupId(
				groupName = ${groupName},
				parentGroupName = ${parentGroupName});
		}

		var roleId = JSONRoleAPI._getRoleIdByName(name = ${roleTitle});
		var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = ${userEmailAddress});

		JSONGroupAPI._assignGroupRoleToUser(
			groupId = ${groupId},
			roleId = ${roleId},
			userId = ${userId});
	}

	@summary = "Default summary"
	macro assignGroupRoleToUserGroup(groupName = null, roleTitle = null, userGroupName = null, parentGroupName = null) {
		Variables.assertDefined(parameterList = "${groupName},${roleTitle},${userGroupName}");

		var groupId = JSONGroupSetter.setGroupId(
			groupName = ${groupName},
			parentGroupName = ${parentGroupName});
		var roleId = JSONRoleAPI._getRoleIdByName(name = ${roleTitle});
		var userGroupId = JSONUserGroupAPI._getUserGroupIdByName(userGroupName = ${userGroupName});

		JSONGroupAPI._assignGroupRoleToUserGroup(
			groupId = ${groupId},
			roleId = ${roleId},
			userGroupId = ${userGroupId});
	}

	@summary = "Default summary"
	macro assignOrganizationToGroup(groupName = null, organizationName = null, parentGroupName = null) {
		Variables.assertDefined(parameterList = ${organizationName});

		if (!(isSet(groupId))) {
			var groupId = JSONGroupSetter.setGroupId(
				groupName = ${groupName},
				parentGroupName = ${parentGroupName});
		}

		var organizationId = JSONOrganization.getOrganizationIdByName(organizationName = ${organizationName});

		JSONGroupAPI._assignOrganizationToGroup(
			groupId = ${groupId},
			organizationId = ${organizationId});
	}

	@summary = "Default summary"
	macro assignUserGroupToGroup(groupName = null, userGroupName = null) {
		Variables.assertDefined(parameterList = ${userGroupName});

		if (!(isSet(groupId))) {
			var groupId = JSONGroupSetter.setGroupId(groupName = ${groupName});
		}

		var userGroupId = JSONUserGroupAPI._getUserGroupIdByName(userGroupName = ${userGroupName});

		JSONGroupAPI._assignUserGroupToGroup(
			groupId = ${groupId},
			userGroupId = ${userGroupId});
	}

	@summary = "Default summary"
	macro assignUserToGroup(groupName = null, userEmailAddress = null, parentGroupName = null) {
		Variables.assertDefined(parameterList = "${groupName},${userEmailAddress}");

		var groupId = JSONGroupSetter.setGroupId(
			groupName = ${groupName},
			parentGroupName = ${parentGroupName});
		var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = ${userEmailAddress});

		JSONGroupAPI._assignUserToGroup(
			groupId = ${groupId},
			userId = ${userId});
	}

	@summary = "Default summary"
	macro deleteGroupByName(groupName = null, portalURL = null) {
		Variables.assertDefined(parameterList = ${groupName});

		var groupId = JSONGroupSetter.setGroupId(
			groupName = ${groupName},
			portalURL = ${portalURL});

		JSONGroupAPI._deleteGroup(
			groupId = ${groupId},
			portalURL = ${portalURL});
	}

	@summary = "Default summary"
	macro tearDownNonDefaultGroups() {
		var nameCurrentValues = JSONGroupAPI._getNameCurrentValues();

		for (var nameCurrentValue : list ${nameCurrentValues}) {
			if ((${nameCurrentValue} != "Global") && (${nameCurrentValue} != "Guest")) {
				JSONGroup.deleteGroupByName(groupName = ${nameCurrentValue});
			}
		}
	}

}