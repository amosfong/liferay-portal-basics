definition {

	@description = "Create a page or child page to an existing site template."
	@summary = "Default summary"
	macro addLayoutToSiteTemplate(groupName = null, parentLayoutName = null, layoutName = null) {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		JSONLayout.addPrivateLayout(
			groupName = ${groupName},
			layoutName = ${layoutName},
			parentLayoutName = ${parentLayoutName},
			site = "false");
	}

	@summary = "Default summary"
	macro addSiteFromSiteTemplate(groupName = null, siteTemplateName = null) {
		Variables.assertDefined(parameterList = "${groupName},${siteTemplateName}");

		var privateLayout = JSONLayoutSetter.setPrivateLayout(privateLayout = ${privateLayout});
		var layoutSetPrototypeUuid = JSONSiteTemplateAPI._getSiteTemplateUuidByName(siteTemplateName = ${siteTemplateName});

		HeadlessSite.addSite(siteName = ${groupName});

		var groupId = JSONGroupSetter.setGroupId(groupName = ${groupName});

		JSONSiteTemplateAPI._applyTemplateToSite(
			groupId = ${groupId},
			layoutSetPrototypeUuid = ${layoutSetPrototypeUuid},
			privateLayout = ${privateLayout});
	}

	@summary = "Default summary"
	macro addSiteTemplate(siteTemplateName = null) {
		Variables.assertDefined(parameterList = ${siteTemplateName});

		var description = JSONSiteTemplateSetter.setTemplateDescription(description = ${description});
		var active = JSONSiteTemplateSetter.setTemplateStatus(active = ${active});
		var layoutsUpdateable = JSONSiteTemplateSetter.setTemplateIsUpdateable(layoutsUpdateable = ${layoutsUpdateable});
		var readyForPropagation = JSONSiteTemplateSetter.setTemplatePropagation(readyForPropagation = ${readyForPropagation});

		JSONSiteTemplateAPI._addSiteTemplateByName(
			active = ${active},
			description = ${description},
			layoutsUpdateable = ${layoutsUpdateable},
			readyForPropagation = ${readyForPropagation},
			siteTemplateName = ${siteTemplateName});
	}

	@summary = "Default summary"
	macro deleteNonDefaultTemplates() {
		var companyId = JSONCompany.getCompanyId();

		JSONSiteTemplateAPI._deleteNonDefaultSiteTemplates(companyId = ${companyId});
	}

	@summary = "Default summary"
	macro deleteSiteTemplateByName(companyId = null, siteTemplateName = null) {
		Variables.assertDefined(parameterList = ${siteTemplateName});

		var layoutSetPrototypeId = JSONSiteTemplateAPI._getSiteTemplateIdByName(companyId = ${companyId});

		JSONSiteTemplateAPI._deleteSiteTemplateById(layoutSetPrototypeId = ${layoutSetPrototypeId});
	}

	@summary = "Default summary"
	macro getPlid(portalURL = null, siteTemplateName = null, layoutName = null) {
		Variables.assertDefined(parameterList = "${layoutName},${siteTemplateName}");

		if (!(isSet(site))) {
			var site = "false";
		}

		var layoutSetPrototypeId = JSONSiteTemplateAPI._getSiteTemplateIdByName(siteTemplateName = ${siteTemplateName});

		var groupId = ${layoutSetPrototypeId} + 1;

		if (!(isSet(privateLayout))) {
			var privateLayout = "true";
		}

		JSONLayoutAPI._getPlidByName(
			groupId = ${groupId},
			layoutName = ${layoutName},
			portalURL = ${portalURL},
			privateLayout = ${privateLayout});
	}

	@summary = "Default summary"
	macro getSiteTemplateIdByName(siteTemplateName = null) {
		Variables.assertDefined(parameterList = ${siteTemplateName});

		var layoutSetPrototypeId = JSONSiteTemplateAPI._getSiteTemplateIdByName(siteTemplateName = ${siteTemplateName});

		var siteTemplateID = "template-${layoutSetPrototypeId}";

		echo("siteTemplateID: ${siteTemplateID}");

		return ${siteTemplateID};
	}

}