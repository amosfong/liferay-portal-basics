definition {

	@summary = "Default summary"
	macro acceptRequest(requestsTitle = null) {
		var key_requestsTitle = ${requestsTitle};

		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = ${requestsTitle});

		AssertClick(
			locator1 = "Button#CONFIRM",
			value1 = "Confirm");
	}

	@summary = "Default summary"
	macro clickOnTheNotificationTitle(key_notificationsTitle = null) {
		AssertClick(
			locator1 = "Notifications#NOTIFICATIONS_TITLE_TEXT",
			value1 = ${key_notificationsTitle});
	}

	@summary = "Default summary"
	macro deleteAllNotifications() {
		Refresh();

		if (IsElementPresent(locator1 = "Notifications#PROFILE_BADGE_COUNT")) {
			Navigator.gotoNotifications();

			PortletEntry.selectAll();

			ClickNoError(
				key_text = "trash",
				locator1 = "Notifications#DELETE");

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro deleteNotification(contentBody = null) {
		var key_contentBody = ${contentBody};

		Click(locator1 = "Notifications#NOTIFICATIONS_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(locator1 = "Notifications#NOTIFICATIONS_CONTENT");
	}

	@summary = "Default summary"
	macro goToFilterValues(filterValues = null) {
		ManagementBar.setFilterAndOrder(filterBy = ${filterValues});
	}

	@summary = "Default summary"
	macro goToNotificationQueueAdmin() {
		Navigator.openSpecificURL(url = "/group/guest/~/control_panel/manage?p_p_id=com_liferay_notification_web_internal_portlet_NotificationQueueEntriesPortlet");
	}

	@summary = "Default summary"
	macro gotoNotifications() {
		if (IsElementPresent(locator1 = "Notifications#USER_BAR_BADGE_COUNT")) {
			Click(locator1 = "Notifications#USER_BAR_BADGE_COUNT");
		}

		if (IsElementPresent(locator1 = "Notifications#PROFILE_BADGE_COUNT")) {
			Click(locator1 = "Notifications#PROFILE_BADGE_COUNT");
		}

		if (IsElementPresent(locator1 = "Notifications#MY_ACCOUNT_BADGE_COUNT")) {
			Click(locator1 = "Notifications#MY_ACCOUNT_BADGE_COUNT");
		}

		if (IsElementPresent(locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT")) {
			Click(locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT");
		}

		if (IsElementPresent(locator1 = "Notifications#USER_NAVIGATION_BAR_BADGE_COUNT")) {
			Click(locator1 = "Notifications#USER_NAVIGATION_BAR_BADGE_COUNT");
		}
	}

	@summary = "Default summary"
	macro goToNotificationTemplateAdmin() {
		Navigator.openSpecificURL(url = "/group/guest/~/control_panel/manage?p_p_id=com_liferay_notification_web_internal_portlet_NotificationTemplatesPortlet");
	}

	@summary = "Default summary"
	macro markAsReadViaManagementBar(notificationsTitle = null) {
		if (isSet(selectAll)) {
			PortletEntry.selectAll();
		}
		else {
			LexiconEntry.selectEntry(key_rowEntry = ${notificationsTitle});
		}

		Click(
			key_text = "envelope-open",
			locator1 = "ManagementBar#ANY_ICON");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro markAsUnreadViaManagementBar(notificationsTitle = null) {
		if (isSet(selectAll)) {
			PortletEntry.selectAll();
		}
		else {
			LexiconEntry.selectEntry(key_rowEntry = ${notificationsTitle});
		}

		Click(
			key_text = "envelope-closed",
			locator1 = "ManagementBar#ANY_ICON");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro navigateToContent(contentBody = null) {
		var key_contentBody = ${contentBody};

		AssertClick.assertPartialTextClickAt(
			locator1 = "Notifications#NOTIFICATIONS_CONTENT",
			value1 = ${contentBody});
	}

	@summary = "Default summary"
	macro removeNotificationsViaManagementBar(notificationsTitle = null) {
		if (isSet(selectAll)) {
			PortletEntry.selectAll();
		}
		else {
			LexiconEntry.selectEntry(key_rowEntry = ${notificationsTitle});
		}

		Click(
			key_text = "times-circle",
			locator1 = "ManagementBar#ANY_ICON");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro tearDownUnreadNotifications(contentBody = null) {
		Navigator.gotoNotifications();

		var key_contentBody = ${contentBody};

		if (IsElementPresent(locator1 = "Notifications#NOTIFICATIONS_CONTENT")) {
			AssertClick(
				locator1 = "Notifications#MARK_AS_READ",
				value1 = "Mark as Read");
		}
	}

	@summary = "Default summary"
	macro viewBadgeCount(notificationCount = null) {
		if (IsElementPresent(locator1 = "Notifications#USER_BAR_BADGE_COUNT")) {
			AssertTextEquals(
				locator1 = "Notifications#USER_BAR_BADGE_COUNT",
				value1 = ${notificationCount});
		}
		else if (IsElementPresent(locator1 = "Notifications#PROFILE_BADGE_COUNT")) {
			AssertTextEquals(
				locator1 = "Notifications#PROFILE_BADGE_COUNT",
				value1 = ${notificationCount});
		}
		else if (IsElementPresent(locator1 = "Notifications#MY_ACCOUNT_BADGE_COUNT")) {
			AssertTextEquals(
				locator1 = "Notifications#MY_ACCOUNT_BADGE_COUNT",
				value1 = ${notificationCount});
		}
		else if (IsElementPresent(locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT")) {
			if (IsElementPresent.isVisible(locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT")) {
				AssertTextEquals(
					locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT",
					value1 = ${notificationCount});
			}
		}
		else if (IsElementPresent(locator1 = "Notifications#USER_NAVIGATION_BAR_BADGE_COUNT")) {
			AssertTextEquals(
				locator1 = "Notifications#USER_NAVIGATION_BAR_BADGE_COUNT",
				value1 = ${notificationCount});
		}
		else if (${notificationCount} == 0) {
			AssertElementNotPresent(locator1 = "Notifications#PROFILE_BADGE_COUNT");
		}
		else {
			fail("FAIL. No notification was found.");
		}
	}

	@summary = "Default summary"
	macro viewDefaultContent() {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "You do not have any notifications.");
	}

	@summary = "Default summary"
	macro viewDeletedContent(contentBody = null) {
		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = "Notification no longer applies.");

		AssertTextEquals(
			key_contentBody = ${contentBody},
			locator1 = "Notifications#NOTIFICATIONS_CONTENT",
			value1 = ${contentBody});

		if (isSet(noOptions)) {
			AssertElementNotPresent(
				key_contentBody = ${contentBody},
				locator1 = "Notifications#NOTIFICATIONS_VERTICAL_ELLIPSIS");
		}
	}

	@summary = "Default summary"
	macro viewExpiredContent(contentBody = null) {
		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = "A Document has expired.");

		AssertTextEquals(
			key_contentBody = ${contentBody},
			locator1 = "Notifications#NOTIFICATIONS_CONTENT",
			value1 = ${contentBody});
	}

	@summary = "Default summary"
	macro viewNewComment(fragmentName = null, user = null, contentBody = null, content = null) {
		var assetType = StringUtil.lowerCase(${assetType});
		var key_contentBody = ${contentBody};

		if (isSet(fragmentName)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Notifications#NOTIFICATIONS_TITLE",
				value1 = "${user} added a new comment to ${fragmentName}");

			AssertTextEquals.assertPartialText(
				locator1 = "Notifications#NOTIFICATIONS_TITLE",
				value1 = "in the \"Content Page Name\" page.");
		}
		else if (isSet(mentioned)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Notifications#NOTIFICATIONS_TITLE",
				value1 = "${user} mentioned you in a comment in a ${assetType}.");
		}
		else {
			AssertTextEquals(
				locator1 = "Notifications#NOTIFICATIONS_TITLE",
				value1 = "${user} added a new ${assetType} to ${content}.");
		}

		AssertTextEquals.assertPartialText(
			locator1 = "Notifications#NOTIFICATIONS_CONTENT",
			value1 = ${contentBody});

		if (isSet(viewEllipsisIcon)) {
			AssertVisible(locator1 = "Notifications#NOTIFICATIONS_VERTICAL_ELLIPSIS");
		}
	}

	@summary = "Default summary"
	macro viewNewContent(user = null, contentBody = null) {
		var assetType = StringUtil.lowerCase(${assetType});
		var key_contentBody = ${contentBody};

		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = "${user} added a new ${assetType}.");

		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_CONTENT",
			value1 = ${contentBody});
	}

	@summary = "Default summary"
	macro viewNewSharedContent(ownerName = null, contentSharingPermission = null, contentTitle = null) {
		var key_contentSharingPermission = ${contentSharingPermission};
		var key_contentTitle = ${contentTitle};
		var key_ownerName = ${ownerName};

		if (isSet(specialCharacter)) {
			AssertTextEquals(
				locator1 = "Sharing#NOTIFICATIONS_TITLE_SPECIAL",
				value1 = "${ownerName} has shared ${contentTitle} with you for ${contentSharingPermission}.");
		}
		else {
			AssertTextEquals(
				locator1 = "Sharing#NOTIFICATIONS_TITLE",
				value1 = "${ownerName} has shared ${contentTitle} with you for ${contentSharingPermission}.");
		}

		if (isSet(openNotification)) {
			AssertClick(
				locator1 = "Sharing#NOTIFICATIONS_TITLE",
				value1 = "${ownerName} has shared ${contentTitle} with you for ${contentSharingPermission}.");
		}
	}

	@summary = "Default summary"
	macro viewNoNotificationEntry() {
		AssertElementNotPresent(locator1 = "Notifications#USER_BAR_BADGE_COUNT");

		AssertElementNotPresent(locator1 = "Notifications#NOTIFICATIONS_CONTENT_GENERIC");

		AssertElementNotPresent(locator1 = "Notifications#NOTIFICATIONS_TITLE");
	}

	@summary = "Default summary"
	macro viewNoNotifications(activePanel = null) {
		if (${activePanel} == "Profile") {
			AssertElementNotPresent(locator1 = "Notifications#PROFILE_BADGE_COUNT");
		}

		if (${activePanel} == "My Account") {
			AssertElementNotPresent(locator1 = "Notifications#MY_ACCOUNT_BADGE_COUNT");
		}

		if (${activePanel} == "Notifications") {
			AssertElementNotPresent(locator1 = "Notifications#NOTIFICATIONS_BADGE_COUNT");
		}
	}

	@summary = "Default summary"
	macro viewNoPermissions(notificationCount = null, contentBody = null) {
		Notifications.viewBadgeCount(notificationCount = ${notificationCount});

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = ${contentBody});

		AssertTextPresent(value1 = "You do not have permission to access the requested resource.");
	}

	@summary = "Default summary"
	macro viewNoRequest() {
		AssertElementNotPresent(locator1 = "Button#CONFIRM");

		AssertElementNotPresent(locator1 = "Button#IGNORE");
	}

	@summary = "Default summary"
	macro viewRequest(requestsTitle = null) {
		var key_navLinkOption = "Requests List";

		Click(locator1 = "Notifications#REQUESTS_LIST_TAB");

		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = ${requestsTitle});
	}

	@summary = "Default summary"
	macro viewReviewContent(contentBody = null) {
		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = "A Document needs review.");

		AssertTextEquals(
			key_contentBody = ${contentBody},
			locator1 = "Notifications#NOTIFICATIONS_CONTENT",
			value1 = ${contentBody});
	}

	@summary = "Default summary"
	macro viewSpecificNotificationDetails(notificationsTitle = null, contentBody = null) {
		AssertTextEquals(
			key_notificationsTitle = ${notificationsTitle},
			locator1 = "Notifications#NOTIFICATIONS_TITLE_SPECIFIC",
			value1 = "${notificationsTitle}.");

		AssertTextEquals(
			key_notificationsTitle = ${notificationsTitle},
			locator1 = "Notifications#NOTIFICATIONS_CONTENT_SPECIFIC",
			value1 = ${contentBody});
	}

	@summary = "Default summary"
	macro viewSuccessfulPublication(publicationType = null, contentBody = null, portletName = null) {
		var key_contentBody = ${contentBody};
		var key_portletName = ${portletName};
		var key_publicationType = ${publicationType};

		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = "${portletName} ${publicationType} ${contentBody}");
	}

	@summary = "Default summary"
	macro viewUpdatedContent(user = null, contentBody = null) {
		var assetType = StringUtil.lowerCase(${assetType});
		var key_contentBody = ${contentBody};

		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_TITLE",
			value1 = "${user} updated a ${assetType}.");

		AssertTextEquals(
			locator1 = "Notifications#NOTIFICATIONS_CONTENT",
			value1 = ${contentBody});
	}

	@summary = "Default summary"
	macro waitForNotificationFlexibly(flexibleRefreshingTime = null) {
		var i = 0;

		while ((IsElementNotPresent(locator1 = "Notifications#PROFILE_BADGE_COUNT")) && (${i} != 5)) {
			var i = ${i} + 1;

			// We need to wait for the system time to pass by some time in order to verify the user is notified. There is currently no easy way to manipulate the system time in CI for automation. See LPS-157957.

			Pause(value1 = ${flexibleRefreshingTime});

			Refresh();
		}
	}

}