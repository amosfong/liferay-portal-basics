definition {

	@summary = "Default summary"
	macro enableMetal() {
		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Forms",
			configurationName = "Forms",
			configurationScope = "Site Scope");

		SystemSettings.saveConfiguration();

		SystemSettings.resetConfiguration();

		Click(locator1 = "Checkbox#ENABLE_EXPERIMENTAL_INTERFACE");

		SystemSettings.saveConfiguration();
	}

	@summary = "Default summary"
	macro getDependenciesDirPath(fileName = null, filePath = null) {
		var projectDir = PropsUtil.get("project.dir");
		var testBaseDir = PropsUtil.get("test.base.dir.name");
		var testDependenciesDir = PropsUtil.get("test.dependencies.dir.name");
		var testName = selenium.getTestName();

		var testName = StringUtil.extractLast(${testName}, ".");

		var testName = StringUtil.extractFirst(${testName}, "#");

		var testFileName = StringUtil.split("**/${testName}.testcase");

		var testFilePaths = FileUtil.getIncludedResourceURLs(${testFileName}, "${projectDir}/portal-web");

		var testFilePaths = StringUtil.valueOf(${testFilePaths});

		if (${testFilePaths} == "[]") {
			var testFilePaths = FileUtil.getIncludedResourceURLs(${testFileName}, "${projectDir}/modules");

			var testFilePaths = StringUtil.valueOf(${testFilePaths});
		}

		var testFilePath = RegexUtil.replace(${testFilePaths}, "\[(.*)\]", 1);

		var testFilePath = StringUtil.extractLast(${testFilePath}, "file:");
		var os = OSDetector.isWindows();

		if ((${os} == "true") && contains(${testFilePath}, ":")) {
			var testFilePath = StringUtil.replaceFirst(${testFilePath}, "/", "");
		}

		var testFileParentDir = StringUtil.extractFirst(${testFilePath}, "${testName}.testcase");

		var dependenciesDir = "${testFileParentDir}${testDependenciesDir}";

		if (isSet(filePath)) {
			var dependenciesDir = "${dependenciesDir}/${filePath}";
		}

		var dependencyFilePath = "${dependenciesDir}/${fileName}";

		var fileExists = FileUtil.exists(${dependencyFilePath});

		if (${fileExists} == "false") {
			var testBaseDirEndsWith = StringUtil.endsWith(${testBaseDir}, "/");

			if (${testBaseDirEndsWith} == "false") {
				var testBaseDir = "${testBaseDir}/";
			}

			var dependencyFilePath = "${testBaseDir}${testDependenciesDir}/${fileName}";

			var globalFileExists = FileUtil.exists(${dependencyFilePath});

			if (${globalFileExists} == "false") {
				fail("Unable to find dependency file at ${dependenciesDir}/${fileName} or ${dependencyFilePath}");
			}
		}

		return ${dependencyFilePath};
	}

	@summary = "Default summary"
	macro getDownloadedTempFileName(fileNamePattern = null) {
		var tempDir = PropsUtil.get("output.dir.name");
		var pattern = StringUtil.split("**/${fileNamePattern}");

		var filePath = FileUtil.getIncludedResourceURLs(${pattern}, ${tempDir});

		var filePath = StringUtil.valueOf(${filePath});

		var filePath = RegexUtil.replace(${filePath}, "\[(.*)\]", 1);

		var filePath = StringUtil.replace(${filePath}, "file:/", "");

		var fileName = FileUtil.getFileName(${filePath});

		return ${fileName};
	}

	@summary = "Default summary"
	macro getFileContent(fileName = null) {
		var dependencyFilePath = TestCase.getDependenciesDirPath(fileName = ${fileName});

		var fileContent = FileUtil.read(${dependencyFilePath});

		return ${fileContent};
	}

	@summary = "Default summary"
	macro getSiteName(siteName = null) {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if ((${siteName} == "Liferay") || !(isSet(siteName))) {
			if (${testLiferayVirtualInstance} == "true") {
				var portalURL = JSONCompany.getPortalURL();

				var portalURL = Regex.removeHTTP(url = ${portalURL});

				var portalURL = Regex.removePortNumber(url = ${portalURL});

				return ${portalURL};
			}
			else {
				var testRunEnvironment = PropsUtil.get("test.run.environment");

				if (${testRunEnvironment} == "EE") {
					return "Liferay DXP";
				}
				else {
					return "Liferay";
				}
			}
		}
		else {
			return ${siteName};
		}
	}

	@summary = "Default summary"
	macro getTempFileContent(fileName = null) {
		var tempDir = PropsUtil.get("output.dir.name");

		var tempFile = "${tempDir}/${fileName}";

		var tempFileExists = FileUtil.exists(${tempFile});

		if (${tempFileExists} == "true") {
			echo("Fetching ${fileName} content.");
		}
		else {
			fail("Temp file not found at ${tempFile}");
		}

		var fileContent = FileUtil.read(${tempFile});

		return ${fileContent};
	}

	@summary = "Default summary"
	macro getTestName() {
		var testName = PropsUtil.get("test.name");

		var testName = RegexUtil.replace(${testName}, "[^\.]*\.(.*)", 1);

		return ${testName};
	}

	@summary = "Default summary"
	macro setUpCustomPortalInstance() {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			var portalURL = JSONCompany.getPortalURL();

			var portalURL = StringUtil.replace(${portalURL}, "http://", "");

			var portalInstanceId = StringUtil.replace(${portalURL}, ":8080", "");

			HeadlessPortalInstanceAPI.deletePortalInstance(portalInstanceId = ${portalInstanceId});

			SignIn.signInPortalInstanceSetUp();
		}
	}

	@summary = "Default summary"
	macro setUpPortalInstance(authenticationMethod = null) {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			HeadlessPortalInstanceAPI.cleanAllPortalInstances(authenticationMethod = ${authenticationMethod});

			SignIn.signInPortalInstanceSetUp();
		}
	}

	@summary = "Default summary"
	macro setUpPortalInstanceNoSelenium(authenticationMethod = null) {
		HeadlessPortalInstanceAPI.cleanAllPortalInstances(authenticationMethod = ${authenticationMethod});

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			SignIn.signInPortalInstanceSetUp();
		}
	}

	@summary = "Type password into locator"
	macro typePassword(password) {
		Type.typePause(
			locator1 = "TextInput#PASSWORD",
			value1 = ${password});
	}

	@summary = "Default summary"
	macro updatePortalProperties(newProperty = null, oldProperty = null) {
		if (isSet(oldProperty)) {
			AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dupdate.properties=${newProperty} -Dupdate.properties.original=${oldProperty}");
		}
		else {
			AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=${newProperty}");
		}
	}

}