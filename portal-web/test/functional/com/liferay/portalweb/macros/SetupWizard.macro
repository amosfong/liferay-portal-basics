definition {

	@summary = "Configure the Administrator User"
	macro configureAdministratorUserPG(administratorEmail = null, administratorFirstName = null, administratorLastName = null) {
		Type(
			locator1 = "TextInput#FIRST_NAME",
			value1 = ${administratorFirstName});

		Type(
			locator1 = "TextInput#LAST_NAME",
			value1 = ${administratorLastName});

		Type(
			locator1 = "TextInput#EMAIL",
			value1 = ${administratorEmail});
	}

	@summary = "Configure the Database"
	macro configureDatabasePG(databaseType = null, databaseName = null, databasePassword = null, jdbcDriverClassName = null, databaseUserName = null) {
		if (IsElementNotPresent(locator1 = "SetupWizard#DATABASE_CHANGE_USE_CONFIGURED_DATABASE_LINK")) {
			AssertClick(
				locator1 = "SetupWizard#DATABASE_CHANGE_LINK",
				value1 = "(Change)");
		}

		if (isSet(databaseName)) {
			var originalDatabaseName = PropsUtil.get("database.mysql.schema");

			var jdbcURL = StringUtil.replace(${jdbcURL}, ${originalDatabaseName}, ${databaseName});
		}

		Select(
			locator1 = "SetupWizard#DATABASE_CHANGE_DATABASE_TYPE_SELECT",
			value1 = ${databaseType});

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_URL_FIELD",
			value1 = ${jdbcURL});

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_DRIVER_CLASS_NAME_FIELD",
			value1 = ${jdbcDriverClassName});

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_USER_NAME_FIELD",
			value1 = ${databaseUserName});

		Type(
			locator1 = "SetupWizard#DATABASE_CHANGE_PASSWORD_FIELD",
			value1 = ${databasePassword});
	}

	@summary = "Configure the default language"
	macro configureDefaultLanguagePG(defaultLanguage = null) {
		Select(
			locator1 = "SetupWizard#DEFAULT_LANGUAGE",
			value1 = ${defaultLanguage});
	}

	@summary = "Configure the portal setup wizard with default values"
	macro configureDefaultPG(base_branch = null, virtualHostsURL = null, newPassword = null) {
		SetupWizard.viewDefaultPortalNamePG();

		SetupWizard.viewDefaultAdministratorUserPG();

		Type(
			locator1 = "TextInput#EMAIL",
			value1 = "test@liferay.com");

		SetupWizard.viewDefaultDatabasePG();

		SetupWizard.finishConfigurationPG();

		SetupWizard.viewConfigurationSavedPG();

		Portlet.shutdownServer();

		Portlet.startServer(
			base_branch = ${base_branch},
			deleteLiferayHome = "false");

		if (isSet(virtualHostsURL)) {
			Navigator.openSpecificURL(url = ${virtualHostsURL});
		}
		else {
			Navigator.openURL();
		}

		User.acceptEndUserLicenseAgreement();

		User.resetPassword(newPassword = ${newPassword});

		User.answerPasswordReminder();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		Click(locator1 = "Button#DONE");

		User.viewLoggedInPG();
	}

	@summary = "Configure the portal setup wizard"
	macro configurePG(base_branch = null, databaseName = null, addSampleData = null, virtualHostsURL = null, administratorFirstName = null, newPassword = null, administratorLastName = null, jdbcDriverClassName = null, databaseUserName = null, databaseType = null, portalName = null, administratorEmail = null, jdbcURL = null, databasePassword = null) {
		if (isSet(portalName)) {
			SetupWizard.configurePortalNamePG(portalName = ${portalName});
		}
		else {
			SetupWizard.viewDefaultPortalNamePG();
		}

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = ${administratorEmail},
			administratorFirstName = ${administratorFirstName},
			administratorLastName = ${administratorLastName});

		SetupWizard.configureDatabasePG(
			databaseName = ${databaseName},
			databasePassword = ${databasePassword},
			databaseType = ${databaseType},
			databaseUserName = ${databaseUserName},
			jdbcDriverClassName = ${jdbcDriverClassName},
			jdbcURL = ${jdbcURL});

		SetupWizard.configureSampleDataPG(addSampleData = ${addSampleData});

		SetupWizard.finishConfigurationPG();

		SetupWizard.viewConfigurationSavedPG();

		Portlet.shutdownServer();

		Portlet.startServer(
			base_branch = ${base_branch},
			deleteLiferayHome = "false");

		SetupWizard.viewConfiguredDatabaseInConsole(databaseType = ${databaseType});

		Refresh();

		User.acceptEndUserLicenseAgreement();

		User.resetPassword(newPassword = ${newPassword});

		User.answerPasswordReminder();

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

		var testRunEnvironment = PropsUtil.get("test.run.environment");

		if (IsElementPresent(locator1 = "Button#DONE")) {
			Click(locator1 = "Button#DONE");
		}

		if (isSet(virtualHostsURL)) {
			Navigator.openSpecificURL(url = ${virtualHostsURL});
		}
		else {
			Navigator.openURL();
		}

		User.viewLoggedInPG();
	}

	@summary = "Configure the portal name"
	macro configurePortalNamePG(portalName = null) {
		Type(
			locator1 = "TextInput#PORTAL_NAME",
			value1 = ${portalName});
	}

	@summary = "Configure the Sample Data"
	macro configureSampleDataPG(addSampleData = null) {
		if (IsElementNotPresent(locator1 = "SetupWizard#DATABASE_CHANGE_USE_CONFIGURED_DATABASE_LINK")) {
			AssertClick(
				locator1 = "SetupWizard#DATABASE_CHANGE_LINK",
				value1 = "(Change)");
		}

		if (${addSampleData} == "true") {
			Check(locator1 = "Checkbox#ADD_SAMPLE_DATA");
		}

		if (${addSampleData} == "false") {
			Uncheck(locator1 = "Checkbox#ADD_SAMPLE_DATA");
		}
	}

	@summary = "Finish the configuration"
	macro finishConfigurationPG() {
		AssertClick(
			locator1 = "Button#FINISH_CONFIGURATION",
			value1 = "Finish Configuration");
	}

	@summary = "Assert the configuration was saved"
	macro viewConfigurationSavedPG(localization = null) {
		if (isSet(localization) && (${localization} == "ES")) {
			Alert.viewSuccessMessageText(successMessage = "La configuración fue guardada con éxito.");

			AssertTextEquals.assertPartialText(
				locator1 = "SetupWizard#CONFIGURATION_SAVE_MESSAGE",
				value1 = "Se ha guardado la configuración en");

			AssertTextEquals.assertPartialText(
				locator1 = "SetupWizard#CONFIGURATION_SAVE_LOCATION",
				value1 = "portal-setup-wizard.properties");

			Alert.viewInfoMessageSpecific(infoMessage = "Los cambios surtirán efecto en cuanto el portal sea reiniciado. Por favor, reinicie el portal ahora.");
		}
		else {
			Alert.viewSuccessMessageText(successMessage = "Your configuration was saved successfully.");

			AssertTextEquals.assertPartialText(
				locator1 = "SetupWizard#CONFIGURATION_SAVE_MESSAGE",
				value1 = "The configuration was saved in");

			AssertTextEquals.assertPartialText(
				locator1 = "SetupWizard#CONFIGURATION_SAVE_LOCATION",
				value1 = "portal-setup-wizard.properties");

			Alert.viewInfoMessageSpecific(infoMessage = "Changes will take effect once the portal is restarted. Please restart the portal now.");
		}
	}

	@summary = "Assert the configured database in the console"
	macro viewConfiguredDatabaseInConsole(databaseType = null) {
		if (${databaseType} == "DB2") {
			AssertConsoleTextPresent(value1 = "Using dialect com.liferay.portal.dao.orm.hibernate.DB2Dialect for DB2");
		}
		else if (${databaseType} == "HSQL") {
			AssertConsoleTextPresent(value1 = "Using dialect com.liferay.portal.dao.orm.hibernate.HSQLDialect for HSQL Database Engine");
		}
		else if (${databaseType} == "MariaDB") {
			AssertConsoleTextPresent(value1 = "Using dialect com.liferay.portal.dao.orm.hibernate.MariaDBDialect for MariaDB");
		}
		else if (${databaseType} == "MySQL") {
			AssertConsoleTextPresent(value1 = "Using dialect org.hibernate.dialect.MySQL");
		}
		else if (${databaseType} == "Oracle") {
			AssertConsoleTextPresent(value1 = "Using dialect org.hibernate.dialect.Oracle");
		}
		else if (${databaseType} == "PostgreSQL") {
			AssertConsoleTextPresent(value1 = "Using dialect org.hibernate.dialect.PostgreSQL");
		}
	}

	@summary = "Assert the default administrator user"
	macro viewDefaultAdministratorUserPG() {
		AssertSelectedLabel(
			locator1 = "SetupWizard#DEFAULT_LANGUAGE",
			value1 = "English (United States)");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#FIRST_NAME",
			value1 = "Test");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#LAST_NAME",
			value1 = "Test");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#EMAIL",
			value1 = "");
	}

	@summary = "Assert the default database"
	macro viewDefaultDatabasePG() {
		if (IsElementPresent(locator1 = "SetupWizard#DATABASE_DEFAULT_LABEL")) {
			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_DEFAULT_LABEL",
				value1 = "Default Database (Hypersonic)");

			AssertTextEquals.assertPartialText(
				locator1 = "SetupWizard#DATABASE_DEFAULT_DESCRIPTION",
				value1 = "This database is useful for development and demo'ing purposes, but it is not recommended for production use.");

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_LINK",
				value1 = "(Change)");
		}
		else {
			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CONFIGURED_JDBC_DRIVER_CLASS_NAME_LABEL",
				value1 = "Configured Database");

			AssertClick(
				locator1 = "SetupWizard#DATABASE_CHANGE_LINK",
				value1 = "(Change)");

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_DATABASE_TYPE_LABEL",
				value1 = "Database Type");

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_URL_LABEL",
				value1 = "JDBC URL Required");

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_JDBC_DRIVER_CLASS_NAME_LABEL",
				value1 = "JDBC Driver Class Name Required");

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_USER_NAME_LABEL",
				value1 = "User Name");

			AssertTextEquals.assertText(
				locator1 = "SetupWizard#DATABASE_CHANGE_PASSWORD_LABEL",
				value1 = "Password");
		}
	}

	@summary = "Assert the default portal name"
	macro viewDefaultPortalNamePG() {
		var testRunEnvironment = PropsUtil.get("test.run.environment");

		if (${testRunEnvironment} == "EE") {
			AssertTextEquals.assertValue(
				locator1 = "TextInput#PORTAL_NAME",
				value1 = "Liferay DXP");
		}
		else {
			AssertTextEquals.assertValue(
				locator1 = "TextInput#PORTAL_NAME",
				value1 = "Liferay");
		}
	}

	@summary = "Assert the populated sample data"
	macro viewPopulatedSampleData() {
		var testRunEnvironment = PropsUtil.get("test.run.environment");

		AssertConsoleTextPresent(value1 = "Finished adding data");

		SearchAdministration.executeReindex();

		User.openUsersAdmin();

		Pagination.viewResults(results = "Showing 1 to 20 of 101 entries.");

		User.viewCP(
			userEmailAddress = "default.dlc.1@liferay.com",
			userFirstName = "Test",
			userLastName = "DLC 1",
			userScreenName = "default.dlc.1");

		Navigator.gotoBack();

		UsersAndOrganizationsNavigator.gotoOrganizations();

		if (${testRunEnvironment} == "EE") {
			Organization.viewCP(
				orgName = "Liferay DXP, Inc.",
				orgType = "Organization");

			Organization.gotoCP(orgName = "Liferay DXP, Inc.");

			User.searchCP(searchTerm = "Test DLC 1");

			Organization.viewUser(userName = "Test DLC 1");

			Search.searchCP(searchTerm = "Liferay DXPChicago");

			var key_suborgName = "Liferay DXPChicago";

			AssertTextEquals(
				locator1 = "UsersAndOrganizationsOrganization#SUBORGANIZATION_TABLE_NAME",
				value1 = "Liferay DXPChicago");

			AssertTextEquals(
				locator1 = "UsersAndOrganizationsOrganization#SUBORGANIZATION_TABLE_TYPE",
				value1 = "Organization");

			Site.openSitesAdmin();

			AssertTextEquals.assertPartialText(
				key_siteName = "Liferay DXP, Inc.",
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "Liferay DXP, Inc.");
		}
		else {
			Organization.viewCP(
				orgName = "Liferay, Inc.",
				orgType = "Organization");

			Organization.gotoCP(orgName = "Liferay, Inc.");

			User.searchCP(searchTerm = "Test DLC 1");

			Organization.viewUser(userName = "Test DLC 1");

			Search.searchCP(searchTerm = "LiferayChicago");

			var key_suborgName = "LiferayChicago";

			AssertTextEquals(
				locator1 = "UsersAndOrganizationsOrganization#SUBORGANIZATION_TABLE_NAME",
				value1 = "LiferayChicago");

			AssertTextEquals(
				locator1 = "UsersAndOrganizationsOrganization#SUBORGANIZATION_TABLE_TYPE",
				value1 = "Organization");

			Site.openSitesAdmin();

			AssertTextEquals.assertPartialText(
				key_siteName = "Liferay, Inc.",
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "Liferay, Inc.");
		}
	}

	@summary = "Assert the sample data is enabled in the setup wizard properties file"
	macro viewSampleDataEnabledInPropertiesFile() {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/portal-setup-wizard.properties");

		if (contains(${fileContent}, "setup.wizard.add.sample.data=on")) {
			echo("The Sample Data property was saved successfully in portal-setup-wizard.properties!");
		}
		else {
			fail("Fail to save the Sample Data property in portal-setup-wizard.properties.");
		}
	}

}