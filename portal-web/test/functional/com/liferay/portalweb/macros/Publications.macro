definition {

	@summary = "Default summary"
	macro assertDiscardIsUnavailableForInactivePublication(changeCategory = null, changeTitle = null, publicationName = null) {
		Click(
			key_publicationName = ${publicationName},
			locator1 = "Publications#PUBLICATION_NAME_VIEW");

		WaitForElementPresent(locator1 = "PublicationsChanges#CHANGE_HEADER");

		var key_changeCategory = ${changeCategory};
		var key_changeTitle = ${changeTitle};

		Click(locator1 = "PublicationsChanges#PUBLICATIONS_CHANGE_TITLE");

		AssertElementNotPresent(locator1 = "PublicationsChanges#PUBLICATIONS_CHANGE_DROPDOWN");
	}

	@summary = "Default summary"
	macro assertScheduledPublicationPublished(publicationName = null) {

		// This pause is required to allow the test to wait for the scheduled Publication to be published. See LRQA-70977 for more details.

		Pause(value1 = 240000);

		Click(
			key_navBarTitle = "History",
			locator1 = "Publications#MANAGE_PUBLICATIONS_NAVBAR_TITLE");

		var key_publicationName = ${publicationName};

		AssertTextEquals(
			locator1 = "Publications#PUBLISHED_STATUS",
			value1 = "Published");
	}

	@summary = "Default summary"
	macro cancelPublicationCreation(publicationName = null) {
		PublicationsNavigator.openPublicationsAdmin();

		Click(locator1 = "Button#PLUS");

		Type(
			locator1 = "Publications#PUBLICATION_NAME",
			value1 = ${publicationName});

		Button.clickCancel();
	}

	@summary = "Default summary"
	macro createNewPublication(publicationDescription = null, gotoPublicationsAdmin = null, publicationName = null) {
		if (${gotoPublicationsAdmin} == "true") {
			PublicationsNavigator.openPublicationsAdmin();

			Click(locator1 = "Button#PLUS");
		}
		else {
			Click(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

			MenuItem.click(menuItem = "Create New Publication");
		}

		if (isSet(publicationName)) {
			Type(
				locator1 = "Publications#PUBLICATION_NAME",
				value1 = ${publicationName});
		}

		if (isSet(publicationDescription)) {
			Type(
				locator1 = "Publications#PUBLICATION_DESCRIPTION",
				value1 = ${publicationDescription});
		}

		Button.click(button = "Create");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro createNewPublicationWithTemplate(publicationDescription = null, templateName = null, gotoPublicationsAdmin = null, publicationName = null) {
		if (${gotoPublicationsAdmin} == "true") {
			PublicationsNavigator.openPublicationsAdmin();

			Click(locator1 = "Button#PLUS");
		}
		else {
			Click(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

			MenuItem.click(menuItem = "Create New Publication");
		}

		AssertElementPresent(locator1 = "Publications#TEMPLATE_SELECTOR");

		Select(
			locator1 = "Publications#TEMPLATE_OPTION",
			value1 = ${templateName});

		if (isSet(publicationName)) {
			AssertTextEquals(
				locator1 = "Publications#PUBLICATION_NAME",
				value1 = ${publicationName});
		}

		if (isSet(publicationDescription)) {
			AssertTextEquals(
				locator1 = "Publications#PUBLICATION_DESCRIPTION",
				value1 = ${publicationDescription});
		}

		Button.click(button = "Create");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro deletePublication(publicationName = null) {
		PublicationsNavigator.gotoPublicationEllipsisItem(
			menuItem = "Delete",
			publicationName = ${publicationName});

		AssertConfirm(value1 = "Are you sure you want to delete this publication? You will permanently lose the changes in this publication. You will not be able to undo this operation.");

		AssertTextEquals(
			locator1 = "Publications#MANAGE_PUBLICATIONS_PAGE_TITLE",
			value1 = "Publications");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro disableManageRemotely() {
		PublicationsNavigator.openPublicationsSettings();

		Uncheck.uncheckToggleSwitch(locator1 = "Publications#ENABLE_MANAGE_REMOTELY");
	}

	@summary = "Default summary"
	macro disablePublications(gotoInstancesettings = null) {
		if (${gotoInstancesettings} == "true") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Publications",
				configurationName = "Publications Settings",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "Enabled");

			AssertClick(
				locator1 = "Button#SUBMIT",
				value1 = "Update");

			Alert.viewSuccessMessage();
		}
		else {
			ApplicationsMenu.gotoPortlet(
				category = "Publications",
				panel = "Applications",
				portlet = "Publications");

			Click.waitForMenuToggleJSClick(locator1 = "Publications#PUBLICATIONS_ELLIPSIS");

			MenuItem.click(menuItem = "Settings");

			Uncheck.uncheckToggleSwitch(locator1 = "Publications#ENABLE_PUBLICATIONS_TOGGLE_SWITCH");
		}
	}

	@summary = "Default summary"
	macro disablePublicationSharing() {
		Uncheck.uncheckToggleSwitchAndPause(locator1 = "PublicationsChanges#ENABLE_SHARE_LINK_TOGGLE_SWITCH");

		AssertElementNotPresent(locator1 = "PublicationsChanges#COPY_URL_BUTTON");
	}

	@summary = "Default summary"
	macro enableAllowUnapprovedChanges() {
		PublicationsNavigator.openPublicationsSettings();

		Check.checkToggleSwitch(locator1 = "Publications#ENABLE_ALLOW_UNAPPROVED_CHANGES");
	}

	@summary = "Default summary"
	macro enableManageRemotely() {
		PublicationsNavigator.openPublicationsSettings();

		Check.checkToggleSwitch(locator1 = "Publications#ENABLE_MANAGE_REMOTELY");
	}

	@summary = "Default summary"
	macro enablePublications(gotoInstancesettings = null, enableSandboxOnly = null) {
		if (${gotoInstancesettings} == "true") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Publications",
				configurationName = "Publications Settings",
				configurationScope = "Virtual Instance Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			if (${enableSandboxOnly} == "true") {
				FormFields.enableCheckbox(fieldName = "Sandbox Enabled");
			}

			if (IsElementPresent(locator1 = "Button#SAVE")) {
				AssertClick(
					locator1 = "Button#SAVE",
					value1 = "Save");
			}
			else {
				AssertClick(
					locator1 = "Button#UPDATE",
					value1 = "Update");
			}

			Alert.viewSuccessMessage();
		}
		else {
			PublicationsNavigator.openPublicationsSettings();

			Check.checkToggleSwitch(locator1 = "Publications#ENABLE_PUBLICATIONS_TOGGLE_SWITCH");

			if (${enableSandboxOnly} == "true") {
				Check.checkToggleSwitch(locator1 = "Publications#ENABLE_SANDBOX_ONLY_TOGGLE_SWITCH");
			}
		}
	}

	@summary = "Default summary"
	macro enablePublicationSharing() {
		Click(locator1 = "PublicationsChanges#SHARE_ACCESS_BUTTON");

		Check.checkToggleSwitch(locator1 = "PublicationsChanges#ENABLE_SHARE_LINK_TOGGLE_SWITCH");

		Click(locator1 = "PublicationsChanges#COPY_URL_BUTTON");
	}

	@summary = "Default summary"
	macro enableSandboxOnly() {
		PublicationsNavigator.openPublicationsSettings();

		Check.checkToggleSwitch(locator1 = "Publications#ENABLE_SANDBOX_ONLY_TOGGLE_SWITCH");
	}

	@summary = "Default summary"
	macro filterPublishedPublication(Exclude = null, statusList = null) {
		Click(
			key_name = "Filter",
			locator1 = "PublicationsChanges#SORT_BUTTON");

		Click(locator1 = "Publications#FILTER_STATUS_BUTTON");

		if (${Exclude} == "true") {
			Check.checkToggleSwitch(locator1 = "Publications#EXCLUDE_TOGGLE_SWITCH");
		}

		for (var statusType : list ${statusList}) {
			Check.checkNotVisible(
				key_statusType = ${statusType},
				locator1 = "Publications#FILTER_PUBLICATION_STATUS");
		}

		Click(locator1 = "Publications#ADD_FILTER_BUTTON");
	}

	@summary = "Default summary"
	macro generateSandboxedPublicationName(userScreenName = null) {
		var sandboxDate = DateUtil.getFormattedCurrentDate("M/d/yy", "UTC");

		var sandboxedPublicationName = "${userScreenName} - ${sandboxDate}";

		return ${sandboxedPublicationName};
	}

	@summary = "Default summary"
	macro getPublicationName() {
		var publicationName = selenium.getText("//span[contains(@class,'change-tracking-indicator-title')]");

		return ${publicationName};
	}

	@summary = "Default summary"
	macro getShareLinkURL() {
		WaitForElementPresent(locator1 = "PublicationsChanges#SHARE_LINK_URL");

		var publicURL = selenium.getElementValue("PublicationsChanges#SHARE_LINK_URL");

		takeScreenshot();

		echo("shareLinkURL is ${publicURL}");

		return ${publicURL};
	}

	@summary = "Default summary"
	macro inviteUsers(userInvite = null, userMissingPublicationsRole = null, publicationName = null, gotoReviewChanges = null, publicationRole = null) {
		if (${gotoReviewChanges} == "true") {
			PublicationsNavigator.gotoPublicationEllipsisItem(
				menuItem = "Review Changes",
				publicationName = ${publicationName});

			WaitForElementPresent(locator1 = "PublicationsChanges#INVITE_USERS_ICON");

			Click.javaScriptClick(locator1 = "PublicationsChanges#INVITE_USERS_ICON");
		}
		else {
			PublicationsNavigator.gotoPublicationEllipsisItem(
				menuItem = "Invite Users",
				publicationName = ${publicationName});
		}

		if (isSet(publicationRole)) {
			Click(
				key_title = "Viewers can view. Viewers cannot edit, publish, or invite other users.",
				locator1 = "Button#ANY_TITLE");

			Click(
				key_publicationRole = ${publicationRole},
				locator1 = "Publications#PUBLICATION_ROLE_BUTTON");
		}

		for (var keyword : list ${userInvite}) {
			Type(
				locator1 = "Publications#KEYWORD_TEXTFIELD",
				value1 = ${keyword});

			KeyPress(
				locator1 = "Publications#KEYWORD_TEXTFIELD",
				value1 = "\ENTER");
		}

		Button.clickNoError(button = "Send");

		if (${userMissingPublicationsRole} == "true") {
			AssertConfirm(value1 = "You are inviting user ${userInvite} who does not have access to Publications. This user will be assigned the Publications User role to gain access to Publications.");
		}

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro publishPublication(gotoPublicationsAdmin = null, publicationName = null) {
		var key_publicationName = ${publicationName};

		if (!(IsElementPresent(key_uniqueSuccess = "No unresolved conflicts, ready to publish.", locator1 = "Message#UNIQUE_SUCCESS"))) {
			PublicationsNavigator.gotoPublish(
				gotoPublicationsAdmin = ${gotoPublicationsAdmin},
				publicationName = ${publicationName});

			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "No unresolved conflicts, ready to publish.");
		}

		Click(locator1 = "Publications#PUBLISH_BUTTON");

		Alert.viewSuccessMessage();

		PublicationsNavigator.openPublicationsHistory();

		if (!(IsElementPresent(locator1 = "Publications#PUBLISHED_STATUS", value1 = "Published"))) {
			WaitForElementPresent(
				locator1 = "Publications#PUBLISHED_STATUS",
				value1 = "Published");
		}

		AssertTextEquals(
			locator1 = "Publications#PUBLISHED_STATUS",
			value1 = "Published");
	}

	@summary = "Default summary"
	macro revertPublication(publishNow = null, publicationName = null) {
		var key_publicationName = ${publicationName};

		Click(locator1 = "Publications#PUBLICATION_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Revert");

		AssertTextEquals(
			locator1 = "Publications#PUBLICATION_NAME",
			value1 = "Revert \"${publicationName}\"");

		if (${publishNow} == "true") {
			Click(
				key_radioName = "Now",
				locator1 = "Publications#REVERT_SCREEN_RADIO_OPTION",
				value1 = "Now");

			AssertTextEquals.assertPartialText(
				key_radioHelpMessage = "Revert your changes to production immediately",
				locator1 = "Publications#REVERT_SCREEN_RADIO_HELP",
				value1 = "Revert your changes to production immediately");
		}
		else {
			Click(
				key_radioName = "Later",
				locator1 = "Publications#REVERT_SCREEN_RADIO_OPTION",
				value1 = "Later");

			AssertTextEquals.assertPartialText(
				key_radioHelpMessage = "Make additional changes and publish them when you are ready",
				locator1 = "Publications#REVERT_SCREEN_RADIO_HELP",
				value1 = "Make additional changes and publish them when you are ready");
		}

		Button.click(button = "Revert and Create Publication");

		Alert.viewSuccessMessage();

		AssertTextPresent(
			key_publicationName = "Revert \"${publicationName}\"",
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = "Revert \"${publicationName}\"");
	}

	@summary = "Default summary"
	macro schedulePublication(reschedule = null, utcMinutes = null, gotoPublicationsAdmin = null, publicationName = null) {
		if (${gotoPublicationsAdmin} == "true") {
			PublicationsNavigator.openPublicationsAdmin();

			PublicationsNavigator.gotoPublicationEllipsisItem(
				menuItem = "Schedule",
				publicationName = ${publicationName});
		}
		else if (${reschedule} == "true") {
			PublicationsNavigator.openPublicationsScheduled();

			PublicationsNavigator.gotoPublicationEllipsisItem(
				menuItem = "Reschedule",
				publicationName = ${publicationName});
		}
		else {
			PublicationsNavigator.gotoReviewChanges();

			Click(locator1 = "Publications#SCHEDULE_NAV_BAR");
		}

		var publishDateDay = Time.getUTCDay();
		var publishDateMonth = Time.getUTCMonth();
		var publishDateYear = Time.getUTCYear();

		var publishDate = "${publishDateYear}-${publishDateMonth}-${publishDateDay}";

		Type(
			locator1 = "Publications#PUBLISH_DATE",
			value1 = ${publishDate});

		var publishTimeHours = Time.getUTCHours();
		var publishTimeMinutes = Time.getUTCMinutes();

		if (${publishTimeMinutes} == 58) {
			var publishTimeHours = ${publishTimeHours} + 1;
			var publishTimeMinutes = 0;
		}
		else if (${publishTimeMinutes} == 59) {
			var publishTimeHours = ${publishTimeHours} + 1;
			var publishTimeMinutes = 1;
		}
		else {
			var publishTimeMinutes = ${publishTimeMinutes} + 2;
		}

		var publishTimeAMPM = MathUtil.isLessThan(${publishTimeHours}, 12);

		if (${publishTimeAMPM} == "true") {
			var publishTimeAMPM = "AM";
		}
		else {
			var publishTimeAMPM = "PM";
			var publishTimeHours = ${publishTimeHours} - 12;
		}

		var hours = MathUtil.isLessThan(${publishTimeHours}, 10);

		if (${hours} == "true") {
			var publishTimeHours = "0${publishTimeHours}";
		}

		var minutes = MathUtil.isLessThan(${publishTimeMinutes}, 10);

		if (${minutes} == "true") {
			var publishTimeMinutes = "0${publishTimeMinutes}";
		}

		if (${publishTimeHours} == 00) {
			var publishTimeHours = 12;
		}

		Type.sendKeys(
			locator1 = "Publications#PUBLISH_TIME",
			value1 = "${publishTimeHours}${publishTimeMinutes}${publishTimeAMPM}");

		if (${reschedule} == "true") {
			Click(locator1 = "Publications#RESCHEDULE_BUTTON");
		}
		else {
			Click(locator1 = "Publications#SCHEDULE_BUTTON");
		}

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro search(publicationName = null) {
		Search.searchCP(searchTerm = ${publicationName});

		var key_publicationName = ${publicationName};

		AssertTextEquals(
			locator1 = "Publications#PUBLICATION_NAME_VIEW",
			value1 = ${publicationName});
	}

	@summary = "Default summary"
	macro selectPublication(gotoPublicationsAdmin = null, publicationName = null) {
		if (${gotoPublicationsAdmin} == "true") {
			PublicationsNavigator.openPublicationsAdmin();

			PublicationsNavigator.gotoPublicationEllipsisItem(
				menuItem = "Work on Publication",
				publicationName = ${publicationName});
		}
		else {
			Click(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

			MenuItem.click(menuItem = "Select a Publication");

			SelectFrameTop(value1 = "relative=top");

			var key_publicationName = ${publicationName};

			Click(
				locator1 = "Publications#SELECT_PUBLICATION_NAME",
				value1 = ${publicationName});
		}

		AssertTextPresent(
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = ${publicationName});
	}

	@summary = "Default summary"
	macro unschedulePublication(publicationName = null) {
		PublicationsNavigator.openPublicationsScheduled();

		Click(
			key_publicationName = ${publicationName},
			locator1 = "Publications#PUBLICATION_ELLIPSIS");

		ClickNoError(
			key_menuItem = "Unschedule",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		AssertConfirm(value1 = "Are you sure you want to unschedule this publication?");
	}

	@summary = "Default summary"
	macro viewAutomaticallyResolved(entryTitle = null, successMessage = null) {
		AssertElementPresent(locator1 = "Publications#AUTOMATICALLY_RESOLVED_TABLE");

		AssertElementPresent(
			key_entryTitle = ${entryTitle},
			key_successMessage = ${successMessage},
			locator1 = "Publications#CONFLICTING_CHANGES_SUCCESS_CONTENT");
	}

	@summary = "Default summary"
	macro viewConflictingChangesWarning(warningMessage = null) {
		AssertElementPresent(
			key_warningMessage = ${warningMessage},
			locator1 = "Message#WARNING_SPECIFIC");

		AssertVisible(locator1 = "Publications#DISABLED_PUBLISH_BUTTON");
	}

	@summary = "Default summary"
	macro viewInvitedUser(userInvite = null, publicationRole = null) {
		AssertElementPresent(
			key_publicationRole = ${publicationRole},
			key_userInvite = ${userInvite},
			locator1 = "Publications#INVITED_USER");
	}

	@summary = "Default summary"
	macro viewNeedsManualResolution(warningMessage = null, entryTitle = null) {
		AssertElementPresent(locator1 = "Publications#NEEDS_MANUAL_RESOLUTION_TABLE");

		AssertElementPresent(
			key_entryTitle = ${entryTitle},
			key_warningMessage = ${warningMessage},
			locator1 = "Publications#CONFLICTING_CHANGES_WARNING_CONTENT");

		AssertVisible(locator1 = "Publications#DISABLED_PUBLISH_BUTTON");
	}

	@summary = "Default summary"
	macro viewPublicationOrderInHistory(publicationList = null) {
		var resultOrder = 0;

		for (var publicationName : list ${publicationList}) {
			var resultOrder = ${resultOrder} + 1;

			AssertTextEquals.assertPartialText(
				locator1 = "Publications#PUBLICATION_ORDER_IN_HISTORY",
				resultOrder = ${resultOrder},
				value1 = ${publicationName});
		}
	}

	@summary = "Default summary"
	macro viewPublicationTimeline(isEmpty = null, publicationName = null) {
		Click(locator1 = "Publications#PUBLICATION_TIMELINE_BUTTON");

		if (${isEmpty} == "true") {
			AssertElementPresent(locator1 = "Publications#PUBLICATION_TIMELINE_EMPTY");
		}
		else if (isSet(isNotPresent)) {
			var key_publicationName = ${publicationName};

			AssertElementNotPresent(locator1 = "Publications#PUBLICATION_TIMELINE_PANEL");
		}
		else {
			var key_publicationName = ${publicationName};

			AssertElementPresent(locator1 = "Publications#PUBLICATION_TIMELINE_PANEL");
		}
	}

	@summary = "Default summary"
	macro viewSandboxedPublication(sandboxedUser = null, sandboxedPublicationName = null) {
		var key_publicationName = ${sandboxedPublicationName};

		if (${sandboxedUser} == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
				value1 = ${sandboxedPublicationName});
		}

		PublicationsNavigator.openPublicationsAdmin();

		AssertTextEquals.assertPartialText(
			locator1 = "Publications#PUBLICATION_NAME_VIEW",
			value1 = ${sandboxedPublicationName});
	}

	@summary = "Default summary"
	macro workOnProduction() {
		Click(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");

		ClickNoError(
			key_menuItem = "Work on Production",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		AssertConfirm(value1 = "Any changes made in production will immediately be live. Continue to production?");
	}

}