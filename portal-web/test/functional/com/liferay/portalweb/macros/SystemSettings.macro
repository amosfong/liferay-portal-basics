definition {

	@summary = "Default summary"
	macro assertPortalBuildNumber(portalBuild = null, accessToken = null) {
		var portalURL = JSONCompany.getPortalURL();

		var buildNumberCurl = '''
			${portalURL}/api/jsonws/portal/get-build-number -H 'Authorization: Bearer ${accessToken}'
		''';

		var buildNumberOutput = JSONCurlUtil.post(${buildNumberCurl});

		if (!(contains(${buildNumberOutput}, ${portalBuild}))) {
			fail("JSON-WS call failed to return build number");
		}
	}

	@summary = "Default summary"
	macro assertPortalVersion(accessToken = null, portalVersion = null) {
		var portalURL = JSONCompany.getPortalURL();

		var portalVersionCurl = '''
			${portalURL}/api/jsonws/portal/get-version -H 'Authorization: Bearer ${accessToken}'
		''';

		var portalVersionOutput = JSONCurlUtil.post(${portalVersionCurl});

		if (!(contains(${portalVersionOutput}, ${portalVersion}))) {
			fail("JSON-WS call failed to return Portal version");
		}
	}

	@summary = "Default summary"
	macro configureDisplayStyle(displayStyle = null) {
		Click(
			key_fieldLabel = ${fieldName},
			locator1 = "SystemSettings#DROPDOWN_MENU");

		DropdownMenuItem.click(menuItem = ${displayStyle});

		AssertTextEquals(
			key_fieldLabel = ${fieldName},
			locator1 = "SystemSettings#DROPDOWN_MENU",
			value1 = ${displayStyle});

		SystemSettings.saveConfiguration();
	}

	@summary = "Default summary"
	macro configureDynamicExportLimit(exportLimitNumber = null) {
		Type(
			locator1 = "SystemSettings#ASSETS_DYNAMIC_EXPORT_LIMIT",
			value1 = ${exportLimitNumber});

		SystemSettings.saveConfiguration();
	}

	@summary = "Default summary"
	macro configureSystemSetting(enableSetting = null, settingValue = null, settingFieldName = null, settingName = null) {
		var key_settingFieldName = ${settingFieldName};

		if (${enableSetting} == "true") {
			Check.toggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			if (isSet(settingValue)) {
				SystemSettings.editTextAreaSetting(
					settingName = ${settingName},
					settingValue = ${settingValue});
			}

			SystemSettings.saveConfiguration();

			AssertChecked.assertCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
		else if (${enableSetting} == "false") {
			Uncheck.uncheckToggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.saveConfiguration();

			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
	}

	@summary = "Default summary"
	macro configureSystemSettingWithRefresh(enableSetting = null, settingFieldName = null) {
		var key_settingFieldName = ${settingFieldName};

		if (${enableSetting} == "true") {
			Check.toggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.saveConfiguration();

			Refresh();

			AssertChecked.assertCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
		else if (${enableSetting} == "false") {
			Uncheck.uncheckToggleSwitch(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.saveConfiguration();

			Refresh();

			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");
		}
	}

	@summary = "Default summary"
	macro deleteConfiguration() {
		Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro deleteConfigurationEntry(configurationEntry = null) {
		Click(
			key_entryName = ${configurationEntry},
			locator1 = "CommerceEntry#ENTRY_ROW_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro editTextAreaSetting(settingValue = null, settingName = null) {
		Type(
			key_label = ${settingName},
			locator1 = "TextArea#ANY_LABELED",
			value1 = ${settingValue});
	}

	@summary = "Default summary"
	macro editTextAreaSettingMultiLines(settingValues = null, settingName = null) {
		for (var settingValue : list ${settingValues}) {
			Type.sendKeys(
				key_label = ${settingName},
				locator1 = "TextArea#ANY_LABELED",
				value1 = ${settingValue});

			KeyPress(
				key_label = ${settingName},
				locator1 = "TextArea#ANY_LABELED",
				value1 = "\RETURN");
		}
	}

	@summary = "Default summary"
	macro editTextSetting(settingValue = null, settingName = null) {
		Type(
			key_fieldLabel = ${settingName},
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ${settingValue});
	}

	@summary = "Default summary"
	macro exitEditConfiguration() {
		Click(locator1 = "Icon#ANGLE_LEFT_BACK");
	}

	@summary = "Default summary"
	macro exportConfiguration() {
		Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Export");

		DownloadTempFile();
	}

	@summary = "Default summary"
	macro getConfigFileContent(configFileName = null) {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/osgi/configs/${configFileName}");

		return ${fileContent};
	}

	@summary = "Default summary"
	macro getCurrentUserEmailResquestDenied(curl = null) {
		var output = JSONCurlUtil.post(${curl});

		if (contains(${output}, "Access denied to com.liferay.portal.kernel.service.UserService#getCurrentUser")) {
			echo("Access denied to com.liferay.portal.kernel.service.UserService#getCurrentUser");
		}
		else {
			fail("FAIL! Cannot find the warning message.");
		}
	}

	@summary = "Default summary"
	macro getUserEmailAddressRequestDenied(curl = null) {
		var output = JSONCurlUtil.post(${curl});

		if (contains(${output}, "Access denied to com.liferay.portal.kernel.service.UserService#getUserByEmailAddress")) {
			echo("Access denied to com.liferay.portal.kernel.service.UserService#getUserByEmailAddress");
		}
		else {
			fail("FAIL! Cannot find the warning message.");
		}
	}

	@summary = "Default summary"
	macro getUserEmailSuccessfully(curl = null, companyId = null) {
		Variables.assertDefined(parameterList = "${curl},${companyId}");

		var output = JSONCurlUtil.post(${curl});

		var result1 = JSONUtil.getWithJSONPath(${output}, "$.agreedToTermsOfUse");
		var result2 = JSONUtil.getWithJSONPath(${output}, "$.companyId");

		if ((${result1} == "true") && (${result2} == ${companyId})) {
			echo("Get current user successful.");
		}
		else {
			fail("FAIL! Cannot find the current user.");
		}
	}

	@summary = "Default summary"
	macro getViewUserEmailPermissionDenied(curl = null, userId = null) {
		Variables.assertDefined(parameterList = "${curl},${userId}");

		var output = JSONCurlUtil.post(${curl});

		if (!(contains(${output}, "must have VIEW permission for com.liferay.portal.kernel.model.User ${userId}"))) {
			fail("FAIL! Cannot find the current user.");
		}
	}

	@summary = "Default summary"
	macro gotoConfiguration(configurationScope = null, configurationName = null, configurationCategory = null) {
		Click(
			key_itemName = ${configurationCategory},
			locator1 = "ListGroupItem#ITEM_TEXT");

		Click(
			key_configurationName = ${configurationName},
			key_configurationScope = ${configurationScope},
			locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");

		AssertElementPresent(
			key_title = ${configurationName},
			locator1 = "Header#H2_TITLE");
	}

	@summary = "Default summary"
	macro gotoConfigurationEntry(configurationEntry = null) {
		Click(
			key_configurationEntry = ${configurationEntry},
			locator1 = "SystemSettings#CONFIGURATION_ENTRY");
	}

	@summary = "Default summary"
	macro openSystemSettingsAdmin(baseURL = null) {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet");
	}

	@summary = "Default summary"
	macro openToConfigInSystemSettings(portlet = null) {
		var baseURL = ${baseURL};

		if (!(isSet(baseURL))) {
			var baseURL = JSONCompany.getPortalURL();
		}

		if (${portlet} == "Applications Menu") {
			var portletId = "com.liferay.product.navigation.applications.menu.configuration.ApplicationsMenuInstanceConfiguration";
		}

		Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=${portletId}&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	@summary = "Default summary"
	macro resetConfiguration() {
		Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Reset Default Values");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro saveConfiguration() {
		if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
		else {
			Button.clickUpdate();

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro selectOptionSetting(fieldName = null, selectOption = null) {
		Click(
			key_fieldLabel = ${fieldName},
			locator1 = "SystemSettings#DROPDOWN_MENU");

		Click(
			key_selectOption = ${selectOption},
			locator1 = "SystemSettings#DROPDOWN_MENU_OPTION");
	}

	@summary = "Default summary"
	macro viewConfigurationNotAvailable(configurationScope = null, configurationName = null) {
		AssertElementNotPresent(
			key_configurationName = ${configurationName},
			key_configurationScope = ${configurationScope},
			locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
	}

	@summary = "Default summary"
	macro viewInputText(fieldLabel = null, fieldValue = null) {
		AssertTextEquals.assertValue(
			key_text = ${fieldLabel},
			locator1 = "TextInput#ANY",
			value1 = ${fieldValue});
	}

	@summary = "Default summary"
	macro viewNumberInputText(fieldLabel = null, fieldValue = null) {
		AssertTextEquals(
			key_fieldLabel = ${fieldLabel},
			locator1 = "TextInput#GENERIC_NUMBER_INPUT",
			value1 = ${fieldValue});
	}

	@summary = "Default summary"
	macro viewSettingsText(settingsText = null) {
		AssertTextEquals.assertPartialText(
			key_settingsText = ${settingsText},
			locator1 = "SystemSettings#SETTINGS_TEXT",
			value1 = ${settingsText});
	}

	@summary = "Default summary"
	macro viewTextareaPartialText(settingValue = null, settingName = null) {
		AssertTextEquals.assertPartialText(
			key_label = ${settingName},
			locator1 = "TextArea#ANY_LABELED",
			value1 = ${settingValue});
	}

	@summary = "Default summary"
	macro viewTextareaValue(fieldName = null, fieldValue = null, repeatableFieldNumber = null) {
		if (isSet(repeatableFieldNumber)) {
			AssertTextEquals.assertValue(
				key_fieldName = ${fieldName},
				key_repeatableFieldNumber = ${repeatableFieldNumber},
				locator1 = "FormFields#REPEATABLE_TEXT_MULTILINE_FIELD",
				value1 = ${fieldValue});
		}
		else {
			AssertTextEquals.assertValue(
				key_fieldName = ${fieldName},
				locator1 = "FormFields#TEXT_MULTILINE_FIELD",
				value1 = ${fieldValue});
		}
	}

	@summary = "Default summary"
	macro viewTextLabel(fieldLabel = null) {
		AssertTextEquals.assertText(
			key_fieldLabel = ${fieldLabel},
			locator1 = "SystemSettings#LABEL",
			value1 = ${fieldLabel});
	}

	@summary = "Default summary"
	macro viewUserAvatarImage() {
		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
	}

}