definition {

	@summary = "Default summary"
	macro _deleteAllQuestions() {
		while (IsElementPresent(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS")) {
			LexiconEntry.gotoEllipsisMenuItemNoError(menuItem = "Delete");

			Alert.viewSuccessMessage();
		}
	}

	@summary = "Default summary"
	macro _openToAddQuestion(siteURLKey = null, topicName = null, layoutName = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/new");
	}

	@summary = "Default summary"
	macro addRootTopic(rootTopicDescription = null, invalidCharacters = null, rootTopicName = null) {
		WaitForElementPresent(
			key_text = "New Topic",
			locator1 = "Button#ANY");

		if (IsElementPresent(key_text = "New Topic", locator1 = "Button#ANY")) {
			Click(
				key_text = "New Topic",
				locator1 = "Button#ANY");
		}
		else {
			Click(
				key_card = "New Topic",
				locator1 = "Card#CARD");
		}

		Type(
			key_text = "Topic Name",
			locator1 = "TextInput#ANY",
			value1 = ${rootTopicName});

		Type(
			key_label = "Description",
			locator1 = "TextArea#ANY_LABELED",
			value1 = ${rootTopicDescription});

		Button.click(button = "Create");

		if (${invalidCharacters} == "Topic") {
			Alert.viewErrorMessage(errorMessage = "The Topic Name cannot contain the following invalid characters");
		}
		else {
			AssertTextEquals(
				key_card = ${rootTopicName},
				locator1 = "Card#CARD_TITLE",
				value1 = ${rootTopicName});
		}
	}

	@summary = "Default summary"
	macro addSubTopic(subTopicDescription = null, subTopicName = null) {
		Click(locator1 = "Questions#NEW_TOPIC");

		Type(
			key_text = "Topic Name",
			locator1 = "TextInput#ANY",
			value1 = ${subTopicName});

		Type(
			key_label = "Description",
			locator1 = "TextArea#ANY_LABELED",
			value1 = ${subTopicDescription});

		Button.click(button = "Create");

		AssertTextEquals(
			key_topicName = ${subTopicName},
			locator1 = "Questions#QUESTIONS_BREADCRUMB_ACTIVE_SUBTOPIC",
			value1 = ${subTopicName});
	}

	@summary = "Default summary"
	macro addTags(tagLocator = null) {
		Type(
			locator1 = "Questions#ASK_QUESTION_TAG_FIELD",
			value1 = ${tagLocator});

		KeyPress(
			locator1 = "Questions#ASK_QUESTION_TAG_FIELD",
			value1 = "\RETURN");
	}

	@summary = "Default summary"
	macro answerQuestion(contentField = null) {
		WaitForElementPresent(
			key_text = "Add Answer",
			locator1 = "Button#ANY");

		Click(
			key_text = "Add Answer",
			locator1 = "Button#ANY");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = ${contentField});

		SelectFrame(value1 = "relative-top");

		ScrollWebElementIntoView(
			key_text = "Post Answer",
			locator1 = "Button#ANY");

		Click(
			key_text = "Post Answer",
			locator1 = "Button#ANY");

		if (isSet(answeredLabel)) {
			AssertElementPresent(
				key_label = "Answered",
				locator1 = "Questions#QUESTIONS_RESPONSE_DATE_LABEL");
		}

		AssertVisible(
			key_answerBodyContent = ${contentField},
			locator1 = "Questions#ANSWER_BODY");
	}

	@summary = "Default summary"
	macro askQuestionFillingTheMandatoryFields(tagLocatorList = null, password = null, depotName = null, titleField = null, siteURLKey = null, imageFileName = null, topicName = null, userEmailAddress = null, invalidCharacters = null, contentField = null, layoutName = null) {
		if (isSet(siteURLKey)) {
			Questions._openToAddQuestion(
				layoutName = ${layoutName},
				siteURLKey = ${siteURLKey},
				topicName = ${topicName});
		}
		else {
			Click(locator1 = "Questions#ASK_QUESTION_BUTTON");
		}

		if (isSet(anonymousUser)) {
			Type(
				locator1 = "TextInput#EMAIL_ADDRESS",
				value1 = ${userEmailAddress});

			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = ${password});

			Click(locator1 = "Button#SIGN_IN");
		}

		Type(
			locator1 = "Questions#ASK_QUESTION_TITLE_FIELD",
			value1 = ${titleField});

		CKEditor.addContent(content = ${contentField});

		if (isSet(imageFileName)) {
			var key_imageFileName = ${imageFileName};

			ItemSelector.gotoItemSelectorViaCKEditor();

			SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

			if (isSet(depotName)) {
				AssertClick(
					key_breadcrumbName = "Sites and Libraries",
					locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
					value1 = "Sites and Libraries");

				AssertClick(
					key_groupTab = "Asset Library",
					locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
					value1 = "Asset Library");

				LexiconCard.clickCard(card = ${depotName});
			}

			Click(locator1 = "ItemSelector#SELECT_FILE_IMAGE_CARD");
		}

		if (isSet(tagLocatorList)) {
			for (var tagLocator : list ${tagLocatorList}) {
				Questions.addTags(tagLocator = ${tagLocator});
			}
		}

		SelectFrameTop();

		Click(locator1 = "Questions#ASK_QUESTION_POST_YOUR_QUESTION_BUTTON");

		if (${invalidCharacters} == "Tag") {
			Alert.viewErrorMessage(errorMessage = "The Tag cannot contain the following invalid characters");
		}
	}

	@summary = "Default summary"
	macro assertCanonicalURL(category = null, title = null) {
		var html = '''<link href="''';
		var html2 = '''" rel="canonical" data-react-helmet="true">''';
		var portalURL = "${portalURL}/web/guest";
		var pageName = StringUtil.lowerCase(${pageName});

		var pageNameURL = StringUtil.replace(${pageName}, " ", "-");

		var pageSource = StringUtil.add(${html}, "${portalURL}/${pageNameURL}/questions/${category}/${title}${html2}", "");

		AssertHTMLSourceTextPresent(value1 = ${pageSource});
	}

	@summary = "Default summary"
	macro changeDisplayStyle(displayStyle = null) {
		Click(locator1 = "Questions#CREATE_QUESTIONS_DISPLAY_STYLE_SELECTOR");

		MenuItem.click(menuItem = StringUtil.upperCaseFirstLetter(${displayStyle}));
	}

	@summary = "Default summary"
	macro changePagination(itemsPerPage = null) {
		Click(locator1 = "Questions#ITEMS_PER_PAGE_SELECT");

		var key_itemsPerPage = ${itemsPerPage};

		MenuItem.click(menuItem = ${itemsPerPage});

		AssertTextEquals.assertPartialText(
			locator1 = "Questions#ITEMS_PER_PAGE_SELECT",
			value1 = ${itemsPerPage});
	}

	@summary = "Default summary"
	macro changeTopic(gotoParentTopic = null, parentTopicName = null, subTopicName = null) {
		if (isSet(gotoParentTopic)) {
			if (isSet(multipleSubTopics)) {
				Click(locator1 = "Questions#QUESTIONS_BREADCRUMB_ELLIPSIS");

				Click(
					key_topicName = ${gotoParentTopic},
					locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_OPTION");
			}
			else {
				Click(
					key_topicName = ${gotoParentTopic},
					locator1 = "Questions#QUESTIONS_BREADCRUMB_PARENT_TOPIC_BUTTON");
			}
		}
		else {
			if (isSet(changeTopicFromHomeToggle)) {
				Click(locator1 = "Questions#QUESTIONS_BREADCRUMB_HOME_DROPDOWN_TOGGLE");
			}
			else {
				Click(
					key_topicName = ${parentTopicName},
					locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_TOGGLE");
			}

			Click(
				key_topicName = ${subTopicName},
				locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_OPTION");

			AssertTextEquals(
				key_topicName = ${subTopicName},
				locator1 = "Questions#QUESTIONS_BREADCRUMB_ACTIVE_SUBTOPIC",
				value1 = ${subTopicName});
		}
	}

	@summary = "Default summary"
	macro clearSearchResults() {
		Button.click(button = "Clear");

		AssertElementNotPresent(locator1 = "Search#SEARCH_INFO");

		AssertElementNotPresent(
			key_text = "Clear",
			locator1 = "Button#ANY");
	}

	@summary = "Default summary"
	macro clickFilterAndOrderBy(option = null) {
		Click(
			key_text = "Filter and Order",
			locator1 = "Button#ANY");

		Click(
			key_option = ${option},
			locator1 = "Questions#QUESTIONS_SELECT_FILTER");

		Button.click(button = "Apply");
	}

	@summary = "Default summary"
	macro configureFilter(filterBy = null) {
		WaitForElementPresent(
			locator1 = "Questions#QUESTIONS_SELECT_FILTER",
			value1 = ${filterBy});

		Select(
			locator1 = "Questions#QUESTIONS_SELECT_FILTER",
			value1 = ${filterBy});
	}

	@summary = "Default summary"
	macro configureLandingPageTopicNavigation(toggleValue = null) {
		Portlet.gotoPortletOptions(
			portletName = "Questions",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		if (${toggleValue} == "enable") {
			Check(
				checkboxName = "Show Cards for Topic Navigation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		if (${toggleValue} == "disable") {
			Uncheck(
				checkboxName = "Show Cards for Topic Navigation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro configureRootTopic(parentCategoryName = null, categoryName = null, subCategoryName = null) {
		Portlet.gotoPortletOptions(
			portletName = "Questions",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Button.clickSelect();

		WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(
			key_breadcrumbName = "Categories",
			locator1 = "Breadcrumb#BREADCRUMB_ENTRY_LINK");

		if (isSet(subCategoryName)) {
			LexiconTable.clickTableEntryTitle(tableEntry = ${parentCategoryName});

			Click(
				key_categoryName = ${subCategoryName},
				locator1 = "Questions#SElECT_CATEGORY");
		}
		else {
			Click(
				key_categoryName = ${categoryName},
				locator1 = "Questions#SElECT_CATEGORY");
		}

		SelectFrame(value1 = "relative=top");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PortletEntry.save();

		if (isSet(subCategoryName)) {
			AssertElementPresent(
				key_categoryName = ${subCategoryName},
				locator1 = "Questions#ROOT_TOPIC_ID_VALUE");
		}
		else {
			AssertElementPresent(
				key_categoryName = ${categoryName},
				locator1 = "Questions#ROOT_TOPIC_ID_VALUE");
		}
	}

	@summary = "Default summary"
	macro configureTagsFilter(filterBy = null) {
		Select(
			locator1 = "Questions#QUESTIONS_TAGS_SELECT_FILTER",
			value1 = ${filterBy});
	}

	@summary = "Default summary"
	macro createSomethingInMessageBoards(displayStyleOption = null, nameField = null, menuItem = null) {
		LexiconEntry.gotoAdd();

		MenuItem.click(menuItem = ${menuItem});

		Questions.fillName(nameField = ${nameField});

		Questions.changeDisplayStyle(displayStyle = ${displayStyleOption});

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro definePermissionsToCreatedRole(roleTitle = null) {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_message_boards_web_portlet_MBAdminPortlet",
			roleTitle = ${roleTitle});

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.message.boards",
			roleTitle = ${roleTitle});

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.message.boards.model.MBCategory",
			roleTitle = ${roleTitle});
	}

	@summary = "Default summary"
	macro deleteAnswer(contentField = null) {
		Click(
			key_text = "Delete",
			locator1 = "Button#ANY");

		if (isSet(cancel)) {
			Click(
				key_text = "Cancel",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertVisible(
				key_answerBodyContent = ${contentField},
				locator1 = "Questions#ANSWER_BODY");
		}
		else {
			Click(
				key_text = "Delete",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertElementNotPresent(
				key_answerBodyContent = ${contentField},
				locator1 = "Questions#ANSWER_BODY");
		}
	}

	@summary = "Default summary"
	macro deleteComment(commentReply = null) {
		Click(
			key_text = "Delete",
			locator1 = "Button#ANY_LAST");

		if (isSet(cancel)) {
			Click(
				key_text = "Cancel",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertVisible(
				key_replyBodyContent = ${commentReply},
				locator1 = "Questions#REPLY_BODY");
		}
		else {
			Click(
				key_text = "Delete",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertElementNotPresent(
				key_replyBodyContent = ${commentReply},
				locator1 = "Questions#REPLY_BODY");
		}
	}

	@summary = "Default summary"
	macro deleteQuestion(questionTitle = null) {
		if (isSet(cancel)) {
			Click.waitForMenuToggleJSClick(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

			Click(
				key_text = "Delete",
				locator1 = "Questions#DROPDOWN_ITEM_BUTTON");

			Click(
				key_text = "Cancel",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			WaitForElementPresent(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_DETAILS_TITLE",
				value1 = ${questionTitle});

			AssertTextEquals(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_DETAILS_TITLE",
				value1 = ${questionTitle});
		}
		else if (isSet(deleteInActivity)) {
			Click.waitForMenuToggleJSClick(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

			Click(
				key_text = "Delete",
				locator1 = "Questions#DROPDOWN_ITEM_BUTTON");

			Click(
				key_text = "Delete",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertElementPresent(
				key_emptyInfo = "This topic is empty.",
				locator1 = "Questions#EMPTY_STATE_MESSAGE");
		}
		else {
			Click.waitForMenuToggleJSClick(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

			Click(
				key_text = "Delete",
				locator1 = "Questions#DROPDOWN_ITEM_BUTTON");

			Click(
				key_text = "Delete",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertElementPresent(
				key_emptyInfo = "This topic is empty.",
				locator1 = "Questions#EMPTY_STATE_MESSAGE");
		}
	}

	@summary = "Default summary"
	macro editAnswer(contentField = null) {
		Click(locator1 = "Questions#EDIT_ANSWER");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = ${contentField});

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Update Your Answer",
			locator1 = "Button#ANY");

		AssertVisible(
			key_answerBodyContent = ${contentField},
			locator1 = "Questions#ANSWER_BODY");
	}

	@summary = "Default summary"
	macro editComment(contentField = null) {
		Click(locator1 = "Questions#EDIT_COMMENT");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = ${contentField});

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Update Your Comment",
			locator1 = "Button#ANY");
	}

	@summary = "Default summary"
	macro editQuestion(questionTitle = null, contentFieldEdit = null, titleFieldEdit = null) {
		Questions.gotoDetails(
			questionTabField = "Questions",
			questionTitle = ${questionTitle});

		Click.waitForMenuToggleJSClick(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

		Click(
			key_text = "Edit",
			locator1 = "Questions#DROPDOWN_ITEM_BUTTON");

		Type(
			locator1 = "Questions#ASK_QUESTION_TITLE_FIELD",
			value1 = ${titleFieldEdit});

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = ${contentFieldEdit});

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Update Your Question",
			locator1 = "Button#ANY");

		Refresh();

		AssertVisible(
			key_questionTitle = ${titleFieldEdit},
			locator1 = "Questions#QUESTIONS_DETAILS_TITLE");
	}

	@summary = "Default summary"
	macro editRootTopic(groupName = null, categoryNameEdit = null, siteURLKey = null, categoryName = null) {
		if (isSet(siteURLKey)) {
			MessageboardsCategory.openToEditCategory(
				categoryName = ${categoryName},
				groupName = ${groupName},
				siteURLKey = ${siteURLKey});
		}
		else {
			var key_categoryName = ${categoryName};

			LexiconEntry.openEntryMenu(rowEntry = ${categoryName});

			MenuItem.click(menuItem = "Edit");
		}

		PortletEntry.inputName(name = ${categoryNameEdit});

		Click(
			locator1 = "Button#SAVE",
			value1 = "Save");

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro enableAnonymousRead() {
		Questions.openToConfigInSystemSettings(portlet = "Questions");

		if (IsNotChecked.isNotCheckedNotVisible(key_fieldName = "enableAnonymousRead", locator1 = "FormFields#CHECKBOX")) {
			Check.checkNotVisible(
				key_fieldName = "enableAnonymousRead",
				locator1 = "FormFields#CHECKBOX");
		}

		FormFields.viewCheckboxChecked(fieldName = "enableAnonymousRead");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			Button.clickUpdate();

			Button.clickUpdate();
		}
		else {
			Button.clickSave();
		}

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro enableRedirectToLogin() {
		Questions.openToConfigInSystemSettings(portlet = "Questions");

		if (IsNotChecked.isNotCheckedNotVisible(key_fieldName = "enableRedirectToLogin", locator1 = "FormFields#CHECKBOX")) {
			Check.checkNotVisible(
				key_fieldName = "enableRedirectToLogin",
				locator1 = "FormFields#CHECKBOX");
		}

		FormFields.viewCheckboxChecked(fieldName = "enableRedirectToLogin");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			Button.clickUpdate();
		}
		else {
			Button.clickSave();
		}

		Alert.viewSuccessMessage();
	}

	@summary = "Default summary"
	macro fillName(nameField = null) {
		Click(locator1 = "Questions#CREATE_QUESTIONS_NAME_FIELD");

		Type(
			locator1 = "Questions#CREATE_QUESTIONS_NAME_FIELD",
			value1 = ${nameField});
	}

	@summary = "Default summary"
	macro gotoCategory(categoryName = null) {
		WaitForElementPresent(
			key_card = ${categoryName},
			locator1 = "Card#CARD_TITLE");

		Click(
			key_card = ${categoryName},
			locator1 = "Card#CARD_TITLE");

		AssertElementPresent(locator1 = "Questions#QUESTIONS_HOME_ICON");

		AssertVisible(
			key_categoryTitle = ${categoryName},
			locator1 = "Questions#QUESTIONS_CATEGORY_TITLE");
	}

	@summary = "Default summary"
	macro gotoDetails(questionTitle = null) {
		if (isSet(duplicatedQuestions)) {
			Click(
				key_lastQuestionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_TITLE_LAST");
		}
		else {
			WaitForElementPresent(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_TITLE");

			Click(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_TITLE");
		}

		AssertTextEquals(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_DETAILS_TITLE",
			value1 = ${questionTitle});
	}

	@summary = "Default summary"
	macro gotoTab(questionTabField = null) {
		Click(
			key_questionTabField = ${questionTabField},
			locator1 = "Questions#QUESTIONS_LIST_TAB_FIELD");

		AssertVisible(
			key_questionTabField = ${questionTabField},
			locator1 = "Questions#QUESTIONS_LIST_ACTIVE_TAB_FIELD");
	}

	@summary = "Default summary"
	macro openQuestionFromActivity(questionTitle = null) {
		Click.waitForMenuToggleJSClick(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

		Click(
			key_text = "View Question",
			locator1 = "Questions#DROPDOWN_ITEM_BUTTON");
	}

	@summary = "Default summary"
	macro openToConfigInSystemSettings(portlet = null) {
		var baseURL = JSONCompany.getPortalURL();

		if (${portlet} == "Message Boards Moderation Workflow") {
			var portletId = "com.liferay.message.boards.moderation.configuration.MBModerationGroupConfiguration";
		}

		if (${portlet} == "Questions") {
			var portletId = "com.liferay.questions.web.internal.configuration.QuestionsConfiguration";
		}

		Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=${portletId}&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	@summary = "Default summary"
	macro openToEditQuestion(siteURLKey = null, topicName = null, questionsTitle = null, layoutName = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/${questionsTitle}/edit");
	}

	@summary = "Default summary"
	macro openToQuestionDetails(siteURLKey = null, topicName = null, questionsTitle = null, friendlyURL = null, layoutName = null) {
		if (isSet(localization)) {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/-");
		}
		else if (isSet(historyRouter)) {
			Navigator.openWithAppendToBaseURL(urlAppend = "${friendlyURL}/questions/${topicName}/${questionsTitle}");
		}
		else {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/${questionsTitle}");
		}
	}

	@summary = "Default summary"
	macro openToQuestionsTopic(siteURLKey = null, topicName = null, layoutName = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}");

		WaitForPageLoad();
	}

	@summary = "Default summary"
	macro openToTagsTab(siteURLKey = null, layoutName = null) {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/tags");

		WaitForPageLoad();
	}

	@summary = "Default summary"
	macro removeRootTopicConfiguration() {
		Portlet.gotoPortletOptions(
			portletName = "Questions",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Button.clickRemove();

		PortletEntry.save();
	}

	@summary = "Default summary"
	macro replyToComment(commentReply = null) {
		AssertClick(
			key_text = "Add Comment",
			locator1 = "Button#ANY",
			value1 = "Add Comment");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = ${commentReply});

		SelectFrame(value1 = "relative=top");

		AssertClick(
			key_text = "Add Comment",
			locator1 = "Button#ANY_LAST",
			value1 = "Add Comment");

		if (isSet(repliedLabel)) {
			AssertElementPresent(
				key_label = "Replied",
				locator1 = "Questions#QUESTIONS_RESPONSE_DATE_LABEL");
		}

		AssertVisible(
			key_replyBodyContent = ${commentReply},
			locator1 = "Questions#REPLY_BODY");
	}

	@summary = "Default summary"
	macro search(resultsInfo = null, searchKey = null) {
		if (isSet(searchTag)) {
			Type(
				locator1 = "Questions#SEARCH_QUESTION_FIELD",
				value1 = ${searchKey});
		}
		else {
			Type(
				locator1 = "Questions#SEARCH_QUESTION_FIELD",
				value1 = ${searchKey});

			WaitForElementPresent(
				key_placeHolder = "Search",
				locator1 = "TextInput#ANY_PLACEHOLDER");

			KeyPress(
				locator1 = "Questions#SEARCH_QUESTION_FIELD",
				value1 = "\ENTER");

			if (isSet(noQuestionsResults)) {
				AssertElementPresent(
					key_emptyInfo = "There are no results.",
					locator1 = "Questions#EMPTY_STATE_MESSAGE");
			}
			else {
				AssertTextEquals(
					key_resultsInfo = '''${resultsInfo}''',
					locator1 = "Questions#SEARCH_INFO",
					value1 = ${resultsInfo});

				AssertVisible(
					key_text = "Clear",
					locator1 = "Button#ANY");
			}
		}
	}

	@summary = "Default summary"
	macro subscribeFromQuestion(questionTitle = null) {
		Click.waitForMenuToggleJSClick(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

		MenuItem.clickNoError(menuItem = "Subscribe");
	}

	@summary = "Default summary"
	macro subscribeFromTag() {
		WaitForElementPresent(locator1 = "Questions#QUESTIONS_BELL_BUTTON");

		Click(locator1 = "Questions#QUESTIONS_BELL_BUTTON");

		AssertElementPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
	}

	@summary = "Default summary"
	macro subscribeQuestion() {
		Click(locator1 = "Questions#QUESTIONS_BELL_BUTTON");
	}

	@summary = "Default summary"
	macro subscribeTopic() {
		AssertElementPresent(locator1 = "Questions#QUESTIONS_BELL_BUTTON");

		Click(locator1 = "Questions#QUESTIONS_BELL_BUTTON");
	}

	@summary = "Default summary"
	macro tearDown() {
		while (IsElementPresent(locator1 = "Questions#QUESTIONS_LIST")) {
			Questions._deleteAllQuestions();
		}

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_LIST");
	}

	@summary = "Default summary"
	macro unsubscribeFromQuestion(questionTitle = null) {
		Click.waitForMenuToggleJSClick(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

		MenuItem.clickNoError(menuItem = "Unsubscribe");
	}

	@summary = "Default summary"
	macro unsubscribeFromQuestionViaDetails() {
		Click(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
	}

	@summary = "Default summary"
	macro unsubscribeFromTag() {
		Click(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
	}

	@summary = "Default summary"
	macro unsubscribeFromTopic(topicName = null) {
		LexiconCard.clickEllipsisItem(
			card = ${topicName},
			item = "Unsubscribe");
	}

	@summary = "Default summary"
	macro viewDefault() {
		AssertTextEquals(
			key_emptyInfo = "This page has no topics.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE",
			value1 = "This page has no topics.");
	}

	@summary = "Default summary"
	macro viewDetailsTitle(questionTitle = null) {
		AssertTextEquals(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_DETAILS_TITLE",
			value1 = ${questionTitle});
	}

	@summary = "Default summary"
	macro viewFilterResults(questionTitle = null, lastQuestionTitle = null) {
		AssertTextEquals(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_TITLE",
			value1 = ${questionTitle});

		AssertTextEquals(
			key_lastQuestionTitle = ${lastQuestionTitle},
			locator1 = "Questions#QUESTIONS_TITLE_LAST",
			value1 = ${lastQuestionTitle});
	}

	@summary = "Default summary"
	macro viewHomeTopicsList(topicsName = null) {
		Refresh();

		Click(locator1 = "Questions#QUESTIONS_BREADCRUMB_HOME_DROPDOWN_TOGGLE");

		for (var topicName : list ${topicsName}) {
			AssertElementPresent(
				key_topicName = ${topicName},
				locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_OPTION");
		}
	}

	@summary = "Default summary"
	macro viewImageInQuestion(imageFileName = null) {
		AssertVisible(
			key_imageFileName = ${imageFileName},
			locator1 = "Questions#QUESTIONS_IMAGE_NAME");
	}

	@summary = "Default summary"
	macro viewList(unlistedQuestions = null, listedQuestions = null) {
		if (isSet(unlistedQuestions)) {
			for (var unlistedQuestion : list ${unlistedQuestions}) {
				AssertElementNotPresent(
					key_questionTitle = ${unlistedQuestions},
					locator1 = "Questions#QUESTIONS_TITLE");
			}
		}

		if (isSet(listedQuestions)) {
			for (var listedQuestion : list ${listedQuestions}) {
				AssertTextEquals(
					key_questionTitle = ${listedQuestion},
					locator1 = "Questions#QUESTIONS_TITLE",
					value1 = ${listedQuestion});
			}
		}
	}

	@summary = "Default summary"
	macro viewLockedQuestion(questionTitle = null) {
		AssertElementPresent(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_LOCKED_ICON");

		for (var caretName : list "caret-top,caret-bottom") {
			AssertElementPresent(
				key_caretName = ${caretName},
				locator1 = "Questions#VOTE_BUTTON_DISABLED");
		}

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_BELL_BUTTON");

		AssertNotVisible(locator1 = "Icon#DELETE");

		AssertElementNotPresent(locator1 = "Button#EDIT");

		AssertElementNotPresent(locator1 = "Button#REPLY");

		for (var text : list "Delete,Mark as answer") {
			AssertElementNotPresent(
				key_text = ${text},
				locator1 = "Button#ANY");
		}

		if (isSet(lockedStatus)) {
			Click(
				key_text = "Add Answer",
				locator1 = "Button#ANY");

			AssertElementPresent(locator1 = "Questions#QUESTIONS_LOCKED_ANSWER_TEXT");
		}
	}

	@summary = "Default summary"
	macro viewMyActivityDefault() {
		AssertTextEquals(
			key_emptyInfo = "There are no results.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE",
			value1 = "There are no results.");
	}

	@summary = "Default summary"
	macro viewNoAnswerField() {
		AssertElementNotPresent(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertElementNotPresent(
			key_text = "Post Answer",
			locator1 = "Button#ANY_DISABLED");
	}

	@summary = "Default summary"
	macro viewNoBreadcrumbEllipsis() {
		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_BREADCRUMB_ELLIPSIS");
	}

	@summary = "Default summary"
	macro viewNoFilteredResult() {
		AssertTextEquals(
			key_emptyInfo = "There are no results.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE",
			value1 = "There are no results.");
	}

	@summary = "Default summary"
	macro viewNoPermissionsAddQuestion() {
		AssertElementNotPresent(locator1 = "Questions#ASK_QUESTION_BUTTON");
	}

	@summary = "Default summary"
	macro viewNoPermissionsAddTopic() {
		AssertElementNotPresent(locator1 = "Questions#NEW_TOPIC");
	}

	@summary = "Default summary"
	macro viewNoSearchResults(questionsList = null) {
		for (var questionTitle : list ${questionsList}) {
			AssertElementNotPresent(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_TITLE");
		}
	}

	@summary = "Default summary"
	macro viewNoTags(tagsList = null) {
		for (var tagName : list ${tagsList}) {
			AssertElementNotPresent(
				key_tagName = ${tagName},
				locator1 = "Questions#TAGS_LIST_TAB_NAMES");
		}
	}

	@summary = "Default summary"
	macro viewNoTopicDropdownToggle(topicName = null) {
		AssertElementNotPresent(
			key_topicName = ${topicName},
			locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_TOGGLE");
	}

	@summary = "Default summary"
	macro viewPaginationResults(results = null) {
		AssertTextEquals(
			locator1 = "Questions#PAGINATION_RESULTS",
			value1 = ${results});
	}

	@summary = "Default summary"
	macro viewQuestionPage(topicName = null) {
		var baseURL = JSONCompany.getPortalURL();

		AssertLocation(value1 = "${baseURL}/web/guest/questions-page/questions/${topicName}");
	}

	@summary = "Default summary"
	macro viewQuestionViaTag(questionTitle = null, tagName = null) {
		Click(
			key_tagName = ${tagName},
			locator1 = "Questions#TAGS_LIST_TAB_NAMES");

		AssertElementPresent(
			key_titleField = ${questionTitle},
			locator1 = "Questions#ASK_QUESTION_SEARCH_QUESTION");
	}

	@summary = "Default summary"
	macro viewSearchField() {
		AssertElementPresent(locator1 = "Questions#SEARCH_QUESTION_FIELD");
	}

	@summary = "Default summary"
	macro viewSearchResults(questionsList = null) {
		for (var questionTitle : list ${questionsList}) {
			AssertTextEquals(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_TITLE",
				value1 = ${questionTitle});
		}
	}

	@summary = "Default summary"
	macro viewSelectFilter() {
		AssertElementPresent(
			key_text = "Filter and Order",
			locator1 = "Button#ANY");
	}

	@summary = "Default summary"
	macro viewStatistics(headerName = null, userName = null) {
		MouseOver(
			key_userName = ${userName},
			locator1 = "Questions#QUESTIONS_STATISTICS_USER_NAME");

		AssertElementPresent(
			key_headerName = ${headerName},
			locator1 = "Questions#QUESTIONS_STATISTICS_HEADER");

		for (var itemNameList : list ${itemNameList}) {
			AssertElementPresent(
				key_itemName = ${itemNameList},
				locator1 = "Questions#QUESTIONS_STATISTICS_ITEM");
		}
	}

	@summary = "Default summary"
	macro viewStatus(status = null) {
		if (${status} == "pending") {
			AssertVisible(
				key_status = "pending",
				locator1 = "Questions#WORKFLOW_STATUS");

			Questions.viewNoAnswerField();
		}
		else {
			AssertElementNotPresent(
				key_status = "pending",
				locator1 = "Questions#WORKFLOW_STATUS");
		}
	}

	@summary = "Default summary"
	macro viewSubscribedQuestion(subscribedQuestion = null) {
		if (isSet(subscribedQuestion)) {
			AssertTextEquals(
				key_questionTitle = ${subscribedQuestion},
				locator1 = "Questions#QUESTIONS_TITLE",
				value1 = ${subscribedQuestion});
		}
		else if (isSet(noSubscribedQuestion)) {
			AssertTextEquals(
				locator1 = "Questions#QUESTIONS_DEFAULT_SUBSCRIPTION_QUESTIONS",
				value1 = "There are no results.");
		}
	}

	@summary = "Default summary"
	macro viewSubscribedTag(subscribedTag = null) {
		if (isSet(subscribedTag)) {
			AssertElementPresent(
				key_subscribedTag = ${subscribedTag},
				locator1 = "Questions#SUBSCRIBED_TAG");
		}
		else if (isSet(noSubscribedTag)) {
			AssertTextEquals(
				locator1 = "Questions#QUESTIONS_DEFAULT_SUBSCRIPTION_TOPICS",
				value1 = "There are no results.");
		}
	}

	@summary = "Default summary"
	macro viewSubscribedTopic(subscribedTopic = null) {
		if (isSet(subscribedTopic)) {
			AssertTextEquals(
				key_subscribedTopic = ${subscribedTopic},
				locator1 = "Questions#QUESTIONS_SUBSCRIBED_TOPIC",
				value1 = ${subscribedTopic});
		}
		else if (isSet(noSubscribedTopic)) {
			AssertTextEquals(
				locator1 = "Questions#QUESTIONS_DEFAULT_SUBSCRIPTION_TOPICS",
				value1 = "There are no results.");
		}
	}

	@summary = "Default summary"
	macro viewSubscriptionStatusFromDetails() {
		if (isSet(subscribedQuestion)) {
			AssertElementPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
		}

		if (isSet(unsubscribedQuestion)) {
			AssertElementPresent(locator1 = "Questions#QUESTIONS_SUBSCRIBE");
		}
	}

	@summary = "Default summary"
	macro viewTags(tagName = null, amountOfUsedTimes = null) {
		AssertElementPresent(
			key_tagName = ${tagName},
			locator1 = "Questions#TAGS_LIST_TAB_NAMES");

		if (isSet(amountOfUsedTimes)) {
			AssertElementPresent(
				key_amountOfUsedTimes = ${amountOfUsedTimes},
				key_tagName = ${tagName},
				locator1 = "Questions#TAGS_LIST_TAB_USED_TIMES");
		}
	}

	@summary = "Default summary"
	macro viewTagsFilterResults(usedTimes = null, position = null, tagName = null) {
		AssertTextEquals.assertPartialText(
			key_position = ${position},
			locator1 = "Questions#TAGS_POSITION",
			value1 = ${tagName});

		if (isSet(usedTimes)) {
			AssertTextEquals.assertPartialText(
				key_position = ${position},
				locator1 = "Questions#TAGS_POSITION",
				value1 = ${usedTimes});
		}
		else {
			AssertTextEquals.assertPartialText(
				key_position = ${position},
				locator1 = "Questions#TAGS_POSITION",
				value1 = "Created");
		}
	}

	@summary = "Default summary"
	macro viewTopicDefault() {
		AssertElementPresent(
			key_emptyInfo = "This topic is empty.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE");
	}

	@summary = "Default summary"
	macro viewTopicOnHomePage(topicNameList = null) {
		if (IsElementNotPresent(key_card = "New Topic", locator1 = "Card#CARD")) {
			Click(locator1 = "Questions#QUESTIONS_HOME_ICON");
		}

		for (var topicName : list ${topicNameList}) {
			AssertTextEquals(
				key_card = ${topicName},
				locator1 = "Card#CARD_TITLE",
				value1 = ${topicName});
		}

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_HOME_ICON");
	}

	@summary = "Default summary"
	macro viewUnlockedQuestion(questionTitle = null) {
		AssertElementNotPresent(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_LOCKED_ICON");

		for (var caretName : list "caret-top,caret-bottom") {
			AssertVisible(
				key_caretName = ${caretName},
				locator1 = "Questions#VOTE_BUTTON");
		}

		Click.waitForMenuToggleJSClick(
			key_questionTitle = ${questionTitle},
			locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

		AssertElementPresent(locator1 = "Icon#DELETE");

		AssertElementPresent(locator1 = "Button#EDIT");

		for (var text : list "Add Comment,Delete,Mark as Answer") {
			AssertVisible(
				key_text = ${text},
				locator1 = "Button#ANY");
		}
	}

	@summary = "Default summary"
	macro viewVotedResult(questionTitle = null, votedCount = null, votedCaret = null) {
		if (isSet(answersList)) {
			AssertTextEquals(
				key_votedResult = ${votedCount},
				locator1 = "Questions#VOTED_RESULT_ANSWER",
				value1 = ${votedCount});
		}
		else if (isSet(questionTitle)) {
			AssertTextEquals(
				key_questionTitle = ${questionTitle},
				locator1 = "Questions#QUESTIONS_VOTED_COUNT",
				value1 = ${votedCount});
		}
		else {
			AssertTextEquals(
				key_count = ${votedCount},
				key_text = ${votedCaret},
				locator1 = "Questions#QUESTIONS_LIST_VOTED_COUNT",
				value1 = ${votedCount});
		}
	}

	@summary = "Default summary"
	macro voteAnswer(currentVotedCount = null) {
		AssertTextEquals(
			key_votedResult = ${currentVotedCount},
			locator1 = "Questions#VOTED_RESULT_ANSWER",
			value1 = ${currentVotedCount});

		if (isSet(voteUp)) {
			Click(
				key_caretName = "caret-top",
				locator1 = "Questions#VOTE_BUTTON_2");

			var newVotedCount = ${currentVotedCount} + 1;

			AssertTextEquals(
				key_votedResult = ${newVotedCount},
				locator1 = "Questions#VOTED_RESULT_ANSWER",
				value1 = ${newVotedCount});
		}

		if (isSet(voteDown)) {
			Click(
				key_caretName = "caret-bottom",
				locator1 = "Questions#VOTE_BUTTON_2");

			var newVotedCount = ${currentVotedCount} - 1;

			AssertTextEquals(
				key_votedResult = ${newVotedCount},
				locator1 = "Questions#VOTED_RESULT_ANSWER",
				value1 = ${newVotedCount});
		}
	}

	@summary = "Default summary"
	macro voteQuestion(currentVotedCount = null) {
		AssertTextEquals(
			key_votedResult = ${currentVotedCount},
			locator1 = "Questions#VOTED_RESULT",
			value1 = ${currentVotedCount});

		if (isSet(voteUp)) {
			Click(
				key_caretName = "caret-top",
				locator1 = "Questions#VOTE_BUTTON");

			var newVotedCount = ${currentVotedCount} + 1;

			AssertTextEquals(
				key_votedResult = ${newVotedCount},
				locator1 = "Questions#VOTED_RESULT",
				value1 = ${newVotedCount});
		}

		if (isSet(voteDown)) {
			Click(
				key_caretName = "caret-bottom",
				locator1 = "Questions#VOTE_BUTTON");

			var newVotedCount = ${currentVotedCount} - 1;

			AssertTextEquals(
				key_votedResult = ${newVotedCount},
				locator1 = "Questions#VOTED_RESULT",
				value1 = ${newVotedCount});
		}
	}

}