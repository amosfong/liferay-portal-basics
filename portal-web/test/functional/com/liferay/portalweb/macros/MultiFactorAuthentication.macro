definition {

	@summary = "Default summary"
	macro assertDescriptions() {
		AssertTextEquals(
			key_fieldName = "enabled",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_TEXT",
			value1 = "Enabling multi-factor authentication implies enabling Email One-Time Password. It is strongly advised that other forms of user authentication that only support a single factor are disabled (e.g. Basic, Digest, WEBDAV).");

		AssertTextEquals(
			key_fieldName = "otpSize",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_TEXT",
			value1 = "Set the length of a one-time password.");

		AssertTextEquals(
			key_fieldName = "resendEmailTimeout",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_TEXT",
			value1 = "Set the allowed time in seconds between one-time password requests.");

		AssertTextEquals(
			key_fieldName = "emailFromAddress",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_TEXT",
			value1 = "Set the sender address on the one-time password email.");

		AssertTextEquals(
			key_fieldName = "failedAttemptsAllowed",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_TEXT",
			value1 = "Set the number of verification attempts allowed before blocking for the retry timeout.");

		AssertTextEquals(
			key_fieldName = "retryTimeout",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_TEXT",
			value1 = "Set the time in seconds to block requests after reaching the limit for failed attempts allowed.");
	}

	@summary = "Default summary"
	macro canAdminDisableBasicAuthentication() {
		var curl = '''
			http://www.able.com:8080/api/jsonws/user/get-current-user
		''';

		var reponse = JSONCurlUtil.get(${curl});

		if (contains(${reponse}, "Access denied to com.liferay.portal.kernel.service.UserService#getCurrentUser")) {
			echo("Instance admin is able to disable Basic Authentication.");
		}
		else {
			fail("Instance admin is unable to disable Basic Authentication..");
		}
	}

	@summary = "Default summary"
	macro checkTOTPUI() {
		AssertClick(
			locator1 = "MultiFactorAuthentication#MFA_CHECKER_LINK",
			value1 = "Use Email One-Time Password");

		AssertTextEquals(
			locator1 = "MultiFactorAuthentication#MFA_CHECKER_LINK",
			value1 = "Use Time-Based One-Time Password");
	}

	@summary = "Default summary"
	macro configureIPAddress(enableIp = null, allowedIp = null) {
		if (${enableIp} == "true") {
			FormFields.enableCheckbox(fieldName = "enabled");

			if (isSet(allowedIp)) {
				Type(
					locator1 = "MultiFactorAuthentication#IP_ADDRESS_CONFIGURATION_ALLOWED_IP_FIELD_1",
					value1 = ${allowedIp});
			}
		}
		else if (${enableIp} == "false") {
			FormFields.disableCheckbox(fieldName = "enabled");
		}

		MultiFactorAuthentication.saveConfiguration();
	}

	@summary = "Default summary"
	macro configureMFAOnSystemLevel(disabledMfa = null) {
		if (${disabledMfa} == "true") {
			MultiFactorAuthentication.openToConfigInSystemSettings();

			FormFields.enableCheckbox(fieldName = "Disable Multi-Factor Authentication");
		}
		else if (${disabledMfa} == "false") {
			MultiFactorAuthentication.openToConfigInSystemSettings();

			FormFields.disableCheckbox(fieldName = "Disable Multi-Factor Authentication");
		}

		MultiFactorAuthentication.saveConfiguration();
	}

	@summary = "Default summary"
	macro configureOTP(enableOtp = null, order = null) {
		if (${enableOtp} == "true") {
			FormFields.enableCheckbox(fieldName = "enabled");
		}
		else if (${enableOtp} == "false") {
			FormFields.disableCheckbox(fieldName = "enabled");
		}

		if (isSet(order)) {
			Type(
				key_fieldName = "order",
				locator1 = "MultiFactorAuthentication#ORDER_FIELD",
				value1 = ${order});
		}

		MultiFactorAuthentication.saveConfiguration();
	}

	@summary = "Default summary"
	macro configureOTPEmailSender(emailAddress = null, emailSenderName = null) {
		Type(
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_SENDER_ADDRESS_FIELD",
			value1 = ${emailAddress});

		Type(
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_SENDER_NAME_FIELD",
			value1 = ${emailSenderName});

		MultiFactorAuthentication.saveConfiguration();
	}

	@summary = "Default summary"
	macro configureTOTP(enableTotp = null) {
		if (${enableTotp} == "true") {
			FormFields.enableCheckbox(fieldName = "enabled");
		}
		else if (${enableTotp} == "false") {
			FormFields.disableCheckbox(fieldName = "enabled");
		}

		Type(
			locator1 = "MultiFactorAuthentication#TOTP_CLOCK_SKEW",
			value1 = 10000);

		MultiFactorAuthentication.saveConfiguration();
	}

	@summary = "Default summary"
	macro deployInstanceConfigFile(osgiConfigFileName = null) {
		var companyId = JSONCompany.getCompanyId();

		AntCommands.runCommand("build-test-multi-factor-authentication.xml", "prepare-multi-factor-authentication-osgi-configuration -DcompanyId=${companyId} -Dosgi.config.file.name=${osgiConfigFileName}");
	}

	@summary = "Default summary"
	macro emailOTPConfiguration() {
		var failedAttemptsAllowed = ${failedAttemptsAllowed};

		if (isSet(failedAttemptsAllowed)) {
			Type(
				key_fieldName = "failedAttemptsAllowed",
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_FIELD",
				value1 = ${failedAttemptsAllowed});
		}

		var retryTimeout = ${retryTimeout};

		if (isSet(retryTimeout)) {
			Type(
				key_fieldName = "retryTimeout",
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_FIELD",
				value1 = ${retryTimeout});
		}

		var emailOtpSentSubject = ${emailOtpSentSubject};

		if (isSet(emailOtpSentSubject)) {
			Type(
				key_fieldName = "emailOTPSentSubject",
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_TEMPLATE_FIELD",
				value1 = ${emailOtpSentSubject});
		}

		var emailOtpSentBody = ${emailOtpSentBody};

		if (isSet(emailOtpSentBody)) {
			Type(
				key_fieldName = "emailOTPSentBody",
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_TEMPLATE_FIELD",
				value1 = ${emailOtpSentBody});
		}

		MultiFactorAuthentication.saveConfiguration();
	}

	@summary = "Default summary"
	macro getTOTP(secretKeyUnchanged = null) {
		if (isSet(secretKeyUnchanged)) {
			var totp = AuthenticationUtil.generateTimeBasedOTP(${secretKeyUnchanged});

			Type(
				locator1 = "MultiFactorAuthentication#TOTP_VERIFY_FIELD",
				value1 = ${totp});

			Button.click(button = "Submit");

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}
		else {
			VerifyElementPresent(locator1 = "MultiFactorAuthentication#TOTP_FIELD");

			var secretKey = selenium.getAttribute("//input[contains(@id,'sharedSecret')]@value");

			echo("secretKey is: ${secretKey}");

			var totp = AuthenticationUtil.generateTimeBasedOTP(${secretKey});

			Type(
				locator1 = "MultiFactorAuthentication#TOTP_FIELD",
				value1 = ${totp});

			takeScreenshot();

			Click(locator1 = "MultiFactorAuthentication#TOTP_SUBMIT_BUTTON");

			AssertElementPresent(
				key_text = "Remove Configured Time-Based One-Time Password",
				locator1 = "Button#ANY",
				value1 = "Remove Configured Time-Based One-Time Password");
		}
	}

	@summary = "Default summary"
	macro openToConfigInInstanceSettings() {
		if (!(isSet(baseURL))) {
			var baseURL = JSONCompany.getPortalURL();
		}

		if (!(isSet(portlet))) {
			var portlet = "Email OTP";
		}

		if (${portlet} == "Email OTP") {
			var portletId = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration";
		}

		if (${portlet} == "FIDO2") {
			var portletId = "com.liferay.multi.factor.authentication.fido2.web.internal.configuration.MFAFIDO2Configuration";
		}

		if (${portlet} == "IP Address") {
			var portletId = "com.liferay.multi.factor.authentication.ip.address.internal.configuration.MFAIPAddressConfiguration";
		}

		if (${portlet} == "Time-Based OTP") {
			var portletId = "com.liferay.multi.factor.authentication.timebased.otp.web.internal.configuration.MFATimeBasedOTPConfiguration";
		}

		Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet&_com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet_factoryPid=${portletId}&_com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	@summary = "Default summary"
	macro openToConfigInSystemSettings() {
		var baseURL = JSONCompany.getPortalURL();

		Open(value1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=com.liferay.multi.factor.authentication.web.internal.system.configuration.MFASystemConfiguration&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	@summary = "Default summary"
	macro saveConfiguration() {
		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
	}

	@summary = "Default summary"
	macro sendOTPEmailPG() {
		AssertElementPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_INFO_MESSAGE");

		AssertClick(
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_SEND_EMAIL_BUTTON",
			value1 = "Send");

		AssertTextEquals(
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_SUCCESS_MESSAGE",
			value1 = "Your one-time password has been sent by email.");
	}

	@summary = "Default summary"
	macro setServiceRankingValue(orderValue = null) {
		Type(
			key_fieldName = "serviceRanking",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_FIELD",
			value1 = ${orderValue});

		MultiFactorAuthentication.saveConfiguration();
	}

	@summary = "Default summary"
	macro tryWrongTOTP(wrongValue = null) {
		Type(
			locator1 = "MultiFactorAuthentication#TOTP_VERIFY_FIELD",
			value1 = ${wrongValue});

		Button.click(button = "Submit");

		AssertElementPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_FAILED_MESSAGE");
	}

	@summary = "Default summary"
	macro verifyCustomOTP(userPassword = null, verificationText = null, specificURL = null, userEmailAddress = null) {
		if (isSet(specificURL)) {
			Navigator.openSpecificURL(url = ${specificURL});
		}
		else {
			Navigator.openURL();
		}

		User.firstLoginUI(
			password = ${userPassword},
			userEmailAddress = ${userEmailAddress});

		AssertElementPresent(locator1 = "MultiFactorAuthentication#CUSTOM_MFA_TITLE");

		AssertElementPresent(locator1 = "MultiFactorAuthentication#CUSTOM_MFA_DESCRIPTION");

		AssertElementPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_LINK");

		Type(
			locator1 = "MultiFactorAuthentication#CUSTOM_MFA_VERIFY_FIELD",
			value1 = ${verificationText});

		Button.click(button = "Submit");

		AssertElementNotPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_FIELD");

		AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
	}

	@summary = "Default summary"
	macro verifyOTP(userPassword = null, validOtp = null, portalURL = null, recipient = null, specificURL = null, userEmailAddress = null) {
		if (${validOtp} == "false") {
			Type(
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_FIELD",
				value1 = "InvalidOTP");

			Button.click(button = "Submit");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "Multi-factor authentication has failed.");

			AssertElementNotPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}
		else {
			var bodySpecificText = MockMock.getBodySpecificText(
				asset = "${portalURL}: Your One-Time Password",
				content = "Your one-time password is:",
				enableOtp = "true",
				recipient = ${recipient},
				sender = "Joe Bloggs",
				specificText = "Your one-time password is: <pre>",
				subject = "${portalURL}: Your One-Time Password");

			if (isSet(specificURL)) {
				User.firstLoginUI(
					password = ${userPassword},
					specificURL = ${specificURL},
					userEmailAddress = ${userEmailAddress});
			}
			else {
				User.firstLoginUI(
					password = ${userPassword},
					userEmailAddress = ${userEmailAddress});
			}

			Type(
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_FIELD",
				value1 = ${bodySpecificText});

			Button.click(button = "Submit");

			OpenIDConnect.acceptConditions();

			AssertElementNotPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_FIELD");

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}
	}

	@summary = "Default summary"
	macro viewConfigurationPresent(configurationNameList = null, configurationScope = null) {
		for (var configurationName : list ${configurationNameList}) {
			AssertElementPresent(
				key_configurationName = ${configurationName},
				key_configurationScope = ${configurationScope},
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@summary = "Default summary"
	macro viewEmailOTPVerifyField() {
		AssertElementPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_FIELD");
	}

	@summary = "Default summary"
	macro viewMFAOrderValue(orderValue = null) {
		AssertTextEquals(
			locator1 = "MultiFactorAuthentication#ORDER_FIELD",
			value1 = ${orderValue});
	}

	@summary = "Default summary"
	macro viewNoTOTPField() {
		AssertElementNotPresent(locator1 = "MultiFactorAuthentication#TOTP_FIELD");
	}

	@summary = "Default summary"
	macro viewOTPEmailSenderCP(emailAddress = null, emailSenderName = null) {
		AssertTextEquals(
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_SENDER_ADDRESS_FIELD",
			value1 = ${emailAddress});

		AssertTextEquals(
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_SENDER_NAME_FIELD",
			value1 = ${emailSenderName});
	}

	@summary = "Default summary"
	macro viewOTPOrderFieldAvailable() {
		AssertElementPresent(
			key_fieldName = "serviceRanking",
			locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_FIELD");
	}

	@summary = "Default summary"
	macro viewOTPSendEmailButtonPresent() {
		AssertElementPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_SEND_EMAIL_BUTTON");
	}

	@summary = "Default summary"
	macro viewOTPSentElements(elementList = null) {
		for (var element : list ${elementList}) {
			AssertElementPresent(
				key_fieldName = ${element},
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_TEMPLATE_FIELD");
		}
	}

	@summary = "Default summary"
	macro viewTOTPField() {
		AssertElementPresent(locator1 = "MultiFactorAuthentication#TOTP_FIELD");
	}

	@summary = "Default summary"
	macro viewTOTPFieldPresentOnMFA() {
		AssertElementPresent(locator1 = "MultiFactorAuthentication#TOTP_SHARED_SECRET_FIELD");
	}

	@summary = "Default summary"
	macro viewWarningMessage() {
		AssertTextEquals(
			locator1 = "MultiFactorAuthentication#TOTP_REMOVE_DESCRIPTION",
			value1 = "You can only have one time-based one-time password configured for your account. Remove your existing time-based one-time password to generate a new time-based one-time password.");
	}

}