definition {

	@summary = "Assert a a live session in row ${count}"
	macro _viewLiveSession(navItem = null, count = null) {
		var key_navItem = ${navItem};
		var key_index = ${count};

		AssertElementPresent(locator1 = "LexiconTable#TABLE_SESSION_ID");
	}

	@summary = "Assert there are no live sessions"
	macro _viewNoLiveSession(count = null) {
		var key_index = ${count};

		AssertElementNotPresent(locator1 = "LexiconTable#TABLE_SESSION_ID");
	}

	@summary = "Deploy a clustering module into Liferay Portal server at port ${nodePort}"
	macro deployClusteringModule(deployDir = null, nodePort = null) {
		if (isSet(deployDir)) {
			var liferayHome = ${deployDir};
		}
		else {
			var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

			var bundleIndex = ${leadingPortNumber} - 8;
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			if (${bundleIndex} != 0) {
				var liferayHome = "${liferayHome}-${bundleIndex}";
			}
		}

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=modules/apps/portal/portal-cluster-multiple-sample-web");
	}

	@summary = "Enable clustering debugging in the log of port ${nodePort}"
	macro enableDebugging(nodePort = null, categoryName = null) {
		Navigator.openSpecificURL(url = "http://localhost:${nodePort}");

		if (IsElementPresent(locator1 = "UserBar#USER_SIGN_IN")) {
			User.firstLoginUI(
				password = PropsUtil.get("default.admin.password"),
				specificURL = "http://localhost:${nodePort}",
				userEmailAddress = "test@liferay.com");
		}

		ServerAdministration.openServerAdmin(baseURL = "http://localhost:${nodePort}");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = ${categoryName});
	}

	@summary = "Get the cluster node control address from the log of node ${nodePort}"
	macro getClusterNodeControlAddress(nodePort = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		var bundleIndex = ${leadingPortNumber} - 8;
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/cluster${bundleIndex}.log");

		var controlAddress = StringUtil.extractLast(${fileContent}, "liferay-channel-control, localAddress:");

		var controlAddress = StringUtil.extractFirst(${controlAddress}, "properties");

		var controlAddress = StringUtil.replace(${controlAddress}, ",", "");

		var controlAddress = StringUtil.trim(${controlAddress});

		return ${controlAddress};

		echo("control Address of ${nodePort} is ${controlAddress}");
	}

	@summary = "Get the cluster node outgoing ip address from the log of node ${nodePort}"
	macro getClusterNodeOutgoingIPAddress(nodePort = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		var bundleIndex = ${leadingPortNumber} - 8;

		AntCommands.runCommand("build-test.xml", "copy-cluster-log -Dapp.server.bundle.index=${bundleIndex}");

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/cluster${bundleIndex}.log");

		var ipAddress = StringUtil.extractLast(${fileContent}, "Setting JGroups outgoing IP address to");

		var ipAddress = StringUtil.extractFirst(${ipAddress}, "and interface to");

		var ipAddress = StringUtil.trim(${ipAddress});

		return ${ipAddress};

		echo("outgoing IP Address of ${nodePort} is ${ipAddress}");
	}

	@summary = "Get the cluster node transport address from the log of node ${nodePort}"
	macro getClusterNodeTransportAddress(nodePort = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		var bundleIndex = ${leadingPortNumber} - 8;
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/cluster${bundleIndex}.log");

		var transportAddress = StringUtil.extractLast(${fileContent}, "liferay-channel-transport-0, localAddress:");

		var transportAddress = StringUtil.extractFirst(${transportAddress}, "properties");

		var transportAddress = StringUtil.replace(${transportAddress}, ",", "");

		var transportAddress = StringUtil.trim(${transportAddress});

		return ${transportAddress};

		echo("transport Address of ${nodePort} is ${transportAddress}");
	}

	@summary = "Get the log content for a specific clustered server bundle"
	macro getLogFileSpecificServer(nodePort = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		if (${leadingPortNumber} != 0) {
			var bundleIndex = ${leadingPortNumber} - 8;
		}
		else {
			var bundleIndex = ${leadingPortNumber};
		}

		AntCommands.runCommand("build-test.xml", "copy-cluster-log -Dapp.server.bundle.index=${bundleIndex}");

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/cluster${bundleIndex}.log");

		return ${fileContent};
	}

	@summary = "Get the log content for session replication on a specific clustered server bundle"
	macro getLogFileSpecificServerSessionReplication(nodePort = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		if (${leadingPortNumber} != 0) {
			var bundleIndex = ${leadingPortNumber} - 8;
		}
		else {
			var bundleIndex = ${leadingPortNumber};
		}

		AntCommands.runCommand("build-test.xml", "cluster-session-replication-log -Dapp.server.bundle.index=${bundleIndex}");

		Pause(value1 = 10000);

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/cluster${bundleIndex}.log");

		return ${fileContent};

		echo("${liferayHome}/cluster${bundleIndex}.log");

		echo(${fileContent});
	}

	@summary = "Shutdown the server at a specific bundle at ${base_branch}-bundles-${bundle_index}\tomcat"
	macro shutdownSpecificServer(nodePort = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		var bundleIndex = ${leadingPortNumber} - 8;

		AntCommands.runCommand("build-test.xml", "stop-app-server -Dapp.server.bundle.index=${bundleIndex}");
	}

	@summary = "Start the server at a specific bundle at ${base_branch}-bundles-${bundle_index}\tomcat"
	macro startSpecificServer(deleteLiferayHome = null, nodePort = null, keepCachedAppServerData = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		var bundleIndex = ${leadingPortNumber} - 8;

		if (${deleteLiferayHome} == "false") {
			AntCommands.runCommand("build-test.xml", "start-app-server -Dapp.server.bundle.index=${bundleIndex} -Ddelete.liferay.home=false");
		}
		else if (${keepCachedAppServerData} == "true") {
			AntCommands.runCommand("build-test.xml", "start-app-server -Dapp.server.bundle.index=${bundleIndex} -Dkeep.cached.app.server.data=true");
		}
		else {
			AntCommands.runCommand("build-test.xml", "start-app-server -Dapp.server.bundle.index=${bundleIndex}");
		}
	}

	@summary = "Update portal properties on ${nodePort}"
	macro updatePortalPropertiesOnSpecificServer(propertiesOriginal = null, nodePort = null, propertiesUpdate = null) {
		var leadingPortNumber = StringUtil.replace(${nodePort}, 080, "");

		var bundleIndex = ${leadingPortNumber} - 8;

		AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dapp.server.bundle.index=${bundleIndex} -Dupdate.properties=${propertiesUpdate} -Dupdate.properties.original=${propertiesOriginal}");
	}

	@summary = "Assert the cluster status in console log"
	macro viewClusterStatusInConsole() {
		var nodeLog2 = Clustering.getLogFileSpecificServer(nodePort = 9080);

		for (var consoleText : list "Accepted view,channelName: liferay-channel-control") {
			AssertConsoleTextPresent(value1 = ${consoleText});

			if (!(contains(${nodeLog2}, ${consoleText}))) {
				fail("Second cluster node log does not contain expected text: ${consoleText}");
			}
		}
	}

	@summary = "Assert the count of live sessions"
	macro viewLiveSessionCount(count = null) {
		Clustering._viewLiveSession(
			count = ${count},
			navItem = "Live Sessions");

		var countNotPresent = 1 + ${count};

		Clustering._viewNoLiveSession(count = ${countNotPresent});
	}

	@summary = "Assert ${exceptionText} is no present in the log of node ${nodePort}"
	macro viewNoSessionReplicateLogErrorOnSpecificNode(exceptionText = null, nodePort = null) {
		if (${nodePort} == 8080) {
			AssertConsoleTextNotPresent(value1 = ${exceptionText});
		}
		else {
			var nodeLog = Clustering.getLogFileSpecificServerSessionReplication(nodePort = ${nodePort});

			if (contains(${nodeLog}, ${exceptionText})) {
				fail("Able to find exception: ${exceptionText} on cluser node at ${nodePort}");
			}
		}
	}

	@summary = "Assert ${exceptionText} is not present in the log of node ${nodePort}"
	macro viewTextNotPresentOnSpecificNode(exceptionText = null, nodePort = null) {
		if (${nodePort} == 8080) {
			AssertConsoleTextNotPresent(value1 = ${exceptionText});
		}
		else {
			var nodeLog = Clustering.getLogFileSpecificServer(nodePort = ${nodePort});

			if (contains(${nodeLog}, ${exceptionText})) {
				fail("Able to find exception: ${exceptionText} on cluser node at ${nodePort}");
			}
		}
	}

	@summary = "Assert ${expectedText} is present in the log of node ${nodePort}"
	macro viewTextPresentOnSpecificNode(expectedText = null, nodePort = null) {
		if (${nodePort} == 8080) {
			WaitForConsoleTextPresent(value1 = ${expectedText});
		}
		else {
			var iterator = 1;
			var nodeLog = Clustering.getLogFileSpecificServer(nodePort = ${nodePort});

			while ((!(contains(${nodeLog}, ${expectedText}))) && (maxIterations = "15")) {
				Pause.pauseNoSPARefresh(locator1 = 2000);

				var nodeLog = Clustering.getLogFileSpecificServer(nodePort = ${nodePort});

				if ((${iterator} == 15) && !(contains(${nodeLog}, ${expectedText}))) {
					fail("Failed to find expected text: ${expectedText} on cluser node at ${nodePort}");
				}

				var iterator = ${iterator} + 1;
			}
		}
	}

	@summary = "Wait for node ${nodePort} deactivation"
	macro waitForNodeDeactivation(nodePort = null) {
		var nodeLog = Clustering.getLogFileSpecificServer(nodePort = ${nodePort});

		var minutestoExpire = RegexUtil.replace(${nodeLog}, "temporarily permitted during the grace period which expires in (.*[0-9]) minutes", 1);

		var minutestoExpire = ${minutestoExpire} + 1;

		// Convert minutes to milliseconds for Pause function

		var mstoExpire = ${minutestoExpire} * 60000;

		Pause(value1 = "${mstoExpire} ");
	}

	@summary = "Wait 5 minutes for node at port ${nodePort} to shutdown"
	macro waitForNodeShutdown(nodePort = null) {
		AntCommands.runCommand("build-test.xml", "wait-for-server-shutdown -Dapp.server.port.number=${nodePort}");
	}

}