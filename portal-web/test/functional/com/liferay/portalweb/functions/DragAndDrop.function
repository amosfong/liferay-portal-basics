@default = "dragAndDropToObject"
definition {

	function dragAndDrop(locator1, value1) {
		WaitForSPARefresh();

		selenium.dragAndDrop(${locator1}, ${value1});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function dragAndDropObjectMoveTwice(locator1, position1, position2) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.mouseOver(${locator1});

		selenium.waitForVisible(${locator1}, "false");

		selenium.mouseDown(${locator1});

		selenium.mouseMoveAt(${locator1}, ${position1});

		selenium.pause(1000);

		selenium.mouseMoveAt(${locator1}, ${position2});

		selenium.pause(3000);

		selenium.mouseRelease();

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function dragAndDropPortletToObject(locator2, locator1, value1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.mouseOver(${locator1});

		selenium.waitForVisible(${locator1}, "false");

		var regex = RegexUtil.escapeRegexChars(${value1});

		selenium.waitForTextMatches(${locator1}, "(?iu)${regex}");

		selenium.waitForVisible(${locator1}, "false");

		ScrollWebElementIntoView.scrollWebElementIntoView(locator1 = ${locator2});

		selenium.mouseOver(${locator2});

		selenium.mouseDown(${locator1});

		selenium.mouseMoveAt(${locator2}, "0,80");

		selenium.mouseMoveAt(${locator2}, "0,-80");

		selenium.mouseMoveAt(${locator2}, "0,80");

		selenium.mouseMove(${locator2});

		selenium.pause(3000);

		selenium.mouseRelease();

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function dragAndDropPortletToPortlet(locator2, locator1, value1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.mouseOver(${locator1});

		selenium.waitForVisible(${locator1}, "false");

		var regex = RegexUtil.escapeRegexChars(${value1});

		selenium.waitForTextMatches(${locator1}, "(?iu)${regex}");

		selenium.waitForVisible(${locator1}, "false");

		ScrollWebElementIntoView.scrollWebElementIntoView(locator1 = ${locator2});

		selenium.mouseOver(${locator2});

		selenium.mouseDown(${locator1});

		selenium.mouseMove(${locator2});

		selenium.pause(3000);

		selenium.mouseRelease();

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function dragAndDropPortletToPortletNoError(locator2, locator1, value1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.mouseOver(${locator1});

		selenium.waitForVisible(${locator1}, "false");

		var regex = RegexUtil.escapeRegexChars(${value1});

		selenium.waitForTextMatches(${locator1}, "(?iu)${regex}");

		selenium.waitForVisible(${locator1}, "false");

		ScrollWebElementIntoView.scrollWebElementIntoView(locator1 = ${locator2});

		selenium.mouseOver(${locator2});

		selenium.mouseDown(${locator1});

		selenium.mouseMove(${locator2});

		selenium.pause(3000);

		selenium.mouseRelease();

		selenium.assertLiferayErrors();
	}

	function dragAndDropReorganizeObjects(locator2, locator1, position) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.mouseOver(${locator1});

		selenium.waitForVisible(${locator1}, "false");

		selenium.mouseDown(${locator1});

		selenium.pause(1000);

		selenium.mouseMove(${locator2});

		selenium.mouseMoveAt(${locator2}, ${position});

		selenium.pause(3000);

		selenium.mouseRelease();

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function dragAndDropToObject(locator2, locator1, value1) {
		WaitForSPARefresh();

		selenium.waitForVisible(${locator1}, "false");

		selenium.mouseOver(${locator1});

		var regex = RegexUtil.escapeRegexChars(${value1});

		selenium.waitForTextMatches(${locator1}, "(?iu).*${regex}.*");

		selenium.waitForVisible(${locator1}, "false");

		selenium.mouseOver(${locator2});

		selenium.dragAndDropToObject(${locator1}, ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function dragAndDropWithMouseMove(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.mouseOver(${locator1});

		selenium.waitForVisible(${locator1}, "false");

		selenium.mouseDown(${locator1});

		selenium.mouseMove(${locator2});

		selenium.mouseMoveAt(${locator2}, "0,0");

		selenium.mouseRelease();

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function dragAtAndDrop(locator2, locator1, value1) {
		WaitForSPARefresh();

		selenium.dragAtAndDrop(${locator1}, ${locator2}, ${value1});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropObjectAboveShortNestedObject(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		var javaScript = '''
Simulate = {
	dragAndDrop: async function(source, target) {
		const dataTransfer = new DataTransfer();

		const dispatchEvent = async(type, element) => {
			const rect = element.getBoundingClientRect();

			const event = new DragEvent(
				type,{
					bubbles: true,
					clientX: rect.left + (rect.width / 2),
					clientY: rect.top + (rect.height / (10 / 3)),
					dataTransfer: dataTransfer,
					relatedTarget: element
				});

			element.dispatchEvent(event);
		};

		await dispatchEvent('dragstart', source);

		await dispatchEvent('dragover', target);

		await dispatchEvent('drop', target);

		await dispatchEvent('dragend', source);
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropObjectAboveTallNestedObject(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		var javaScript = '''
Simulate = {
	dragAndDrop: async function(source, target) {
		const dataTransfer = new DataTransfer();

		const dispatchEvent = async(type, element) => {
			const rect = element.getBoundingClientRect();

			const event = new DragEvent(
				type,{
					bubbles: true,
					clientX: rect.left + (rect.width / 2),
					clientY: rect.top + (rect.height / 5),
					dataTransfer: dataTransfer,
					relatedTarget: element
				});

			element.dispatchEvent(event);
		};

		await dispatchEvent('dragstart', source);

		await dispatchEvent('dragover', target);

		await dispatchEvent('drop', target);

		await dispatchEvent('dragend', source);
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropObjectBelowShortNestedObject(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		var javaScript = '''
Simulate = {
	dragAndDrop: async function(source, target) {
		const dataTransfer = new DataTransfer();

		const dispatchEvent = async(type, element) => {
			const rect = element.getBoundingClientRect();

			const event = new DragEvent(
				type,{
					bubbles: true,
					clientX: rect.left + (rect.width / 2),
					clientY: rect.top + (rect.height / (10 / 7)),
					dataTransfer: dataTransfer,
					relatedTarget: element
				});

			element.dispatchEvent(event);
		};

		await dispatchEvent('dragstart', source);

		await dispatchEvent('dragover', target);

		await dispatchEvent('drop', target);

		await dispatchEvent('dragend', source);
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropObjectBelowTallNestedObject(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		if (contains(${ratio}, "ratio")) {
			var ratio = "5 / 4";
		}

		var javaScript = '''
Simulate = {
	dragAndDrop: async function(source, target, ratio) {
		const dataTransfer = new DataTransfer();

		const dispatchEvent = async(type, element) => {
			const rect = element.getBoundingClientRect();

			const event = new DragEvent(
				type,{
					bubbles: true,
					clientX: rect.left + (rect.width / 2),
					clientY: rect.top + (rect.height / (ratio)),
					dataTransfer: dataTransfer,
					relatedTarget: element
				});

			element.dispatchEvent(event);
		};

		await dispatchEvent('dragstart', source);

		await dispatchEvent('dragover', target);

		await dispatchEvent('drop', target);

		await dispatchEvent('dragend', source);
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1], ${ratio});
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropToBottom(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		var javaScript = '''
Simulate = {
	dragAndDrop: function (source, target) {
		const dispatchEvent = function (type, element) {
			const rect = element.getBoundingClientRect();
			const event = document.createEvent('customEvent');
			event.initEvent(type, true, true);
			event.relatedTarget = element;
			(event.clientX = rect.left + rect.width / 2),
				(event.clientY = rect.top + rect.height),
				element.dispatchEvent(event);
			return Promise.resolve();
		};
		dispatchEvent('dragstart', source)
			.then(function () {
				dispatchEvent('dragover', target);
			})
			.then(function () {
				dispatchEvent('drop', target);
			})
			.then(function () {
				dispatchEvent('dragend', source);
			});
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropToObject(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		var javaScript = '''
Simulate = {
	dragAndDrop: function (source, target) {
		const dispatchEvent = function (type, element) {
			const rect = element.getBoundingClientRect();
			const event = document.createEvent('customEvent');
			event.initEvent(type, true, true);
			event.relatedTarget = element;
			(event.clientX = rect.left + rect.width / 2),
				(event.clientY = rect.top + rect.height / 2),
				element.dispatchEvent(event);
			return Promise.resolve();
		};
		dispatchEvent('dragstart', source)
			.then(function () {
				dispatchEvent('dragover', target);
			})
			.then(function () {
				dispatchEvent('drop', target);
			})
			.then(function () {
				dispatchEvent('dragend', source);
			});
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropToUp(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		var javaScript = '''
Simulate = {
	dragAndDrop: async function(source, target) {
		const dataTransfer = new DataTransfer();

		const dispatchEvent = async(type, element) => {
			const rect = element.getBoundingClientRect();

			const event = new DragEvent(
				type,{
					bubbles: true,
					clientX: rect.left + (rect.width / 2),
					clientY: -rect.top + (rect.height / 2),
					dataTransfer: dataTransfer,
					relatedTarget: element
				});

			element.dispatchEvent(event);
		};

		await dispatchEvent('dragstart', source);

		await dispatchEvent('dragover', target);

		await dispatchEvent('drop', target);

		await dispatchEvent('dragend', source);
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

	function javaScriptDragAndDropUpperLeftCorner(locator2, locator1) {
		WaitForSPARefresh();

		selenium.waitForElementPresent(${locator1}, "false");

		selenium.waitForElementPresent(${locator1}, "false");

		var javaScript = '''
Simulate = {
	dragAndDrop: async function(source, target) {
		const dataTransfer = new DataTransfer();

		const dispatchEvent = async(type, element) => {
			const rect = element.getBoundingClientRect();

			const event = new DragEvent(
				type,{
					bubbles: true,
					clientX: rect.left,
					clientY: rect.top,
					dataTransfer: dataTransfer,
					relatedTarget: element
				});

			element.dispatchEvent(event);
		};

		await dispatchEvent('dragstart', source);

		await dispatchEvent('dragover', target);

		await dispatchEvent('dragover', target);

		await dispatchEvent('drop', target);

		await dispatchEvent('dragend', source);
	}
};

Simulate.dragAndDrop(arguments[0], arguments[1]);
		''';

		ExecuteJavaScript(
			value1 = ${javaScript},
			value2 = ${locator1},
			value3 = ${locator2});

		selenium.assertJavaScriptErrors("true");

		selenium.assertLiferayErrors();
	}

}